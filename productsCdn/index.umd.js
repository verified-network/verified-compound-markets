(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.VerifiedProducts = {}));
})(this, (function (exports) { 'use strict';

  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }

  // utils is a library of generic helper functions non-specific to axios

  const {toString} = Object.prototype;
  const {getPrototypeOf} = Object;
  const {iterator, toStringTag} = Symbol;

  const kindOf = (cache => thing => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(Object.create(null));

  const kindOfTest = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf(thing) === type
  };

  const typeOfTest = type => thing => typeof thing === type;

  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   *
   * @returns {boolean} True if value is an Array, otherwise false
   */
  const {isArray} = Array;

  /**
   * Determine if a value is undefined
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if the value is undefined, otherwise false
   */
  const isUndefined = typeOfTest('undefined');

  /**
   * Determine if a value is a Buffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Buffer, otherwise false
   */
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
      && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }

  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */
  const isArrayBuffer = kindOfTest('ArrayBuffer');


  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */
  function isArrayBufferView(val) {
    let result;
    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
      result = ArrayBuffer.isView(val);
    } else {
      result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
    }
    return result;
  }

  /**
   * Determine if a value is a String
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a String, otherwise false
   */
  const isString$1 = typeOfTest('string');

  /**
   * Determine if a value is a Function
   *
   * @param {*} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */
  const isFunction$1 = typeOfTest('function');

  /**
   * Determine if a value is a Number
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Number, otherwise false
   */
  const isNumber$1 = typeOfTest('number');

  /**
   * Determine if a value is an Object
   *
   * @param {*} thing The value to test
   *
   * @returns {boolean} True if value is an Object, otherwise false
   */
  const isObject$1 = (thing) => thing !== null && typeof thing === 'object';

  /**
   * Determine if a value is a Boolean
   *
   * @param {*} thing The value to test
   * @returns {boolean} True if value is a Boolean, otherwise false
   */
  const isBoolean$1 = thing => thing === true || thing === false;

  /**
   * Determine if a value is a plain Object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a plain Object, otherwise false
   */
  const isPlainObject = (val) => {
    if (kindOf(val) !== 'object') {
      return false;
    }

    const prototype = getPrototypeOf(val);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);
  };

  /**
   * Determine if a value is an empty object (safely handles Buffers)
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is an empty object, otherwise false
   */
  const isEmptyObject = (val) => {
    // Early return for non-objects or Buffers to prevent RangeError
    if (!isObject$1(val) || isBuffer(val)) {
      return false;
    }

    try {
      return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
    } catch (e) {
      // Fallback for any other objects that might cause RangeError with Object.keys()
      return false;
    }
  };

  /**
   * Determine if a value is a Date
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Date, otherwise false
   */
  const isDate = kindOfTest('Date');

  /**
   * Determine if a value is a File
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a File, otherwise false
   */
  const isFile = kindOfTest('File');

  /**
   * Determine if a value is a Blob
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Blob, otherwise false
   */
  const isBlob = kindOfTest('Blob');

  /**
   * Determine if a value is a FileList
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a File, otherwise false
   */
  const isFileList = kindOfTest('FileList');

  /**
   * Determine if a value is a Stream
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Stream, otherwise false
   */
  const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);

  /**
   * Determine if a value is a FormData
   *
   * @param {*} thing The value to test
   *
   * @returns {boolean} True if value is an FormData, otherwise false
   */
  const isFormData = (thing) => {
    let kind;
    return thing && (
      (typeof FormData === 'function' && thing instanceof FormData) || (
        isFunction$1(thing.append) && (
          (kind = kindOf(thing)) === 'formdata' ||
          // detect form-data instance
          (kind === 'object' && isFunction$1(thing.toString) && thing.toString() === '[object FormData]')
        )
      )
    )
  };

  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */
  const isURLSearchParams = kindOfTest('URLSearchParams');

  const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   *
   * @returns {String} The String freed of excess whitespace
   */
  const trim = (str) => str.trim ?
    str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   *
   * @param {Boolean} [allOwnKeys = false]
   * @returns {any}
   */
  function forEach(obj, fn, {allOwnKeys = false} = {}) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    let i;
    let l;

    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }

    if (isArray(obj)) {
      // Iterate over array values
      for (i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Buffer check
      if (isBuffer(obj)) {
        return;
      }

      // Iterate over object keys
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys.length;
      let key;

      for (i = 0; i < len; i++) {
        key = keys[i];
        fn.call(null, obj[key], key, obj);
      }
    }
  }

  function findKey(obj, key) {
    if (isBuffer(obj)){
      return null;
    }

    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while (i-- > 0) {
      _key = keys[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }

  const _global = (() => {
    /*eslint no-undef:0*/
    if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
  })();

  const isContextDefined = (context) => !isUndefined(context) && context !== _global;

  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   *
   * @returns {Object} Result of all merge properties
   */
  function merge$1(/* obj1, obj2, obj3, ... */) {
    const {caseless, skipUndefined} = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
        result[targetKey] = merge$1(result[targetKey], val);
      } else if (isPlainObject(val)) {
        result[targetKey] = merge$1({}, val);
      } else if (isArray(val)) {
        result[targetKey] = val.slice();
      } else if (!skipUndefined || !isUndefined(val)) {
        result[targetKey] = val;
      }
    };

    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach(arguments[i], assignValue);
    }
    return result;
  }

  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   *
   * @param {Boolean} [allOwnKeys]
   * @returns {Object} The resulting value of object a
   */
  const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
    forEach(b, (val, key) => {
      if (thisArg && isFunction$1(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, {allOwnKeys});
    return a;
  };

  /**
   * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
   *
   * @param {string} content with BOM
   *
   * @returns {string} content value without BOM
   */
  const stripBOM = (content) => {
    if (content.charCodeAt(0) === 0xFEFF) {
      content = content.slice(1);
    }
    return content;
  };

  /**
   * Inherit the prototype methods from one constructor into another
   * @param {function} constructor
   * @param {function} superConstructor
   * @param {object} [props]
   * @param {object} [descriptors]
   *
   * @returns {void}
   */
  const inherits = (constructor, superConstructor, props, descriptors) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, 'super', {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };

  /**
   * Resolve object with deep prototype chain to a flat object
   * @param {Object} sourceObj source object
   * @param {Object} [destObj]
   * @param {Function|Boolean} [filter]
   * @param {Function} [propFilter]
   *
   * @returns {Object}
   */
  const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
    let props;
    let i;
    let prop;
    const merged = {};

    destObj = destObj || {};
    // eslint-disable-next-line no-eq-null,eqeqeq
    if (sourceObj == null) return destObj;

    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i = props.length;
      while (i-- > 0) {
        prop = props[i];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

    return destObj;
  };

  /**
   * Determines whether a string ends with the characters of a specified string
   *
   * @param {String} str
   * @param {String} searchString
   * @param {Number} [position= 0]
   *
   * @returns {boolean}
   */
  const endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === undefined || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };


  /**
   * Returns new array from array like object or null if failed
   *
   * @param {*} [thing]
   *
   * @returns {?Array}
   */
  const toArray = (thing) => {
    if (!thing) return null;
    if (isArray(thing)) return thing;
    let i = thing.length;
    if (!isNumber$1(i)) return null;
    const arr = new Array(i);
    while (i-- > 0) {
      arr[i] = thing[i];
    }
    return arr;
  };

  /**
   * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
   * thing passed in is an instance of Uint8Array
   *
   * @param {TypedArray}
   *
   * @returns {Array}
   */
  // eslint-disable-next-line func-names
  const isTypedArray = (TypedArray => {
    // eslint-disable-next-line func-names
    return thing => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

  /**
   * For each entry in the object, call the function with the key and value.
   *
   * @param {Object<any, any>} obj - The object to iterate over.
   * @param {Function} fn - The function to call for each entry.
   *
   * @returns {void}
   */
  const forEachEntry = (obj, fn) => {
    const generator = obj && obj[iterator];

    const _iterator = generator.call(obj);

    let result;

    while ((result = _iterator.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  };

  /**
   * It takes a regular expression and a string, and returns an array of all the matches
   *
   * @param {string} regExp - The regular expression to match against.
   * @param {string} str - The string to search.
   *
   * @returns {Array<boolean>}
   */
  const matchAll = (regExp, str) => {
    let matches;
    const arr = [];

    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }

    return arr;
  };

  /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
  const isHTMLForm = kindOfTest('HTMLFormElement');

  const toCamelCase = str => {
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
      function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };

  /* Creating a function that will check if an object has a property. */
  const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

  /**
   * Determine if a value is a RegExp object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a RegExp object, otherwise false
   */
  const isRegExp = kindOfTest('RegExp');

  const reduceDescriptors = (obj, reducer) => {
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};

    forEach(descriptors, (descriptor, name) => {
      let ret;
      if ((ret = reducer(descriptor, name, obj)) !== false) {
        reducedDescriptors[name] = ret || descriptor;
      }
    });

    Object.defineProperties(obj, reducedDescriptors);
  };

  /**
   * Makes all methods read-only
   * @param {Object} obj
   */

  const freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
      // skip restricted props in strict mode
      if (isFunction$1(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
        return false;
      }

      const value = obj[name];

      if (!isFunction$1(value)) return;

      descriptor.enumerable = false;

      if ('writable' in descriptor) {
        descriptor.writable = false;
        return;
      }

      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error('Can not rewrite read-only method \'' + name + '\'');
        };
      }
    });
  };

  const toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};

    const define = (arr) => {
      arr.forEach(value => {
        obj[value] = true;
      });
    };

    isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

    return obj;
  };

  const noop = () => {};

  const toFiniteNumber = (value, defaultValue) => {
    return value != null && Number.isFinite(value = +value) ? value : defaultValue;
  };



  /**
   * If the thing is a FormData object, return true, otherwise return false.
   *
   * @param {unknown} thing - The thing to check.
   *
   * @returns {boolean}
   */
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction$1(thing.append) && thing[toStringTag] === 'FormData' && thing[iterator]);
  }

  const toJSONObject = (obj) => {
    const stack = new Array(10);

    const visit = (source, i) => {

      if (isObject$1(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }

        //Buffer check
        if (isBuffer(source)) {
          return source;
        }

        if(!('toJSON' in source)) {
          stack[i] = source;
          const target = isArray(source) ? [] : {};

          forEach(source, (value, key) => {
            const reducedValue = visit(value, i + 1);
            !isUndefined(reducedValue) && (target[key] = reducedValue);
          });

          stack[i] = undefined;

          return target;
        }
      }

      return source;
    };

    return visit(obj, 0);
  };

  const isAsyncFn = kindOfTest('AsyncFunction');

  const isThenable = (thing) =>
    thing && (isObject$1(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);

  // original code
  // https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

  const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
    if (setImmediateSupported) {
      return setImmediate;
    }

    return postMessageSupported ? ((token, callbacks) => {
      _global.addEventListener("message", ({source, data}) => {
        if (source === _global && data === token) {
          callbacks.length && callbacks.shift()();
        }
      }, false);

      return (cb) => {
        callbacks.push(cb);
        _global.postMessage(token, "*");
      }
    })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
  })(
    typeof setImmediate === 'function',
    isFunction$1(_global.postMessage)
  );

  const asap = typeof queueMicrotask !== 'undefined' ?
    queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);

  // *********************


  const isIterable$1 = (thing) => thing != null && isFunction$1(thing[iterator]);


  var utils$3 = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString: isString$1,
    isNumber: isNumber$1,
    isBoolean: isBoolean$1,
    isObject: isObject$1,
    isPlainObject,
    isEmptyObject,
    isReadableStream,
    isRequest,
    isResponse,
    isHeaders,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction: isFunction$1,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge: merge$1,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty,
    hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable,
    setImmediate: _setImmediate,
    asap,
    isIterable: isIterable$1
  };

  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [config] The config.
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   *
   * @returns {Error} The created error.
   */
  function AxiosError$1(message, code, config, request, response) {
    Error.call(this);

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = (new Error()).stack;
    }

    this.message = message;
    this.name = 'AxiosError';
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    if (response) {
      this.response = response;
      this.status = response.status ? response.status : null;
    }
  }

  utils$3.inherits(AxiosError$1, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils$3.toJSONObject(this.config),
        code: this.code,
        status: this.status
      };
    }
  });

  const prototype$1 = AxiosError$1.prototype;
  const descriptors = {};

  [
    'ERR_BAD_OPTION_VALUE',
    'ERR_BAD_OPTION',
    'ECONNABORTED',
    'ETIMEDOUT',
    'ERR_NETWORK',
    'ERR_FR_TOO_MANY_REDIRECTS',
    'ERR_DEPRECATED',
    'ERR_BAD_RESPONSE',
    'ERR_BAD_REQUEST',
    'ERR_CANCELED',
    'ERR_NOT_SUPPORT',
    'ERR_INVALID_URL'
  // eslint-disable-next-line func-names
  ].forEach(code => {
    descriptors[code] = {value: code};
  });

  Object.defineProperties(AxiosError$1, descriptors);
  Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

  // eslint-disable-next-line func-names
  AxiosError$1.from = (error, code, config, request, response, customProps) => {
    const axiosError = Object.create(prototype$1);

    utils$3.toFlatObject(error, axiosError, function filter(obj) {
      return obj !== Error.prototype;
    }, prop => {
      return prop !== 'isAxiosError';
    });

    const msg = error && error.message ? error.message : 'Error';

    // Prefer explicit code; otherwise copy the low-level error's code (e.g. ECONNREFUSED)
    const errCode = code == null && error ? error.code : code;
    AxiosError$1.call(axiosError, msg, errCode, config, request, response);

    // Chain the original error on the standard field; non-enumerable to avoid JSON noise
    if (error && axiosError.cause == null) {
      Object.defineProperty(axiosError, 'cause', { value: error, configurable: true });
    }

    axiosError.name = (error && error.name) || 'Error';

    customProps && Object.assign(axiosError, customProps);

    return axiosError;
  };

  // eslint-disable-next-line strict
  var httpAdapter = null;

  /**
   * Determines if the given thing is a array or js object.
   *
   * @param {string} thing - The object or array to be visited.
   *
   * @returns {boolean}
   */
  function isVisitable(thing) {
    return utils$3.isPlainObject(thing) || utils$3.isArray(thing);
  }

  /**
   * It removes the brackets from the end of a string
   *
   * @param {string} key - The key of the parameter.
   *
   * @returns {string} the key without the brackets.
   */
  function removeBrackets(key) {
    return utils$3.endsWith(key, '[]') ? key.slice(0, -2) : key;
  }

  /**
   * It takes a path, a key, and a boolean, and returns a string
   *
   * @param {string} path - The path to the current key.
   * @param {string} key - The key of the current object being iterated over.
   * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
   *
   * @returns {string} The path to the current key.
   */
  function renderKey(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token, i) {
      // eslint-disable-next-line no-param-reassign
      token = removeBrackets(token);
      return !dots && i ? '[' + token + ']' : token;
    }).join(dots ? '.' : '');
  }

  /**
   * If the array is an array and none of its elements are visitable, then it's a flat array.
   *
   * @param {Array<any>} arr - The array to check
   *
   * @returns {boolean}
   */
  function isFlatArray(arr) {
    return utils$3.isArray(arr) && !arr.some(isVisitable);
  }

  const predicates = utils$3.toFlatObject(utils$3, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
  });

  /**
   * Convert a data object to FormData
   *
   * @param {Object} obj
   * @param {?Object} [formData]
   * @param {?Object} [options]
   * @param {Function} [options.visitor]
   * @param {Boolean} [options.metaTokens = true]
   * @param {Boolean} [options.dots = false]
   * @param {?Boolean} [options.indexes = false]
   *
   * @returns {Object}
   **/

  /**
   * It converts an object into a FormData object
   *
   * @param {Object<any, any>} obj - The object to convert to form data.
   * @param {string} formData - The FormData object to append to.
   * @param {Object<string, any>} options
   *
   * @returns
   */
  function toFormData$1(obj, formData, options) {
    if (!utils$3.isObject(obj)) {
      throw new TypeError('target must be an object');
    }

    // eslint-disable-next-line no-param-reassign
    formData = formData || new (FormData)();

    // eslint-disable-next-line no-param-reassign
    options = utils$3.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      return !utils$3.isUndefined(source[option]);
    });

    const metaTokens = options.metaTokens;
    // eslint-disable-next-line no-use-before-define
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
    const useBlob = _Blob && utils$3.isSpecCompliantForm(formData);

    if (!utils$3.isFunction(visitor)) {
      throw new TypeError('visitor must be a function');
    }

    function convertValue(value) {
      if (value === null) return '';

      if (utils$3.isDate(value)) {
        return value.toISOString();
      }

      if (utils$3.isBoolean(value)) {
        return value.toString();
      }

      if (!useBlob && utils$3.isBlob(value)) {
        throw new AxiosError$1('Blob is not supported. Use a Buffer instead.');
      }

      if (utils$3.isArrayBuffer(value) || utils$3.isTypedArray(value)) {
        return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
      }

      return value;
    }

    /**
     * Default visitor.
     *
     * @param {*} value
     * @param {String|Number} key
     * @param {Array<String|Number>} path
     * @this {FormData}
     *
     * @returns {boolean} return true to visit the each prop of the value recursively
     */
    function defaultVisitor(value, key, path) {
      let arr = value;

      if (value && !path && typeof value === 'object') {
        if (utils$3.endsWith(key, '{}')) {
          // eslint-disable-next-line no-param-reassign
          key = metaTokens ? key : key.slice(0, -2);
          // eslint-disable-next-line no-param-reassign
          value = JSON.stringify(value);
        } else if (
          (utils$3.isArray(value) && isFlatArray(value)) ||
          ((utils$3.isFileList(value) || utils$3.endsWith(key, '[]')) && (arr = utils$3.toArray(value))
          )) {
          // eslint-disable-next-line no-param-reassign
          key = removeBrackets(key);

          arr.forEach(function each(el, index) {
            !(utils$3.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
              convertValue(el)
            );
          });
          return false;
        }
      }

      if (isVisitable(value)) {
        return true;
      }

      formData.append(renderKey(path, key, dots), convertValue(value));

      return false;
    }

    const stack = [];

    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });

    function build(value, path) {
      if (utils$3.isUndefined(value)) return;

      if (stack.indexOf(value) !== -1) {
        throw Error('Circular reference detected in ' + path.join('.'));
      }

      stack.push(value);

      utils$3.forEach(value, function each(el, key) {
        const result = !(utils$3.isUndefined(el) || el === null) && visitor.call(
          formData, el, utils$3.isString(key) ? key.trim() : key, path, exposedHelpers
        );

        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });

      stack.pop();
    }

    if (!utils$3.isObject(obj)) {
      throw new TypeError('data must be an object');
    }

    build(obj);

    return formData;
  }

  /**
   * It encodes a string by replacing all characters that are not in the unreserved set with
   * their percent-encoded equivalents
   *
   * @param {string} str - The string to encode.
   *
   * @returns {string} The encoded string.
   */
  function encode$3(str) {
    const charMap = {
      '!': '%21',
      "'": '%27',
      '(': '%28',
      ')': '%29',
      '~': '%7E',
      '%20': '+',
      '%00': '\x00'
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
      return charMap[match];
    });
  }

  /**
   * It takes a params object and converts it to a FormData object
   *
   * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
   * @param {Object<string, any>} options - The options object passed to the Axios constructor.
   *
   * @returns {void}
   */
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];

    params && toFormData$1(params, this, options);
  }

  const prototype = AxiosURLSearchParams.prototype;

  prototype.append = function append(name, value) {
    this._pairs.push([name, value]);
  };

  prototype.toString = function toString(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode$3);
    } : encode$3;

    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + '=' + _encode(pair[1]);
    }, '').join('&');
  };

  /**
   * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
   * URI encoded counterparts
   *
   * @param {string} val The value to be encoded.
   *
   * @returns {string} The encoded value.
   */
  function encode$2(val) {
    return encodeURIComponent(val).
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, '+');
  }

  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @param {?(object|Function)} options
   *
   * @returns {string} The formatted url
   */
  function buildURL(url, params, options) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }
    
    const _encode = options && options.encode || encode$2;

    if (utils$3.isFunction(options)) {
      options = {
        serialize: options
      };
    } 

    const serializeFn = options && options.serialize;

    let serializedParams;

    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils$3.isURLSearchParams(params) ?
        params.toString() :
        new AxiosURLSearchParams(params, options).toString(_encode);
    }

    if (serializedParams) {
      const hashmarkIndex = url.indexOf("#");

      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  }

  class InterceptorManager {
    constructor() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }

    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
      utils$3.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  }

  var transitionalDefaults = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

  var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

  var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

  var platform$1 = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams$1,
      FormData: FormData$1,
      Blob: Blob$1
    },
    protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
  };

  const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

  const _navigator = typeof navigator === 'object' && navigator || undefined;

  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   *
   * @returns {boolean}
   */
  const hasStandardBrowserEnv = hasBrowserEnv &&
    (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

  /**
   * Determine if we're running in a standard browser webWorker environment
   *
   * Although the `isStandardBrowserEnv` method indicates that
   * `allows axios to run in a web worker`, the WebWorker will still be
   * filtered out due to its judgment standard
   * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
   * This leads to a problem when axios post `FormData` in webWorker
   */
  const hasStandardBrowserWebWorkerEnv = (() => {
    return (
      typeof WorkerGlobalScope !== 'undefined' &&
      // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope &&
      typeof self.importScripts === 'function'
    );
  })();

  const origin = hasBrowserEnv && window.location.href || 'http://localhost';

  var utils$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hasBrowserEnv: hasBrowserEnv,
    hasStandardBrowserEnv: hasStandardBrowserEnv,
    hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
    navigator: _navigator,
    origin: origin
  });

  var platform = {
    ...utils$2,
    ...platform$1
  };

  function toURLEncodedForm(data, options) {
    return toFormData$1(data, new platform.classes.URLSearchParams(), {
      visitor: function(value, key, path, helpers) {
        if (platform.isNode && utils$3.isBuffer(value)) {
          this.append(key, value.toString('base64'));
          return false;
        }

        return helpers.defaultVisitor.apply(this, arguments);
      },
      ...options
    });
  }

  /**
   * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
   *
   * @param {string} name - The name of the property to get.
   *
   * @returns An array of strings.
   */
  function parsePropPath(name) {
    // foo[x][y][z]
    // foo.x.y.z
    // foo-x-y-z
    // foo x y z
    return utils$3.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
      return match[0] === '[]' ? '' : match[1] || match[0];
    });
  }

  /**
   * Convert an array to an object.
   *
   * @param {Array<any>} arr - The array to convert to an object.
   *
   * @returns An object with the same keys and values as the array.
   */
  function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = arr[key];
    }
    return obj;
  }

  /**
   * It takes a FormData object and returns a JavaScript object
   *
   * @param {string} formData The FormData object to convert to JSON.
   *
   * @returns {Object<string, any> | null} The converted object.
   */
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
      let name = path[index++];

      if (name === '__proto__') return true;

      const isNumericKey = Number.isFinite(+name);
      const isLast = index >= path.length;
      name = !name && utils$3.isArray(target) ? target.length : name;

      if (isLast) {
        if (utils$3.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }

        return !isNumericKey;
      }

      if (!target[name] || !utils$3.isObject(target[name])) {
        target[name] = [];
      }

      const result = buildPath(path, value, target[name], index);

      if (result && utils$3.isArray(target[name])) {
        target[name] = arrayToObject(target[name]);
      }

      return !isNumericKey;
    }

    if (utils$3.isFormData(formData) && utils$3.isFunction(formData.entries)) {
      const obj = {};

      utils$3.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });

      return obj;
    }

    return null;
  }

  /**
   * It takes a string, tries to parse it, and if it fails, it returns the stringified version
   * of the input
   *
   * @param {any} rawValue - The value to be stringified.
   * @param {Function} parser - A function that parses a string into a JavaScript object.
   * @param {Function} encoder - A function that takes a value and returns a string.
   *
   * @returns {string} A stringified version of the rawValue.
   */
  function stringifySafely(rawValue, parser, encoder) {
    if (utils$3.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils$3.trim(rawValue);
      } catch (e) {
        if (e.name !== 'SyntaxError') {
          throw e;
        }
      }
    }

    return (encoder || JSON.stringify)(rawValue);
  }

  const defaults = {

    transitional: transitionalDefaults,

    adapter: ['xhr', 'http', 'fetch'],

    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || '';
      const hasJSONContentType = contentType.indexOf('application/json') > -1;
      const isObjectPayload = utils$3.isObject(data);

      if (isObjectPayload && utils$3.isHTMLForm(data)) {
        data = new FormData(data);
      }

      const isFormData = utils$3.isFormData(data);

      if (isFormData) {
        return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
      }

      if (utils$3.isArrayBuffer(data) ||
        utils$3.isBuffer(data) ||
        utils$3.isStream(data) ||
        utils$3.isFile(data) ||
        utils$3.isBlob(data) ||
        utils$3.isReadableStream(data)
      ) {
        return data;
      }
      if (utils$3.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils$3.isURLSearchParams(data)) {
        headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
        return data.toString();
      }

      let isFileList;

      if (isObjectPayload) {
        if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }

        if ((isFileList = utils$3.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
          const _FormData = this.env && this.env.FormData;

          return toFormData$1(
            isFileList ? {'files[]': data} : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }

      if (isObjectPayload || hasJSONContentType ) {
        headers.setContentType('application/json', false);
        return stringifySafely(data);
      }

      return data;
    }],

    transformResponse: [function transformResponse(data) {
      const transitional = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
      const JSONRequested = this.responseType === 'json';

      if (utils$3.isResponse(data) || utils$3.isReadableStream(data)) {
        return data;
      }

      if (data && utils$3.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
        const silentJSONParsing = transitional && transitional.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;

        try {
          return JSON.parse(data, this.parseReviver);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === 'SyntaxError') {
              throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }

      return data;
    }],

    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    maxContentLength: -1,
    maxBodyLength: -1,

    env: {
      FormData: platform.classes.FormData,
      Blob: platform.classes.Blob
    },

    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },

    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': undefined
      }
    }
  };

  utils$3.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
    defaults.headers[method] = {};
  });

  // RawAxiosHeaders whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers
  const ignoreDuplicateOf = utils$3.toObjectSet([
    'age', 'authorization', 'content-length', 'content-type', 'etag',
    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
    'referer', 'retry-after', 'user-agent'
  ]);

  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} rawHeaders Headers needing to be parsed
   *
   * @returns {Object} Headers parsed into an object
   */
  var parseHeaders = rawHeaders => {
    const parsed = {};
    let key;
    let val;
    let i;

    rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
      i = line.indexOf(':');
      key = line.substring(0, i).trim().toLowerCase();
      val = line.substring(i + 1).trim();

      if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
        return;
      }

      if (key === 'set-cookie') {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });

    return parsed;
  };

  const $internals = Symbol('internals');

  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }

  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }

    return utils$3.isArray(value) ? value.map(normalizeValue) : String(value);
  }

  function parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;

    while ((match = tokensRE.exec(str))) {
      tokens[match[1]] = match[2];
    }

    return tokens;
  }

  const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

  function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
    if (utils$3.isFunction(filter)) {
      return filter.call(this, value, header);
    }

    if (isHeaderNameFilter) {
      value = header;
    }

    if (!utils$3.isString(value)) return;

    if (utils$3.isString(filter)) {
      return value.indexOf(filter) !== -1;
    }

    if (utils$3.isRegExp(filter)) {
      return filter.test(value);
    }
  }

  function formatHeader(header) {
    return header.trim()
      .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
  }

  function buildAccessors(obj, header) {
    const accessorName = utils$3.toCamelCase(' ' + header);

    ['get', 'set', 'has'].forEach(methodName => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }

  let AxiosHeaders$1 = class AxiosHeaders {
    constructor(headers) {
      headers && this.set(headers);
    }

    set(header, valueOrRewrite, rewrite) {
      const self = this;

      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);

        if (!lHeader) {
          throw new Error('header name must be a non-empty string');
        }

        const key = utils$3.findKey(self, lHeader);

        if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
          self[key || _header] = normalizeValue(_value);
        }
      }

      const setHeaders = (headers, _rewrite) =>
        utils$3.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

      if (utils$3.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if(utils$3.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders(header), valueOrRewrite);
      } else if (utils$3.isObject(header) && utils$3.isIterable(header)) {
        let obj = {}, dest, key;
        for (const entry of header) {
          if (!utils$3.isArray(entry)) {
            throw TypeError('Object iterator must return a key-value pair');
          }

          obj[key = entry[0]] = (dest = obj[key]) ?
            (utils$3.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]]) : entry[1];
        }

        setHeaders(obj, valueOrRewrite);
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }

      return this;
    }

    get(header, parser) {
      header = normalizeHeader(header);

      if (header) {
        const key = utils$3.findKey(this, header);

        if (key) {
          const value = this[key];

          if (!parser) {
            return value;
          }

          if (parser === true) {
            return parseTokens(value);
          }

          if (utils$3.isFunction(parser)) {
            return parser.call(this, value, key);
          }

          if (utils$3.isRegExp(parser)) {
            return parser.exec(value);
          }

          throw new TypeError('parser must be boolean|regexp|function');
        }
      }
    }

    has(header, matcher) {
      header = normalizeHeader(header);

      if (header) {
        const key = utils$3.findKey(this, header);

        return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
      }

      return false;
    }

    delete(header, matcher) {
      const self = this;
      let deleted = false;

      function deleteHeader(_header) {
        _header = normalizeHeader(_header);

        if (_header) {
          const key = utils$3.findKey(self, _header);

          if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
            delete self[key];

            deleted = true;
          }
        }
      }

      if (utils$3.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }

      return deleted;
    }

    clear(matcher) {
      const keys = Object.keys(this);
      let i = keys.length;
      let deleted = false;

      while (i--) {
        const key = keys[i];
        if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }

      return deleted;
    }

    normalize(format) {
      const self = this;
      const headers = {};

      utils$3.forEach(this, (value, header) => {
        const key = utils$3.findKey(headers, header);

        if (key) {
          self[key] = normalizeValue(value);
          delete self[header];
          return;
        }

        const normalized = format ? formatHeader(header) : String(header).trim();

        if (normalized !== header) {
          delete self[header];
        }

        self[normalized] = normalizeValue(value);

        headers[normalized] = true;
      });

      return this;
    }

    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }

    toJSON(asStrings) {
      const obj = Object.create(null);

      utils$3.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils$3.isArray(value) ? value.join(', ') : value);
      });

      return obj;
    }

    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }

    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
    }

    getSetCookie() {
      return this.get("set-cookie") || [];
    }

    get [Symbol.toStringTag]() {
      return 'AxiosHeaders';
    }

    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }

    static concat(first, ...targets) {
      const computed = new this(first);

      targets.forEach((target) => computed.set(target));

      return computed;
    }

    static accessor(header) {
      const internals = this[$internals] = (this[$internals] = {
        accessors: {}
      });

      const accessors = internals.accessors;
      const prototype = this.prototype;

      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);

        if (!accessors[lHeader]) {
          buildAccessors(prototype, _header);
          accessors[lHeader] = true;
        }
      }

      utils$3.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

      return this;
    }
  };

  AxiosHeaders$1.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

  // reserved names hotfix
  utils$3.reduceDescriptors(AxiosHeaders$1.prototype, ({value}, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    }
  });

  utils$3.freezeMethods(AxiosHeaders$1);

  /**
   * Transform the data for a request or a response
   *
   * @param {Array|Function} fns A single function or Array of functions
   * @param {?Object} response The response object
   *
   * @returns {*} The resulting transformed data
   */
  function transformData(fns, response) {
    const config = this || defaults;
    const context = response || config;
    const headers = AxiosHeaders$1.from(context.headers);
    let data = context.data;

    utils$3.forEach(fns, function transform(fn) {
      data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
    });

    headers.normalize();

    return data;
  }

  function isCancel$1(value) {
    return !!(value && value.__CANCEL__);
  }

  /**
   * A `CanceledError` is an object that is thrown when an operation is canceled.
   *
   * @param {string=} message The message.
   * @param {Object=} config The config.
   * @param {Object=} request The request.
   *
   * @returns {CanceledError} The created error.
   */
  function CanceledError$1(message, config, request) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    AxiosError$1.call(this, message == null ? 'canceled' : message, AxiosError$1.ERR_CANCELED, config, request);
    this.name = 'CanceledError';
  }

  utils$3.inherits(CanceledError$1, AxiosError$1, {
    __CANCEL__: true
  });

  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   *
   * @returns {object} The response.
   */
  function settle(resolve, reject, response) {
    const validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError$1(
        'Request failed with status code ' + response.status,
        [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }

  function parseProtocol(url) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || '';
  }

  /**
   * Calculate data maxRate
   * @param {Number} [samplesCount= 10]
   * @param {Number} [min= 1000]
   * @returns {Function}
   */
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;

    min = min !== undefined ? min : 1000;

    return function push(chunkLength) {
      const now = Date.now();

      const startedAt = timestamps[tail];

      if (!firstSampleTS) {
        firstSampleTS = now;
      }

      bytes[head] = chunkLength;
      timestamps[head] = now;

      let i = tail;
      let bytesCount = 0;

      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }

      head = (head + 1) % samplesCount;

      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }

      if (now - firstSampleTS < min) {
        return;
      }

      const passed = startedAt && now - startedAt;

      return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
    };
  }

  /**
   * Throttle decorator
   * @param {Function} fn
   * @param {Number} freq
   * @return {Function}
   */
  function throttle(fn, freq) {
    let timestamp = 0;
    let threshold = 1000 / freq;
    let lastArgs;
    let timer;

    const invoke = (args, now = Date.now()) => {
      timestamp = now;
      lastArgs = null;
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      fn(...args);
    };

    const throttled = (...args) => {
      const now = Date.now();
      const passed = now - timestamp;
      if ( passed >= threshold) {
        invoke(args, now);
      } else {
        lastArgs = args;
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            invoke(lastArgs);
          }, threshold - passed);
        }
      }
    };

    const flush = () => lastArgs && invoke(lastArgs);

    return [throttled, flush];
  }

  const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
    let bytesNotified = 0;
    const _speedometer = speedometer(50, 250);

    return throttle(e => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : undefined;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;

      bytesNotified = loaded;

      const data = {
        loaded,
        total,
        progress: total ? (loaded / total) : undefined,
        bytes: progressBytes,
        rate: rate ? rate : undefined,
        estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
        event: e,
        lengthComputable: total != null,
        [isDownloadStream ? 'download' : 'upload']: true
      };

      listener(data);
    }, freq);
  };

  const progressEventDecorator = (total, throttled) => {
    const lengthComputable = total != null;

    return [(loaded) => throttled[0]({
      lengthComputable,
      total,
      loaded
    }), throttled[1]];
  };

  const asyncDecorator = (fn) => (...args) => utils$3.asap(() => fn(...args));

  var isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {
    url = new URL(url, platform.origin);

    return (
      origin.protocol === url.protocol &&
      origin.host === url.host &&
      (isMSIE || origin.port === url.port)
    );
  })(
    new URL(platform.origin),
    platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
  ) : () => true;

  var cookies = platform.hasStandardBrowserEnv ?

    // Standard browser envs support document.cookie
    {
      write(name, value, expires, path, domain, secure) {
        const cookie = [name + '=' + encodeURIComponent(value)];

        utils$3.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

        utils$3.isString(path) && cookie.push('path=' + path);

        utils$3.isString(domain) && cookie.push('domain=' + domain);

        secure === true && cookie.push('secure');

        document.cookie = cookie.join('; ');
      },

      read(name) {
        const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    }

    :

    // Non-standard browser env (web workers, react-native) lack needed support.
    {
      write() {},
      read() {
        return null;
      },
      remove() {}
    };

  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   *
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */
  function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }

  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   *
   * @returns {string} The combined URL
   */
  function combineURLs(baseURL, relativeURL) {
    return relativeURL
      ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
      : baseURL;
  }

  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   *
   * @returns {string} The combined full path
   */
  function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
    let isRelativeUrl = !isAbsoluteURL(requestedURL);
    if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;

  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   *
   * @returns {Object} New object resulting from merging config2 to config1
   */
  function mergeConfig$1(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    const config = {};

    function getMergedValue(target, source, prop, caseless) {
      if (utils$3.isPlainObject(target) && utils$3.isPlainObject(source)) {
        return utils$3.merge.call({caseless}, target, source);
      } else if (utils$3.isPlainObject(source)) {
        return utils$3.merge({}, source);
      } else if (utils$3.isArray(source)) {
        return source.slice();
      }
      return source;
    }

    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(a, b, prop , caseless) {
      if (!utils$3.isUndefined(b)) {
        return getMergedValue(a, b, prop , caseless);
      } else if (!utils$3.isUndefined(a)) {
        return getMergedValue(undefined, a, prop , caseless);
      }
    }

    // eslint-disable-next-line consistent-return
    function valueFromConfig2(a, b) {
      if (!utils$3.isUndefined(b)) {
        return getMergedValue(undefined, b);
      }
    }

    // eslint-disable-next-line consistent-return
    function defaultToConfig2(a, b) {
      if (!utils$3.isUndefined(b)) {
        return getMergedValue(undefined, b);
      } else if (!utils$3.isUndefined(a)) {
        return getMergedValue(undefined, a);
      }
    }

    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(undefined, a);
      }
    }

    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)
    };

    utils$3.forEach(Object.keys({...config1, ...config2}), function computeConfigValue(prop) {
      const merge = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge(config1[prop], config2[prop], prop);
      (utils$3.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
    });

    return config;
  }

  var resolveConfig = (config) => {
    const newConfig = mergeConfig$1({}, config);

    let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;

    newConfig.headers = headers = AxiosHeaders$1.from(headers);

    newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);

    // HTTP basic authentication
    if (auth) {
      headers.set('Authorization', 'Basic ' +
        btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
      );
    }

    if (utils$3.isFormData(data)) {
      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
        headers.setContentType(undefined); // browser handles it
      } else if (utils$3.isFunction(data.getHeaders)) {
        // Node.js FormData (like form-data package)
        const formHeaders = data.getHeaders();
        // Only set safe headers to avoid overwriting security headers
        const allowedHeaders = ['content-type', 'content-length'];
        Object.entries(formHeaders).forEach(([key, val]) => {
          if (allowedHeaders.includes(key.toLowerCase())) {
            headers.set(key, val);
          }
        });
      }
    }  

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.

    if (platform.hasStandardBrowserEnv) {
      withXSRFToken && utils$3.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

      if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
        // Add xsrf header
        const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

        if (xsrfValue) {
          headers.set(xsrfHeaderName, xsrfValue);
        }
      }
    }

    return newConfig;
  };

  const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

  var xhrAdapter = isXHRAdapterSupported && function (config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      const _config = resolveConfig(config);
      let requestData = _config.data;
      const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
      let {responseType, onUploadProgress, onDownloadProgress} = _config;
      let onCanceled;
      let uploadThrottled, downloadThrottled;
      let flushUpload, flushDownload;

      function done() {
        flushUpload && flushUpload(); // flush events
        flushDownload && flushDownload(); // flush events

        _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

        _config.signal && _config.signal.removeEventListener('abort', onCanceled);
      }

      let request = new XMLHttpRequest();

      request.open(_config.method.toUpperCase(), _config.url, true);

      // Set the request timeout in MS
      request.timeout = _config.timeout;

      function onloadend() {
        if (!request) {
          return;
        }
        // Prepare the response
        const responseHeaders = AxiosHeaders$1.from(
          'getAllResponseHeaders' in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
          request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };

        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);

        // Clean up request
        request = null;
      }

      if ('onloadend' in request) {
        // Use onloadend if available
        request.onloadend = onloadend;
      } else {
        // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }
          // readystate handler is calling before onerror or ontimeout handlers,
          // so we should call onloadend on the next 'tick'
          setTimeout(onloadend);
        };
      }

      // Handle browser request cancellation (as opposed to a manual cancellation)
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(new AxiosError$1('Request aborted', AxiosError$1.ECONNABORTED, config, request));

        // Clean up request
        request = null;
      };

      // Handle low level network errors
    request.onerror = function handleError(event) {
         // Browsers deliver a ProgressEvent in XHR onerror
         // (message may be empty; when present, surface it)
         // See https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/error_event
         const msg = event && event.message ? event.message : 'Network Error';
         const err = new AxiosError$1(msg, AxiosError$1.ERR_NETWORK, config, request);
         // attach the underlying event for consumers who want details
         err.event = event || null;
         reject(err);
         request = null;
      };
      
      // Handle timeout
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
        const transitional = _config.transitional || transitionalDefaults;
        if (_config.timeoutErrorMessage) {
          timeoutErrorMessage = _config.timeoutErrorMessage;
        }
        reject(new AxiosError$1(
          timeoutErrorMessage,
          transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
          config,
          request));

        // Clean up request
        request = null;
      };

      // Remove Content-Type if data is undefined
      requestData === undefined && requestHeaders.setContentType(null);

      // Add headers to the request
      if ('setRequestHeader' in request) {
        utils$3.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request.setRequestHeader(key, val);
        });
      }

      // Add withCredentials to request if needed
      if (!utils$3.isUndefined(_config.withCredentials)) {
        request.withCredentials = !!_config.withCredentials;
      }

      // Add responseType to request if needed
      if (responseType && responseType !== 'json') {
        request.responseType = _config.responseType;
      }

      // Handle progress if needed
      if (onDownloadProgress) {
        ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));
        request.addEventListener('progress', downloadThrottled);
      }

      // Not all browsers support upload events
      if (onUploadProgress && request.upload) {
        ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));

        request.upload.addEventListener('progress', uploadThrottled);

        request.upload.addEventListener('loadend', flushUpload);
      }

      if (_config.cancelToken || _config.signal) {
        // Handle cancellation
        // eslint-disable-next-line func-names
        onCanceled = cancel => {
          if (!request) {
            return;
          }
          reject(!cancel || cancel.type ? new CanceledError$1(null, config, request) : cancel);
          request.abort();
          request = null;
        };

        _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
        if (_config.signal) {
          _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
        }
      }

      const protocol = parseProtocol(_config.url);

      if (protocol && platform.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError$1('Unsupported protocol ' + protocol + ':', AxiosError$1.ERR_BAD_REQUEST, config));
        return;
      }


      // Send the request
      request.send(requestData || null);
    });
  };

  const composeSignals = (signals, timeout) => {
    const {length} = (signals = signals ? signals.filter(Boolean) : []);

    if (timeout || length) {
      let controller = new AbortController();

      let aborted;

      const onabort = function (reason) {
        if (!aborted) {
          aborted = true;
          unsubscribe();
          const err = reason instanceof Error ? reason : this.reason;
          controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
        }
      };

      let timer = timeout && setTimeout(() => {
        timer = null;
        onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
      }, timeout);

      const unsubscribe = () => {
        if (signals) {
          timer && clearTimeout(timer);
          timer = null;
          signals.forEach(signal => {
            signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
          });
          signals = null;
        }
      };

      signals.forEach((signal) => signal.addEventListener('abort', onabort));

      const {signal} = controller;

      signal.unsubscribe = () => utils$3.asap(unsubscribe);

      return signal;
    }
  };

  const streamChunk = function* (chunk, chunkSize) {
    let len = chunk.byteLength;

    if (len < chunkSize) {
      yield chunk;
      return;
    }

    let pos = 0;
    let end;

    while (pos < len) {
      end = pos + chunkSize;
      yield chunk.slice(pos, end);
      pos = end;
    }
  };

  const readBytes = async function* (iterable, chunkSize) {
    for await (const chunk of readStream(iterable)) {
      yield* streamChunk(chunk, chunkSize);
    }
  };

  const readStream = async function* (stream) {
    if (stream[Symbol.asyncIterator]) {
      yield* stream;
      return;
    }

    const reader = stream.getReader();
    try {
      for (;;) {
        const {done, value} = await reader.read();
        if (done) {
          break;
        }
        yield value;
      }
    } finally {
      await reader.cancel();
    }
  };

  const trackStream = (stream, chunkSize, onProgress, onFinish) => {
    const iterator = readBytes(stream, chunkSize);

    let bytes = 0;
    let done;
    let _onFinish = (e) => {
      if (!done) {
        done = true;
        onFinish && onFinish(e);
      }
    };

    return new ReadableStream({
      async pull(controller) {
        try {
          const {done, value} = await iterator.next();

          if (done) {
           _onFinish();
            controller.close();
            return;
          }

          let len = value.byteLength;
          if (onProgress) {
            let loadedBytes = bytes += len;
            onProgress(loadedBytes);
          }
          controller.enqueue(new Uint8Array(value));
        } catch (err) {
          _onFinish(err);
          throw err;
        }
      },
      cancel(reason) {
        _onFinish(reason);
        return iterator.return();
      }
    }, {
      highWaterMark: 2
    })
  };

  const DEFAULT_CHUNK_SIZE = 64 * 1024;

  const {isFunction} = utils$3;

  const globalFetchAPI = (({Request, Response}) => ({
    Request, Response
  }))(utils$3.global);

  const {
    ReadableStream: ReadableStream$1, TextEncoder: TextEncoder$1
  } = utils$3.global;


  const test = (fn, ...args) => {
    try {
      return !!fn(...args);
    } catch (e) {
      return false
    }
  };

  const factory = (env) => {
    env = utils$3.merge.call({
      skipUndefined: true
    }, globalFetchAPI, env);

    const {fetch: envFetch, Request, Response} = env;
    const isFetchSupported = envFetch ? isFunction(envFetch) : typeof fetch === 'function';
    const isRequestSupported = isFunction(Request);
    const isResponseSupported = isFunction(Response);

    if (!isFetchSupported) {
      return false;
    }

    const isReadableStreamSupported = isFetchSupported && isFunction(ReadableStream$1);

    const encodeText = isFetchSupported && (typeof TextEncoder$1 === 'function' ?
        ((encoder) => (str) => encoder.encode(str))(new TextEncoder$1()) :
        async (str) => new Uint8Array(await new Request(str).arrayBuffer())
    );

    const supportsRequestStream = isRequestSupported && isReadableStreamSupported && test(() => {
      let duplexAccessed = false;

      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream$1(),
        method: 'POST',
        get duplex() {
          duplexAccessed = true;
          return 'half';
        },
      }).headers.has('Content-Type');

      return duplexAccessed && !hasContentType;
    });

    const supportsResponseStream = isResponseSupported && isReadableStreamSupported &&
      test(() => utils$3.isReadableStream(new Response('').body));

    const resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };

    isFetchSupported && ((() => {
      ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
        !resolvers[type] && (resolvers[type] = (res, config) => {
          let method = res && res[type];

          if (method) {
            return method.call(res);
          }

          throw new AxiosError$1(`Response type '${type}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config);
        });
      });
    })());

    const getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }

      if (utils$3.isBlob(body)) {
        return body.size;
      }

      if (utils$3.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: 'POST',
          body,
        });
        return (await _request.arrayBuffer()).byteLength;
      }

      if (utils$3.isArrayBufferView(body) || utils$3.isArrayBuffer(body)) {
        return body.byteLength;
      }

      if (utils$3.isURLSearchParams(body)) {
        body = body + '';
      }

      if (utils$3.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };

    const resolveBodyLength = async (headers, body) => {
      const length = utils$3.toFiniteNumber(headers.getContentLength());

      return length == null ? getBodyLength(body) : length;
    };

    return async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = 'same-origin',
        fetchOptions
      } = resolveConfig(config);

      let _fetch = envFetch || fetch;

      responseType = responseType ? (responseType + '').toLowerCase() : 'text';

      let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

      let request = null;

      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });

      let requestContentLength;

      try {
        if (
          onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
          (requestContentLength = await resolveBodyLength(headers, data)) !== 0
        ) {
          let _request = new Request(url, {
            method: 'POST',
            body: data,
            duplex: "half"
          });

          let contentTypeHeader;

          if (utils$3.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
            headers.setContentType(contentTypeHeader);
          }

          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );

            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }

        if (!utils$3.isString(withCredentials)) {
          withCredentials = withCredentials ? 'include' : 'omit';
        }

        // Cloudflare Workers throws when credentials are defined
        // see https://github.com/cloudflare/workerd/issues/902
        const isCredentialsSupported = isRequestSupported && "credentials" in Request.prototype;

        const resolvedOptions = {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : undefined
        };

        request = isRequestSupported && new Request(url, resolvedOptions);

        let response = await (isRequestSupported ? _fetch(request, fetchOptions) : _fetch(url, resolvedOptions));

        const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

        if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
          const options = {};

          ['status', 'statusText', 'headers'].forEach(prop => {
            options[prop] = response[prop];
          });

          const responseContentLength = utils$3.toFiniteNumber(response.headers.get('content-length'));

          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];

          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }

        responseType = responseType || 'text';

        let responseData = await resolvers[utils$3.findKey(resolvers, responseType) || 'text'](response, config);

        !isStreamResponse && unsubscribe && unsubscribe();

        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        })
      } catch (err) {
        unsubscribe && unsubscribe();

        if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          )
        }

        throw AxiosError$1.from(err, err && err.code, config, request);
      }
    }
  };

  const seedCache = new Map();

  const getFetch = (config) => {
    let env = config ? config.env : {};
    const {fetch, Request, Response} = env;
    const seeds = [
      Request, Response, fetch
    ];

    let len = seeds.length, i = len,
      seed, target, map = seedCache;

    while (i--) {
      seed = seeds[i];
      target = map.get(seed);

      target === undefined && map.set(seed, target = (i ? new Map() : factory(env)));

      map = target;
    }

    return target;
  };

  getFetch();

  const knownAdapters = {
    http: httpAdapter,
    xhr: xhrAdapter,
    fetch: {
      get: getFetch,
    }
  };

  utils$3.forEach(knownAdapters, (fn, value) => {
    if (fn) {
      try {
        Object.defineProperty(fn, 'name', {value});
      } catch (e) {
        // eslint-disable-next-line no-empty
      }
      Object.defineProperty(fn, 'adapterName', {value});
    }
  });

  const renderReason = (reason) => `- ${reason}`;

  const isResolvedHandle = (adapter) => utils$3.isFunction(adapter) || adapter === null || adapter === false;

  var adapters = {
    getAdapter: (adapters, config) => {
      adapters = utils$3.isArray(adapters) ? adapters : [adapters];

      const {length} = adapters;
      let nameOrAdapter;
      let adapter;

      const rejectedReasons = {};

      for (let i = 0; i < length; i++) {
        nameOrAdapter = adapters[i];
        let id;

        adapter = nameOrAdapter;

        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

          if (adapter === undefined) {
            throw new AxiosError$1(`Unknown adapter '${id}'`);
          }
        }

        if (adapter && (utils$3.isFunction(adapter) || (adapter = adapter.get(config)))) {
          break;
        }

        rejectedReasons[id || '#' + i] = adapter;
      }

      if (!adapter) {

        const reasons = Object.entries(rejectedReasons)
          .map(([id, state]) => `adapter ${id} ` +
            (state === false ? 'is not supported by the environment' : 'is not available in the build')
          );

        let s = length ?
          (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
          'as no adapter specified';

        throw new AxiosError$1(
          `There is no suitable adapter to dispatch the request ` + s,
          'ERR_NOT_SUPPORT'
        );
      }

      return adapter;
    },
    adapters: knownAdapters
  };

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   *
   * @param {Object} config The config that is to be used for the request
   *
   * @returns {void}
   */
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }

    if (config.signal && config.signal.aborted) {
      throw new CanceledError$1(null, config);
    }
  }

  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);

    config.headers = AxiosHeaders$1.from(config.headers);

    // Transform request data
    config.data = transformData.call(
      config,
      config.transformRequest
    );

    if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
      config.headers.setContentType('application/x-www-form-urlencoded', false);
    }

    const adapter = adapters.getAdapter(config.adapter || defaults.adapter, config);

    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);

      // Transform response data
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );

      response.headers = AxiosHeaders$1.from(response.headers);

      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel$1(reason)) {
        throwIfCancellationRequested(config);

        // Transform response data
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
        }
      }

      return Promise.reject(reason);
    });
  }

  const VERSION$1 = "1.12.2";

  const validators$1 = {};

  // eslint-disable-next-line func-names
  ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
    validators$1[type] = function validator(thing) {
      return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  });

  const deprecatedWarnings = {};

  /**
   * Transitional option validator
   *
   * @param {function|boolean?} validator - set to false if the transitional option has been removed
   * @param {string?} version - deprecated version / removed since version
   * @param {string?} message - some message with additional info
   *
   * @returns {function}
   */
  validators$1.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
    }

    // eslint-disable-next-line func-names
    return (value, opt, opts) => {
      if (validator === false) {
        throw new AxiosError$1(
          formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
          AxiosError$1.ERR_DEPRECATED
        );
      }

      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        // eslint-disable-next-line no-console
        console.warn(
          formatMessage(
            opt,
            ' has been deprecated since v' + version + ' and will be removed in the near future'
          )
        );
      }

      return validator ? validator(value, opt, opts) : true;
    };
  };

  validators$1.spelling = function spelling(correctSpelling) {
    return (value, opt) => {
      // eslint-disable-next-line no-console
      console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
      return true;
    }
  };

  /**
   * Assert object's properties type
   *
   * @param {object} options
   * @param {object} schema
   * @param {boolean?} allowUnknown
   *
   * @returns {object}
   */

  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== 'object') {
      throw new AxiosError$1('options must be an object', AxiosError$1.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i = keys.length;
    while (i-- > 0) {
      const opt = keys[i];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result = value === undefined || validator(value, opt, options);
        if (result !== true) {
          throw new AxiosError$1('option ' + opt + ' must be ' + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError$1('Unknown option ' + opt, AxiosError$1.ERR_BAD_OPTION);
      }
    }
  }

  var validator$1 = {
    assertOptions,
    validators: validators$1
  };

  const validators = validator$1.validators;

  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   *
   * @return {Axios} A new instance of Axios
   */
  let Axios$1 = class Axios {
    constructor(instanceConfig) {
      this.defaults = instanceConfig || {};
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    async request(configOrUrl, config) {
      try {
        return await this._request(configOrUrl, config);
      } catch (err) {
        if (err instanceof Error) {
          let dummy = {};

          Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());

          // slice off the Error: ... line
          const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
          try {
            if (!err.stack) {
              err.stack = stack;
              // match without the 2 top stack lines
            } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
              err.stack += '\n' + stack;
            }
          } catch (e) {
            // ignore the case where "stack" is an un-writable property
          }
        }

        throw err;
      }
    }

    _request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig$1(this.defaults, config);

      const {transitional, paramsSerializer, headers} = config;

      if (transitional !== undefined) {
        validator$1.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      if (paramsSerializer != null) {
        if (utils$3.isFunction(paramsSerializer)) {
          config.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator$1.assertOptions(paramsSerializer, {
            encode: validators.function,
            serialize: validators.function
          }, true);
        }
      }

      // Set config.allowAbsoluteUrls
      if (config.allowAbsoluteUrls !== undefined) ; else if (this.defaults.allowAbsoluteUrls !== undefined) {
        config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
      } else {
        config.allowAbsoluteUrls = true;
      }

      validator$1.assertOptions(config, {
        baseUrl: validators.spelling('baseURL'),
        withXsrfToken: validators.spelling('withXSRFToken')
      }, true);

      // Set config.method
      config.method = (config.method || this.defaults.method || 'get').toLowerCase();

      // Flatten headers
      let contextHeaders = headers && utils$3.merge(
        headers.common,
        headers[config.method]
      );

      headers && utils$3.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        (method) => {
          delete headers[method];
        }
      );

      config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

      // filter out skipped interceptors
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      let promise;
      let i = 0;
      let len;

      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), undefined];
        chain.unshift(...requestInterceptorChain);
        chain.push(...responseInterceptorChain);
        len = chain.length;

        promise = Promise.resolve(config);

        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }

        return promise;
      }

      len = requestInterceptorChain.length;

      let newConfig = config;

      while (i < len) {
        const onFulfilled = requestInterceptorChain[i++];
        const onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }

      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      i = 0;
      len = responseInterceptorChain.length;

      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }

      return promise;
    }

    getUri(config) {
      config = mergeConfig$1(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  };

  // Provide aliases for supported request methods
  utils$3.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios$1.prototype[method] = function(url, config) {
      return this.request(mergeConfig$1(config || {}, {
        method,
        url,
        data: (config || {}).data
      }));
    };
  });

  utils$3.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/

    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data, config) {
        return this.request(mergeConfig$1(config || {}, {
          method,
          headers: isForm ? {
            'Content-Type': 'multipart/form-data'
          } : {},
          url,
          data
        }));
      };
    }

    Axios$1.prototype[method] = generateHTTPMethod();

    Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
  });

  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @param {Function} executor The executor function.
   *
   * @returns {CancelToken}
   */
  let CancelToken$1 = class CancelToken {
    constructor(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      let resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      const token = this;

      // eslint-disable-next-line func-names
      this.promise.then(cancel => {
        if (!token._listeners) return;

        let i = token._listeners.length;

        while (i-- > 0) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = onfulfilled => {
        let _resolve;
        // eslint-disable-next-line func-names
        const promise = new Promise(resolve => {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message, config, request) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new CanceledError$1(message, config, request);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }

    /**
     * Subscribe to the cancel signal
     */

    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }

    /**
     * Unsubscribe from the cancel signal
     */

    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }

    toAbortSignal() {
      const controller = new AbortController();

      const abort = (err) => {
        controller.abort(err);
      };

      this.subscribe(abort);

      controller.signal.unsubscribe = () => this.unsubscribe(abort);

      return controller.signal;
    }

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel;
      const token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    }
  };

  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   *
   * @returns {Function}
   */
  function spread$1(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  /**
   * Determines whether the payload is an error thrown by Axios
   *
   * @param {*} payload The value to test
   *
   * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
   */
  function isAxiosError$1(payload) {
    return utils$3.isObject(payload) && (payload.isAxiosError === true);
  }

  const HttpStatusCode$1 = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511,
  };

  Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
    HttpStatusCode$1[value] = key;
  });

  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   *
   * @returns {Axios} A new instance of Axios
   */
  function createInstance(defaultConfig) {
    const context = new Axios$1(defaultConfig);
    const instance = bind(Axios$1.prototype.request, context);

    // Copy axios.prototype to instance
    utils$3.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

    // Copy context to instance
    utils$3.extend(instance, context, null, {allOwnKeys: true});

    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
    };

    return instance;
  }

  // Create the default instance to be exported
  const axios = createInstance(defaults);

  // Expose Axios class to allow class inheritance
  axios.Axios = Axios$1;

  // Expose Cancel & CancelToken
  axios.CanceledError = CanceledError$1;
  axios.CancelToken = CancelToken$1;
  axios.isCancel = isCancel$1;
  axios.VERSION = VERSION$1;
  axios.toFormData = toFormData$1;

  // Expose AxiosError class
  axios.AxiosError = AxiosError$1;

  // alias for CanceledError for backward compatibility
  axios.Cancel = axios.CanceledError;

  // Expose all/spread
  axios.all = function all(promises) {
    return Promise.all(promises);
  };

  axios.spread = spread$1;

  // Expose isAxiosError
  axios.isAxiosError = isAxiosError$1;

  // Expose mergeConfig
  axios.mergeConfig = mergeConfig$1;

  axios.AxiosHeaders = AxiosHeaders$1;

  axios.formToJSON = thing => formDataToJSON(utils$3.isHTMLForm(thing) ? new FormData(thing) : thing);

  axios.getAdapter = adapters.getAdapter;

  axios.HttpStatusCode = HttpStatusCode$1;

  axios.default = axios;

  // This module is intended to unwrap Axios default export as named.
  // Keep top-level export same with static properties
  // so that it can keep same with es module or cjs
  const {
    Axios,
    AxiosError,
    CanceledError,
    isCancel,
    CancelToken,
    VERSION,
    all,
    Cancel,
    isAxiosError,
    spread,
    toFormData,
    AxiosHeaders,
    HttpStatusCode,
    formToJSON,
    getAdapter,
    mergeConfig
  } = axios;

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			var isInstance = false;
        try {
          isInstance = this instanceof a;
        } catch {}
  			if (isInstance) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var bn$1 = {exports: {}};

  var _nodeResolve_empty = {};

  var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: _nodeResolve_empty
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

  var bn = bn$1.exports;

  var hasRequiredBn;

  function requireBn () {
  	if (hasRequiredBn) return bn$1.exports;
  	hasRequiredBn = 1;
  	(function (module) {
  		(function (module, exports) {

  		  // Utils
  		  function assert (val, msg) {
  		    if (!val) throw new Error(msg || 'Assertion failed');
  		  }

  		  // Could use `inherits` module, but don't want to move from single file
  		  // architecture yet.
  		  function inherits (ctor, superCtor) {
  		    ctor.super_ = superCtor;
  		    var TempCtor = function () {};
  		    TempCtor.prototype = superCtor.prototype;
  		    ctor.prototype = new TempCtor();
  		    ctor.prototype.constructor = ctor;
  		  }

  		  // BN

  		  function BN (number, base, endian) {
  		    if (BN.isBN(number)) {
  		      return number;
  		    }

  		    this.negative = 0;
  		    this.words = null;
  		    this.length = 0;

  		    // Reduction context
  		    this.red = null;

  		    if (number !== null) {
  		      if (base === 'le' || base === 'be') {
  		        endian = base;
  		        base = 10;
  		      }

  		      this._init(number || 0, base || 10, endian || 'be');
  		    }
  		  }
  		  if (typeof module === 'object') {
  		    module.exports = BN;
  		  } else {
  		    exports.BN = BN;
  		  }

  		  BN.BN = BN;
  		  BN.wordSize = 26;

  		  var Buffer;
  		  try {
  		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
  		      Buffer = window.Buffer;
  		    } else {
  		      Buffer = require$$0.Buffer;
  		    }
  		  } catch (e) {
  		  }

  		  BN.isBN = function isBN (num) {
  		    if (num instanceof BN) {
  		      return true;
  		    }

  		    return num !== null && typeof num === 'object' &&
  		      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  		  };

  		  BN.max = function max (left, right) {
  		    if (left.cmp(right) > 0) return left;
  		    return right;
  		  };

  		  BN.min = function min (left, right) {
  		    if (left.cmp(right) < 0) return left;
  		    return right;
  		  };

  		  BN.prototype._init = function init (number, base, endian) {
  		    if (typeof number === 'number') {
  		      return this._initNumber(number, base, endian);
  		    }

  		    if (typeof number === 'object') {
  		      return this._initArray(number, base, endian);
  		    }

  		    if (base === 'hex') {
  		      base = 16;
  		    }
  		    assert(base === (base | 0) && base >= 2 && base <= 36);

  		    number = number.toString().replace(/\s+/g, '');
  		    var start = 0;
  		    if (number[0] === '-') {
  		      start++;
  		      this.negative = 1;
  		    }

  		    if (start < number.length) {
  		      if (base === 16) {
  		        this._parseHex(number, start, endian);
  		      } else {
  		        this._parseBase(number, base, start);
  		        if (endian === 'le') {
  		          this._initArray(this.toArray(), base, endian);
  		        }
  		      }
  		    }
  		  };

  		  BN.prototype._initNumber = function _initNumber (number, base, endian) {
  		    if (number < 0) {
  		      this.negative = 1;
  		      number = -number;
  		    }
  		    if (number < 0x4000000) {
  		      this.words = [number & 0x3ffffff];
  		      this.length = 1;
  		    } else if (number < 0x10000000000000) {
  		      this.words = [
  		        number & 0x3ffffff,
  		        (number / 0x4000000) & 0x3ffffff
  		      ];
  		      this.length = 2;
  		    } else {
  		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
  		      this.words = [
  		        number & 0x3ffffff,
  		        (number / 0x4000000) & 0x3ffffff,
  		        1
  		      ];
  		      this.length = 3;
  		    }

  		    if (endian !== 'le') return;

  		    // Reverse the bytes
  		    this._initArray(this.toArray(), base, endian);
  		  };

  		  BN.prototype._initArray = function _initArray (number, base, endian) {
  		    // Perhaps a Uint8Array
  		    assert(typeof number.length === 'number');
  		    if (number.length <= 0) {
  		      this.words = [0];
  		      this.length = 1;
  		      return this;
  		    }

  		    this.length = Math.ceil(number.length / 3);
  		    this.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      this.words[i] = 0;
  		    }

  		    var j, w;
  		    var off = 0;
  		    if (endian === 'be') {
  		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
  		        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
  		        this.words[j] |= (w << off) & 0x3ffffff;
  		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
  		        off += 24;
  		        if (off >= 26) {
  		          off -= 26;
  		          j++;
  		        }
  		      }
  		    } else if (endian === 'le') {
  		      for (i = 0, j = 0; i < number.length; i += 3) {
  		        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
  		        this.words[j] |= (w << off) & 0x3ffffff;
  		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
  		        off += 24;
  		        if (off >= 26) {
  		          off -= 26;
  		          j++;
  		        }
  		      }
  		    }
  		    return this._strip();
  		  };

  		  function parseHex4Bits (string, index) {
  		    var c = string.charCodeAt(index);
  		    // '0' - '9'
  		    if (c >= 48 && c <= 57) {
  		      return c - 48;
  		    // 'A' - 'F'
  		    } else if (c >= 65 && c <= 70) {
  		      return c - 55;
  		    // 'a' - 'f'
  		    } else if (c >= 97 && c <= 102) {
  		      return c - 87;
  		    } else {
  		      assert(false, 'Invalid character in ' + string);
  		    }
  		  }

  		  function parseHexByte (string, lowerBound, index) {
  		    var r = parseHex4Bits(string, index);
  		    if (index - 1 >= lowerBound) {
  		      r |= parseHex4Bits(string, index - 1) << 4;
  		    }
  		    return r;
  		  }

  		  BN.prototype._parseHex = function _parseHex (number, start, endian) {
  		    // Create possibly bigger array to ensure that it fits the number
  		    this.length = Math.ceil((number.length - start) / 6);
  		    this.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      this.words[i] = 0;
  		    }

  		    // 24-bits chunks
  		    var off = 0;
  		    var j = 0;

  		    var w;
  		    if (endian === 'be') {
  		      for (i = number.length - 1; i >= start; i -= 2) {
  		        w = parseHexByte(number, start, i) << off;
  		        this.words[j] |= w & 0x3ffffff;
  		        if (off >= 18) {
  		          off -= 18;
  		          j += 1;
  		          this.words[j] |= w >>> 26;
  		        } else {
  		          off += 8;
  		        }
  		      }
  		    } else {
  		      var parseLength = number.length - start;
  		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
  		        w = parseHexByte(number, start, i) << off;
  		        this.words[j] |= w & 0x3ffffff;
  		        if (off >= 18) {
  		          off -= 18;
  		          j += 1;
  		          this.words[j] |= w >>> 26;
  		        } else {
  		          off += 8;
  		        }
  		      }
  		    }

  		    this._strip();
  		  };

  		  function parseBase (str, start, end, mul) {
  		    var r = 0;
  		    var b = 0;
  		    var len = Math.min(str.length, end);
  		    for (var i = start; i < len; i++) {
  		      var c = str.charCodeAt(i) - 48;

  		      r *= mul;

  		      // 'a'
  		      if (c >= 49) {
  		        b = c - 49 + 0xa;

  		      // 'A'
  		      } else if (c >= 17) {
  		        b = c - 17 + 0xa;

  		      // '0' - '9'
  		      } else {
  		        b = c;
  		      }
  		      assert(c >= 0 && b < mul, 'Invalid character');
  		      r += b;
  		    }
  		    return r;
  		  }

  		  BN.prototype._parseBase = function _parseBase (number, base, start) {
  		    // Initialize as zero
  		    this.words = [0];
  		    this.length = 1;

  		    // Find length of limb in base
  		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
  		      limbLen++;
  		    }
  		    limbLen--;
  		    limbPow = (limbPow / base) | 0;

  		    var total = number.length - start;
  		    var mod = total % limbLen;
  		    var end = Math.min(total, total - mod) + start;

  		    var word = 0;
  		    for (var i = start; i < end; i += limbLen) {
  		      word = parseBase(number, i, i + limbLen, base);

  		      this.imuln(limbPow);
  		      if (this.words[0] + word < 0x4000000) {
  		        this.words[0] += word;
  		      } else {
  		        this._iaddn(word);
  		      }
  		    }

  		    if (mod !== 0) {
  		      var pow = 1;
  		      word = parseBase(number, i, number.length, base);

  		      for (i = 0; i < mod; i++) {
  		        pow *= base;
  		      }

  		      this.imuln(pow);
  		      if (this.words[0] + word < 0x4000000) {
  		        this.words[0] += word;
  		      } else {
  		        this._iaddn(word);
  		      }
  		    }

  		    this._strip();
  		  };

  		  BN.prototype.copy = function copy (dest) {
  		    dest.words = new Array(this.length);
  		    for (var i = 0; i < this.length; i++) {
  		      dest.words[i] = this.words[i];
  		    }
  		    dest.length = this.length;
  		    dest.negative = this.negative;
  		    dest.red = this.red;
  		  };

  		  function move (dest, src) {
  		    dest.words = src.words;
  		    dest.length = src.length;
  		    dest.negative = src.negative;
  		    dest.red = src.red;
  		  }

  		  BN.prototype._move = function _move (dest) {
  		    move(dest, this);
  		  };

  		  BN.prototype.clone = function clone () {
  		    var r = new BN(null);
  		    this.copy(r);
  		    return r;
  		  };

  		  BN.prototype._expand = function _expand (size) {
  		    while (this.length < size) {
  		      this.words[this.length++] = 0;
  		    }
  		    return this;
  		  };

  		  // Remove leading `0` from `this`
  		  BN.prototype._strip = function strip () {
  		    while (this.length > 1 && this.words[this.length - 1] === 0) {
  		      this.length--;
  		    }
  		    return this._normSign();
  		  };

  		  BN.prototype._normSign = function _normSign () {
  		    // -0 = 0
  		    if (this.length === 1 && this.words[0] === 0) {
  		      this.negative = 0;
  		    }
  		    return this;
  		  };

  		  // Check Symbol.for because not everywhere where Symbol defined
  		  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  		  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
  		    try {
  		      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
  		    } catch (e) {
  		      BN.prototype.inspect = inspect;
  		    }
  		  } else {
  		    BN.prototype.inspect = inspect;
  		  }

  		  function inspect () {
  		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  		  }

  		  /*

  		  var zeros = [];
  		  var groupSizes = [];
  		  var groupBases = [];

  		  var s = '';
  		  var i = -1;
  		  while (++i < BN.wordSize) {
  		    zeros[i] = s;
  		    s += '0';
  		  }
  		  groupSizes[0] = 0;
  		  groupSizes[1] = 0;
  		  groupBases[0] = 0;
  		  groupBases[1] = 0;
  		  var base = 2 - 1;
  		  while (++base < 36 + 1) {
  		    var groupSize = 0;
  		    var groupBase = 1;
  		    while (groupBase < (1 << BN.wordSize) / base) {
  		      groupBase *= base;
  		      groupSize += 1;
  		    }
  		    groupSizes[base] = groupSize;
  		    groupBases[base] = groupBase;
  		  }

  		  */

  		  var zeros = [
  		    '',
  		    '0',
  		    '00',
  		    '000',
  		    '0000',
  		    '00000',
  		    '000000',
  		    '0000000',
  		    '00000000',
  		    '000000000',
  		    '0000000000',
  		    '00000000000',
  		    '000000000000',
  		    '0000000000000',
  		    '00000000000000',
  		    '000000000000000',
  		    '0000000000000000',
  		    '00000000000000000',
  		    '000000000000000000',
  		    '0000000000000000000',
  		    '00000000000000000000',
  		    '000000000000000000000',
  		    '0000000000000000000000',
  		    '00000000000000000000000',
  		    '000000000000000000000000',
  		    '0000000000000000000000000'
  		  ];

  		  var groupSizes = [
  		    0, 0,
  		    25, 16, 12, 11, 10, 9, 8,
  		    8, 7, 7, 7, 7, 6, 6,
  		    6, 6, 6, 6, 6, 5, 5,
  		    5, 5, 5, 5, 5, 5, 5,
  		    5, 5, 5, 5, 5, 5, 5
  		  ];

  		  var groupBases = [
  		    0, 0,
  		    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  		    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  		    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  		    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  		    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  		  ];

  		  BN.prototype.toString = function toString (base, padding) {
  		    base = base || 10;
  		    padding = padding | 0 || 1;

  		    var out;
  		    if (base === 16 || base === 'hex') {
  		      out = '';
  		      var off = 0;
  		      var carry = 0;
  		      for (var i = 0; i < this.length; i++) {
  		        var w = this.words[i];
  		        var word = (((w << off) | carry) & 0xffffff).toString(16);
  		        carry = (w >>> (24 - off)) & 0xffffff;
  		        off += 2;
  		        if (off >= 26) {
  		          off -= 26;
  		          i--;
  		        }
  		        if (carry !== 0 || i !== this.length - 1) {
  		          out = zeros[6 - word.length] + word + out;
  		        } else {
  		          out = word + out;
  		        }
  		      }
  		      if (carry !== 0) {
  		        out = carry.toString(16) + out;
  		      }
  		      while (out.length % padding !== 0) {
  		        out = '0' + out;
  		      }
  		      if (this.negative !== 0) {
  		        out = '-' + out;
  		      }
  		      return out;
  		    }

  		    if (base === (base | 0) && base >= 2 && base <= 36) {
  		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
  		      var groupSize = groupSizes[base];
  		      // var groupBase = Math.pow(base, groupSize);
  		      var groupBase = groupBases[base];
  		      out = '';
  		      var c = this.clone();
  		      c.negative = 0;
  		      while (!c.isZero()) {
  		        var r = c.modrn(groupBase).toString(base);
  		        c = c.idivn(groupBase);

  		        if (!c.isZero()) {
  		          out = zeros[groupSize - r.length] + r + out;
  		        } else {
  		          out = r + out;
  		        }
  		      }
  		      if (this.isZero()) {
  		        out = '0' + out;
  		      }
  		      while (out.length % padding !== 0) {
  		        out = '0' + out;
  		      }
  		      if (this.negative !== 0) {
  		        out = '-' + out;
  		      }
  		      return out;
  		    }

  		    assert(false, 'Base should be between 2 and 36');
  		  };

  		  BN.prototype.toNumber = function toNumber () {
  		    var ret = this.words[0];
  		    if (this.length === 2) {
  		      ret += this.words[1] * 0x4000000;
  		    } else if (this.length === 3 && this.words[2] === 0x01) {
  		      // NOTE: at this stage it is known that the top bit is set
  		      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
  		    } else if (this.length > 2) {
  		      assert(false, 'Number can only safely store up to 53 bits');
  		    }
  		    return (this.negative !== 0) ? -ret : ret;
  		  };

  		  BN.prototype.toJSON = function toJSON () {
  		    return this.toString(16, 2);
  		  };

  		  if (Buffer) {
  		    BN.prototype.toBuffer = function toBuffer (endian, length) {
  		      return this.toArrayLike(Buffer, endian, length);
  		    };
  		  }

  		  BN.prototype.toArray = function toArray (endian, length) {
  		    return this.toArrayLike(Array, endian, length);
  		  };

  		  var allocate = function allocate (ArrayType, size) {
  		    if (ArrayType.allocUnsafe) {
  		      return ArrayType.allocUnsafe(size);
  		    }
  		    return new ArrayType(size);
  		  };

  		  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
  		    this._strip();

  		    var byteLength = this.byteLength();
  		    var reqLength = length || Math.max(1, byteLength);
  		    assert(byteLength <= reqLength, 'byte array longer than desired length');
  		    assert(reqLength > 0, 'Requested array length <= 0');

  		    var res = allocate(ArrayType, reqLength);
  		    var postfix = endian === 'le' ? 'LE' : 'BE';
  		    this['_toArrayLike' + postfix](res, byteLength);
  		    return res;
  		  };

  		  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
  		    var position = 0;
  		    var carry = 0;

  		    for (var i = 0, shift = 0; i < this.length; i++) {
  		      var word = (this.words[i] << shift) | carry;

  		      res[position++] = word & 0xff;
  		      if (position < res.length) {
  		        res[position++] = (word >> 8) & 0xff;
  		      }
  		      if (position < res.length) {
  		        res[position++] = (word >> 16) & 0xff;
  		      }

  		      if (shift === 6) {
  		        if (position < res.length) {
  		          res[position++] = (word >> 24) & 0xff;
  		        }
  		        carry = 0;
  		        shift = 0;
  		      } else {
  		        carry = word >>> 24;
  		        shift += 2;
  		      }
  		    }

  		    if (position < res.length) {
  		      res[position++] = carry;

  		      while (position < res.length) {
  		        res[position++] = 0;
  		      }
  		    }
  		  };

  		  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
  		    var position = res.length - 1;
  		    var carry = 0;

  		    for (var i = 0, shift = 0; i < this.length; i++) {
  		      var word = (this.words[i] << shift) | carry;

  		      res[position--] = word & 0xff;
  		      if (position >= 0) {
  		        res[position--] = (word >> 8) & 0xff;
  		      }
  		      if (position >= 0) {
  		        res[position--] = (word >> 16) & 0xff;
  		      }

  		      if (shift === 6) {
  		        if (position >= 0) {
  		          res[position--] = (word >> 24) & 0xff;
  		        }
  		        carry = 0;
  		        shift = 0;
  		      } else {
  		        carry = word >>> 24;
  		        shift += 2;
  		      }
  		    }

  		    if (position >= 0) {
  		      res[position--] = carry;

  		      while (position >= 0) {
  		        res[position--] = 0;
  		      }
  		    }
  		  };

  		  if (Math.clz32) {
  		    BN.prototype._countBits = function _countBits (w) {
  		      return 32 - Math.clz32(w);
  		    };
  		  } else {
  		    BN.prototype._countBits = function _countBits (w) {
  		      var t = w;
  		      var r = 0;
  		      if (t >= 0x1000) {
  		        r += 13;
  		        t >>>= 13;
  		      }
  		      if (t >= 0x40) {
  		        r += 7;
  		        t >>>= 7;
  		      }
  		      if (t >= 0x8) {
  		        r += 4;
  		        t >>>= 4;
  		      }
  		      if (t >= 0x02) {
  		        r += 2;
  		        t >>>= 2;
  		      }
  		      return r + t;
  		    };
  		  }

  		  BN.prototype._zeroBits = function _zeroBits (w) {
  		    // Short-cut
  		    if (w === 0) return 26;

  		    var t = w;
  		    var r = 0;
  		    if ((t & 0x1fff) === 0) {
  		      r += 13;
  		      t >>>= 13;
  		    }
  		    if ((t & 0x7f) === 0) {
  		      r += 7;
  		      t >>>= 7;
  		    }
  		    if ((t & 0xf) === 0) {
  		      r += 4;
  		      t >>>= 4;
  		    }
  		    if ((t & 0x3) === 0) {
  		      r += 2;
  		      t >>>= 2;
  		    }
  		    if ((t & 0x1) === 0) {
  		      r++;
  		    }
  		    return r;
  		  };

  		  // Return number of used bits in a BN
  		  BN.prototype.bitLength = function bitLength () {
  		    var w = this.words[this.length - 1];
  		    var hi = this._countBits(w);
  		    return (this.length - 1) * 26 + hi;
  		  };

  		  function toBitArray (num) {
  		    var w = new Array(num.bitLength());

  		    for (var bit = 0; bit < w.length; bit++) {
  		      var off = (bit / 26) | 0;
  		      var wbit = bit % 26;

  		      w[bit] = (num.words[off] >>> wbit) & 0x01;
  		    }

  		    return w;
  		  }

  		  // Number of trailing zero bits
  		  BN.prototype.zeroBits = function zeroBits () {
  		    if (this.isZero()) return 0;

  		    var r = 0;
  		    for (var i = 0; i < this.length; i++) {
  		      var b = this._zeroBits(this.words[i]);
  		      r += b;
  		      if (b !== 26) break;
  		    }
  		    return r;
  		  };

  		  BN.prototype.byteLength = function byteLength () {
  		    return Math.ceil(this.bitLength() / 8);
  		  };

  		  BN.prototype.toTwos = function toTwos (width) {
  		    if (this.negative !== 0) {
  		      return this.abs().inotn(width).iaddn(1);
  		    }
  		    return this.clone();
  		  };

  		  BN.prototype.fromTwos = function fromTwos (width) {
  		    if (this.testn(width - 1)) {
  		      return this.notn(width).iaddn(1).ineg();
  		    }
  		    return this.clone();
  		  };

  		  BN.prototype.isNeg = function isNeg () {
  		    return this.negative !== 0;
  		  };

  		  // Return negative clone of `this`
  		  BN.prototype.neg = function neg () {
  		    return this.clone().ineg();
  		  };

  		  BN.prototype.ineg = function ineg () {
  		    if (!this.isZero()) {
  		      this.negative ^= 1;
  		    }

  		    return this;
  		  };

  		  // Or `num` with `this` in-place
  		  BN.prototype.iuor = function iuor (num) {
  		    while (this.length < num.length) {
  		      this.words[this.length++] = 0;
  		    }

  		    for (var i = 0; i < num.length; i++) {
  		      this.words[i] = this.words[i] | num.words[i];
  		    }

  		    return this._strip();
  		  };

  		  BN.prototype.ior = function ior (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuor(num);
  		  };

  		  // Or `num` with `this`
  		  BN.prototype.or = function or (num) {
  		    if (this.length > num.length) return this.clone().ior(num);
  		    return num.clone().ior(this);
  		  };

  		  BN.prototype.uor = function uor (num) {
  		    if (this.length > num.length) return this.clone().iuor(num);
  		    return num.clone().iuor(this);
  		  };

  		  // And `num` with `this` in-place
  		  BN.prototype.iuand = function iuand (num) {
  		    // b = min-length(num, this)
  		    var b;
  		    if (this.length > num.length) {
  		      b = num;
  		    } else {
  		      b = this;
  		    }

  		    for (var i = 0; i < b.length; i++) {
  		      this.words[i] = this.words[i] & num.words[i];
  		    }

  		    this.length = b.length;

  		    return this._strip();
  		  };

  		  BN.prototype.iand = function iand (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuand(num);
  		  };

  		  // And `num` with `this`
  		  BN.prototype.and = function and (num) {
  		    if (this.length > num.length) return this.clone().iand(num);
  		    return num.clone().iand(this);
  		  };

  		  BN.prototype.uand = function uand (num) {
  		    if (this.length > num.length) return this.clone().iuand(num);
  		    return num.clone().iuand(this);
  		  };

  		  // Xor `num` with `this` in-place
  		  BN.prototype.iuxor = function iuxor (num) {
  		    // a.length > b.length
  		    var a;
  		    var b;
  		    if (this.length > num.length) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    for (var i = 0; i < b.length; i++) {
  		      this.words[i] = a.words[i] ^ b.words[i];
  		    }

  		    if (this !== a) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    this.length = a.length;

  		    return this._strip();
  		  };

  		  BN.prototype.ixor = function ixor (num) {
  		    assert((this.negative | num.negative) === 0);
  		    return this.iuxor(num);
  		  };

  		  // Xor `num` with `this`
  		  BN.prototype.xor = function xor (num) {
  		    if (this.length > num.length) return this.clone().ixor(num);
  		    return num.clone().ixor(this);
  		  };

  		  BN.prototype.uxor = function uxor (num) {
  		    if (this.length > num.length) return this.clone().iuxor(num);
  		    return num.clone().iuxor(this);
  		  };

  		  // Not ``this`` with ``width`` bitwidth
  		  BN.prototype.inotn = function inotn (width) {
  		    assert(typeof width === 'number' && width >= 0);

  		    var bytesNeeded = Math.ceil(width / 26) | 0;
  		    var bitsLeft = width % 26;

  		    // Extend the buffer with leading zeroes
  		    this._expand(bytesNeeded);

  		    if (bitsLeft > 0) {
  		      bytesNeeded--;
  		    }

  		    // Handle complete words
  		    for (var i = 0; i < bytesNeeded; i++) {
  		      this.words[i] = ~this.words[i] & 0x3ffffff;
  		    }

  		    // Handle the residue
  		    if (bitsLeft > 0) {
  		      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
  		    }

  		    // And remove leading zeroes
  		    return this._strip();
  		  };

  		  BN.prototype.notn = function notn (width) {
  		    return this.clone().inotn(width);
  		  };

  		  // Set `bit` of `this`
  		  BN.prototype.setn = function setn (bit, val) {
  		    assert(typeof bit === 'number' && bit >= 0);

  		    var off = (bit / 26) | 0;
  		    var wbit = bit % 26;

  		    this._expand(off + 1);

  		    if (val) {
  		      this.words[off] = this.words[off] | (1 << wbit);
  		    } else {
  		      this.words[off] = this.words[off] & ~(1 << wbit);
  		    }

  		    return this._strip();
  		  };

  		  // Add `num` to `this` in-place
  		  BN.prototype.iadd = function iadd (num) {
  		    var r;

  		    // negative + positive
  		    if (this.negative !== 0 && num.negative === 0) {
  		      this.negative = 0;
  		      r = this.isub(num);
  		      this.negative ^= 1;
  		      return this._normSign();

  		    // positive + negative
  		    } else if (this.negative === 0 && num.negative !== 0) {
  		      num.negative = 0;
  		      r = this.isub(num);
  		      num.negative = 1;
  		      return r._normSign();
  		    }

  		    // a.length > b.length
  		    var a, b;
  		    if (this.length > num.length) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    var carry = 0;
  		    for (var i = 0; i < b.length; i++) {
  		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
  		      this.words[i] = r & 0x3ffffff;
  		      carry = r >>> 26;
  		    }
  		    for (; carry !== 0 && i < a.length; i++) {
  		      r = (a.words[i] | 0) + carry;
  		      this.words[i] = r & 0x3ffffff;
  		      carry = r >>> 26;
  		    }

  		    this.length = a.length;
  		    if (carry !== 0) {
  		      this.words[this.length] = carry;
  		      this.length++;
  		    // Copy the rest of the words
  		    } else if (a !== this) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    return this;
  		  };

  		  // Add `num` to `this`
  		  BN.prototype.add = function add (num) {
  		    var res;
  		    if (num.negative !== 0 && this.negative === 0) {
  		      num.negative = 0;
  		      res = this.sub(num);
  		      num.negative ^= 1;
  		      return res;
  		    } else if (num.negative === 0 && this.negative !== 0) {
  		      this.negative = 0;
  		      res = num.sub(this);
  		      this.negative = 1;
  		      return res;
  		    }

  		    if (this.length > num.length) return this.clone().iadd(num);

  		    return num.clone().iadd(this);
  		  };

  		  // Subtract `num` from `this` in-place
  		  BN.prototype.isub = function isub (num) {
  		    // this - (-num) = this + num
  		    if (num.negative !== 0) {
  		      num.negative = 0;
  		      var r = this.iadd(num);
  		      num.negative = 1;
  		      return r._normSign();

  		    // -this - num = -(this + num)
  		    } else if (this.negative !== 0) {
  		      this.negative = 0;
  		      this.iadd(num);
  		      this.negative = 1;
  		      return this._normSign();
  		    }

  		    // At this point both numbers are positive
  		    var cmp = this.cmp(num);

  		    // Optimization - zeroify
  		    if (cmp === 0) {
  		      this.negative = 0;
  		      this.length = 1;
  		      this.words[0] = 0;
  		      return this;
  		    }

  		    // a > b
  		    var a, b;
  		    if (cmp > 0) {
  		      a = this;
  		      b = num;
  		    } else {
  		      a = num;
  		      b = this;
  		    }

  		    var carry = 0;
  		    for (var i = 0; i < b.length; i++) {
  		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
  		      carry = r >> 26;
  		      this.words[i] = r & 0x3ffffff;
  		    }
  		    for (; carry !== 0 && i < a.length; i++) {
  		      r = (a.words[i] | 0) + carry;
  		      carry = r >> 26;
  		      this.words[i] = r & 0x3ffffff;
  		    }

  		    // Copy rest of the words
  		    if (carry === 0 && i < a.length && a !== this) {
  		      for (; i < a.length; i++) {
  		        this.words[i] = a.words[i];
  		      }
  		    }

  		    this.length = Math.max(this.length, i);

  		    if (a !== this) {
  		      this.negative = 1;
  		    }

  		    return this._strip();
  		  };

  		  // Subtract `num` from `this`
  		  BN.prototype.sub = function sub (num) {
  		    return this.clone().isub(num);
  		  };

  		  function smallMulTo (self, num, out) {
  		    out.negative = num.negative ^ self.negative;
  		    var len = (self.length + num.length) | 0;
  		    out.length = len;
  		    len = (len - 1) | 0;

  		    // Peel one iteration (compiler can't do it, because of code complexity)
  		    var a = self.words[0] | 0;
  		    var b = num.words[0] | 0;
  		    var r = a * b;

  		    var lo = r & 0x3ffffff;
  		    var carry = (r / 0x4000000) | 0;
  		    out.words[0] = lo;

  		    for (var k = 1; k < len; k++) {
  		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
  		      // note that ncarry could be >= 0x3ffffff
  		      var ncarry = carry >>> 26;
  		      var rword = carry & 0x3ffffff;
  		      var maxJ = Math.min(k, num.length - 1);
  		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
  		        var i = (k - j) | 0;
  		        a = self.words[i] | 0;
  		        b = num.words[j] | 0;
  		        r = a * b + rword;
  		        ncarry += (r / 0x4000000) | 0;
  		        rword = r & 0x3ffffff;
  		      }
  		      out.words[k] = rword | 0;
  		      carry = ncarry | 0;
  		    }
  		    if (carry !== 0) {
  		      out.words[k] = carry | 0;
  		    } else {
  		      out.length--;
  		    }

  		    return out._strip();
  		  }

  		  // TODO(indutny): it may be reasonable to omit it for users who don't need
  		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  		  // multiplication (like elliptic secp256k1).
  		  var comb10MulTo = function comb10MulTo (self, num, out) {
  		    var a = self.words;
  		    var b = num.words;
  		    var o = out.words;
  		    var c = 0;
  		    var lo;
  		    var mid;
  		    var hi;
  		    var a0 = a[0] | 0;
  		    var al0 = a0 & 0x1fff;
  		    var ah0 = a0 >>> 13;
  		    var a1 = a[1] | 0;
  		    var al1 = a1 & 0x1fff;
  		    var ah1 = a1 >>> 13;
  		    var a2 = a[2] | 0;
  		    var al2 = a2 & 0x1fff;
  		    var ah2 = a2 >>> 13;
  		    var a3 = a[3] | 0;
  		    var al3 = a3 & 0x1fff;
  		    var ah3 = a3 >>> 13;
  		    var a4 = a[4] | 0;
  		    var al4 = a4 & 0x1fff;
  		    var ah4 = a4 >>> 13;
  		    var a5 = a[5] | 0;
  		    var al5 = a5 & 0x1fff;
  		    var ah5 = a5 >>> 13;
  		    var a6 = a[6] | 0;
  		    var al6 = a6 & 0x1fff;
  		    var ah6 = a6 >>> 13;
  		    var a7 = a[7] | 0;
  		    var al7 = a7 & 0x1fff;
  		    var ah7 = a7 >>> 13;
  		    var a8 = a[8] | 0;
  		    var al8 = a8 & 0x1fff;
  		    var ah8 = a8 >>> 13;
  		    var a9 = a[9] | 0;
  		    var al9 = a9 & 0x1fff;
  		    var ah9 = a9 >>> 13;
  		    var b0 = b[0] | 0;
  		    var bl0 = b0 & 0x1fff;
  		    var bh0 = b0 >>> 13;
  		    var b1 = b[1] | 0;
  		    var bl1 = b1 & 0x1fff;
  		    var bh1 = b1 >>> 13;
  		    var b2 = b[2] | 0;
  		    var bl2 = b2 & 0x1fff;
  		    var bh2 = b2 >>> 13;
  		    var b3 = b[3] | 0;
  		    var bl3 = b3 & 0x1fff;
  		    var bh3 = b3 >>> 13;
  		    var b4 = b[4] | 0;
  		    var bl4 = b4 & 0x1fff;
  		    var bh4 = b4 >>> 13;
  		    var b5 = b[5] | 0;
  		    var bl5 = b5 & 0x1fff;
  		    var bh5 = b5 >>> 13;
  		    var b6 = b[6] | 0;
  		    var bl6 = b6 & 0x1fff;
  		    var bh6 = b6 >>> 13;
  		    var b7 = b[7] | 0;
  		    var bl7 = b7 & 0x1fff;
  		    var bh7 = b7 >>> 13;
  		    var b8 = b[8] | 0;
  		    var bl8 = b8 & 0x1fff;
  		    var bh8 = b8 >>> 13;
  		    var b9 = b[9] | 0;
  		    var bl9 = b9 & 0x1fff;
  		    var bh9 = b9 >>> 13;

  		    out.negative = self.negative ^ num.negative;
  		    out.length = 19;
  		    /* k = 0 */
  		    lo = Math.imul(al0, bl0);
  		    mid = Math.imul(al0, bh0);
  		    mid = (mid + Math.imul(ah0, bl0)) | 0;
  		    hi = Math.imul(ah0, bh0);
  		    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
  		    w0 &= 0x3ffffff;
  		    /* k = 1 */
  		    lo = Math.imul(al1, bl0);
  		    mid = Math.imul(al1, bh0);
  		    mid = (mid + Math.imul(ah1, bl0)) | 0;
  		    hi = Math.imul(ah1, bh0);
  		    lo = (lo + Math.imul(al0, bl1)) | 0;
  		    mid = (mid + Math.imul(al0, bh1)) | 0;
  		    mid = (mid + Math.imul(ah0, bl1)) | 0;
  		    hi = (hi + Math.imul(ah0, bh1)) | 0;
  		    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
  		    w1 &= 0x3ffffff;
  		    /* k = 2 */
  		    lo = Math.imul(al2, bl0);
  		    mid = Math.imul(al2, bh0);
  		    mid = (mid + Math.imul(ah2, bl0)) | 0;
  		    hi = Math.imul(ah2, bh0);
  		    lo = (lo + Math.imul(al1, bl1)) | 0;
  		    mid = (mid + Math.imul(al1, bh1)) | 0;
  		    mid = (mid + Math.imul(ah1, bl1)) | 0;
  		    hi = (hi + Math.imul(ah1, bh1)) | 0;
  		    lo = (lo + Math.imul(al0, bl2)) | 0;
  		    mid = (mid + Math.imul(al0, bh2)) | 0;
  		    mid = (mid + Math.imul(ah0, bl2)) | 0;
  		    hi = (hi + Math.imul(ah0, bh2)) | 0;
  		    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
  		    w2 &= 0x3ffffff;
  		    /* k = 3 */
  		    lo = Math.imul(al3, bl0);
  		    mid = Math.imul(al3, bh0);
  		    mid = (mid + Math.imul(ah3, bl0)) | 0;
  		    hi = Math.imul(ah3, bh0);
  		    lo = (lo + Math.imul(al2, bl1)) | 0;
  		    mid = (mid + Math.imul(al2, bh1)) | 0;
  		    mid = (mid + Math.imul(ah2, bl1)) | 0;
  		    hi = (hi + Math.imul(ah2, bh1)) | 0;
  		    lo = (lo + Math.imul(al1, bl2)) | 0;
  		    mid = (mid + Math.imul(al1, bh2)) | 0;
  		    mid = (mid + Math.imul(ah1, bl2)) | 0;
  		    hi = (hi + Math.imul(ah1, bh2)) | 0;
  		    lo = (lo + Math.imul(al0, bl3)) | 0;
  		    mid = (mid + Math.imul(al0, bh3)) | 0;
  		    mid = (mid + Math.imul(ah0, bl3)) | 0;
  		    hi = (hi + Math.imul(ah0, bh3)) | 0;
  		    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
  		    w3 &= 0x3ffffff;
  		    /* k = 4 */
  		    lo = Math.imul(al4, bl0);
  		    mid = Math.imul(al4, bh0);
  		    mid = (mid + Math.imul(ah4, bl0)) | 0;
  		    hi = Math.imul(ah4, bh0);
  		    lo = (lo + Math.imul(al3, bl1)) | 0;
  		    mid = (mid + Math.imul(al3, bh1)) | 0;
  		    mid = (mid + Math.imul(ah3, bl1)) | 0;
  		    hi = (hi + Math.imul(ah3, bh1)) | 0;
  		    lo = (lo + Math.imul(al2, bl2)) | 0;
  		    mid = (mid + Math.imul(al2, bh2)) | 0;
  		    mid = (mid + Math.imul(ah2, bl2)) | 0;
  		    hi = (hi + Math.imul(ah2, bh2)) | 0;
  		    lo = (lo + Math.imul(al1, bl3)) | 0;
  		    mid = (mid + Math.imul(al1, bh3)) | 0;
  		    mid = (mid + Math.imul(ah1, bl3)) | 0;
  		    hi = (hi + Math.imul(ah1, bh3)) | 0;
  		    lo = (lo + Math.imul(al0, bl4)) | 0;
  		    mid = (mid + Math.imul(al0, bh4)) | 0;
  		    mid = (mid + Math.imul(ah0, bl4)) | 0;
  		    hi = (hi + Math.imul(ah0, bh4)) | 0;
  		    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
  		    w4 &= 0x3ffffff;
  		    /* k = 5 */
  		    lo = Math.imul(al5, bl0);
  		    mid = Math.imul(al5, bh0);
  		    mid = (mid + Math.imul(ah5, bl0)) | 0;
  		    hi = Math.imul(ah5, bh0);
  		    lo = (lo + Math.imul(al4, bl1)) | 0;
  		    mid = (mid + Math.imul(al4, bh1)) | 0;
  		    mid = (mid + Math.imul(ah4, bl1)) | 0;
  		    hi = (hi + Math.imul(ah4, bh1)) | 0;
  		    lo = (lo + Math.imul(al3, bl2)) | 0;
  		    mid = (mid + Math.imul(al3, bh2)) | 0;
  		    mid = (mid + Math.imul(ah3, bl2)) | 0;
  		    hi = (hi + Math.imul(ah3, bh2)) | 0;
  		    lo = (lo + Math.imul(al2, bl3)) | 0;
  		    mid = (mid + Math.imul(al2, bh3)) | 0;
  		    mid = (mid + Math.imul(ah2, bl3)) | 0;
  		    hi = (hi + Math.imul(ah2, bh3)) | 0;
  		    lo = (lo + Math.imul(al1, bl4)) | 0;
  		    mid = (mid + Math.imul(al1, bh4)) | 0;
  		    mid = (mid + Math.imul(ah1, bl4)) | 0;
  		    hi = (hi + Math.imul(ah1, bh4)) | 0;
  		    lo = (lo + Math.imul(al0, bl5)) | 0;
  		    mid = (mid + Math.imul(al0, bh5)) | 0;
  		    mid = (mid + Math.imul(ah0, bl5)) | 0;
  		    hi = (hi + Math.imul(ah0, bh5)) | 0;
  		    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
  		    w5 &= 0x3ffffff;
  		    /* k = 6 */
  		    lo = Math.imul(al6, bl0);
  		    mid = Math.imul(al6, bh0);
  		    mid = (mid + Math.imul(ah6, bl0)) | 0;
  		    hi = Math.imul(ah6, bh0);
  		    lo = (lo + Math.imul(al5, bl1)) | 0;
  		    mid = (mid + Math.imul(al5, bh1)) | 0;
  		    mid = (mid + Math.imul(ah5, bl1)) | 0;
  		    hi = (hi + Math.imul(ah5, bh1)) | 0;
  		    lo = (lo + Math.imul(al4, bl2)) | 0;
  		    mid = (mid + Math.imul(al4, bh2)) | 0;
  		    mid = (mid + Math.imul(ah4, bl2)) | 0;
  		    hi = (hi + Math.imul(ah4, bh2)) | 0;
  		    lo = (lo + Math.imul(al3, bl3)) | 0;
  		    mid = (mid + Math.imul(al3, bh3)) | 0;
  		    mid = (mid + Math.imul(ah3, bl3)) | 0;
  		    hi = (hi + Math.imul(ah3, bh3)) | 0;
  		    lo = (lo + Math.imul(al2, bl4)) | 0;
  		    mid = (mid + Math.imul(al2, bh4)) | 0;
  		    mid = (mid + Math.imul(ah2, bl4)) | 0;
  		    hi = (hi + Math.imul(ah2, bh4)) | 0;
  		    lo = (lo + Math.imul(al1, bl5)) | 0;
  		    mid = (mid + Math.imul(al1, bh5)) | 0;
  		    mid = (mid + Math.imul(ah1, bl5)) | 0;
  		    hi = (hi + Math.imul(ah1, bh5)) | 0;
  		    lo = (lo + Math.imul(al0, bl6)) | 0;
  		    mid = (mid + Math.imul(al0, bh6)) | 0;
  		    mid = (mid + Math.imul(ah0, bl6)) | 0;
  		    hi = (hi + Math.imul(ah0, bh6)) | 0;
  		    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
  		    w6 &= 0x3ffffff;
  		    /* k = 7 */
  		    lo = Math.imul(al7, bl0);
  		    mid = Math.imul(al7, bh0);
  		    mid = (mid + Math.imul(ah7, bl0)) | 0;
  		    hi = Math.imul(ah7, bh0);
  		    lo = (lo + Math.imul(al6, bl1)) | 0;
  		    mid = (mid + Math.imul(al6, bh1)) | 0;
  		    mid = (mid + Math.imul(ah6, bl1)) | 0;
  		    hi = (hi + Math.imul(ah6, bh1)) | 0;
  		    lo = (lo + Math.imul(al5, bl2)) | 0;
  		    mid = (mid + Math.imul(al5, bh2)) | 0;
  		    mid = (mid + Math.imul(ah5, bl2)) | 0;
  		    hi = (hi + Math.imul(ah5, bh2)) | 0;
  		    lo = (lo + Math.imul(al4, bl3)) | 0;
  		    mid = (mid + Math.imul(al4, bh3)) | 0;
  		    mid = (mid + Math.imul(ah4, bl3)) | 0;
  		    hi = (hi + Math.imul(ah4, bh3)) | 0;
  		    lo = (lo + Math.imul(al3, bl4)) | 0;
  		    mid = (mid + Math.imul(al3, bh4)) | 0;
  		    mid = (mid + Math.imul(ah3, bl4)) | 0;
  		    hi = (hi + Math.imul(ah3, bh4)) | 0;
  		    lo = (lo + Math.imul(al2, bl5)) | 0;
  		    mid = (mid + Math.imul(al2, bh5)) | 0;
  		    mid = (mid + Math.imul(ah2, bl5)) | 0;
  		    hi = (hi + Math.imul(ah2, bh5)) | 0;
  		    lo = (lo + Math.imul(al1, bl6)) | 0;
  		    mid = (mid + Math.imul(al1, bh6)) | 0;
  		    mid = (mid + Math.imul(ah1, bl6)) | 0;
  		    hi = (hi + Math.imul(ah1, bh6)) | 0;
  		    lo = (lo + Math.imul(al0, bl7)) | 0;
  		    mid = (mid + Math.imul(al0, bh7)) | 0;
  		    mid = (mid + Math.imul(ah0, bl7)) | 0;
  		    hi = (hi + Math.imul(ah0, bh7)) | 0;
  		    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
  		    w7 &= 0x3ffffff;
  		    /* k = 8 */
  		    lo = Math.imul(al8, bl0);
  		    mid = Math.imul(al8, bh0);
  		    mid = (mid + Math.imul(ah8, bl0)) | 0;
  		    hi = Math.imul(ah8, bh0);
  		    lo = (lo + Math.imul(al7, bl1)) | 0;
  		    mid = (mid + Math.imul(al7, bh1)) | 0;
  		    mid = (mid + Math.imul(ah7, bl1)) | 0;
  		    hi = (hi + Math.imul(ah7, bh1)) | 0;
  		    lo = (lo + Math.imul(al6, bl2)) | 0;
  		    mid = (mid + Math.imul(al6, bh2)) | 0;
  		    mid = (mid + Math.imul(ah6, bl2)) | 0;
  		    hi = (hi + Math.imul(ah6, bh2)) | 0;
  		    lo = (lo + Math.imul(al5, bl3)) | 0;
  		    mid = (mid + Math.imul(al5, bh3)) | 0;
  		    mid = (mid + Math.imul(ah5, bl3)) | 0;
  		    hi = (hi + Math.imul(ah5, bh3)) | 0;
  		    lo = (lo + Math.imul(al4, bl4)) | 0;
  		    mid = (mid + Math.imul(al4, bh4)) | 0;
  		    mid = (mid + Math.imul(ah4, bl4)) | 0;
  		    hi = (hi + Math.imul(ah4, bh4)) | 0;
  		    lo = (lo + Math.imul(al3, bl5)) | 0;
  		    mid = (mid + Math.imul(al3, bh5)) | 0;
  		    mid = (mid + Math.imul(ah3, bl5)) | 0;
  		    hi = (hi + Math.imul(ah3, bh5)) | 0;
  		    lo = (lo + Math.imul(al2, bl6)) | 0;
  		    mid = (mid + Math.imul(al2, bh6)) | 0;
  		    mid = (mid + Math.imul(ah2, bl6)) | 0;
  		    hi = (hi + Math.imul(ah2, bh6)) | 0;
  		    lo = (lo + Math.imul(al1, bl7)) | 0;
  		    mid = (mid + Math.imul(al1, bh7)) | 0;
  		    mid = (mid + Math.imul(ah1, bl7)) | 0;
  		    hi = (hi + Math.imul(ah1, bh7)) | 0;
  		    lo = (lo + Math.imul(al0, bl8)) | 0;
  		    mid = (mid + Math.imul(al0, bh8)) | 0;
  		    mid = (mid + Math.imul(ah0, bl8)) | 0;
  		    hi = (hi + Math.imul(ah0, bh8)) | 0;
  		    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
  		    w8 &= 0x3ffffff;
  		    /* k = 9 */
  		    lo = Math.imul(al9, bl0);
  		    mid = Math.imul(al9, bh0);
  		    mid = (mid + Math.imul(ah9, bl0)) | 0;
  		    hi = Math.imul(ah9, bh0);
  		    lo = (lo + Math.imul(al8, bl1)) | 0;
  		    mid = (mid + Math.imul(al8, bh1)) | 0;
  		    mid = (mid + Math.imul(ah8, bl1)) | 0;
  		    hi = (hi + Math.imul(ah8, bh1)) | 0;
  		    lo = (lo + Math.imul(al7, bl2)) | 0;
  		    mid = (mid + Math.imul(al7, bh2)) | 0;
  		    mid = (mid + Math.imul(ah7, bl2)) | 0;
  		    hi = (hi + Math.imul(ah7, bh2)) | 0;
  		    lo = (lo + Math.imul(al6, bl3)) | 0;
  		    mid = (mid + Math.imul(al6, bh3)) | 0;
  		    mid = (mid + Math.imul(ah6, bl3)) | 0;
  		    hi = (hi + Math.imul(ah6, bh3)) | 0;
  		    lo = (lo + Math.imul(al5, bl4)) | 0;
  		    mid = (mid + Math.imul(al5, bh4)) | 0;
  		    mid = (mid + Math.imul(ah5, bl4)) | 0;
  		    hi = (hi + Math.imul(ah5, bh4)) | 0;
  		    lo = (lo + Math.imul(al4, bl5)) | 0;
  		    mid = (mid + Math.imul(al4, bh5)) | 0;
  		    mid = (mid + Math.imul(ah4, bl5)) | 0;
  		    hi = (hi + Math.imul(ah4, bh5)) | 0;
  		    lo = (lo + Math.imul(al3, bl6)) | 0;
  		    mid = (mid + Math.imul(al3, bh6)) | 0;
  		    mid = (mid + Math.imul(ah3, bl6)) | 0;
  		    hi = (hi + Math.imul(ah3, bh6)) | 0;
  		    lo = (lo + Math.imul(al2, bl7)) | 0;
  		    mid = (mid + Math.imul(al2, bh7)) | 0;
  		    mid = (mid + Math.imul(ah2, bl7)) | 0;
  		    hi = (hi + Math.imul(ah2, bh7)) | 0;
  		    lo = (lo + Math.imul(al1, bl8)) | 0;
  		    mid = (mid + Math.imul(al1, bh8)) | 0;
  		    mid = (mid + Math.imul(ah1, bl8)) | 0;
  		    hi = (hi + Math.imul(ah1, bh8)) | 0;
  		    lo = (lo + Math.imul(al0, bl9)) | 0;
  		    mid = (mid + Math.imul(al0, bh9)) | 0;
  		    mid = (mid + Math.imul(ah0, bl9)) | 0;
  		    hi = (hi + Math.imul(ah0, bh9)) | 0;
  		    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
  		    w9 &= 0x3ffffff;
  		    /* k = 10 */
  		    lo = Math.imul(al9, bl1);
  		    mid = Math.imul(al9, bh1);
  		    mid = (mid + Math.imul(ah9, bl1)) | 0;
  		    hi = Math.imul(ah9, bh1);
  		    lo = (lo + Math.imul(al8, bl2)) | 0;
  		    mid = (mid + Math.imul(al8, bh2)) | 0;
  		    mid = (mid + Math.imul(ah8, bl2)) | 0;
  		    hi = (hi + Math.imul(ah8, bh2)) | 0;
  		    lo = (lo + Math.imul(al7, bl3)) | 0;
  		    mid = (mid + Math.imul(al7, bh3)) | 0;
  		    mid = (mid + Math.imul(ah7, bl3)) | 0;
  		    hi = (hi + Math.imul(ah7, bh3)) | 0;
  		    lo = (lo + Math.imul(al6, bl4)) | 0;
  		    mid = (mid + Math.imul(al6, bh4)) | 0;
  		    mid = (mid + Math.imul(ah6, bl4)) | 0;
  		    hi = (hi + Math.imul(ah6, bh4)) | 0;
  		    lo = (lo + Math.imul(al5, bl5)) | 0;
  		    mid = (mid + Math.imul(al5, bh5)) | 0;
  		    mid = (mid + Math.imul(ah5, bl5)) | 0;
  		    hi = (hi + Math.imul(ah5, bh5)) | 0;
  		    lo = (lo + Math.imul(al4, bl6)) | 0;
  		    mid = (mid + Math.imul(al4, bh6)) | 0;
  		    mid = (mid + Math.imul(ah4, bl6)) | 0;
  		    hi = (hi + Math.imul(ah4, bh6)) | 0;
  		    lo = (lo + Math.imul(al3, bl7)) | 0;
  		    mid = (mid + Math.imul(al3, bh7)) | 0;
  		    mid = (mid + Math.imul(ah3, bl7)) | 0;
  		    hi = (hi + Math.imul(ah3, bh7)) | 0;
  		    lo = (lo + Math.imul(al2, bl8)) | 0;
  		    mid = (mid + Math.imul(al2, bh8)) | 0;
  		    mid = (mid + Math.imul(ah2, bl8)) | 0;
  		    hi = (hi + Math.imul(ah2, bh8)) | 0;
  		    lo = (lo + Math.imul(al1, bl9)) | 0;
  		    mid = (mid + Math.imul(al1, bh9)) | 0;
  		    mid = (mid + Math.imul(ah1, bl9)) | 0;
  		    hi = (hi + Math.imul(ah1, bh9)) | 0;
  		    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
  		    w10 &= 0x3ffffff;
  		    /* k = 11 */
  		    lo = Math.imul(al9, bl2);
  		    mid = Math.imul(al9, bh2);
  		    mid = (mid + Math.imul(ah9, bl2)) | 0;
  		    hi = Math.imul(ah9, bh2);
  		    lo = (lo + Math.imul(al8, bl3)) | 0;
  		    mid = (mid + Math.imul(al8, bh3)) | 0;
  		    mid = (mid + Math.imul(ah8, bl3)) | 0;
  		    hi = (hi + Math.imul(ah8, bh3)) | 0;
  		    lo = (lo + Math.imul(al7, bl4)) | 0;
  		    mid = (mid + Math.imul(al7, bh4)) | 0;
  		    mid = (mid + Math.imul(ah7, bl4)) | 0;
  		    hi = (hi + Math.imul(ah7, bh4)) | 0;
  		    lo = (lo + Math.imul(al6, bl5)) | 0;
  		    mid = (mid + Math.imul(al6, bh5)) | 0;
  		    mid = (mid + Math.imul(ah6, bl5)) | 0;
  		    hi = (hi + Math.imul(ah6, bh5)) | 0;
  		    lo = (lo + Math.imul(al5, bl6)) | 0;
  		    mid = (mid + Math.imul(al5, bh6)) | 0;
  		    mid = (mid + Math.imul(ah5, bl6)) | 0;
  		    hi = (hi + Math.imul(ah5, bh6)) | 0;
  		    lo = (lo + Math.imul(al4, bl7)) | 0;
  		    mid = (mid + Math.imul(al4, bh7)) | 0;
  		    mid = (mid + Math.imul(ah4, bl7)) | 0;
  		    hi = (hi + Math.imul(ah4, bh7)) | 0;
  		    lo = (lo + Math.imul(al3, bl8)) | 0;
  		    mid = (mid + Math.imul(al3, bh8)) | 0;
  		    mid = (mid + Math.imul(ah3, bl8)) | 0;
  		    hi = (hi + Math.imul(ah3, bh8)) | 0;
  		    lo = (lo + Math.imul(al2, bl9)) | 0;
  		    mid = (mid + Math.imul(al2, bh9)) | 0;
  		    mid = (mid + Math.imul(ah2, bl9)) | 0;
  		    hi = (hi + Math.imul(ah2, bh9)) | 0;
  		    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
  		    w11 &= 0x3ffffff;
  		    /* k = 12 */
  		    lo = Math.imul(al9, bl3);
  		    mid = Math.imul(al9, bh3);
  		    mid = (mid + Math.imul(ah9, bl3)) | 0;
  		    hi = Math.imul(ah9, bh3);
  		    lo = (lo + Math.imul(al8, bl4)) | 0;
  		    mid = (mid + Math.imul(al8, bh4)) | 0;
  		    mid = (mid + Math.imul(ah8, bl4)) | 0;
  		    hi = (hi + Math.imul(ah8, bh4)) | 0;
  		    lo = (lo + Math.imul(al7, bl5)) | 0;
  		    mid = (mid + Math.imul(al7, bh5)) | 0;
  		    mid = (mid + Math.imul(ah7, bl5)) | 0;
  		    hi = (hi + Math.imul(ah7, bh5)) | 0;
  		    lo = (lo + Math.imul(al6, bl6)) | 0;
  		    mid = (mid + Math.imul(al6, bh6)) | 0;
  		    mid = (mid + Math.imul(ah6, bl6)) | 0;
  		    hi = (hi + Math.imul(ah6, bh6)) | 0;
  		    lo = (lo + Math.imul(al5, bl7)) | 0;
  		    mid = (mid + Math.imul(al5, bh7)) | 0;
  		    mid = (mid + Math.imul(ah5, bl7)) | 0;
  		    hi = (hi + Math.imul(ah5, bh7)) | 0;
  		    lo = (lo + Math.imul(al4, bl8)) | 0;
  		    mid = (mid + Math.imul(al4, bh8)) | 0;
  		    mid = (mid + Math.imul(ah4, bl8)) | 0;
  		    hi = (hi + Math.imul(ah4, bh8)) | 0;
  		    lo = (lo + Math.imul(al3, bl9)) | 0;
  		    mid = (mid + Math.imul(al3, bh9)) | 0;
  		    mid = (mid + Math.imul(ah3, bl9)) | 0;
  		    hi = (hi + Math.imul(ah3, bh9)) | 0;
  		    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
  		    w12 &= 0x3ffffff;
  		    /* k = 13 */
  		    lo = Math.imul(al9, bl4);
  		    mid = Math.imul(al9, bh4);
  		    mid = (mid + Math.imul(ah9, bl4)) | 0;
  		    hi = Math.imul(ah9, bh4);
  		    lo = (lo + Math.imul(al8, bl5)) | 0;
  		    mid = (mid + Math.imul(al8, bh5)) | 0;
  		    mid = (mid + Math.imul(ah8, bl5)) | 0;
  		    hi = (hi + Math.imul(ah8, bh5)) | 0;
  		    lo = (lo + Math.imul(al7, bl6)) | 0;
  		    mid = (mid + Math.imul(al7, bh6)) | 0;
  		    mid = (mid + Math.imul(ah7, bl6)) | 0;
  		    hi = (hi + Math.imul(ah7, bh6)) | 0;
  		    lo = (lo + Math.imul(al6, bl7)) | 0;
  		    mid = (mid + Math.imul(al6, bh7)) | 0;
  		    mid = (mid + Math.imul(ah6, bl7)) | 0;
  		    hi = (hi + Math.imul(ah6, bh7)) | 0;
  		    lo = (lo + Math.imul(al5, bl8)) | 0;
  		    mid = (mid + Math.imul(al5, bh8)) | 0;
  		    mid = (mid + Math.imul(ah5, bl8)) | 0;
  		    hi = (hi + Math.imul(ah5, bh8)) | 0;
  		    lo = (lo + Math.imul(al4, bl9)) | 0;
  		    mid = (mid + Math.imul(al4, bh9)) | 0;
  		    mid = (mid + Math.imul(ah4, bl9)) | 0;
  		    hi = (hi + Math.imul(ah4, bh9)) | 0;
  		    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
  		    w13 &= 0x3ffffff;
  		    /* k = 14 */
  		    lo = Math.imul(al9, bl5);
  		    mid = Math.imul(al9, bh5);
  		    mid = (mid + Math.imul(ah9, bl5)) | 0;
  		    hi = Math.imul(ah9, bh5);
  		    lo = (lo + Math.imul(al8, bl6)) | 0;
  		    mid = (mid + Math.imul(al8, bh6)) | 0;
  		    mid = (mid + Math.imul(ah8, bl6)) | 0;
  		    hi = (hi + Math.imul(ah8, bh6)) | 0;
  		    lo = (lo + Math.imul(al7, bl7)) | 0;
  		    mid = (mid + Math.imul(al7, bh7)) | 0;
  		    mid = (mid + Math.imul(ah7, bl7)) | 0;
  		    hi = (hi + Math.imul(ah7, bh7)) | 0;
  		    lo = (lo + Math.imul(al6, bl8)) | 0;
  		    mid = (mid + Math.imul(al6, bh8)) | 0;
  		    mid = (mid + Math.imul(ah6, bl8)) | 0;
  		    hi = (hi + Math.imul(ah6, bh8)) | 0;
  		    lo = (lo + Math.imul(al5, bl9)) | 0;
  		    mid = (mid + Math.imul(al5, bh9)) | 0;
  		    mid = (mid + Math.imul(ah5, bl9)) | 0;
  		    hi = (hi + Math.imul(ah5, bh9)) | 0;
  		    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
  		    w14 &= 0x3ffffff;
  		    /* k = 15 */
  		    lo = Math.imul(al9, bl6);
  		    mid = Math.imul(al9, bh6);
  		    mid = (mid + Math.imul(ah9, bl6)) | 0;
  		    hi = Math.imul(ah9, bh6);
  		    lo = (lo + Math.imul(al8, bl7)) | 0;
  		    mid = (mid + Math.imul(al8, bh7)) | 0;
  		    mid = (mid + Math.imul(ah8, bl7)) | 0;
  		    hi = (hi + Math.imul(ah8, bh7)) | 0;
  		    lo = (lo + Math.imul(al7, bl8)) | 0;
  		    mid = (mid + Math.imul(al7, bh8)) | 0;
  		    mid = (mid + Math.imul(ah7, bl8)) | 0;
  		    hi = (hi + Math.imul(ah7, bh8)) | 0;
  		    lo = (lo + Math.imul(al6, bl9)) | 0;
  		    mid = (mid + Math.imul(al6, bh9)) | 0;
  		    mid = (mid + Math.imul(ah6, bl9)) | 0;
  		    hi = (hi + Math.imul(ah6, bh9)) | 0;
  		    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
  		    w15 &= 0x3ffffff;
  		    /* k = 16 */
  		    lo = Math.imul(al9, bl7);
  		    mid = Math.imul(al9, bh7);
  		    mid = (mid + Math.imul(ah9, bl7)) | 0;
  		    hi = Math.imul(ah9, bh7);
  		    lo = (lo + Math.imul(al8, bl8)) | 0;
  		    mid = (mid + Math.imul(al8, bh8)) | 0;
  		    mid = (mid + Math.imul(ah8, bl8)) | 0;
  		    hi = (hi + Math.imul(ah8, bh8)) | 0;
  		    lo = (lo + Math.imul(al7, bl9)) | 0;
  		    mid = (mid + Math.imul(al7, bh9)) | 0;
  		    mid = (mid + Math.imul(ah7, bl9)) | 0;
  		    hi = (hi + Math.imul(ah7, bh9)) | 0;
  		    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
  		    w16 &= 0x3ffffff;
  		    /* k = 17 */
  		    lo = Math.imul(al9, bl8);
  		    mid = Math.imul(al9, bh8);
  		    mid = (mid + Math.imul(ah9, bl8)) | 0;
  		    hi = Math.imul(ah9, bh8);
  		    lo = (lo + Math.imul(al8, bl9)) | 0;
  		    mid = (mid + Math.imul(al8, bh9)) | 0;
  		    mid = (mid + Math.imul(ah8, bl9)) | 0;
  		    hi = (hi + Math.imul(ah8, bh9)) | 0;
  		    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
  		    w17 &= 0x3ffffff;
  		    /* k = 18 */
  		    lo = Math.imul(al9, bl9);
  		    mid = Math.imul(al9, bh9);
  		    mid = (mid + Math.imul(ah9, bl9)) | 0;
  		    hi = Math.imul(ah9, bh9);
  		    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  		    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
  		    w18 &= 0x3ffffff;
  		    o[0] = w0;
  		    o[1] = w1;
  		    o[2] = w2;
  		    o[3] = w3;
  		    o[4] = w4;
  		    o[5] = w5;
  		    o[6] = w6;
  		    o[7] = w7;
  		    o[8] = w8;
  		    o[9] = w9;
  		    o[10] = w10;
  		    o[11] = w11;
  		    o[12] = w12;
  		    o[13] = w13;
  		    o[14] = w14;
  		    o[15] = w15;
  		    o[16] = w16;
  		    o[17] = w17;
  		    o[18] = w18;
  		    if (c !== 0) {
  		      o[19] = c;
  		      out.length++;
  		    }
  		    return out;
  		  };

  		  // Polyfill comb
  		  if (!Math.imul) {
  		    comb10MulTo = smallMulTo;
  		  }

  		  function bigMulTo (self, num, out) {
  		    out.negative = num.negative ^ self.negative;
  		    out.length = self.length + num.length;

  		    var carry = 0;
  		    var hncarry = 0;
  		    for (var k = 0; k < out.length - 1; k++) {
  		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
  		      // note that ncarry could be >= 0x3ffffff
  		      var ncarry = hncarry;
  		      hncarry = 0;
  		      var rword = carry & 0x3ffffff;
  		      var maxJ = Math.min(k, num.length - 1);
  		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
  		        var i = k - j;
  		        var a = self.words[i] | 0;
  		        var b = num.words[j] | 0;
  		        var r = a * b;

  		        var lo = r & 0x3ffffff;
  		        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
  		        lo = (lo + rword) | 0;
  		        rword = lo & 0x3ffffff;
  		        ncarry = (ncarry + (lo >>> 26)) | 0;

  		        hncarry += ncarry >>> 26;
  		        ncarry &= 0x3ffffff;
  		      }
  		      out.words[k] = rword;
  		      carry = ncarry;
  		      ncarry = hncarry;
  		    }
  		    if (carry !== 0) {
  		      out.words[k] = carry;
  		    } else {
  		      out.length--;
  		    }

  		    return out._strip();
  		  }

  		  function jumboMulTo (self, num, out) {
  		    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
  		    // var fftm = new FFTM();
  		    // return fftm.mulp(self, num, out);
  		    return bigMulTo(self, num, out);
  		  }

  		  BN.prototype.mulTo = function mulTo (num, out) {
  		    var res;
  		    var len = this.length + num.length;
  		    if (this.length === 10 && num.length === 10) {
  		      res = comb10MulTo(this, num, out);
  		    } else if (len < 63) {
  		      res = smallMulTo(this, num, out);
  		    } else if (len < 1024) {
  		      res = bigMulTo(this, num, out);
  		    } else {
  		      res = jumboMulTo(this, num, out);
  		    }

  		    return res;
  		  };

  		  // Multiply `this` by `num`
  		  BN.prototype.mul = function mul (num) {
  		    var out = new BN(null);
  		    out.words = new Array(this.length + num.length);
  		    return this.mulTo(num, out);
  		  };

  		  // Multiply employing FFT
  		  BN.prototype.mulf = function mulf (num) {
  		    var out = new BN(null);
  		    out.words = new Array(this.length + num.length);
  		    return jumboMulTo(this, num, out);
  		  };

  		  // In-place Multiplication
  		  BN.prototype.imul = function imul (num) {
  		    return this.clone().mulTo(num, this);
  		  };

  		  BN.prototype.imuln = function imuln (num) {
  		    var isNegNum = num < 0;
  		    if (isNegNum) num = -num;

  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);

  		    // Carry
  		    var carry = 0;
  		    for (var i = 0; i < this.length; i++) {
  		      var w = (this.words[i] | 0) * num;
  		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
  		      carry >>= 26;
  		      carry += (w / 0x4000000) | 0;
  		      // NOTE: lo is 27bit maximum
  		      carry += lo >>> 26;
  		      this.words[i] = lo & 0x3ffffff;
  		    }

  		    if (carry !== 0) {
  		      this.words[i] = carry;
  		      this.length++;
  		    }

  		    return isNegNum ? this.ineg() : this;
  		  };

  		  BN.prototype.muln = function muln (num) {
  		    return this.clone().imuln(num);
  		  };

  		  // `this` * `this`
  		  BN.prototype.sqr = function sqr () {
  		    return this.mul(this);
  		  };

  		  // `this` * `this` in-place
  		  BN.prototype.isqr = function isqr () {
  		    return this.imul(this.clone());
  		  };

  		  // Math.pow(`this`, `num`)
  		  BN.prototype.pow = function pow (num) {
  		    var w = toBitArray(num);
  		    if (w.length === 0) return new BN(1);

  		    // Skip leading zeroes
  		    var res = this;
  		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
  		      if (w[i] !== 0) break;
  		    }

  		    if (++i < w.length) {
  		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
  		        if (w[i] === 0) continue;

  		        res = res.mul(q);
  		      }
  		    }

  		    return res;
  		  };

  		  // Shift-left in-place
  		  BN.prototype.iushln = function iushln (bits) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var r = bits % 26;
  		    var s = (bits - r) / 26;
  		    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
  		    var i;

  		    if (r !== 0) {
  		      var carry = 0;

  		      for (i = 0; i < this.length; i++) {
  		        var newCarry = this.words[i] & carryMask;
  		        var c = ((this.words[i] | 0) - newCarry) << r;
  		        this.words[i] = c | carry;
  		        carry = newCarry >>> (26 - r);
  		      }

  		      if (carry) {
  		        this.words[i] = carry;
  		        this.length++;
  		      }
  		    }

  		    if (s !== 0) {
  		      for (i = this.length - 1; i >= 0; i--) {
  		        this.words[i + s] = this.words[i];
  		      }

  		      for (i = 0; i < s; i++) {
  		        this.words[i] = 0;
  		      }

  		      this.length += s;
  		    }

  		    return this._strip();
  		  };

  		  BN.prototype.ishln = function ishln (bits) {
  		    // TODO(indutny): implement me
  		    assert(this.negative === 0);
  		    return this.iushln(bits);
  		  };

  		  // Shift-right in-place
  		  // NOTE: `hint` is a lowest bit before trailing zeroes
  		  // NOTE: if `extended` is present - it will be filled with destroyed bits
  		  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var h;
  		    if (hint) {
  		      h = (hint - (hint % 26)) / 26;
  		    } else {
  		      h = 0;
  		    }

  		    var r = bits % 26;
  		    var s = Math.min((bits - r) / 26, this.length);
  		    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  		    var maskedWords = extended;

  		    h -= s;
  		    h = Math.max(0, h);

  		    // Extended mode, copy masked part
  		    if (maskedWords) {
  		      for (var i = 0; i < s; i++) {
  		        maskedWords.words[i] = this.words[i];
  		      }
  		      maskedWords.length = s;
  		    }

  		    if (s === 0) ; else if (this.length > s) {
  		      this.length -= s;
  		      for (i = 0; i < this.length; i++) {
  		        this.words[i] = this.words[i + s];
  		      }
  		    } else {
  		      this.words[0] = 0;
  		      this.length = 1;
  		    }

  		    var carry = 0;
  		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
  		      var word = this.words[i] | 0;
  		      this.words[i] = (carry << (26 - r)) | (word >>> r);
  		      carry = word & mask;
  		    }

  		    // Push carried bits as a mask
  		    if (maskedWords && carry !== 0) {
  		      maskedWords.words[maskedWords.length++] = carry;
  		    }

  		    if (this.length === 0) {
  		      this.words[0] = 0;
  		      this.length = 1;
  		    }

  		    return this._strip();
  		  };

  		  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
  		    // TODO(indutny): implement me
  		    assert(this.negative === 0);
  		    return this.iushrn(bits, hint, extended);
  		  };

  		  // Shift-left
  		  BN.prototype.shln = function shln (bits) {
  		    return this.clone().ishln(bits);
  		  };

  		  BN.prototype.ushln = function ushln (bits) {
  		    return this.clone().iushln(bits);
  		  };

  		  // Shift-right
  		  BN.prototype.shrn = function shrn (bits) {
  		    return this.clone().ishrn(bits);
  		  };

  		  BN.prototype.ushrn = function ushrn (bits) {
  		    return this.clone().iushrn(bits);
  		  };

  		  // Test if n bit is set
  		  BN.prototype.testn = function testn (bit) {
  		    assert(typeof bit === 'number' && bit >= 0);
  		    var r = bit % 26;
  		    var s = (bit - r) / 26;
  		    var q = 1 << r;

  		    // Fast case: bit is much higher than all existing words
  		    if (this.length <= s) return false;

  		    // Check bit and return
  		    var w = this.words[s];

  		    return !!(w & q);
  		  };

  		  // Return only lowers bits of number (in-place)
  		  BN.prototype.imaskn = function imaskn (bits) {
  		    assert(typeof bits === 'number' && bits >= 0);
  		    var r = bits % 26;
  		    var s = (bits - r) / 26;

  		    assert(this.negative === 0, 'imaskn works only with positive numbers');

  		    if (this.length <= s) {
  		      return this;
  		    }

  		    if (r !== 0) {
  		      s++;
  		    }
  		    this.length = Math.min(s, this.length);

  		    if (r !== 0) {
  		      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  		      this.words[this.length - 1] &= mask;
  		    }

  		    return this._strip();
  		  };

  		  // Return only lowers bits of number
  		  BN.prototype.maskn = function maskn (bits) {
  		    return this.clone().imaskn(bits);
  		  };

  		  // Add plain number `num` to `this`
  		  BN.prototype.iaddn = function iaddn (num) {
  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);
  		    if (num < 0) return this.isubn(-num);

  		    // Possible sign change
  		    if (this.negative !== 0) {
  		      if (this.length === 1 && (this.words[0] | 0) <= num) {
  		        this.words[0] = num - (this.words[0] | 0);
  		        this.negative = 0;
  		        return this;
  		      }

  		      this.negative = 0;
  		      this.isubn(num);
  		      this.negative = 1;
  		      return this;
  		    }

  		    // Add without checks
  		    return this._iaddn(num);
  		  };

  		  BN.prototype._iaddn = function _iaddn (num) {
  		    this.words[0] += num;

  		    // Carry
  		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
  		      this.words[i] -= 0x4000000;
  		      if (i === this.length - 1) {
  		        this.words[i + 1] = 1;
  		      } else {
  		        this.words[i + 1]++;
  		      }
  		    }
  		    this.length = Math.max(this.length, i + 1);

  		    return this;
  		  };

  		  // Subtract plain number `num` from `this`
  		  BN.prototype.isubn = function isubn (num) {
  		    assert(typeof num === 'number');
  		    assert(num < 0x4000000);
  		    if (num < 0) return this.iaddn(-num);

  		    if (this.negative !== 0) {
  		      this.negative = 0;
  		      this.iaddn(num);
  		      this.negative = 1;
  		      return this;
  		    }

  		    this.words[0] -= num;

  		    if (this.length === 1 && this.words[0] < 0) {
  		      this.words[0] = -this.words[0];
  		      this.negative = 1;
  		    } else {
  		      // Carry
  		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
  		        this.words[i] += 0x4000000;
  		        this.words[i + 1] -= 1;
  		      }
  		    }

  		    return this._strip();
  		  };

  		  BN.prototype.addn = function addn (num) {
  		    return this.clone().iaddn(num);
  		  };

  		  BN.prototype.subn = function subn (num) {
  		    return this.clone().isubn(num);
  		  };

  		  BN.prototype.iabs = function iabs () {
  		    this.negative = 0;

  		    return this;
  		  };

  		  BN.prototype.abs = function abs () {
  		    return this.clone().iabs();
  		  };

  		  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
  		    var len = num.length + shift;
  		    var i;

  		    this._expand(len);

  		    var w;
  		    var carry = 0;
  		    for (i = 0; i < num.length; i++) {
  		      w = (this.words[i + shift] | 0) + carry;
  		      var right = (num.words[i] | 0) * mul;
  		      w -= right & 0x3ffffff;
  		      carry = (w >> 26) - ((right / 0x4000000) | 0);
  		      this.words[i + shift] = w & 0x3ffffff;
  		    }
  		    for (; i < this.length - shift; i++) {
  		      w = (this.words[i + shift] | 0) + carry;
  		      carry = w >> 26;
  		      this.words[i + shift] = w & 0x3ffffff;
  		    }

  		    if (carry === 0) return this._strip();

  		    // Subtraction overflow
  		    assert(carry === -1);
  		    carry = 0;
  		    for (i = 0; i < this.length; i++) {
  		      w = -(this.words[i] | 0) + carry;
  		      carry = w >> 26;
  		      this.words[i] = w & 0x3ffffff;
  		    }
  		    this.negative = 1;

  		    return this._strip();
  		  };

  		  BN.prototype._wordDiv = function _wordDiv (num, mode) {
  		    var shift = this.length - num.length;

  		    var a = this.clone();
  		    var b = num;

  		    // Normalize
  		    var bhi = b.words[b.length - 1] | 0;
  		    var bhiBits = this._countBits(bhi);
  		    shift = 26 - bhiBits;
  		    if (shift !== 0) {
  		      b = b.ushln(shift);
  		      a.iushln(shift);
  		      bhi = b.words[b.length - 1] | 0;
  		    }

  		    // Initialize quotient
  		    var m = a.length - b.length;
  		    var q;

  		    if (mode !== 'mod') {
  		      q = new BN(null);
  		      q.length = m + 1;
  		      q.words = new Array(q.length);
  		      for (var i = 0; i < q.length; i++) {
  		        q.words[i] = 0;
  		      }
  		    }

  		    var diff = a.clone()._ishlnsubmul(b, 1, m);
  		    if (diff.negative === 0) {
  		      a = diff;
  		      if (q) {
  		        q.words[m] = 1;
  		      }
  		    }

  		    for (var j = m - 1; j >= 0; j--) {
  		      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
  		        (a.words[b.length + j - 1] | 0);

  		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
  		      // (0x7ffffff)
  		      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

  		      a._ishlnsubmul(b, qj, j);
  		      while (a.negative !== 0) {
  		        qj--;
  		        a.negative = 0;
  		        a._ishlnsubmul(b, 1, j);
  		        if (!a.isZero()) {
  		          a.negative ^= 1;
  		        }
  		      }
  		      if (q) {
  		        q.words[j] = qj;
  		      }
  		    }
  		    if (q) {
  		      q._strip();
  		    }
  		    a._strip();

  		    // Denormalize
  		    if (mode !== 'div' && shift !== 0) {
  		      a.iushrn(shift);
  		    }

  		    return {
  		      div: q || null,
  		      mod: a
  		    };
  		  };

  		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  		  //       to `div` to request div only, or be absent to
  		  //       request both div & mod
  		  //       2) `positive` is true if unsigned mod is requested
  		  BN.prototype.divmod = function divmod (num, mode, positive) {
  		    assert(!num.isZero());

  		    if (this.isZero()) {
  		      return {
  		        div: new BN(0),
  		        mod: new BN(0)
  		      };
  		    }

  		    var div, mod, res;
  		    if (this.negative !== 0 && num.negative === 0) {
  		      res = this.neg().divmod(num, mode);

  		      if (mode !== 'mod') {
  		        div = res.div.neg();
  		      }

  		      if (mode !== 'div') {
  		        mod = res.mod.neg();
  		        if (positive && mod.negative !== 0) {
  		          mod.iadd(num);
  		        }
  		      }

  		      return {
  		        div: div,
  		        mod: mod
  		      };
  		    }

  		    if (this.negative === 0 && num.negative !== 0) {
  		      res = this.divmod(num.neg(), mode);

  		      if (mode !== 'mod') {
  		        div = res.div.neg();
  		      }

  		      return {
  		        div: div,
  		        mod: res.mod
  		      };
  		    }

  		    if ((this.negative & num.negative) !== 0) {
  		      res = this.neg().divmod(num.neg(), mode);

  		      if (mode !== 'div') {
  		        mod = res.mod.neg();
  		        if (positive && mod.negative !== 0) {
  		          mod.isub(num);
  		        }
  		      }

  		      return {
  		        div: res.div,
  		        mod: mod
  		      };
  		    }

  		    // Both numbers are positive at this point

  		    // Strip both numbers to approximate shift value
  		    if (num.length > this.length || this.cmp(num) < 0) {
  		      return {
  		        div: new BN(0),
  		        mod: this
  		      };
  		    }

  		    // Very short reduction
  		    if (num.length === 1) {
  		      if (mode === 'div') {
  		        return {
  		          div: this.divn(num.words[0]),
  		          mod: null
  		        };
  		      }

  		      if (mode === 'mod') {
  		        return {
  		          div: null,
  		          mod: new BN(this.modrn(num.words[0]))
  		        };
  		      }

  		      return {
  		        div: this.divn(num.words[0]),
  		        mod: new BN(this.modrn(num.words[0]))
  		      };
  		    }

  		    return this._wordDiv(num, mode);
  		  };

  		  // Find `this` / `num`
  		  BN.prototype.div = function div (num) {
  		    return this.divmod(num, 'div', false).div;
  		  };

  		  // Find `this` % `num`
  		  BN.prototype.mod = function mod (num) {
  		    return this.divmod(num, 'mod', false).mod;
  		  };

  		  BN.prototype.umod = function umod (num) {
  		    return this.divmod(num, 'mod', true).mod;
  		  };

  		  // Find Round(`this` / `num`)
  		  BN.prototype.divRound = function divRound (num) {
  		    var dm = this.divmod(num);

  		    // Fast case - exact division
  		    if (dm.mod.isZero()) return dm.div;

  		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

  		    var half = num.ushrn(1);
  		    var r2 = num.andln(1);
  		    var cmp = mod.cmp(half);

  		    // Round down
  		    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

  		    // Round up
  		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  		  };

  		  BN.prototype.modrn = function modrn (num) {
  		    var isNegNum = num < 0;
  		    if (isNegNum) num = -num;

  		    assert(num <= 0x3ffffff);
  		    var p = (1 << 26) % num;

  		    var acc = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      acc = (p * acc + (this.words[i] | 0)) % num;
  		    }

  		    return isNegNum ? -acc : acc;
  		  };

  		  // WARNING: DEPRECATED
  		  BN.prototype.modn = function modn (num) {
  		    return this.modrn(num);
  		  };

  		  // In-place division by number
  		  BN.prototype.idivn = function idivn (num) {
  		    var isNegNum = num < 0;
  		    if (isNegNum) num = -num;

  		    assert(num <= 0x3ffffff);

  		    var carry = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      var w = (this.words[i] | 0) + carry * 0x4000000;
  		      this.words[i] = (w / num) | 0;
  		      carry = w % num;
  		    }

  		    this._strip();
  		    return isNegNum ? this.ineg() : this;
  		  };

  		  BN.prototype.divn = function divn (num) {
  		    return this.clone().idivn(num);
  		  };

  		  BN.prototype.egcd = function egcd (p) {
  		    assert(p.negative === 0);
  		    assert(!p.isZero());

  		    var x = this;
  		    var y = p.clone();

  		    if (x.negative !== 0) {
  		      x = x.umod(p);
  		    } else {
  		      x = x.clone();
  		    }

  		    // A * x + B * y = x
  		    var A = new BN(1);
  		    var B = new BN(0);

  		    // C * x + D * y = y
  		    var C = new BN(0);
  		    var D = new BN(1);

  		    var g = 0;

  		    while (x.isEven() && y.isEven()) {
  		      x.iushrn(1);
  		      y.iushrn(1);
  		      ++g;
  		    }

  		    var yp = y.clone();
  		    var xp = x.clone();

  		    while (!x.isZero()) {
  		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
  		      if (i > 0) {
  		        x.iushrn(i);
  		        while (i-- > 0) {
  		          if (A.isOdd() || B.isOdd()) {
  		            A.iadd(yp);
  		            B.isub(xp);
  		          }

  		          A.iushrn(1);
  		          B.iushrn(1);
  		        }
  		      }

  		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
  		      if (j > 0) {
  		        y.iushrn(j);
  		        while (j-- > 0) {
  		          if (C.isOdd() || D.isOdd()) {
  		            C.iadd(yp);
  		            D.isub(xp);
  		          }

  		          C.iushrn(1);
  		          D.iushrn(1);
  		        }
  		      }

  		      if (x.cmp(y) >= 0) {
  		        x.isub(y);
  		        A.isub(C);
  		        B.isub(D);
  		      } else {
  		        y.isub(x);
  		        C.isub(A);
  		        D.isub(B);
  		      }
  		    }

  		    return {
  		      a: C,
  		      b: D,
  		      gcd: y.iushln(g)
  		    };
  		  };

  		  // This is reduced incarnation of the binary EEA
  		  // above, designated to invert members of the
  		  // _prime_ fields F(p) at a maximal speed
  		  BN.prototype._invmp = function _invmp (p) {
  		    assert(p.negative === 0);
  		    assert(!p.isZero());

  		    var a = this;
  		    var b = p.clone();

  		    if (a.negative !== 0) {
  		      a = a.umod(p);
  		    } else {
  		      a = a.clone();
  		    }

  		    var x1 = new BN(1);
  		    var x2 = new BN(0);

  		    var delta = b.clone();

  		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
  		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
  		      if (i > 0) {
  		        a.iushrn(i);
  		        while (i-- > 0) {
  		          if (x1.isOdd()) {
  		            x1.iadd(delta);
  		          }

  		          x1.iushrn(1);
  		        }
  		      }

  		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
  		      if (j > 0) {
  		        b.iushrn(j);
  		        while (j-- > 0) {
  		          if (x2.isOdd()) {
  		            x2.iadd(delta);
  		          }

  		          x2.iushrn(1);
  		        }
  		      }

  		      if (a.cmp(b) >= 0) {
  		        a.isub(b);
  		        x1.isub(x2);
  		      } else {
  		        b.isub(a);
  		        x2.isub(x1);
  		      }
  		    }

  		    var res;
  		    if (a.cmpn(1) === 0) {
  		      res = x1;
  		    } else {
  		      res = x2;
  		    }

  		    if (res.cmpn(0) < 0) {
  		      res.iadd(p);
  		    }

  		    return res;
  		  };

  		  BN.prototype.gcd = function gcd (num) {
  		    if (this.isZero()) return num.abs();
  		    if (num.isZero()) return this.abs();

  		    var a = this.clone();
  		    var b = num.clone();
  		    a.negative = 0;
  		    b.negative = 0;

  		    // Remove common factor of two
  		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
  		      a.iushrn(1);
  		      b.iushrn(1);
  		    }

  		    do {
  		      while (a.isEven()) {
  		        a.iushrn(1);
  		      }
  		      while (b.isEven()) {
  		        b.iushrn(1);
  		      }

  		      var r = a.cmp(b);
  		      if (r < 0) {
  		        // Swap `a` and `b` to make `a` always bigger than `b`
  		        var t = a;
  		        a = b;
  		        b = t;
  		      } else if (r === 0 || b.cmpn(1) === 0) {
  		        break;
  		      }

  		      a.isub(b);
  		    } while (true);

  		    return b.iushln(shift);
  		  };

  		  // Invert number in the field F(num)
  		  BN.prototype.invm = function invm (num) {
  		    return this.egcd(num).a.umod(num);
  		  };

  		  BN.prototype.isEven = function isEven () {
  		    return (this.words[0] & 1) === 0;
  		  };

  		  BN.prototype.isOdd = function isOdd () {
  		    return (this.words[0] & 1) === 1;
  		  };

  		  // And first word and num
  		  BN.prototype.andln = function andln (num) {
  		    return this.words[0] & num;
  		  };

  		  // Increment at the bit position in-line
  		  BN.prototype.bincn = function bincn (bit) {
  		    assert(typeof bit === 'number');
  		    var r = bit % 26;
  		    var s = (bit - r) / 26;
  		    var q = 1 << r;

  		    // Fast case: bit is much higher than all existing words
  		    if (this.length <= s) {
  		      this._expand(s + 1);
  		      this.words[s] |= q;
  		      return this;
  		    }

  		    // Add bit and propagate, if needed
  		    var carry = q;
  		    for (var i = s; carry !== 0 && i < this.length; i++) {
  		      var w = this.words[i] | 0;
  		      w += carry;
  		      carry = w >>> 26;
  		      w &= 0x3ffffff;
  		      this.words[i] = w;
  		    }
  		    if (carry !== 0) {
  		      this.words[i] = carry;
  		      this.length++;
  		    }
  		    return this;
  		  };

  		  BN.prototype.isZero = function isZero () {
  		    return this.length === 1 && this.words[0] === 0;
  		  };

  		  BN.prototype.cmpn = function cmpn (num) {
  		    var negative = num < 0;

  		    if (this.negative !== 0 && !negative) return -1;
  		    if (this.negative === 0 && negative) return 1;

  		    this._strip();

  		    var res;
  		    if (this.length > 1) {
  		      res = 1;
  		    } else {
  		      if (negative) {
  		        num = -num;
  		      }

  		      assert(num <= 0x3ffffff, 'Number is too big');

  		      var w = this.words[0] | 0;
  		      res = w === num ? 0 : w < num ? -1 : 1;
  		    }
  		    if (this.negative !== 0) return -res | 0;
  		    return res;
  		  };

  		  // Compare two numbers and return:
  		  // 1 - if `this` > `num`
  		  // 0 - if `this` == `num`
  		  // -1 - if `this` < `num`
  		  BN.prototype.cmp = function cmp (num) {
  		    if (this.negative !== 0 && num.negative === 0) return -1;
  		    if (this.negative === 0 && num.negative !== 0) return 1;

  		    var res = this.ucmp(num);
  		    if (this.negative !== 0) return -res | 0;
  		    return res;
  		  };

  		  // Unsigned comparison
  		  BN.prototype.ucmp = function ucmp (num) {
  		    // At this point both numbers have the same sign
  		    if (this.length > num.length) return 1;
  		    if (this.length < num.length) return -1;

  		    var res = 0;
  		    for (var i = this.length - 1; i >= 0; i--) {
  		      var a = this.words[i] | 0;
  		      var b = num.words[i] | 0;

  		      if (a === b) continue;
  		      if (a < b) {
  		        res = -1;
  		      } else if (a > b) {
  		        res = 1;
  		      }
  		      break;
  		    }
  		    return res;
  		  };

  		  BN.prototype.gtn = function gtn (num) {
  		    return this.cmpn(num) === 1;
  		  };

  		  BN.prototype.gt = function gt (num) {
  		    return this.cmp(num) === 1;
  		  };

  		  BN.prototype.gten = function gten (num) {
  		    return this.cmpn(num) >= 0;
  		  };

  		  BN.prototype.gte = function gte (num) {
  		    return this.cmp(num) >= 0;
  		  };

  		  BN.prototype.ltn = function ltn (num) {
  		    return this.cmpn(num) === -1;
  		  };

  		  BN.prototype.lt = function lt (num) {
  		    return this.cmp(num) === -1;
  		  };

  		  BN.prototype.lten = function lten (num) {
  		    return this.cmpn(num) <= 0;
  		  };

  		  BN.prototype.lte = function lte (num) {
  		    return this.cmp(num) <= 0;
  		  };

  		  BN.prototype.eqn = function eqn (num) {
  		    return this.cmpn(num) === 0;
  		  };

  		  BN.prototype.eq = function eq (num) {
  		    return this.cmp(num) === 0;
  		  };

  		  //
  		  // A reduce context, could be using montgomery or something better, depending
  		  // on the `m` itself.
  		  //
  		  BN.red = function red (num) {
  		    return new Red(num);
  		  };

  		  BN.prototype.toRed = function toRed (ctx) {
  		    assert(!this.red, 'Already a number in reduction context');
  		    assert(this.negative === 0, 'red works only with positives');
  		    return ctx.convertTo(this)._forceRed(ctx);
  		  };

  		  BN.prototype.fromRed = function fromRed () {
  		    assert(this.red, 'fromRed works only with numbers in reduction context');
  		    return this.red.convertFrom(this);
  		  };

  		  BN.prototype._forceRed = function _forceRed (ctx) {
  		    this.red = ctx;
  		    return this;
  		  };

  		  BN.prototype.forceRed = function forceRed (ctx) {
  		    assert(!this.red, 'Already a number in reduction context');
  		    return this._forceRed(ctx);
  		  };

  		  BN.prototype.redAdd = function redAdd (num) {
  		    assert(this.red, 'redAdd works only with red numbers');
  		    return this.red.add(this, num);
  		  };

  		  BN.prototype.redIAdd = function redIAdd (num) {
  		    assert(this.red, 'redIAdd works only with red numbers');
  		    return this.red.iadd(this, num);
  		  };

  		  BN.prototype.redSub = function redSub (num) {
  		    assert(this.red, 'redSub works only with red numbers');
  		    return this.red.sub(this, num);
  		  };

  		  BN.prototype.redISub = function redISub (num) {
  		    assert(this.red, 'redISub works only with red numbers');
  		    return this.red.isub(this, num);
  		  };

  		  BN.prototype.redShl = function redShl (num) {
  		    assert(this.red, 'redShl works only with red numbers');
  		    return this.red.shl(this, num);
  		  };

  		  BN.prototype.redMul = function redMul (num) {
  		    assert(this.red, 'redMul works only with red numbers');
  		    this.red._verify2(this, num);
  		    return this.red.mul(this, num);
  		  };

  		  BN.prototype.redIMul = function redIMul (num) {
  		    assert(this.red, 'redMul works only with red numbers');
  		    this.red._verify2(this, num);
  		    return this.red.imul(this, num);
  		  };

  		  BN.prototype.redSqr = function redSqr () {
  		    assert(this.red, 'redSqr works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.sqr(this);
  		  };

  		  BN.prototype.redISqr = function redISqr () {
  		    assert(this.red, 'redISqr works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.isqr(this);
  		  };

  		  // Square root over p
  		  BN.prototype.redSqrt = function redSqrt () {
  		    assert(this.red, 'redSqrt works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.sqrt(this);
  		  };

  		  BN.prototype.redInvm = function redInvm () {
  		    assert(this.red, 'redInvm works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.invm(this);
  		  };

  		  // Return negative clone of `this` % `red modulo`
  		  BN.prototype.redNeg = function redNeg () {
  		    assert(this.red, 'redNeg works only with red numbers');
  		    this.red._verify1(this);
  		    return this.red.neg(this);
  		  };

  		  BN.prototype.redPow = function redPow (num) {
  		    assert(this.red && !num.red, 'redPow(normalNum)');
  		    this.red._verify1(this);
  		    return this.red.pow(this, num);
  		  };

  		  // Prime numbers with efficient reduction
  		  var primes = {
  		    k256: null,
  		    p224: null,
  		    p192: null,
  		    p25519: null
  		  };

  		  // Pseudo-Mersenne prime
  		  function MPrime (name, p) {
  		    // P = 2 ^ N - K
  		    this.name = name;
  		    this.p = new BN(p, 16);
  		    this.n = this.p.bitLength();
  		    this.k = new BN(1).iushln(this.n).isub(this.p);

  		    this.tmp = this._tmp();
  		  }

  		  MPrime.prototype._tmp = function _tmp () {
  		    var tmp = new BN(null);
  		    tmp.words = new Array(Math.ceil(this.n / 13));
  		    return tmp;
  		  };

  		  MPrime.prototype.ireduce = function ireduce (num) {
  		    // Assumes that `num` is less than `P^2`
  		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  		    var r = num;
  		    var rlen;

  		    do {
  		      this.split(r, this.tmp);
  		      r = this.imulK(r);
  		      r = r.iadd(this.tmp);
  		      rlen = r.bitLength();
  		    } while (rlen > this.n);

  		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  		    if (cmp === 0) {
  		      r.words[0] = 0;
  		      r.length = 1;
  		    } else if (cmp > 0) {
  		      r.isub(this.p);
  		    } else {
  		      if (r.strip !== undefined) {
  		        // r is a BN v4 instance
  		        r.strip();
  		      } else {
  		        // r is a BN v5 instance
  		        r._strip();
  		      }
  		    }

  		    return r;
  		  };

  		  MPrime.prototype.split = function split (input, out) {
  		    input.iushrn(this.n, 0, out);
  		  };

  		  MPrime.prototype.imulK = function imulK (num) {
  		    return num.imul(this.k);
  		  };

  		  function K256 () {
  		    MPrime.call(
  		      this,
  		      'k256',
  		      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  		  }
  		  inherits(K256, MPrime);

  		  K256.prototype.split = function split (input, output) {
  		    // 256 = 9 * 26 + 22
  		    var mask = 0x3fffff;

  		    var outLen = Math.min(input.length, 9);
  		    for (var i = 0; i < outLen; i++) {
  		      output.words[i] = input.words[i];
  		    }
  		    output.length = outLen;

  		    if (input.length <= 9) {
  		      input.words[0] = 0;
  		      input.length = 1;
  		      return;
  		    }

  		    // Shift by 9 limbs
  		    var prev = input.words[9];
  		    output.words[output.length++] = prev & mask;

  		    for (i = 10; i < input.length; i++) {
  		      var next = input.words[i] | 0;
  		      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
  		      prev = next;
  		    }
  		    prev >>>= 22;
  		    input.words[i - 10] = prev;
  		    if (prev === 0 && input.length > 10) {
  		      input.length -= 10;
  		    } else {
  		      input.length -= 9;
  		    }
  		  };

  		  K256.prototype.imulK = function imulK (num) {
  		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  		    num.words[num.length] = 0;
  		    num.words[num.length + 1] = 0;
  		    num.length += 2;

  		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  		    var lo = 0;
  		    for (var i = 0; i < num.length; i++) {
  		      var w = num.words[i] | 0;
  		      lo += w * 0x3d1;
  		      num.words[i] = lo & 0x3ffffff;
  		      lo = w * 0x40 + ((lo / 0x4000000) | 0);
  		    }

  		    // Fast length reduction
  		    if (num.words[num.length - 1] === 0) {
  		      num.length--;
  		      if (num.words[num.length - 1] === 0) {
  		        num.length--;
  		      }
  		    }
  		    return num;
  		  };

  		  function P224 () {
  		    MPrime.call(
  		      this,
  		      'p224',
  		      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  		  }
  		  inherits(P224, MPrime);

  		  function P192 () {
  		    MPrime.call(
  		      this,
  		      'p192',
  		      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  		  }
  		  inherits(P192, MPrime);

  		  function P25519 () {
  		    // 2 ^ 255 - 19
  		    MPrime.call(
  		      this,
  		      '25519',
  		      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  		  }
  		  inherits(P25519, MPrime);

  		  P25519.prototype.imulK = function imulK (num) {
  		    // K = 0x13
  		    var carry = 0;
  		    for (var i = 0; i < num.length; i++) {
  		      var hi = (num.words[i] | 0) * 0x13 + carry;
  		      var lo = hi & 0x3ffffff;
  		      hi >>>= 26;

  		      num.words[i] = lo;
  		      carry = hi;
  		    }
  		    if (carry !== 0) {
  		      num.words[num.length++] = carry;
  		    }
  		    return num;
  		  };

  		  // Exported mostly for testing purposes, use plain name instead
  		  BN._prime = function prime (name) {
  		    // Cached version of prime
  		    if (primes[name]) return primes[name];

  		    var prime;
  		    if (name === 'k256') {
  		      prime = new K256();
  		    } else if (name === 'p224') {
  		      prime = new P224();
  		    } else if (name === 'p192') {
  		      prime = new P192();
  		    } else if (name === 'p25519') {
  		      prime = new P25519();
  		    } else {
  		      throw new Error('Unknown prime ' + name);
  		    }
  		    primes[name] = prime;

  		    return prime;
  		  };

  		  //
  		  // Base reduction engine
  		  //
  		  function Red (m) {
  		    if (typeof m === 'string') {
  		      var prime = BN._prime(m);
  		      this.m = prime.p;
  		      this.prime = prime;
  		    } else {
  		      assert(m.gtn(1), 'modulus must be greater than 1');
  		      this.m = m;
  		      this.prime = null;
  		    }
  		  }

  		  Red.prototype._verify1 = function _verify1 (a) {
  		    assert(a.negative === 0, 'red works only with positives');
  		    assert(a.red, 'red works only with red numbers');
  		  };

  		  Red.prototype._verify2 = function _verify2 (a, b) {
  		    assert((a.negative | b.negative) === 0, 'red works only with positives');
  		    assert(a.red && a.red === b.red,
  		      'red works only with red numbers');
  		  };

  		  Red.prototype.imod = function imod (a) {
  		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

  		    move(a, a.umod(this.m)._forceRed(this));
  		    return a;
  		  };

  		  Red.prototype.neg = function neg (a) {
  		    if (a.isZero()) {
  		      return a.clone();
  		    }

  		    return this.m.sub(a)._forceRed(this);
  		  };

  		  Red.prototype.add = function add (a, b) {
  		    this._verify2(a, b);

  		    var res = a.add(b);
  		    if (res.cmp(this.m) >= 0) {
  		      res.isub(this.m);
  		    }
  		    return res._forceRed(this);
  		  };

  		  Red.prototype.iadd = function iadd (a, b) {
  		    this._verify2(a, b);

  		    var res = a.iadd(b);
  		    if (res.cmp(this.m) >= 0) {
  		      res.isub(this.m);
  		    }
  		    return res;
  		  };

  		  Red.prototype.sub = function sub (a, b) {
  		    this._verify2(a, b);

  		    var res = a.sub(b);
  		    if (res.cmpn(0) < 0) {
  		      res.iadd(this.m);
  		    }
  		    return res._forceRed(this);
  		  };

  		  Red.prototype.isub = function isub (a, b) {
  		    this._verify2(a, b);

  		    var res = a.isub(b);
  		    if (res.cmpn(0) < 0) {
  		      res.iadd(this.m);
  		    }
  		    return res;
  		  };

  		  Red.prototype.shl = function shl (a, num) {
  		    this._verify1(a);
  		    return this.imod(a.ushln(num));
  		  };

  		  Red.prototype.imul = function imul (a, b) {
  		    this._verify2(a, b);
  		    return this.imod(a.imul(b));
  		  };

  		  Red.prototype.mul = function mul (a, b) {
  		    this._verify2(a, b);
  		    return this.imod(a.mul(b));
  		  };

  		  Red.prototype.isqr = function isqr (a) {
  		    return this.imul(a, a.clone());
  		  };

  		  Red.prototype.sqr = function sqr (a) {
  		    return this.mul(a, a);
  		  };

  		  Red.prototype.sqrt = function sqrt (a) {
  		    if (a.isZero()) return a.clone();

  		    var mod3 = this.m.andln(3);
  		    assert(mod3 % 2 === 1);

  		    // Fast case
  		    if (mod3 === 3) {
  		      var pow = this.m.add(new BN(1)).iushrn(2);
  		      return this.pow(a, pow);
  		    }

  		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  		    //
  		    // Find Q and S, that Q * 2 ^ S = (P - 1)
  		    var q = this.m.subn(1);
  		    var s = 0;
  		    while (!q.isZero() && q.andln(1) === 0) {
  		      s++;
  		      q.iushrn(1);
  		    }
  		    assert(!q.isZero());

  		    var one = new BN(1).toRed(this);
  		    var nOne = one.redNeg();

  		    // Find quadratic non-residue
  		    // NOTE: Max is such because of generalized Riemann hypothesis.
  		    var lpow = this.m.subn(1).iushrn(1);
  		    var z = this.m.bitLength();
  		    z = new BN(2 * z * z).toRed(this);

  		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
  		      z.redIAdd(nOne);
  		    }

  		    var c = this.pow(z, q);
  		    var r = this.pow(a, q.addn(1).iushrn(1));
  		    var t = this.pow(a, q);
  		    var m = s;
  		    while (t.cmp(one) !== 0) {
  		      var tmp = t;
  		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
  		        tmp = tmp.redSqr();
  		      }
  		      assert(i < m);
  		      var b = this.pow(c, new BN(1).iushln(m - i - 1));

  		      r = r.redMul(b);
  		      c = b.redSqr();
  		      t = t.redMul(c);
  		      m = i;
  		    }

  		    return r;
  		  };

  		  Red.prototype.invm = function invm (a) {
  		    var inv = a._invmp(this.m);
  		    if (inv.negative !== 0) {
  		      inv.negative = 0;
  		      return this.imod(inv).redNeg();
  		    } else {
  		      return this.imod(inv);
  		    }
  		  };

  		  Red.prototype.pow = function pow (a, num) {
  		    if (num.isZero()) return new BN(1).toRed(this);
  		    if (num.cmpn(1) === 0) return a.clone();

  		    var windowSize = 4;
  		    var wnd = new Array(1 << windowSize);
  		    wnd[0] = new BN(1).toRed(this);
  		    wnd[1] = a;
  		    for (var i = 2; i < wnd.length; i++) {
  		      wnd[i] = this.mul(wnd[i - 1], a);
  		    }

  		    var res = wnd[0];
  		    var current = 0;
  		    var currentLen = 0;
  		    var start = num.bitLength() % 26;
  		    if (start === 0) {
  		      start = 26;
  		    }

  		    for (i = num.length - 1; i >= 0; i--) {
  		      var word = num.words[i];
  		      for (var j = start - 1; j >= 0; j--) {
  		        var bit = (word >> j) & 1;
  		        if (res !== wnd[0]) {
  		          res = this.sqr(res);
  		        }

  		        if (bit === 0 && current === 0) {
  		          currentLen = 0;
  		          continue;
  		        }

  		        current <<= 1;
  		        current |= bit;
  		        currentLen++;
  		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

  		        res = this.mul(res, wnd[current]);
  		        currentLen = 0;
  		        current = 0;
  		      }
  		      start = 26;
  		    }

  		    return res;
  		  };

  		  Red.prototype.convertTo = function convertTo (num) {
  		    var r = num.umod(this.m);

  		    return r === num ? r.clone() : r;
  		  };

  		  Red.prototype.convertFrom = function convertFrom (num) {
  		    var res = num.clone();
  		    res.red = null;
  		    return res;
  		  };

  		  //
  		  // Montgomery method engine
  		  //

  		  BN.mont = function mont (num) {
  		    return new Mont(num);
  		  };

  		  function Mont (m) {
  		    Red.call(this, m);

  		    this.shift = this.m.bitLength();
  		    if (this.shift % 26 !== 0) {
  		      this.shift += 26 - (this.shift % 26);
  		    }

  		    this.r = new BN(1).iushln(this.shift);
  		    this.r2 = this.imod(this.r.sqr());
  		    this.rinv = this.r._invmp(this.m);

  		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  		    this.minv = this.minv.umod(this.r);
  		    this.minv = this.r.sub(this.minv);
  		  }
  		  inherits(Mont, Red);

  		  Mont.prototype.convertTo = function convertTo (num) {
  		    return this.imod(num.ushln(this.shift));
  		  };

  		  Mont.prototype.convertFrom = function convertFrom (num) {
  		    var r = this.imod(num.mul(this.rinv));
  		    r.red = null;
  		    return r;
  		  };

  		  Mont.prototype.imul = function imul (a, b) {
  		    if (a.isZero() || b.isZero()) {
  		      a.words[0] = 0;
  		      a.length = 1;
  		      return a;
  		    }

  		    var t = a.imul(b);
  		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  		    var u = t.isub(c).iushrn(this.shift);
  		    var res = u;

  		    if (u.cmp(this.m) >= 0) {
  		      res = u.isub(this.m);
  		    } else if (u.cmpn(0) < 0) {
  		      res = u.iadd(this.m);
  		    }

  		    return res._forceRed(this);
  		  };

  		  Mont.prototype.mul = function mul (a, b) {
  		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

  		    var t = a.mul(b);
  		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  		    var u = t.isub(c).iushrn(this.shift);
  		    var res = u;
  		    if (u.cmp(this.m) >= 0) {
  		      res = u.isub(this.m);
  		    } else if (u.cmpn(0) < 0) {
  		      res = u.iadd(this.m);
  		    }

  		    return res._forceRed(this);
  		  };

  		  Mont.prototype.invm = function invm (a) {
  		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  		    var res = this.imod(a._invmp(this.m).mul(this.r2));
  		    return res._forceRed(this);
  		  };
  		})(module, bn); 
  	} (bn$1));
  	return bn$1.exports;
  }

  var bnExports = requireBn();
  var BN$1 = /*@__PURE__*/getDefaultExportFromCjs(bnExports);

  const version$5 = "logger/5.8.0";

  let _permanentCensorErrors = false;
  let _censorErrors = false;
  const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
  let _logLevel = LogLevels["default"];
  let _globalLogger = null;
  function _checkNormalize() {
      try {
          const missing = [];
          // Make sure all forms of normalization are supported
          ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
              try {
                  if ("test".normalize(form) !== "test") {
                      throw new Error("bad normalize");
                  }
                  ;
              }
              catch (error) {
                  missing.push(form);
              }
          });
          if (missing.length) {
              throw new Error("missing " + missing.join(", "));
          }
          if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
              throw new Error("broken implementation");
          }
      }
      catch (error) {
          return error.message;
      }
      return null;
  }
  const _normalizeError = _checkNormalize();
  var LogLevel;
  (function (LogLevel) {
      LogLevel["DEBUG"] = "DEBUG";
      LogLevel["INFO"] = "INFO";
      LogLevel["WARNING"] = "WARNING";
      LogLevel["ERROR"] = "ERROR";
      LogLevel["OFF"] = "OFF";
  })(LogLevel || (LogLevel = {}));
  var ErrorCode;
  (function (ErrorCode) {
      ///////////////////
      // Generic Errors
      // Unknown Error
      ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      // Not Implemented
      ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      // Unsupported Operation
      //   - operation
      ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
      //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
      ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
      // Some sort of bad response from the server
      ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
      // Timeout
      ErrorCode["TIMEOUT"] = "TIMEOUT";
      ///////////////////
      // Operational  Errors
      // Buffer Overrun
      ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      // Numeric Fault
      //   - operation: the operation being executed
      //   - fault: the reason this faulted
      ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ///////////////////
      // Argument Errors
      // Missing new operator to an object
      //  - name: The name of the class
      ErrorCode["MISSING_NEW"] = "MISSING_NEW";
      // Invalid argument (e.g. value is incompatible with type) to a function:
      //   - argument: The argument name that was invalid
      //   - value: The value of the argument
      ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      // Missing argument to a function:
      //   - count: The number of arguments received
      //   - expectedCount: The number of arguments expected
      ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      // Too many arguments
      //   - count: The number of arguments received
      //   - expectedCount: The number of arguments expected
      ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ///////////////////
      // Blockchain Errors
      // Call exception
      //  - transaction: the transaction
      //  - address?: the contract address
      //  - args?: The arguments passed into the function
      //  - method?: The Solidity method signature
      //  - errorSignature?: The EIP848 error signature
      //  - errorArgs?: The EIP848 error parameters
      //  - reason: The reason (only for EIP848 "Error(string)")
      ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      // Insufficient funds (< value + gasLimit * gasPrice)
      //   - transaction: the transaction attempted
      ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      // Nonce has already been used
      //   - transaction: the transaction attempted
      ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      // The replacement fee for the transaction is too low
      //   - transaction: the transaction attempted
      ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      // The gas limit could not be estimated
      //   - transaction: the transaction passed to estimateGas
      ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      // The transaction was replaced by one with a higher gas price
      //   - reason: "cancelled", "replaced" or "repriced"
      //   - cancelled: true if reason == "cancelled" or reason == "replaced")
      //   - hash: original transaction hash
      //   - replacement: the full TransactionsResponse for the replacement
      //   - receipt: the receipt of the replacement
      ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      ///////////////////
      // Interaction Errors
      // The user rejected the action, such as signing a message or sending
      // a transaction
      ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
  })(ErrorCode || (ErrorCode = {}));
  const HEX = "0123456789abcdef";
  class Logger {
      constructor(version) {
          Object.defineProperty(this, "version", {
              enumerable: true,
              value: version,
              writable: false
          });
      }
      _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels[level] == null) {
              this.throwArgumentError("invalid log level name", "logLevel", logLevel);
          }
          if (_logLevel > LogLevels[level]) {
              return;
          }
          console.log.apply(console, args);
      }
      debug(...args) {
          this._log(Logger.levels.DEBUG, args);
      }
      info(...args) {
          this._log(Logger.levels.INFO, args);
      }
      warn(...args) {
          this._log(Logger.levels.WARNING, args);
      }
      makeError(message, code, params) {
          // Errors are being censored
          if (_censorErrors) {
              return this.makeError("censored error", code, {});
          }
          if (!code) {
              code = Logger.errors.UNKNOWN_ERROR;
          }
          if (!params) {
              params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key) => {
              const value = params[key];
              try {
                  if (value instanceof Uint8Array) {
                      let hex = "";
                      for (let i = 0; i < value.length; i++) {
                          hex += HEX[value[i] >> 4];
                          hex += HEX[value[i] & 0x0f];
                      }
                      messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                  }
                  else {
                      messageDetails.push(key + "=" + JSON.stringify(value));
                  }
              }
              catch (error) {
                  messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
              }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          let url = "";
          switch (code) {
              case ErrorCode.NUMERIC_FAULT: {
                  url = "NUMERIC_FAULT";
                  const fault = message;
                  switch (fault) {
                      case "overflow":
                      case "underflow":
                      case "division-by-zero":
                          url += "-" + fault;
                          break;
                      case "negative-power":
                      case "negative-width":
                          url += "-unsupported";
                          break;
                      case "unbound-bitwise-result":
                          url += "-unbound-result";
                          break;
                  }
                  break;
              }
              case ErrorCode.CALL_EXCEPTION:
              case ErrorCode.INSUFFICIENT_FUNDS:
              case ErrorCode.MISSING_NEW:
              case ErrorCode.NONCE_EXPIRED:
              case ErrorCode.REPLACEMENT_UNDERPRICED:
              case ErrorCode.TRANSACTION_REPLACED:
              case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                  url = code;
                  break;
          }
          if (url) {
              message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
          }
          if (messageDetails.length) {
              message += " (" + messageDetails.join(", ") + ")";
          }
          // @TODO: Any??
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key) {
              error[key] = params[key];
          });
          return error;
      }
      throwError(message, code, params) {
          throw this.makeError(message, code, params);
      }
      throwArgumentError(message, name, value) {
          return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
              argument: name,
              value: value
          });
      }
      assert(condition, message, code, params) {
          if (!!condition) {
              return;
          }
          this.throwError(message, code, params);
      }
      assertArgument(condition, message, name, value) {
          if (!!condition) {
              return;
          }
          this.throwArgumentError(message, name, value);
      }
      checkNormalize(message) {
          if (_normalizeError) {
              this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "String.prototype.normalize", form: _normalizeError
              });
          }
      }
      checkSafeUint53(value, message) {
          if (typeof (value) !== "number") {
              return;
          }
          if (message == null) {
              message = "value not safe";
          }
          if (value < 0 || value >= 0x1fffffffffffff) {
              this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                  operation: "checkSafeInteger",
                  fault: "out-of-safe-range",
                  value: value
              });
          }
          if (value % 1) {
              this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                  operation: "checkSafeInteger",
                  fault: "non-integer",
                  value: value
              });
          }
      }
      checkArgumentCount(count, expectedCount, message) {
          if (message) {
              message = ": " + message;
          }
          else {
              message = "";
          }
          if (count < expectedCount) {
              this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                  count: count,
                  expectedCount: expectedCount
              });
          }
          if (count > expectedCount) {
              this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                  count: count,
                  expectedCount: expectedCount
              });
          }
      }
      checkNew(target, kind) {
          if (target === Object || target == null) {
              this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
          }
      }
      checkAbstract(target, kind) {
          if (target === kind) {
              this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
          }
          else if (target === Object || target == null) {
              this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
          }
      }
      static globalLogger() {
          if (!_globalLogger) {
              _globalLogger = new Logger(version$5);
          }
          return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
              this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "setCensorship"
              });
          }
          if (_permanentCensorErrors) {
              if (!censorship) {
                  return;
              }
              this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "setCensorship"
              });
          }
          _censorErrors = !!censorship;
          _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
          const level = LogLevels[logLevel.toLowerCase()];
          if (level == null) {
              Logger.globalLogger().warn("invalid log level - " + logLevel);
              return;
          }
          _logLevel = level;
      }
      static from(version) {
          return new Logger(version);
      }
  }
  Logger.errors = ErrorCode;
  Logger.levels = LogLevel;

  const version$4 = "bytes/5.8.0";

  const logger$3 = new Logger(version$4);
  ///////////////////////////////
  function isHexable(value) {
      return !!(value.toHexString);
  }
  function addSlice(array) {
      if (array.slice) {
          return array;
      }
      array.slice = function () {
          const args = Array.prototype.slice.call(arguments);
          return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
  }
  function isInteger(value) {
      return (typeof (value) === "number" && value == value && (value % 1) === 0);
  }
  function isBytes$3(value) {
      if (value == null) {
          return false;
      }
      if (value.constructor === Uint8Array) {
          return true;
      }
      if (typeof (value) === "string") {
          return false;
      }
      if (!isInteger(value.length) || value.length < 0) {
          return false;
      }
      for (let i = 0; i < value.length; i++) {
          const v = value[i];
          if (!isInteger(v) || v < 0 || v >= 256) {
              return false;
          }
      }
      return true;
  }
  function arrayify(value, options) {
      if (!options) {
          options = {};
      }
      if (typeof (value) === "number") {
          logger$3.checkSafeUint53(value, "invalid arrayify value");
          const result = [];
          while (value) {
              result.unshift(value & 0xff);
              value = parseInt(String(value / 256));
          }
          if (result.length === 0) {
              result.push(0);
          }
          return addSlice(new Uint8Array(result));
      }
      if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
      }
      if (isHexable(value)) {
          value = value.toHexString();
      }
      if (isHexString$1(value)) {
          let hex = value.substring(2);
          if (hex.length % 2) {
              if (options.hexPad === "left") {
                  hex = "0" + hex;
              }
              else if (options.hexPad === "right") {
                  hex += "0";
              }
              else {
                  logger$3.throwArgumentError("hex data is odd-length", "value", value);
              }
          }
          const result = [];
          for (let i = 0; i < hex.length; i += 2) {
              result.push(parseInt(hex.substring(i, i + 2), 16));
          }
          return addSlice(new Uint8Array(result));
      }
      if (isBytes$3(value)) {
          return addSlice(new Uint8Array(value));
      }
      return logger$3.throwArgumentError("invalid arrayify value", "value", value);
  }
  function isHexString$1(value, length) {
      if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
      }
      return true;
  }
  const HexCharacters = "0123456789abcdef";
  function hexlify(value, options) {
      if (!options) {
          options = {};
      }
      if (typeof (value) === "number") {
          logger$3.checkSafeUint53(value, "invalid hexlify value");
          let hex = "";
          while (value) {
              hex = HexCharacters[value & 0xf] + hex;
              value = Math.floor(value / 16);
          }
          if (hex.length) {
              if (hex.length % 2) {
                  hex = "0" + hex;
              }
              return "0x" + hex;
          }
          return "0x00";
      }
      if (typeof (value) === "bigint") {
          value = value.toString(16);
          if (value.length % 2) {
              return ("0x0" + value);
          }
          return "0x" + value;
      }
      if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
      }
      if (isHexable(value)) {
          return value.toHexString();
      }
      if (isHexString$1(value)) {
          if (value.length % 2) {
              if (options.hexPad === "left") {
                  value = "0x0" + value.substring(2);
              }
              else if (options.hexPad === "right") {
                  value += "0";
              }
              else {
                  logger$3.throwArgumentError("hex data is odd-length", "value", value);
              }
          }
          return value.toLowerCase();
      }
      if (isBytes$3(value)) {
          let result = "0x";
          for (let i = 0; i < value.length; i++) {
              let v = value[i];
              result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
          }
          return result;
      }
      return logger$3.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexZeroPad(value, length) {
      if (typeof (value) !== "string") {
          value = hexlify(value);
      }
      else if (!isHexString$1(value)) {
          logger$3.throwArgumentError("invalid hex string", "value", value);
      }
      if (value.length > 2 * length + 2) {
          logger$3.throwArgumentError("value out of range", "value", arguments[1]);
      }
      while (value.length < 2 * length + 2) {
          value = "0x0" + value.substring(2);
      }
      return value;
  }

  const version$3 = "bignumber/5.8.0";

  var BN = BN$1.BN;
  const logger$2 = new Logger(version$3);
  const _constructorGuard$1 = {};
  const MAX_SAFE = 0x1fffffffffffff;
  function isBigNumberish(value) {
      return (value != null) && (BigNumber.isBigNumber(value) ||
          (typeof (value) === "number" && (value % 1) === 0) ||
          (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
          isHexString$1(value) ||
          (typeof (value) === "bigint") ||
          isBytes$3(value));
  }
  // Only warn about passing 10 into radix once
  let _warnedToStringRadix = false;
  class BigNumber {
      constructor(constructorGuard, hex) {
          if (constructorGuard !== _constructorGuard$1) {
              logger$2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "new (BigNumber)"
              });
          }
          this._hex = hex;
          this._isBigNumber = true;
          Object.freeze(this);
      }
      fromTwos(value) {
          return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
          return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
          if (this._hex[0] === "-") {
              return BigNumber.from(this._hex.substring(1));
          }
          return this;
      }
      add(other) {
          return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
          return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
          const o = BigNumber.from(other);
          if (o.isZero()) {
              throwFault$1("division-by-zero", "div");
          }
          return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
          return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
          const value = toBN(other);
          if (value.isNeg()) {
              throwFault$1("division-by-zero", "mod");
          }
          return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
          const value = toBN(other);
          if (value.isNeg()) {
              throwFault$1("negative-power", "pow");
          }
          return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
              throwFault$1("unbound-bitwise-result", "and");
          }
          return toBigNumber(toBN(this).and(value));
      }
      or(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
              throwFault$1("unbound-bitwise-result", "or");
          }
          return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
              throwFault$1("unbound-bitwise-result", "xor");
          }
          return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
          if (this.isNegative() || value < 0) {
              throwFault$1("negative-width", "mask");
          }
          return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
          if (this.isNegative() || value < 0) {
              throwFault$1("negative-width", "shl");
          }
          return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
          if (this.isNegative() || value < 0) {
              throwFault$1("negative-width", "shr");
          }
          return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
          return toBN(this).eq(toBN(other));
      }
      lt(other) {
          return toBN(this).lt(toBN(other));
      }
      lte(other) {
          return toBN(this).lte(toBN(other));
      }
      gt(other) {
          return toBN(this).gt(toBN(other));
      }
      gte(other) {
          return toBN(this).gte(toBN(other));
      }
      isNegative() {
          return (this._hex[0] === "-");
      }
      isZero() {
          return toBN(this).isZero();
      }
      toNumber() {
          try {
              return toBN(this).toNumber();
          }
          catch (error) {
              throwFault$1("overflow", "toNumber", this.toString());
          }
          return null;
      }
      toBigInt() {
          try {
              return BigInt(this.toString());
          }
          catch (e) { }
          return logger$2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
              value: this.toString()
          });
      }
      toString() {
          // Lots of people expect this, which we do not support, so check (See: #889)
          if (arguments.length > 0) {
              if (arguments[0] === 10) {
                  if (!_warnedToStringRadix) {
                      _warnedToStringRadix = true;
                      logger$2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                  }
              }
              else if (arguments[0] === 16) {
                  logger$2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
              }
              else {
                  logger$2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
              }
          }
          return toBN(this).toString(10);
      }
      toHexString() {
          return this._hex;
      }
      toJSON(key) {
          return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value) {
          if (value instanceof BigNumber) {
              return value;
          }
          if (typeof (value) === "string") {
              if (value.match(/^-?0x[0-9a-f]+$/i)) {
                  return new BigNumber(_constructorGuard$1, toHex$1(value));
              }
              if (value.match(/^-?[0-9]+$/)) {
                  return new BigNumber(_constructorGuard$1, toHex$1(new BN(value)));
              }
              return logger$2.throwArgumentError("invalid BigNumber string", "value", value);
          }
          if (typeof (value) === "number") {
              if (value % 1) {
                  throwFault$1("underflow", "BigNumber.from", value);
              }
              if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                  throwFault$1("overflow", "BigNumber.from", value);
              }
              return BigNumber.from(String(value));
          }
          const anyValue = value;
          if (typeof (anyValue) === "bigint") {
              return BigNumber.from(anyValue.toString());
          }
          if (isBytes$3(anyValue)) {
              return BigNumber.from(hexlify(anyValue));
          }
          if (anyValue) {
              // Hexable interface (takes priority)
              if (anyValue.toHexString) {
                  const hex = anyValue.toHexString();
                  if (typeof (hex) === "string") {
                      return BigNumber.from(hex);
                  }
              }
              else {
                  // For now, handle legacy JSON-ified values (goes away in v6)
                  let hex = anyValue._hex;
                  // New-form JSON
                  if (hex == null && anyValue.type === "BigNumber") {
                      hex = anyValue.hex;
                  }
                  if (typeof (hex) === "string") {
                      if (isHexString$1(hex) || (hex[0] === "-" && isHexString$1(hex.substring(1)))) {
                          return BigNumber.from(hex);
                      }
                  }
              }
          }
          return logger$2.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
          return !!(value && value._isBigNumber);
      }
  }
  // Normalize the hex string
  function toHex$1(value) {
      // For BN, call on the hex string
      if (typeof (value) !== "string") {
          return toHex$1(value.toString(16));
      }
      // If negative, prepend the negative sign to the normalized positive value
      if (value[0] === "-") {
          // Strip off the negative sign
          value = value.substring(1);
          // Cannot have multiple negative signs (e.g. "--0x04")
          if (value[0] === "-") {
              logger$2.throwArgumentError("invalid hex", "value", value);
          }
          // Call toHex on the positive component
          value = toHex$1(value);
          // Do not allow "-0x00"
          if (value === "0x00") {
              return value;
          }
          // Negate the value
          return "-" + value;
      }
      // Add a "0x" prefix if missing
      if (value.substring(0, 2) !== "0x") {
          value = "0x" + value;
      }
      // Normalize zero
      if (value === "0x") {
          return "0x00";
      }
      // Make the string even length
      if (value.length % 2) {
          value = "0x0" + value.substring(2);
      }
      // Trim to smallest even-length string
      while (value.length > 4 && value.substring(0, 4) === "0x00") {
          value = "0x" + value.substring(4);
      }
      return value;
  }
  function toBigNumber(value) {
      return BigNumber.from(toHex$1(value));
  }
  function toBN(value) {
      const hex = BigNumber.from(value).toHexString();
      if (hex[0] === "-") {
          return (new BN("-" + hex.substring(3), 16));
      }
      return new BN(hex.substring(2), 16);
  }
  function throwFault$1(fault, operation, value) {
      const params = { fault: fault, operation: operation };
      if (value != null) {
          params.value = value;
      }
      return logger$2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
  }

  const logger$1 = new Logger(version$3);
  const _constructorGuard = {};
  const Zero = BigNumber.from(0);
  const NegativeOne = BigNumber.from(-1);
  function throwFault(message, fault, operation, value) {
      const params = { fault: fault, operation: operation };
      if (value !== undefined) {
          params.value = value;
      }
      return logger$1.throwError(message, Logger.errors.NUMERIC_FAULT, params);
  }
  // Constant to pull zeros from for multipliers
  let zeros$1 = "0";
  while (zeros$1.length < 256) {
      zeros$1 += zeros$1;
  }
  // Returns a string "1" followed by decimal "0"s
  function getMultiplier(decimals) {
      if (typeof (decimals) !== "number") {
          try {
              decimals = BigNumber.from(decimals).toNumber();
          }
          catch (e) { }
      }
      if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
          return ("1" + zeros$1.substring(0, decimals));
      }
      return logger$1.throwArgumentError("invalid decimal size", "decimals", decimals);
  }
  function formatFixed(value, decimals) {
      if (decimals == null) {
          decimals = 0;
      }
      const multiplier = getMultiplier(decimals);
      // Make sure wei is a big number (convert as necessary)
      value = BigNumber.from(value);
      const negative = value.lt(Zero);
      if (negative) {
          value = value.mul(NegativeOne);
      }
      let fraction = value.mod(multiplier).toString();
      while (fraction.length < multiplier.length - 1) {
          fraction = "0" + fraction;
      }
      // Strip training 0
      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      const whole = value.div(multiplier).toString();
      if (multiplier.length === 1) {
          value = whole;
      }
      else {
          value = whole + "." + fraction;
      }
      if (negative) {
          value = "-" + value;
      }
      return value;
  }
  function parseFixed(value, decimals) {
      if (decimals == null) {
          decimals = 0;
      }
      const multiplier = getMultiplier(decimals);
      if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
          logger$1.throwArgumentError("invalid decimal value", "value", value);
      }
      // Is it negative?
      const negative = (value.substring(0, 1) === "-");
      if (negative) {
          value = value.substring(1);
      }
      if (value === ".") {
          logger$1.throwArgumentError("missing value", "value", value);
      }
      // Split it into a whole and fractional part
      const comps = value.split(".");
      if (comps.length > 2) {
          logger$1.throwArgumentError("too many decimal points", "value", value);
      }
      let whole = comps[0], fraction = comps[1];
      if (!whole) {
          whole = "0";
      }
      if (!fraction) {
          fraction = "0";
      }
      // Trim trailing zeros
      while (fraction[fraction.length - 1] === "0") {
          fraction = fraction.substring(0, fraction.length - 1);
      }
      // Check the fraction doesn't exceed our decimals size
      if (fraction.length > multiplier.length - 1) {
          throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
      }
      // If decimals is 0, we have an empty string for fraction
      if (fraction === "") {
          fraction = "0";
      }
      // Fully pad the string with zeros to get to wei
      while (fraction.length < multiplier.length - 1) {
          fraction += "0";
      }
      const wholeValue = BigNumber.from(whole);
      const fractionValue = BigNumber.from(fraction);
      let wei = (wholeValue.mul(multiplier)).add(fractionValue);
      if (negative) {
          wei = wei.mul(NegativeOne);
      }
      return wei;
  }
  class FixedFormat {
      constructor(constructorGuard, signed, width, decimals) {
          if (constructorGuard !== _constructorGuard) {
              logger$1.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "new FixedFormat"
              });
          }
          this.signed = signed;
          this.width = width;
          this.decimals = decimals;
          this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
          this._multiplier = getMultiplier(decimals);
          Object.freeze(this);
      }
      static from(value) {
          if (value instanceof FixedFormat) {
              return value;
          }
          if (typeof (value) === "number") {
              value = `fixed128x${value}`;
          }
          let signed = true;
          let width = 128;
          let decimals = 18;
          if (typeof (value) === "string") {
              if (value === "fixed") ;
              else if (value === "ufixed") {
                  signed = false;
              }
              else {
                  const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                  if (!match) {
                      logger$1.throwArgumentError("invalid fixed format", "format", value);
                  }
                  signed = (match[1] !== "u");
                  width = parseInt(match[2]);
                  decimals = parseInt(match[3]);
              }
          }
          else if (value) {
              const check = (key, type, defaultValue) => {
                  if (value[key] == null) {
                      return defaultValue;
                  }
                  if (typeof (value[key]) !== type) {
                      logger$1.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                  }
                  return value[key];
              };
              signed = check("signed", "boolean", signed);
              width = check("width", "number", width);
              decimals = check("decimals", "number", decimals);
          }
          if (width % 8) {
              logger$1.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
          }
          if (decimals > 80) {
              logger$1.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
          }
          return new FixedFormat(_constructorGuard, signed, width, decimals);
      }
  }
  class FixedNumber {
      constructor(constructorGuard, hex, value, format) {
          if (constructorGuard !== _constructorGuard) {
              logger$1.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "new FixedFormat"
              });
          }
          this.format = format;
          this._hex = hex;
          this._value = value;
          this._isFixedNumber = true;
          Object.freeze(this);
      }
      _checkFormat(other) {
          if (this.format.name !== other.format.name) {
              logger$1.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
          }
      }
      addUnsafe(other) {
          this._checkFormat(other);
          const a = parseFixed(this._value, this.format.decimals);
          const b = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
      }
      subUnsafe(other) {
          this._checkFormat(other);
          const a = parseFixed(this._value, this.format.decimals);
          const b = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
          this._checkFormat(other);
          const a = parseFixed(this._value, this.format.decimals);
          const b = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
          this._checkFormat(other);
          const a = parseFixed(this._value, this.format.decimals);
          const b = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
      }
      floor() {
          const comps = this.toString().split(".");
          if (comps.length === 1) {
              comps.push("0");
          }
          let result = FixedNumber.from(comps[0], this.format);
          const hasFraction = !comps[1].match(/^(0*)$/);
          if (this.isNegative() && hasFraction) {
              result = result.subUnsafe(ONE.toFormat(result.format));
          }
          return result;
      }
      ceiling() {
          const comps = this.toString().split(".");
          if (comps.length === 1) {
              comps.push("0");
          }
          let result = FixedNumber.from(comps[0], this.format);
          const hasFraction = !comps[1].match(/^(0*)$/);
          if (!this.isNegative() && hasFraction) {
              result = result.addUnsafe(ONE.toFormat(result.format));
          }
          return result;
      }
      // @TODO: Support other rounding algorithms
      round(decimals) {
          if (decimals == null) {
              decimals = 0;
          }
          // If we are already in range, we're done
          const comps = this.toString().split(".");
          if (comps.length === 1) {
              comps.push("0");
          }
          if (decimals < 0 || decimals > 80 || (decimals % 1)) {
              logger$1.throwArgumentError("invalid decimal count", "decimals", decimals);
          }
          if (comps[1].length <= decimals) {
              return this;
          }
          const factor = FixedNumber.from("1" + zeros$1.substring(0, decimals), this.format);
          const bump = BUMP.toFormat(this.format);
          return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
          return (this._value === "0.0" || this._value === "0");
      }
      isNegative() {
          return (this._value[0] === "-");
      }
      toString() { return this._value; }
      toHexString(width) {
          if (width == null) {
              return this._hex;
          }
          if (width % 8) {
              logger$1.throwArgumentError("invalid byte width", "width", width);
          }
          const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
          return hexZeroPad(hex, width / 8);
      }
      toUnsafeFloat() { return parseFloat(this.toString()); }
      toFormat(format) {
          return FixedNumber.fromString(this._value, format);
      }
      static fromValue(value, decimals, format) {
          // If decimals looks more like a format, and there is no format, shift the parameters
          if (format == null && decimals != null && !isBigNumberish(decimals)) {
              format = decimals;
              decimals = null;
          }
          if (decimals == null) {
              decimals = 0;
          }
          if (format == null) {
              format = "fixed";
          }
          return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
      }
      static fromString(value, format) {
          if (format == null) {
              format = "fixed";
          }
          const fixedFormat = FixedFormat.from(format);
          const numeric = parseFixed(value, fixedFormat.decimals);
          if (!fixedFormat.signed && numeric.lt(Zero)) {
              throwFault("unsigned value cannot be negative", "overflow", "value", value);
          }
          let hex = null;
          if (fixedFormat.signed) {
              hex = numeric.toTwos(fixedFormat.width).toHexString();
          }
          else {
              hex = numeric.toHexString();
              hex = hexZeroPad(hex, fixedFormat.width / 8);
          }
          const decimal = formatFixed(numeric, fixedFormat.decimals);
          return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
      }
      static fromBytes(value, format) {
          if (format == null) {
              format = "fixed";
          }
          const fixedFormat = FixedFormat.from(format);
          if (arrayify(value).length > fixedFormat.width / 8) {
              throw new Error("overflow");
          }
          let numeric = BigNumber.from(value);
          if (fixedFormat.signed) {
              numeric = numeric.fromTwos(fixedFormat.width);
          }
          const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
          const decimal = formatFixed(numeric, fixedFormat.decimals);
          return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
      }
      static from(value, format) {
          if (typeof (value) === "string") {
              return FixedNumber.fromString(value, format);
          }
          if (isBytes$3(value)) {
              return FixedNumber.fromBytes(value, format);
          }
          try {
              return FixedNumber.fromValue(value, 0, format);
          }
          catch (error) {
              // Allow NUMERIC_FAULT to bubble up
              if (error.code !== Logger.errors.INVALID_ARGUMENT) {
                  throw error;
              }
          }
          return logger$1.throwArgumentError("invalid FixedNumber value", "value", value);
      }
      static isFixedNumber(value) {
          return !!(value && value._isFixedNumber);
      }
  }
  const ONE = FixedNumber.from(1);
  const BUMP = FixedNumber.from("0.5");

  const version$2 = "strings/5.8.0";

  const logger = new Logger(version$2);
  ///////////////////////////////
  var UnicodeNormalizationForm;
  (function (UnicodeNormalizationForm) {
      UnicodeNormalizationForm["current"] = "";
      UnicodeNormalizationForm["NFC"] = "NFC";
      UnicodeNormalizationForm["NFD"] = "NFD";
      UnicodeNormalizationForm["NFKC"] = "NFKC";
      UnicodeNormalizationForm["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
  var Utf8ErrorReason;
  (function (Utf8ErrorReason) {
      // A continuation byte was present where there was nothing to continue
      // - offset = the index the codepoint began in
      Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
      // - offset = the index the codepoint began in
      Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
      // The string is too short to process the expected codepoint
      // - offset = the index the codepoint began in
      Utf8ErrorReason["OVERRUN"] = "string overrun";
      // A missing continuation byte was expected but not found
      // - offset = the index the continuation byte was expected at
      Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
      // The computed code point is outside the range for UTF-8
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; outside the UTF-8 range
      Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
      // UTF-8 strings may not contain UTF-16 surrogate pairs
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
      Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
      // The string is an overlong representation
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; already bounds checked
      Utf8ErrorReason["OVERLONG"] = "overlong representation";
  })(Utf8ErrorReason || (Utf8ErrorReason = {}));
  function errorFunc(reason, offset, bytes, output, badCodepoint) {
      return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
  }
  function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
      // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
      if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
          let i = 0;
          for (let o = offset + 1; o < bytes.length; o++) {
              if (bytes[o] >> 6 !== 0x02) {
                  break;
              }
              i++;
          }
          return i;
      }
      // This byte runs us past the end of the string, so just jump to the end
      // (but the first byte was read already read and therefore skipped)
      if (reason === Utf8ErrorReason.OVERRUN) {
          return bytes.length - offset - 1;
      }
      // Nothing to skip
      return 0;
  }
  function replaceFunc(reason, offset, bytes, output, badCodepoint) {
      // Overlong representations are otherwise "valid" code points; just non-deistingtished
      if (reason === Utf8ErrorReason.OVERLONG) {
          output.push(badCodepoint);
          return 0;
      }
      // Put the replacement character into the output
      output.push(0xfffd);
      // Otherwise, process as if ignoring errors
      return ignoreFunc(reason, offset, bytes);
  }
  // Common error handing strategies
  const Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
  });
  // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
  function getUtf8CodePoints(bytes, onError) {
      if (onError == null) {
          onError = Utf8ErrorFuncs.error;
      }
      bytes = arrayify(bytes);
      const result = [];
      let i = 0;
      // Invalid bytes are ignored
      while (i < bytes.length) {
          const c = bytes[i++];
          // 0xxx xxxx
          if (c >> 7 === 0) {
              result.push(c);
              continue;
          }
          // Multibyte; how many bytes left for this character?
          let extraLength = null;
          let overlongMask = null;
          // 110x xxxx 10xx xxxx
          if ((c & 0xe0) === 0xc0) {
              extraLength = 1;
              overlongMask = 0x7f;
              // 1110 xxxx 10xx xxxx 10xx xxxx
          }
          else if ((c & 0xf0) === 0xe0) {
              extraLength = 2;
              overlongMask = 0x7ff;
              // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
          }
          else if ((c & 0xf8) === 0xf0) {
              extraLength = 3;
              overlongMask = 0xffff;
          }
          else {
              if ((c & 0xc0) === 0x80) {
                  i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
              }
              else {
                  i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
              }
              continue;
          }
          // Do we have enough bytes in our data?
          if (i - 1 + extraLength >= bytes.length) {
              i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
              continue;
          }
          // Remove the length prefix from the char
          let res = c & ((1 << (8 - extraLength - 1)) - 1);
          for (let j = 0; j < extraLength; j++) {
              let nextChar = bytes[i];
              // Invalid continuation byte
              if ((nextChar & 0xc0) != 0x80) {
                  i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                  res = null;
                  break;
              }
              res = (res << 6) | (nextChar & 0x3f);
              i++;
          }
          // See above loop for invalid continuation byte
          if (res === null) {
              continue;
          }
          // Maximum code point
          if (res > 0x10ffff) {
              i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          // Reserved for UTF-16 surrogate halves
          if (res >= 0xd800 && res <= 0xdfff) {
              i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          // Check for overlong sequences (more bytes than needed)
          if (res <= overlongMask) {
              i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          result.push(res);
      }
      return result;
  }
  function _toUtf8String(codePoints) {
      return codePoints.map((codePoint) => {
          if (codePoint <= 0xffff) {
              return String.fromCharCode(codePoint);
          }
          codePoint -= 0x10000;
          return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
      }).join("");
  }
  function toUtf8String(bytes, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes, onError));
  }

  function parseBytes32String(bytes) {
      const data = arrayify(bytes);
      // Must be 32 bytes with a null-termination
      if (data.length !== 32) {
          throw new Error("invalid bytes32 - not 32 bytes long");
      }
      if (data[31] !== 0) {
          throw new Error("invalid bytes32 string - no null terminator");
      }
      // Find the null termination
      let length = 31;
      while (data[length - 1] === 0) {
          length--;
      }
      // Determine the string value
      return toUtf8String(data.slice(0, length));
  }

  const names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether",
  ];
  function formatUnits(value, unitName) {
      if (typeof (unitName) === "string") {
          const index = names.indexOf(unitName);
          if (index !== -1) {
              unitName = 3 * index;
          }
      }
      return formatFixed(value, (unitName != null) ? unitName : 18);
  }
  function formatEther(wei) {
      return formatUnits(wei, 18);
  }

  function equals$1(aa, bb) {
      if (aa === bb) {
          return true;
      }
      if (aa.byteLength !== bb.byteLength) {
          return false;
      }
      for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
              return false;
          }
      }
      return true;
  }
  function coerce$1(o) {
      if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') {
          return o;
      }
      if (o instanceof ArrayBuffer) {
          return new Uint8Array(o);
      }
      if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
      }
      throw new Error('Unknown type, must be binary type');
  }

  /* eslint-disable */
  // base-x encoding / decoding
  // Copyright (c) 2018 base-x contributors
  // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
  // Distributed under the MIT software license, see the accompanying
  // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
  /**
   * @param {string} ALPHABET
   * @param {any} name
   */
  function base$2(ALPHABET, name) {
      if (ALPHABET.length >= 255) {
          throw new TypeError('Alphabet too long');
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
              throw new TypeError(x + ' is ambiguous');
          }
          BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
      var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
      /**
       * @param {any[] | Iterable<number>} source
       */
      function encode(source) {
          // @ts-ignore
          if (source instanceof Uint8Array)
              ;
          else if (ArrayBuffer.isView(source)) {
              source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
          }
          else if (Array.isArray(source)) {
              source = Uint8Array.from(source);
          }
          if (!(source instanceof Uint8Array)) {
              throw new TypeError('Expected Uint8Array');
          }
          if (source.length === 0) {
              return '';
          }
          // Skip & count leading zeroes.
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
              pbegin++;
              zeroes++;
          }
          // Allocate enough space in big-endian base58 representation.
          var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
          var b58 = new Uint8Array(size);
          // Process the bytes.
          while (pbegin !== pend) {
              var carry = source[pbegin];
              // Apply "b58 = b58 * 256 + ch".
              var i = 0;
              for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
                  carry += (256 * b58[it1]) >>> 0;
                  b58[it1] = (carry % BASE) >>> 0;
                  carry = (carry / BASE) >>> 0;
              }
              if (carry !== 0) {
                  throw new Error('Non-zero carry');
              }
              length = i;
              pbegin++;
          }
          // Skip leading zeroes in base58 result.
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
              it2++;
          }
          // Translate the result into a string.
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
              str += ALPHABET.charAt(b58[it2]);
          }
          return str;
      }
      /**
       * @param {string | string[]} source
       */
      function decodeUnsafe(source) {
          if (typeof source !== 'string') {
              throw new TypeError('Expected String');
          }
          if (source.length === 0) {
              return new Uint8Array();
          }
          var psz = 0;
          // Skip leading spaces.
          if (source[psz] === ' ') {
              return;
          }
          // Skip and count leading '1's.
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
              zeroes++;
              psz++;
          }
          // Allocate enough space in big-endian base256 representation.
          var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
          var b256 = new Uint8Array(size);
          // Process the characters.
          while (source[psz]) {
              // Decode character
              var carry = BASE_MAP[source.charCodeAt(psz)];
              // Invalid character
              if (carry === 255) {
                  return;
              }
              var i = 0;
              for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
                  carry += (BASE * b256[it3]) >>> 0;
                  b256[it3] = (carry % 256) >>> 0;
                  carry = (carry / 256) >>> 0;
              }
              if (carry !== 0) {
                  throw new Error('Non-zero carry');
              }
              length = i;
              psz++;
          }
          // Skip trailing spaces.
          if (source[psz] === ' ') {
              return;
          }
          // Skip leading zeroes in b256.
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
              it4++;
          }
          var vch = new Uint8Array(zeroes + (size - it4));
          var j = zeroes;
          while (it4 !== size) {
              vch[j++] = b256[it4++];
          }
          return vch;
      }
      /**
       * @param {string | string[]} string
       */
      function decode(string) {
          var buffer = decodeUnsafe(string);
          if (buffer) {
              return buffer;
          }
          throw new Error(`Non-${name} character`);
      }
      return {
          encode: encode,
          decodeUnsafe: decodeUnsafe,
          decode: decode
      };
  }
  var src = base$2;
  var _brrp__multiformats_scope_baseX = src;

  /**
   * Class represents both BaseEncoder and MultibaseEncoder meaning it
   * can be used to encode to multibase or base encode without multibase
   * prefix.
   */
  class Encoder {
      name;
      prefix;
      baseEncode;
      constructor(name, prefix, baseEncode) {
          this.name = name;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
      }
      encode(bytes) {
          if (bytes instanceof Uint8Array) {
              return `${this.prefix}${this.baseEncode(bytes)}`;
          }
          else {
              throw Error('Unknown type, must be binary type');
          }
      }
  }
  /**
   * Class represents both BaseDecoder and MultibaseDecoder so it could be used
   * to decode multibases (with matching prefix) or just base decode strings
   * with corresponding base encoding.
   */
  class Decoder {
      name;
      prefix;
      baseDecode;
      prefixCodePoint;
      constructor(name, prefix, baseDecode) {
          this.name = name;
          this.prefix = prefix;
          const prefixCodePoint = prefix.codePointAt(0);
          /* c8 ignore next 3 */
          if (prefixCodePoint === undefined) {
              throw new Error('Invalid prefix character');
          }
          this.prefixCodePoint = prefixCodePoint;
          this.baseDecode = baseDecode;
      }
      decode(text) {
          if (typeof text === 'string') {
              if (text.codePointAt(0) !== this.prefixCodePoint) {
                  throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
              }
              return this.baseDecode(text.slice(this.prefix.length));
          }
          else {
              throw Error('Can only multibase decode strings');
          }
      }
      or(decoder) {
          return or(this, decoder);
      }
  }
  class ComposedDecoder {
      decoders;
      constructor(decoders) {
          this.decoders = decoders;
      }
      or(decoder) {
          return or(this, decoder);
      }
      decode(input) {
          const prefix = input[0];
          const decoder = this.decoders[prefix];
          if (decoder != null) {
              return decoder.decode(input);
          }
          else {
              throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
      }
  }
  function or(left, right) {
      return new ComposedDecoder({
          ...(left.decoders ?? { [left.prefix]: left }),
          ...(right.decoders ?? { [right.prefix]: right })
      });
  }
  class Codec {
      name;
      prefix;
      baseEncode;
      baseDecode;
      encoder;
      decoder;
      constructor(name, prefix, baseEncode, baseDecode) {
          this.name = name;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder(name, prefix, baseEncode);
          this.decoder = new Decoder(name, prefix, baseDecode);
      }
      encode(input) {
          return this.encoder.encode(input);
      }
      decode(input) {
          return this.decoder.decode(input);
      }
  }
  function from({ name, prefix, encode, decode }) {
      return new Codec(name, prefix, encode, decode);
  }
  function baseX({ name, prefix, alphabet }) {
      const { encode, decode } = _brrp__multiformats_scope_baseX(alphabet, name);
      return from({
          prefix,
          name,
          encode,
          decode: (text) => coerce$1(decode(text))
      });
  }
  function decode$3(string, alphabetIdx, bitsPerChar, name) {
      // Count the padding bytes:
      let end = string.length;
      while (string[end - 1] === '=') {
          --end;
      }
      // Allocate the output:
      const out = new Uint8Array((end * bitsPerChar / 8) | 0);
      // Parse the data:
      let bits = 0; // Number of bits currently in the buffer
      let buffer = 0; // Bits waiting to be written out, MSB first
      let written = 0; // Next byte to write
      for (let i = 0; i < end; ++i) {
          // Read one character from the string:
          const value = alphabetIdx[string[i]];
          if (value === undefined) {
              throw new SyntaxError(`Non-${name} character`);
          }
          // Append the bits to the buffer:
          buffer = (buffer << bitsPerChar) | value;
          bits += bitsPerChar;
          // Write out some bits if the buffer has a byte's worth:
          if (bits >= 8) {
              bits -= 8;
              out[written++] = 0xff & (buffer >> bits);
          }
      }
      // Verify that we have received just enough bits:
      if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {
          throw new SyntaxError('Unexpected end of data');
      }
      return out;
  }
  function encode$1(data, alphabet, bitsPerChar) {
      const pad = alphabet[alphabet.length - 1] === '=';
      const mask = (1 << bitsPerChar) - 1;
      let out = '';
      let bits = 0; // Number of bits currently in the buffer
      let buffer = 0; // Bits waiting to be written out, MSB first
      for (let i = 0; i < data.length; ++i) {
          // Slurp data into the buffer:
          buffer = (buffer << 8) | data[i];
          bits += 8;
          // Write out as much as we can:
          while (bits > bitsPerChar) {
              bits -= bitsPerChar;
              out += alphabet[mask & (buffer >> bits)];
          }
      }
      // Partial character:
      if (bits !== 0) {
          out += alphabet[mask & (buffer << (bitsPerChar - bits))];
      }
      // Add padding characters until we hit a byte boundary:
      if (pad) {
          while (((out.length * bitsPerChar) & 7) !== 0) {
              out += '=';
          }
      }
      return out;
  }
  function createAlphabetIdx(alphabet) {
      // Build the character lookup table:
      const alphabetIdx = {};
      for (let i = 0; i < alphabet.length; ++i) {
          alphabetIdx[alphabet[i]] = i;
      }
      return alphabetIdx;
  }
  /**
   * RFC4648 Factory
   */
  function rfc4648({ name, prefix, bitsPerChar, alphabet }) {
      const alphabetIdx = createAlphabetIdx(alphabet);
      return from({
          prefix,
          name,
          encode(input) {
              return encode$1(input, alphabet, bitsPerChar);
          },
          decode(input) {
              return decode$3(input, alphabetIdx, bitsPerChar, name);
          }
      });
  }

  const base32 = rfc4648({
      prefix: 'b',
      name: 'base32',
      alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
      bitsPerChar: 5
  });
  rfc4648({
      prefix: 'B',
      name: 'base32upper',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
      bitsPerChar: 5
  });
  rfc4648({
      prefix: 'c',
      name: 'base32pad',
      alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
      bitsPerChar: 5
  });
  rfc4648({
      prefix: 'C',
      name: 'base32padupper',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
      bitsPerChar: 5
  });
  rfc4648({
      prefix: 'v',
      name: 'base32hex',
      alphabet: '0123456789abcdefghijklmnopqrstuv',
      bitsPerChar: 5
  });
  rfc4648({
      prefix: 'V',
      name: 'base32hexupper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
      bitsPerChar: 5
  });
  rfc4648({
      prefix: 't',
      name: 'base32hexpad',
      alphabet: '0123456789abcdefghijklmnopqrstuv=',
      bitsPerChar: 5
  });
  rfc4648({
      prefix: 'T',
      name: 'base32hexpadupper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
      bitsPerChar: 5
  });
  rfc4648({
      prefix: 'h',
      name: 'base32z',
      alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
      bitsPerChar: 5
  });

  const base36 = baseX({
      prefix: 'k',
      name: 'base36',
      alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
  });
  baseX({
      prefix: 'K',
      name: 'base36upper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  });

  const base58btc = baseX({
      name: 'base58btc',
      prefix: 'z',
      alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
  });
  baseX({
      name: 'base58flickr',
      prefix: 'Z',
      alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
  });

  /* eslint-disable */
  var encode_1 = encode;
  var MSB = 0x80, MSBALL = -128, INT = Math.pow(2, 31);
  /**
   * @param {number} num
   * @param {number[]} out
   * @param {number} offset
   */
  function encode(num, out, offset) {
      out = out || [];
      offset = offset || 0;
      var oldOffset = offset;
      while (num >= INT) {
          out[offset++] = (num & 0xFF) | MSB;
          num /= 128;
      }
      while (num & MSBALL) {
          out[offset++] = (num & 0xFF) | MSB;
          num >>>= 7;
      }
      out[offset] = num | 0;
      // @ts-ignore
      encode.bytes = offset - oldOffset + 1;
      return out;
  }
  var decode$2 = read;
  var MSB$1 = 0x80, REST$1 = 0x7F;
  /**
   * @param {string | any[]} buf
   * @param {number} offset
   */
  function read(buf, offset) {
      var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
      do {
          if (counter >= l) {
              // @ts-ignore
              read.bytes = 0;
              throw new RangeError('Could not decode varint');
          }
          b = buf[counter++];
          res += shift < 28
              ? (b & REST$1) << shift
              : (b & REST$1) * Math.pow(2, shift);
          shift += 7;
      } while (b >= MSB$1);
      // @ts-ignore
      read.bytes = counter - offset;
      return res;
  }
  var N1 = Math.pow(2, 7);
  var N2 = Math.pow(2, 14);
  var N3 = Math.pow(2, 21);
  var N4 = Math.pow(2, 28);
  var N5 = Math.pow(2, 35);
  var N6 = Math.pow(2, 42);
  var N7 = Math.pow(2, 49);
  var N8 = Math.pow(2, 56);
  var N9 = Math.pow(2, 63);
  var length = function (/** @type {number} */ value) {
      return (value < N1 ? 1
          : value < N2 ? 2
              : value < N3 ? 3
                  : value < N4 ? 4
                      : value < N5 ? 5
                          : value < N6 ? 6
                              : value < N7 ? 7
                                  : value < N8 ? 8
                                      : value < N9 ? 9
                                          : 10);
  };
  var varint = {
      encode: encode_1,
      decode: decode$2,
      encodingLength: length
  };
  var _brrp_varint = varint;

  function decode$1(data, offset = 0) {
      const code = _brrp_varint.decode(data, offset);
      return [code, _brrp_varint.decode.bytes];
  }
  function encodeTo(int, target, offset = 0) {
      _brrp_varint.encode(int, target, offset);
      return target;
  }
  function encodingLength(int) {
      return _brrp_varint.encodingLength(int);
  }

  /**
   * Creates a multihash digest.
   */
  function create$1(code, digest) {
      const size = digest.byteLength;
      const sizeOffset = encodingLength(code);
      const digestOffset = sizeOffset + encodingLength(size);
      const bytes = new Uint8Array(digestOffset + size);
      encodeTo(code, bytes, 0);
      encodeTo(size, bytes, sizeOffset);
      bytes.set(digest, digestOffset);
      return new Digest(code, size, digest, bytes);
  }
  /**
   * Turns bytes representation of multihash digest into an instance.
   */
  function decode(multihash) {
      const bytes = coerce$1(multihash);
      const [code, sizeOffset] = decode$1(bytes);
      const [size, digestOffset] = decode$1(bytes.subarray(sizeOffset));
      const digest = bytes.subarray(sizeOffset + digestOffset);
      if (digest.byteLength !== size) {
          throw new Error('Incorrect length');
      }
      return new Digest(code, size, digest, bytes);
  }
  function equals(a, b) {
      if (a === b) {
          return true;
      }
      else {
          const data = b;
          return (a.code === data.code &&
              a.size === data.size &&
              data.bytes instanceof Uint8Array &&
              equals$1(a.bytes, data.bytes));
      }
  }
  /**
   * Represents a multihash digest which carries information about the
   * hashing algorithm and an actual hash digest.
   */
  class Digest {
      code;
      size;
      digest;
      bytes;
      /**
       * Creates a multihash digest.
       */
      constructor(code, size, digest, bytes) {
          this.code = code;
          this.size = size;
          this.digest = digest;
          this.bytes = bytes;
      }
  }

  function format$1(link, base) {
      const { bytes, version } = link;
      switch (version) {
          case 0:
              return toStringV0(bytes, baseCache(link), base ?? base58btc.encoder);
          default:
              return toStringV1(bytes, baseCache(link), (base ?? base32.encoder));
      }
  }
  const cache = new WeakMap();
  function baseCache(cid) {
      const baseCache = cache.get(cid);
      if (baseCache == null) {
          const baseCache = new Map();
          cache.set(cid, baseCache);
          return baseCache;
      }
      return baseCache;
  }
  class CID {
      code;
      version;
      multihash;
      bytes;
      '/';
      /**
       * @param version - Version of the CID
       * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
       * @param multihash - (Multi)hash of the of the content.
       */
      constructor(version, code, multihash, bytes) {
          this.code = code;
          this.version = version;
          this.multihash = multihash;
          this.bytes = bytes;
          // flag to serializers that this is a CID and
          // should be treated specially
          this['/'] = bytes;
      }
      /**
       * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`
       * please either use `CID.asCID(cid)` or switch to new signalling mechanism
       *
       * @deprecated
       */
      get asCID() {
          return this;
      }
      // ArrayBufferView
      get byteOffset() {
          return this.bytes.byteOffset;
      }
      // ArrayBufferView
      get byteLength() {
          return this.bytes.byteLength;
      }
      toV0() {
          switch (this.version) {
              case 0: {
                  return this;
              }
              case 1: {
                  const { code, multihash } = this;
                  if (code !== DAG_PB_CODE) {
                      throw new Error('Cannot convert a non dag-pb CID to CIDv0');
                  }
                  // sha2-256
                  if (multihash.code !== SHA_256_CODE) {
                      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
                  }
                  return (CID.createV0(multihash));
              }
              default: {
                  throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
              }
          }
      }
      toV1() {
          switch (this.version) {
              case 0: {
                  const { code, digest } = this.multihash;
                  const multihash = create$1(code, digest);
                  return (CID.createV1(this.code, multihash));
              }
              case 1: {
                  return this;
              }
              default: {
                  throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);
              }
          }
      }
      equals(other) {
          return CID.equals(this, other);
      }
      static equals(self, other) {
          const unknown = other;
          return (unknown != null &&
              self.code === unknown.code &&
              self.version === unknown.version &&
              equals(self.multihash, unknown.multihash));
      }
      toString(base) {
          return format$1(this, base);
      }
      toJSON() {
          return { '/': format$1(this) };
      }
      link() {
          return this;
      }
      [Symbol.toStringTag] = 'CID';
      // Legacy
      [Symbol.for('nodejs.util.inspect.custom')]() {
          return `CID(${this.toString()})`;
      }
      /**
       * Takes any input `value` and returns a `CID` instance if it was
       * a `CID` otherwise returns `null`. If `value` is instanceof `CID`
       * it will return value back. If `value` is not instance of this CID
       * class, but is compatible CID it will return new instance of this
       * `CID` class. Otherwise returns null.
       *
       * This allows two different incompatible versions of CID library to
       * co-exist and interop as long as binary interface is compatible.
       */
      static asCID(input) {
          if (input == null) {
              return null;
          }
          const value = input;
          if (value instanceof CID) {
              // If value is instance of CID then we're all set.
              return value;
          }
          else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {
              // If value isn't instance of this CID class but `this.asCID === this` or
              // `value['/'] === value.bytes` is true it is CID instance coming from a
              // different implementation (diff version or duplicate). In that case we
              // rebase it to this `CID` implementation so caller is guaranteed to get
              // instance with expected API.
              const { version, code, multihash, bytes } = value;
              return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));
          }
          else if (value[cidSymbol] === true) {
              // If value is a CID from older implementation that used to be tagged via
              // symbol we still rebase it to the this `CID` implementation by
              // delegating that to a constructor.
              const { version, multihash, code } = value;
              const digest = decode(multihash);
              return CID.create(version, code, digest);
          }
          else {
              // Otherwise value is not a CID (or an incompatible version of it) in
              // which case we return `null`.
              return null;
          }
      }
      /**
       * @param version - Version of the CID
       * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
       * @param digest - (Multi)hash of the of the content.
       */
      static create(version, code, digest) {
          if (typeof code !== 'number') {
              throw new Error('String codecs are no longer supported');
          }
          if (!(digest.bytes instanceof Uint8Array)) {
              throw new Error('Invalid digest');
          }
          switch (version) {
              case 0: {
                  if (code !== DAG_PB_CODE) {
                      throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
                  }
                  else {
                      return new CID(version, code, digest, digest.bytes);
                  }
              }
              case 1: {
                  const bytes = encodeCID(version, code, digest.bytes);
                  return new CID(version, code, digest, bytes);
              }
              default: {
                  throw new Error('Invalid version');
              }
          }
      }
      /**
       * Simplified version of `create` for CIDv0.
       */
      static createV0(digest) {
          return CID.create(0, DAG_PB_CODE, digest);
      }
      /**
       * Simplified version of `create` for CIDv1.
       *
       * @param code - Content encoding format code.
       * @param digest - Multihash of the content.
       */
      static createV1(code, digest) {
          return CID.create(1, code, digest);
      }
      /**
       * Decoded a CID from its binary representation. The byte array must contain
       * only the CID with no additional bytes.
       *
       * An error will be thrown if the bytes provided do not contain a valid
       * binary representation of a CID.
       */
      static decode(bytes) {
          const [cid, remainder] = CID.decodeFirst(bytes);
          if (remainder.length !== 0) {
              throw new Error('Incorrect length');
          }
          return cid;
      }
      /**
       * Decoded a CID from its binary representation at the beginning of a byte
       * array.
       *
       * Returns an array with the first element containing the CID and the second
       * element containing the remainder of the original byte array. The remainder
       * will be a zero-length byte array if the provided bytes only contained a
       * binary CID representation.
       */
      static decodeFirst(bytes) {
          const specs = CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce$1(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
              throw new Error('Incorrect length');
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0
              ? CID.createV0(digest)
              : CID.createV1(specs.codec, digest);
          return [cid, bytes.subarray(specs.size)];
      }
      /**
       * Inspect the initial bytes of a CID to determine its properties.
       *
       * Involves decoding up to 4 varints. Typically this will require only 4 to 6
       * bytes but for larger multicodec code values and larger multihash digest
       * lengths these varints can be quite large. It is recommended that at least
       * 10 bytes be made available in the `initialBytes` argument for a complete
       * inspection.
       */
      static inspectBytes(initialBytes) {
          let offset = 0;
          const next = () => {
              const [i, length] = decode$1(initialBytes.subarray(offset));
              offset += length;
              return i;
          };
          let version = next();
          let codec = DAG_PB_CODE;
          if (version === 18) {
              // CIDv0
              version = 0;
              offset = 0;
          }
          else {
              codec = next();
          }
          if (version !== 0 && version !== 1) {
              throw new RangeError(`Invalid CID version ${version}`);
          }
          const prefixSize = offset;
          const multihashCode = next(); // multihash code
          const digestSize = next(); // multihash length
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return { version, codec, multihashCode, digestSize, multihashSize, size };
      }
      /**
       * Takes cid in a string representation and creates an instance. If `base`
       * decoder is not provided will use a default from the configuration. It will
       * throw an error if encoding of the CID is not compatible with supplied (or
       * a default decoder).
       */
      static parse(source, base) {
          const [prefix, bytes] = parseCIDtoBytes(source, base);
          const cid = CID.decode(bytes);
          if (cid.version === 0 && source[0] !== 'Q') {
              throw Error('Version 0 CID string must not include multibase prefix');
          }
          // Cache string representation to avoid computing it on `this.toString()`
          baseCache(cid).set(prefix, source);
          return cid;
      }
  }
  function parseCIDtoBytes(source, base) {
      switch (source[0]) {
          // CIDv0 is parsed differently
          case 'Q': {
              const decoder = base ?? base58btc;
              return [
                  base58btc.prefix,
                  decoder.decode(`${base58btc.prefix}${source}`)
              ];
          }
          case base58btc.prefix: {
              const decoder = base ?? base58btc;
              return [base58btc.prefix, decoder.decode(source)];
          }
          case base32.prefix: {
              const decoder = base ?? base32;
              return [base32.prefix, decoder.decode(source)];
          }
          case base36.prefix: {
              const decoder = base ?? base36;
              return [base36.prefix, decoder.decode(source)];
          }
          default: {
              if (base == null) {
                  throw Error('To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided');
              }
              return [source[0], base.decode(source)];
          }
      }
  }
  function toStringV0(bytes, cache, base) {
      const { prefix } = base;
      if (prefix !== base58btc.prefix) {
          throw Error(`Cannot string encode V0 in ${base.name} encoding`);
      }
      const cid = cache.get(prefix);
      if (cid == null) {
          const cid = base.encode(bytes).slice(1);
          cache.set(prefix, cid);
          return cid;
      }
      else {
          return cid;
      }
  }
  function toStringV1(bytes, cache, base) {
      const { prefix } = base;
      const cid = cache.get(prefix);
      if (cid == null) {
          const cid = base.encode(bytes);
          cache.set(prefix, cid);
          return cid;
      }
      else {
          return cid;
      }
  }
  const DAG_PB_CODE = 0x70;
  const SHA_256_CODE = 0x12;
  function encodeCID(version, code, multihash) {
      const codeOffset = encodingLength(version);
      const hashOffset = codeOffset + encodingLength(code);
      const bytes = new Uint8Array(hashOffset + multihash.byteLength);
      encodeTo(version, bytes, 0);
      encodeTo(code, bytes, codeOffset);
      bytes.set(multihash, hashOffset);
      return bytes;
  }
  const cidSymbol = Symbol.for('@ipld/js-cid/CID');

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var FMT_NUMBER;
  (function (FMT_NUMBER) {
      FMT_NUMBER["NUMBER"] = "NUMBER_NUMBER";
      FMT_NUMBER["HEX"] = "NUMBER_HEX";
      FMT_NUMBER["STR"] = "NUMBER_STR";
      FMT_NUMBER["BIGINT"] = "NUMBER_BIGINT";
  })(FMT_NUMBER || (FMT_NUMBER = {}));
  var FMT_BYTES;
  (function (FMT_BYTES) {
      FMT_BYTES["HEX"] = "BYTES_HEX";
      FMT_BYTES["UINT8ARRAY"] = "BYTES_UINT8ARRAY";
  })(FMT_BYTES || (FMT_BYTES = {}));
  const DEFAULT_RETURN_FORMAT = {
      number: FMT_NUMBER.BIGINT,
      bytes: FMT_BYTES.HEX,
  };
  const ETH_DATA_FORMAT = { number: FMT_NUMBER.HEX, bytes: FMT_BYTES.HEX };

  var BlockTags;
  (function (BlockTags) {
      BlockTags["EARLIEST"] = "earliest";
      BlockTags["LATEST"] = "latest";
      BlockTags["PENDING"] = "pending";
      BlockTags["SAFE"] = "safe";
      BlockTags["FINALIZED"] = "finalized";
      BlockTags["COMMITTED"] = "committed";
  })(BlockTags || (BlockTags = {}));
  // This list of hardforks is expected to be in order
  // keep this in mind when making changes to it
  var HardforksOrdered;
  (function (HardforksOrdered) {
      HardforksOrdered["chainstart"] = "chainstart";
      HardforksOrdered["frontier"] = "frontier";
      HardforksOrdered["homestead"] = "homestead";
      HardforksOrdered["dao"] = "dao";
      HardforksOrdered["tangerineWhistle"] = "tangerineWhistle";
      HardforksOrdered["spuriousDragon"] = "spuriousDragon";
      HardforksOrdered["byzantium"] = "byzantium";
      HardforksOrdered["constantinople"] = "constantinople";
      HardforksOrdered["petersburg"] = "petersburg";
      HardforksOrdered["istanbul"] = "istanbul";
      HardforksOrdered["muirGlacier"] = "muirGlacier";
      HardforksOrdered["berlin"] = "berlin";
      HardforksOrdered["london"] = "london";
      HardforksOrdered["altair"] = "altair";
      HardforksOrdered["arrowGlacier"] = "arrowGlacier";
      HardforksOrdered["grayGlacier"] = "grayGlacier";
      HardforksOrdered["bellatrix"] = "bellatrix";
      HardforksOrdered["merge"] = "merge";
      HardforksOrdered["capella"] = "capella";
      HardforksOrdered["shanghai"] = "shanghai";
  })(HardforksOrdered || (HardforksOrdered = {}));

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const TypedArray = Object.getPrototypeOf(Uint8Array);

  var __awaiter$O = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const symbol = Symbol.for('web3/base-provider');
  // Provider interface compatible with EIP-1193
  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md
  class Web3BaseProvider {
      static isWeb3Provider(provider) {
          return (provider instanceof Web3BaseProvider ||
              Boolean(provider && provider[symbol]));
      }
      // To match an object "instanceof" does not work if
      // matcher class and object is using different package versions
      // to overcome this bottleneck used this approach.
      // The symbol value for one string will always remain same regardless of package versions
      // eslint-disable-next-line class-methods-use-this
      get [symbol]() {
          return true;
      }
      /**
       * @deprecated Please use `.request` instead.
       * @param payload - Request Payload
       * @param callback - Callback
       */
      send(payload, 
      // eslint-disable-next-line @typescript-eslint/ban-types
      callback) {
          this.request(payload)
              .then(response => {
              // eslint-disable-next-line no-null/no-null
              callback(null, response);
          })
              .catch((err) => {
              callback(err);
          });
      }
      /**
       * @deprecated Please use `.request` instead.
       * @param payload - Request Payload
       */
      sendAsync(payload) {
          return __awaiter$O(this, void 0, void 0, function* () {
              return this.request(payload);
          });
      }
      /**
       * Modify the return type of the request method to be fully compatible with EIP-1193
       *
       * [deprecated] In the future major releases (\>= v5) all providers are supposed to be fully compatible with EIP-1193.
       * So this method will not be needed and would not be available in the future.
       *
       * @returns A new instance of the provider with the request method fully compatible with EIP-1193
       *
       * @example
       * ```ts
       * const provider = new Web3HttpProvider('http://localhost:8545');
       * const fullyCompatibleProvider = provider.asEIP1193Provider();
       * const result = await fullyCompatibleProvider.request({ method: 'eth_getBalance' });
       * console.log(result); // '0x0234c8a3397aab58' or something like that
       * ```
       */
      asEIP1193Provider() {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          const newObj = Object.create(this);
          // eslint-disable-next-line @typescript-eslint/unbound-method
          const originalRequest = newObj.request;
          newObj.request = function request(args) {
              return __awaiter$O(this, void 0, void 0, function* () {
                  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                  const response = (yield originalRequest(args));
                  return response.result;
              });
          };
          // @ts-expect-error the property should not be available in the new object because of using Object.create(this).
          //	But it is available if we do not delete it.
          newObj.asEIP1193Provider = undefined; // to prevent the user for calling this method again
          return newObj;
      }
  }

  class Web3BaseWallet extends Array {
      constructor(accountProvider) {
          super();
          this._accountProvider = accountProvider;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // Response error
  const ERR_RESPONSE = 100;
  const ERR_INVALID_RESPONSE = 101;
  const ERR_FORMATTERS = 201;
  const ERR_METHOD_NOT_IMPLEMENTED = 202;
  const ERR_OPERATION_TIMEOUT = 203;
  const ERR_OPERATION_ABORT = 204;
  const ERR_ABI_ENCODING = 205;
  const ERR_EXISTING_PLUGIN_NAMESPACE = 206;
  const ERR_INVALID_METHOD_PARAMS = 207;
  const ERR_MULTIPLE_ERRORS = 208;
  // Contract error codes
  const ERR_CONTRACT = 300;
  const ERR_CONTRACT_RESOLVER_MISSING = 301;
  const ERR_CONTRACT_EXECUTION_REVERTED = 310;
  const ERR_CONTRACT_TX_DATA_AND_INPUT = 311;
  // Transaction error codes
  const ERR_TX = 400;
  const ERR_TX_REVERT_TRANSACTION = 402;
  const ERR_TX_REVERT_WITHOUT_REASON = 405;
  const ERR_RAW_TX_UNDEFINED = 407;
  const ERR_TX_INVALID_SENDER = 408;
  const ERR_TX_MISSING_CUSTOM_CHAIN = 410;
  const ERR_TX_MISSING_CUSTOM_CHAIN_ID = 411;
  const ERR_TX_CHAIN_ID_MISMATCH = 412;
  const ERR_TX_INVALID_CHAIN_INFO = 413;
  const ERR_TX_MISSING_CHAIN_INFO = 414;
  const ERR_TX_MISSING_GAS = 415;
  const ERR_TX_INVALID_LEGACY_GAS = 416;
  const ERR_TX_INVALID_FEE_MARKET_GAS = 417;
  const ERR_TX_INVALID_FEE_MARKET_GAS_PRICE = 418;
  const ERR_TX_INVALID_LEGACY_FEE_MARKET = 419;
  const ERR_TX_INVALID_OBJECT = 420;
  const ERR_TX_INVALID_NONCE_OR_CHAIN_ID = 421;
  const ERR_TX_UNABLE_TO_POPULATE_NONCE = 422;
  const ERR_TX_UNSUPPORTED_EIP_1559 = 423;
  const ERR_TX_UNSUPPORTED_TYPE = 424;
  const ERR_TX_DATA_AND_INPUT = 425;
  const ERR_TX_POLLING_TIMEOUT = 426;
  const ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL = 427;
  const ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER = 428;
  const ERR_TX_LOCAL_WALLET_NOT_AVAILABLE = 429;
  const ERR_TX_NOT_FOUND = 430;
  const ERR_TX_SEND_TIMEOUT = 431;
  const ERR_TX_BLOCK_TIMEOUT = 432;
  const ERR_TX_SIGNING = 433;
  const ERR_TX_GAS_MISMATCH = 434;
  const ERR_TX_CHAIN_MISMATCH = 435;
  const ERR_TX_HARDFORK_MISMATCH = 436;
  const ERR_TX_INVALID_RECEIVER = 437;
  const ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR = 438;
  const ERR_TX_INVALID_PROPERTIES_FOR_TYPE = 439;
  const ERR_TX_MISSING_GAS_INNER_ERROR = 440;
  const ERR_TX_GAS_MISMATCH_INNER_ERROR = 441;
  // Connection error codes
  const ERR_CONN = 500;
  const ERR_CONN_NOT_OPEN = 503;
  const ERR_CONN_MAX_ATTEMPTS = 505;
  const ERR_CONN_PENDING_REQUESTS = 506;
  const ERR_REQ_ALREADY_SENT = 507;
  // Provider error codes
  const ERR_PROVIDER = 600;
  const ERR_INVALID_CLIENT = 602;
  const ERR_SUBSCRIPTION = 603;
  const ERR_WS_PROVIDER = 604;
  // Account error codes
  const ERR_PRIVATE_KEY_LENGTH = 701;
  const ERR_INVALID_PRIVATE_KEY = 702;
  const ERR_UNSUPPORTED_KDF = 703;
  const ERR_KEY_DERIVATION_FAIL = 704;
  const ERR_KEY_VERSION_UNSUPPORTED = 705;
  const ERR_INVALID_PASSWORD = 706;
  const ERR_IV_LENGTH = 707;
  const ERR_PBKDF2_ITERATIONS = 709;
  // Signature error codes
  const ERR_SIGNATURE_FAILED = 801;
  const ERR_INVALID_SIGNATURE = 802;
  // RPC error codes (EIP-1193)
  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#provider-errors
  const JSONRPC_ERR_REJECTED_REQUEST = 4001;
  const JSONRPC_ERR_UNAUTHORIZED = 4100;
  const JSONRPC_ERR_UNSUPPORTED_METHOD = 4200;
  const JSONRPC_ERR_DISCONNECTED = 4900;
  const JSONRPC_ERR_CHAIN_DISCONNECTED = 4901;
  const ERR_ENS_UNSUPPORTED_NETWORK = 902;
  const ERR_ENS_NETWORK_NOT_SYNCED = 903;
  // Utils error codes
  const ERR_INVALID_STRING = 1001;
  const ERR_INVALID_BYTES = 1002;
  const ERR_INVALID_NUMBER = 1003;
  const ERR_INVALID_UNIT = 1004;
  const ERR_INVALID_ADDRESS = 1005;
  const ERR_INVALID_HEX = 1006;
  const ERR_INVALID_BOOLEAN = 1008;
  const ERR_INVALID_UNSIGNED_INTEGER = 1009;
  const ERR_INVALID_SIZE = 1010;
  const ERR_INVALID_LARGE_VALUE = 1011;
  const ERR_INVALID_BLOCK = 1012;
  const ERR_INVALID_NIBBLE_WIDTH = 1014;
  const ERR_INVALID_INTEGER = 1015;
  // Validation error codes
  const ERR_VALIDATION = 1100;
  // Core error codes
  const ERR_CORE_HARDFORK_MISMATCH = 1101;
  // Schema error codes
  const ERR_SCHEMA_FORMAT = 1200;
  // RPC error codes (EIP-1474)
  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1474.md
  const ERR_RPC_INVALID_JSON = -32700;
  const ERR_RPC_INVALID_REQUEST = -32600;
  const ERR_RPC_INVALID_METHOD = -32601;
  const ERR_RPC_INVALID_PARAMS = -32602;
  const ERR_RPC_INTERNAL_ERROR = -32603;
  const ERR_RPC_INVALID_INPUT = -32e3;
  const ERR_RPC_MISSING_RESOURCE = -32001;
  const ERR_RPC_UNAVAILABLE_RESOURCE = -32002;
  const ERR_RPC_TRANSACTION_REJECTED = -32003;
  const ERR_RPC_UNSUPPORTED_METHOD = -32004;
  const ERR_RPC_LIMIT_EXCEEDED = -32005;
  const ERR_RPC_NOT_SUPPORTED = -32006;

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * Base class for Web3 errors.
   */
  class BaseWeb3Error extends Error {
      /**
       * @deprecated Use the `cause` property instead.
       */
      get innerError() {
          // eslint-disable-next-line no-use-before-define
          if (this.cause instanceof MultipleErrors) {
              return this.cause.errors;
          }
          return this.cause;
      }
      /**
       * @deprecated Use the `cause` property instead.
       */
      set innerError(cause) {
          if (Array.isArray(cause)) {
              // eslint-disable-next-line no-use-before-define
              this.cause = new MultipleErrors(cause);
          }
          else {
              this.cause = cause;
          }
      }
      constructor(msg, cause) {
          super(msg);
          if (Array.isArray(cause)) {
              // eslint-disable-next-line no-use-before-define
              this.cause = new MultipleErrors(cause);
          }
          else {
              this.cause = cause;
          }
          this.name = this.constructor.name;
          if (typeof Error.captureStackTrace === 'function') {
              Error.captureStackTrace(new.target.constructor);
          }
          else {
              this.stack = new Error().stack;
          }
      }
      static convertToString(value, unquotValue = false) {
          // Using "null" value intentionally for validation
          // eslint-disable-next-line no-null/no-null
          if (value === null || value === undefined)
              return 'undefined';
          const result = JSON.stringify(value, (_, v) => (typeof v === 'bigint' ? v.toString() : v));
          return unquotValue && ['bigint', 'string'].includes(typeof value)
              ? result.replace(/['\\"]+/g, '')
              : result;
      }
      toJSON() {
          return {
              name: this.name,
              code: this.code,
              message: this.message,
              cause: this.cause,
              // deprecated
              innerError: this.cause,
          };
      }
  }
  class MultipleErrors extends BaseWeb3Error {
      constructor(errors) {
          super(`Multiple errors occurred: [${errors.map(e => e.message).join('], [')}]`);
          this.code = ERR_MULTIPLE_ERRORS;
          this.errors = errors;
      }
  }
  class InvalidValueError extends BaseWeb3Error {
      constructor(value, msg) {
          super(`Invalid value given "${BaseWeb3Error.convertToString(value, true)}". Error: ${msg}.`);
          this.name = this.constructor.name;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable max-classes-per-file */
  class PrivateKeyLengthError extends BaseWeb3Error {
      constructor() {
          super(`Private key must be 32 bytes.`);
          this.code = ERR_PRIVATE_KEY_LENGTH;
      }
  }
  class InvalidPrivateKeyError extends BaseWeb3Error {
      constructor() {
          super(`Invalid Private Key, Not a valid string or uint8Array`);
          this.code = ERR_INVALID_PRIVATE_KEY;
      }
  }
  class InvalidSignatureError extends BaseWeb3Error {
      constructor(errorDetails) {
          super(`"${errorDetails}"`);
          this.code = ERR_INVALID_SIGNATURE;
      }
  }
  class InvalidKdfError extends BaseWeb3Error {
      constructor() {
          super(`Invalid key derivation function`);
          this.code = ERR_UNSUPPORTED_KDF;
      }
  }
  class KeyDerivationError extends BaseWeb3Error {
      constructor() {
          super(`Key derivation failed - possibly wrong password`);
          this.code = ERR_KEY_DERIVATION_FAIL;
      }
  }
  class KeyStoreVersionError extends BaseWeb3Error {
      constructor() {
          super('Unsupported key store version');
          this.code = ERR_KEY_VERSION_UNSUPPORTED;
      }
  }
  class InvalidPasswordError extends BaseWeb3Error {
      constructor() {
          super('Password cannot be empty');
          this.code = ERR_INVALID_PASSWORD;
      }
  }
  class IVLengthError extends BaseWeb3Error {
      constructor() {
          super('Initialization vector must be 16 bytes');
          this.code = ERR_IV_LENGTH;
      }
  }
  class PBKDF2IterationsError extends BaseWeb3Error {
      constructor() {
          super('c > 1000, pbkdf2 is less secure with less iterations');
          this.code = ERR_PBKDF2_ITERATIONS;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  class ConnectionError extends BaseWeb3Error {
      constructor(message, event) {
          super(message);
          this.code = ERR_CONN;
          if (event) {
              this.errorCode = event.code;
              this.errorReason = event.reason;
          }
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { errorCode: this.errorCode, errorReason: this.errorReason });
      }
  }
  class ConnectionNotOpenError extends ConnectionError {
      constructor(event) {
          super('Connection not open', event);
          this.code = ERR_CONN_NOT_OPEN;
      }
  }
  class MaxAttemptsReachedOnReconnectingError extends ConnectionError {
      constructor(numberOfAttempts) {
          super(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);
          this.code = ERR_CONN_MAX_ATTEMPTS;
      }
  }
  class PendingRequestsOnReconnectingError extends ConnectionError {
      constructor() {
          super('CONNECTION ERROR: Provider started to reconnect before the response got received!');
          this.code = ERR_CONN_PENDING_REQUESTS;
      }
  }
  class RequestAlreadySentError extends ConnectionError {
      constructor(id) {
          super(`Request already sent with following id: ${id}`);
          this.code = ERR_REQ_ALREADY_SENT;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  class Web3ContractError extends BaseWeb3Error {
      constructor(message, receipt) {
          super(message);
          this.code = ERR_CONTRACT;
          this.receipt = receipt;
      }
  }
  class ResolverMethodMissingError extends BaseWeb3Error {
      constructor(address, name) {
          super(`The resolver at ${address} does not implement requested method: "${name}".`);
          this.address = address;
          this.name = name;
          this.code = ERR_CONTRACT_RESOLVER_MISSING;
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { address: this.address, name: this.name });
      }
  }
  /**
   * This class is expected to be set as an `cause` inside ContractExecutionError
   * The properties would be typically decoded from the `data` if it was encoded according to EIP-838
   */
  class Eip838ExecutionError extends Web3ContractError {
      constructor(error) {
          super(error.message || 'Error');
          this.name = ('name' in error && error.name) || this.constructor.name;
          // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
          this.stack = ('stack' in error && error.stack) || undefined;
          this.code = error.code;
          // get embedded error details got from some providers like MetaMask
          // and set this.data from the inner error data for easier read.
          // note: the data is a hex string inside either:
          //	 error.data, error.data.data or error.data.originalError.data (https://github.com/web3/web3.js/issues/4454#issuecomment-1485953455)
          if (typeof error.data === 'object') {
              let originalError;
              if (error.data && 'originalError' in error.data) {
                  originalError = error.data.originalError;
              }
              else {
                  // Ganache has no `originalError` sub-object unlike others
                  originalError = error.data;
              }
              this.data = originalError.data;
              this.cause = new Eip838ExecutionError(originalError);
          }
          else {
              this.data = error.data;
          }
      }
      setDecodedProperties(errorName, errorSignature, errorArgs) {
          this.errorName = errorName;
          this.errorSignature = errorSignature;
          this.errorArgs = errorArgs;
      }
      toJSON() {
          let json = Object.assign(Object.assign({}, super.toJSON()), { data: this.data });
          if (this.errorName) {
              json = Object.assign(Object.assign({}, json), { errorName: this.errorName, errorSignature: this.errorSignature, errorArgs: this.errorArgs });
          }
          return json;
      }
  }
  /**
   * Used when an error is raised while executing a function inside a smart contract.
   * The data is expected to be encoded according to EIP-848.
   */
  class ContractExecutionError extends Web3ContractError {
      constructor(rpcError) {
          super('Error happened while trying to execute a function inside a smart contract');
          this.code = ERR_CONTRACT_EXECUTION_REVERTED;
          this.cause = new Eip838ExecutionError(rpcError);
      }
  }
  class ContractTransactionDataAndInputError extends InvalidValueError {
      constructor(value) {
          var _a, _b;
          super(`data: ${(_a = value.data) !== null && _a !== void 0 ? _a : 'undefined'}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : 'undefined'}`, 'You can\'t have "data" and "input" as properties of a contract at the same time, please use either "data" or "input" instead.');
          this.code = ERR_CONTRACT_TX_DATA_AND_INPUT;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable max-classes-per-file */
  class ENSUnsupportedNetworkError extends BaseWeb3Error {
      constructor(networkType) {
          super(`ENS is not supported on network ${networkType}`);
          this.code = ERR_ENS_UNSUPPORTED_NETWORK;
      }
  }
  class ENSNetworkNotSyncedError extends BaseWeb3Error {
      constructor() {
          super(`Network not synced`);
          this.code = ERR_ENS_NETWORK_NOT_SYNCED;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable max-classes-per-file */
  class InvalidMethodParamsError extends BaseWeb3Error {
      constructor(hint) {
          super(`Invalid parameters passed. "${typeof hint !== 'undefined' ? hint : ''}"`);
          this.hint = hint;
          this.code = ERR_INVALID_METHOD_PARAMS;
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { hint: this.hint });
      }
  }
  class FormatterError extends BaseWeb3Error {
      constructor() {
          super(...arguments);
          this.code = ERR_FORMATTERS;
      }
  }
  class MethodNotImplementedError extends BaseWeb3Error {
      constructor() {
          super("The method you're trying to call is not implemented.");
          this.code = ERR_METHOD_NOT_IMPLEMENTED;
      }
  }
  class OperationTimeoutError extends BaseWeb3Error {
      constructor() {
          super(...arguments);
          this.code = ERR_OPERATION_TIMEOUT;
      }
  }
  class OperationAbortError extends BaseWeb3Error {
      constructor() {
          super(...arguments);
          this.code = ERR_OPERATION_ABORT;
      }
  }
  class AbiError extends BaseWeb3Error {
      constructor(message, props) {
          super(message);
          this.code = ERR_ABI_ENCODING;
          this.props = props !== null && props !== void 0 ? props : {};
      }
  }
  class ExistingPluginNamespaceError extends BaseWeb3Error {
      constructor(pluginNamespace) {
          super(`A plugin with the namespace: ${pluginNamespace} has already been registered.`);
          this.code = ERR_EXISTING_PLUGIN_NAMESPACE;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable max-classes-per-file */
  class ProviderError extends BaseWeb3Error {
      constructor() {
          super(...arguments);
          this.code = ERR_PROVIDER;
      }
  }
  class InvalidClientError extends BaseWeb3Error {
      constructor(clientUrl) {
          super(`Client URL "${clientUrl}" is invalid.`);
          this.code = ERR_INVALID_CLIENT;
      }
  }
  class SubscriptionError extends BaseWeb3Error {
      constructor() {
          super(...arguments);
          this.code = ERR_SUBSCRIPTION;
      }
  }
  class Web3WSProviderError extends BaseWeb3Error {
      constructor() {
          super(...arguments);
          this.code = ERR_WS_PROVIDER; // this had duplicate code with generic provider
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  class SignatureError extends InvalidValueError {
      constructor() {
          super(...arguments);
          this.code = ERR_SIGNATURE_FAILED;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  class TransactionError extends BaseWeb3Error {
      constructor(message, receipt) {
          super(message);
          this.receipt = receipt;
          this.code = ERR_TX;
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { receipt: this.receipt });
      }
  }
  class TransactionRevertInstructionError extends BaseWeb3Error {
      constructor(reason, signature, receipt, data) {
          super(`Transaction has been reverted by the EVM${receipt === undefined ? '' : `:\n ${BaseWeb3Error.convertToString(receipt)}`}`);
          this.reason = reason;
          this.signature = signature;
          this.receipt = receipt;
          this.data = data;
          this.code = ERR_TX_REVERT_TRANSACTION;
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { reason: this.reason, signature: this.signature, receipt: this.receipt, data: this.data });
      }
  }
  /**
   * This error is used when a transaction to a smart contract fails and
   * a custom user error (https://blog.soliditylang.org/2021/04/21/custom-errors/)
   * is able to be parsed from the revert reason
   */
  class TransactionRevertWithCustomError extends TransactionRevertInstructionError {
      constructor(reason, customErrorName, customErrorDecodedSignature, customErrorArguments, signature, receipt, data) {
          super(reason);
          this.reason = reason;
          this.customErrorName = customErrorName;
          this.customErrorDecodedSignature = customErrorDecodedSignature;
          this.customErrorArguments = customErrorArguments;
          this.signature = signature;
          this.receipt = receipt;
          this.data = data;
          this.code = ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR;
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { reason: this.reason, customErrorName: this.customErrorName, customErrorDecodedSignature: this.customErrorDecodedSignature, customErrorArguments: this.customErrorArguments, signature: this.signature, receipt: this.receipt, data: this.data });
      }
  }
  class TransactionRevertedWithoutReasonError extends TransactionError {
      constructor(receipt) {
          super(`Transaction has been reverted by the EVM${receipt === undefined ? '' : `:\n ${BaseWeb3Error.convertToString(receipt)}`}`, receipt);
          this.code = ERR_TX_REVERT_WITHOUT_REASON;
      }
  }
  class UndefinedRawTransactionError extends TransactionError {
      constructor() {
          super(`Raw transaction undefined`);
          this.code = ERR_RAW_TX_UNDEFINED;
      }
  }
  class TransactionNotFound extends TransactionError {
      constructor() {
          super('Transaction not found');
          this.code = ERR_TX_NOT_FOUND;
      }
  }
  class InvalidTransactionWithSender extends InvalidValueError {
      constructor(value) {
          super(value, 'invalid transaction with invalid sender');
          this.code = ERR_TX_INVALID_SENDER;
      }
  }
  class InvalidTransactionWithReceiver extends InvalidValueError {
      constructor(value) {
          super(value, 'invalid transaction with invalid receiver');
          this.code = ERR_TX_INVALID_RECEIVER;
      }
  }
  class MissingCustomChainError extends InvalidValueError {
      constructor() {
          super('MissingCustomChainError', 'If tx.common is provided it must have tx.common.customChain');
          this.code = ERR_TX_MISSING_CUSTOM_CHAIN;
      }
  }
  class MissingCustomChainIdError extends InvalidValueError {
      constructor() {
          super('MissingCustomChainIdError', 'If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId');
          this.code = ERR_TX_MISSING_CUSTOM_CHAIN_ID;
      }
  }
  class ChainIdMismatchError extends InvalidValueError {
      constructor(value) {
          super(JSON.stringify(value), 
          // https://github.com/ChainSafe/web3.js/blob/8783f4d64e424456bdc53b34ef1142d0a7cee4d7/packages/web3-eth-accounts/src/index.js#L176
          'Chain Id doesnt match in tx.chainId tx.common.customChain.chainId');
          this.code = ERR_TX_CHAIN_ID_MISMATCH;
      }
  }
  class ChainMismatchError extends InvalidValueError {
      constructor(value) {
          super(JSON.stringify(value), 'Chain doesnt match in tx.chain tx.common.basechain');
          this.code = ERR_TX_CHAIN_MISMATCH;
      }
  }
  class HardforkMismatchError extends InvalidValueError {
      constructor(value) {
          super(JSON.stringify(value), 'hardfork doesnt match in tx.hardfork tx.common.hardfork');
          this.code = ERR_TX_HARDFORK_MISMATCH;
      }
  }
  class CommonOrChainAndHardforkError extends InvalidValueError {
      constructor() {
          super('CommonOrChainAndHardforkError', 'Please provide the common object or the chain and hardfork property but not all together.');
          this.code = ERR_TX_INVALID_CHAIN_INFO;
      }
  }
  class MissingChainOrHardforkError extends InvalidValueError {
      constructor(value) {
          var _a, _b;
          super('MissingChainOrHardforkError', `When specifying chain and hardfork, both values must be defined. Received "chain": ${(_a = value.chain) !== null && _a !== void 0 ? _a : 'undefined'}, "hardfork": ${(_b = value.hardfork) !== null && _b !== void 0 ? _b : 'undefined'}`);
          this.code = ERR_TX_MISSING_CHAIN_INFO;
      }
  }
  class MissingGasInnerError extends BaseWeb3Error {
      constructor() {
          super('Missing properties in transaction, either define "gas" and "gasPrice" for type 0 transactions or "gas", "maxPriorityFeePerGas" and "maxFeePerGas" for type 2 transactions');
          this.code = ERR_TX_MISSING_GAS_INNER_ERROR;
      }
  }
  class MissingGasError extends InvalidValueError {
      constructor(value) {
          var _a, _b, _c, _d;
          super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : 'undefined'}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : 'undefined'}`, '"gas" is missing');
          this.code = ERR_TX_MISSING_GAS;
          this.cause = new MissingGasInnerError();
      }
  }
  class TransactionGasMismatchInnerError extends BaseWeb3Error {
      constructor() {
          super('Missing properties in transaction, either define "gas" and "gasPrice" for type 0 transactions or "gas", "maxPriorityFeePerGas" and "maxFeePerGas" for type 2 transactions, not both');
          this.code = ERR_TX_GAS_MISMATCH_INNER_ERROR;
      }
  }
  class TransactionGasMismatchError extends InvalidValueError {
      constructor(value) {
          var _a, _b, _c, _d;
          super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : 'undefined'}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : 'undefined'}`, 'transaction must specify legacy or fee market gas properties, not both');
          this.code = ERR_TX_GAS_MISMATCH;
          this.cause = new TransactionGasMismatchInnerError();
      }
  }
  class InvalidGasOrGasPrice extends InvalidValueError {
      constructor(value) {
          var _a, _b;
          super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}`, 'Gas or gasPrice is lower than 0');
          this.code = ERR_TX_INVALID_LEGACY_GAS;
      }
  }
  class InvalidMaxPriorityFeePerGasOrMaxFeePerGas extends InvalidValueError {
      constructor(value) {
          var _a, _b;
          super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : 'undefined'}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : 'undefined'}`, 'maxPriorityFeePerGas or maxFeePerGas is lower than 0');
          this.code = ERR_TX_INVALID_FEE_MARKET_GAS;
      }
  }
  class Eip1559GasPriceError extends InvalidValueError {
      constructor(value) {
          super(value, "eip-1559 transactions don't support gasPrice");
          this.code = ERR_TX_INVALID_FEE_MARKET_GAS_PRICE;
      }
  }
  class UnsupportedFeeMarketError extends InvalidValueError {
      constructor(value) {
          var _a, _b;
          super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : 'undefined'}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : 'undefined'}`, "pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas");
          this.code = ERR_TX_INVALID_LEGACY_FEE_MARKET;
      }
  }
  class InvalidTransactionObjectError extends InvalidValueError {
      constructor(value) {
          super(value, 'invalid transaction object');
          this.code = ERR_TX_INVALID_OBJECT;
      }
  }
  class InvalidNonceOrChainIdError extends InvalidValueError {
      constructor(value) {
          var _a, _b;
          super(`nonce: ${(_a = value.nonce) !== null && _a !== void 0 ? _a : 'undefined'}, chainId: ${(_b = value.chainId) !== null && _b !== void 0 ? _b : 'undefined'}`, 'Nonce or chainId is lower than 0');
          this.code = ERR_TX_INVALID_NONCE_OR_CHAIN_ID;
      }
  }
  class UnableToPopulateNonceError extends InvalidValueError {
      constructor() {
          super('UnableToPopulateNonceError', 'unable to populate nonce, no from address available');
          this.code = ERR_TX_UNABLE_TO_POPULATE_NONCE;
      }
  }
  class Eip1559NotSupportedError extends InvalidValueError {
      constructor() {
          super('Eip1559NotSupportedError', "Network doesn't support eip-1559");
          this.code = ERR_TX_UNSUPPORTED_EIP_1559;
      }
  }
  class UnsupportedTransactionTypeError extends InvalidValueError {
      constructor(value) {
          super(value, 'unsupported transaction type');
          this.code = ERR_TX_UNSUPPORTED_TYPE;
      }
  }
  class TransactionDataAndInputError extends InvalidValueError {
      constructor(value) {
          var _a, _b;
          super(`data: ${(_a = value.data) !== null && _a !== void 0 ? _a : 'undefined'}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : 'undefined'}`, 'You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
          this.code = ERR_TX_DATA_AND_INPUT;
      }
  }
  class TransactionSendTimeoutError extends BaseWeb3Error {
      constructor(value) {
          super(`The connected Ethereum Node did not respond within ${value.numberOfSeconds} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!\n\tTransaction Hash: ${value.transactionHash ? value.transactionHash.toString() : 'not available'}`);
          this.code = ERR_TX_SEND_TIMEOUT;
      }
  }
  function transactionTimeoutHint(transactionHash) {
      return `Please make sure your transaction was properly sent and there are no previous pending transaction for the same account. However, be aware that it might still be mined!\n\tTransaction Hash: ${transactionHash ? transactionHash.toString() : 'not available'}`;
  }
  class TransactionPollingTimeoutError extends BaseWeb3Error {
      constructor(value) {
          super(`Transaction was not mined within ${value.numberOfSeconds} seconds. ${transactionTimeoutHint(value.transactionHash)}`);
          this.code = ERR_TX_POLLING_TIMEOUT;
      }
  }
  class TransactionBlockTimeoutError extends BaseWeb3Error {
      constructor(value) {
          super(`Transaction started at ${value.starterBlockNumber} but was not mined within ${value.numberOfBlocks} blocks. ${transactionTimeoutHint(value.transactionHash)}`);
          this.code = ERR_TX_BLOCK_TIMEOUT;
      }
  }
  class TransactionMissingReceiptOrBlockHashError extends InvalidValueError {
      constructor(value) {
          var _a, _b;
          super(`receipt: ${JSON.stringify(value.receipt)}, blockHash: ${(_a = value.blockHash) === null || _a === void 0 ? void 0 : _a.toString()}, transactionHash: ${(_b = value.transactionHash) === null || _b === void 0 ? void 0 : _b.toString()}`, `Receipt missing or blockHash null`);
          this.code = ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL;
      }
  }
  class TransactionReceiptMissingBlockNumberError extends InvalidValueError {
      constructor(value) {
          super(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);
          this.code = ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER;
      }
  }
  class TransactionSigningError extends BaseWeb3Error {
      constructor(errorDetails) {
          super(`Invalid signature. "${errorDetails}"`);
          this.code = ERR_TX_SIGNING;
      }
  }
  class LocalWalletNotAvailableError extends InvalidValueError {
      constructor() {
          super('LocalWalletNotAvailableError', `Attempted to index account in local wallet, but no wallet is available`);
          this.code = ERR_TX_LOCAL_WALLET_NOT_AVAILABLE;
      }
  }
  class InvalidPropertiesForTransactionTypeError extends BaseWeb3Error {
      constructor(validationError, txType) {
          const invalidPropertyNames = [];
          validationError.forEach(error => invalidPropertyNames.push(error.keyword));
          super(`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(', ')}`);
          this.code = ERR_TX_INVALID_PROPERTIES_FOR_TYPE;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable max-classes-per-file */
  class InvalidBytesError extends InvalidValueError {
      constructor(value) {
          super(value, 'can not parse as byte data');
          this.code = ERR_INVALID_BYTES;
      }
  }
  class InvalidNumberError extends InvalidValueError {
      constructor(value) {
          super(value, 'can not parse as number data');
          this.code = ERR_INVALID_NUMBER;
      }
  }
  class InvalidAddressError extends InvalidValueError {
      constructor(value) {
          super(value, 'invalid ethereum address');
          this.code = ERR_INVALID_ADDRESS;
      }
  }
  class InvalidStringError extends InvalidValueError {
      constructor(value) {
          super(value, 'not a valid string');
          this.code = ERR_INVALID_STRING;
      }
  }
  class InvalidUnitError extends InvalidValueError {
      constructor(value) {
          super(value, 'invalid unit');
          this.code = ERR_INVALID_UNIT;
      }
  }
  class InvalidIntegerError extends InvalidValueError {
      constructor(value) {
          super(value, 'not a valid unit. Must be a positive integer');
          this.code = ERR_INVALID_INTEGER;
      }
  }
  class HexProcessingError extends InvalidValueError {
      constructor(value) {
          super(value, 'can not be converted to hex');
          this.code = ERR_INVALID_HEX;
      }
  }
  class NibbleWidthError extends InvalidValueError {
      constructor(value) {
          super(value, 'value greater than the nibble width');
          this.code = ERR_INVALID_NIBBLE_WIDTH;
      }
  }
  class InvalidBooleanError extends InvalidValueError {
      constructor(value) {
          super(value, 'not a valid boolean.');
          this.code = ERR_INVALID_BOOLEAN;
      }
  }
  class InvalidUnsignedIntegerError extends InvalidValueError {
      constructor(value) {
          super(value, 'not a valid unsigned integer.');
          this.code = ERR_INVALID_UNSIGNED_INTEGER;
      }
  }
  class InvalidSizeError extends InvalidValueError {
      constructor(value) {
          super(value, 'invalid size given.');
          this.code = ERR_INVALID_SIZE;
      }
  }
  class InvalidLargeValueError extends InvalidValueError {
      constructor(value) {
          super(value, 'value is larger than size.');
          this.code = ERR_INVALID_LARGE_VALUE;
      }
  }
  class InvalidBlockError extends InvalidValueError {
      constructor(value) {
          super(value, 'invalid string given');
          this.code = ERR_INVALID_BLOCK;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // To avoid circular package dependency, copied to code here. If you update this please update same function in `json_rpc.ts`
  const isResponseWithError$1 = (response) => !Array.isArray(response) &&
      response.jsonrpc === '2.0' &&
      !!response &&
      // eslint-disable-next-line no-null/no-null
      (response.result === undefined || response.result === null) &&
      // JSON RPC consider "null" as valid response
      'error' in response &&
      (typeof response.id === 'number' || typeof response.id === 'string');
  const buildErrorMessage = (response) => isResponseWithError$1(response) ? response.error.message : '';
  class ResponseError extends BaseWeb3Error {
      constructor(response, message, request, statusCode) {
          var _a;
          super(message !== null && message !== void 0 ? message : `Returned error: ${Array.isArray(response)
            ? response.map(r => buildErrorMessage(r)).join(',')
            : buildErrorMessage(response)}`);
          this.code = ERR_RESPONSE;
          if (!message) {
              this.data = Array.isArray(response)
                  ? response.map(r => { var _a; return (_a = r.error) === null || _a === void 0 ? void 0 : _a.data; })
                  : (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.data;
          }
          this.statusCode = statusCode;
          this.request = request;
          let errorOrErrors;
          if (`error` in response) {
              errorOrErrors = response.error;
          }
          else if (response instanceof Array) {
              errorOrErrors = response.filter(r => r.error).map(r => r.error);
          }
          if (Array.isArray(errorOrErrors) && errorOrErrors.length > 0) {
              this.cause = new MultipleErrors(errorOrErrors);
          }
          else {
              this.cause = errorOrErrors;
          }
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { data: this.data, request: this.request, statusCode: this.statusCode });
      }
  }
  class InvalidResponseError extends ResponseError {
      constructor(result, request) {
          super(result, undefined, request);
          this.code = ERR_INVALID_RESPONSE;
          let errorOrErrors;
          if (`error` in result) {
              errorOrErrors = result.error;
          }
          else if (result instanceof Array) {
              errorOrErrors = result.map(r => r.error);
          }
          if (Array.isArray(errorOrErrors)) {
              this.cause = new MultipleErrors(errorOrErrors);
          }
          else {
              this.cause = errorOrErrors;
          }
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable max-classes-per-file */
  class ConfigHardforkMismatchError extends BaseWeb3Error {
      constructor(defaultHardfork, commonHardFork) {
          super(`Web3Config hardfork doesnt match in defaultHardfork ${defaultHardfork} and common.hardfork ${commonHardFork}`);
          this.code = ERR_CORE_HARDFORK_MISMATCH;
      }
  }
  class ConfigChainMismatchError extends BaseWeb3Error {
      constructor(defaultHardfork, commonHardFork) {
          super(`Web3Config chain doesnt match in defaultHardfork ${defaultHardfork} and common.hardfork ${commonHardFork}`);
          this.code = ERR_CORE_HARDFORK_MISMATCH;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * A template string for a generic Rpc Error. The `*code*` will be replaced with the code number.
   * Note: consider in next version that a spelling mistake could be corrected for `occured` and the value could be:
   * 	`An Rpc error has occurred with a code of *code*`
   */
  const genericRpcErrorMessageTemplate = 'An Rpc error has occured with a code of *code*';
  /* eslint-disable @typescript-eslint/naming-convention */
  const RpcErrorMessages = {
      //  EIP-1474 & JSON RPC 2.0
      // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1474.md
      [ERR_RPC_INVALID_JSON]: {
          message: 'Parse error',
          description: 'Invalid JSON',
      },
      [ERR_RPC_INVALID_REQUEST]: {
          message: 'Invalid request',
          description: 'JSON is not a valid request object	',
      },
      [ERR_RPC_INVALID_METHOD]: {
          message: 'Method not found',
          description: 'Method does not exist	',
      },
      [ERR_RPC_INVALID_PARAMS]: {
          message: 'Invalid params',
          description: 'Invalid method parameters',
      },
      [ERR_RPC_INTERNAL_ERROR]: {
          message: 'Internal error',
          description: 'Internal JSON-RPC error',
      },
      [ERR_RPC_INVALID_INPUT]: {
          message: 'Invalid input',
          description: 'Missing or invalid parameters',
      },
      [ERR_RPC_MISSING_RESOURCE]: {
          message: 'Resource not found',
          description: 'Requested resource not found',
      },
      [ERR_RPC_UNAVAILABLE_RESOURCE]: {
          message: 'Resource unavailable',
          description: 'Requested resource not available',
      },
      [ERR_RPC_TRANSACTION_REJECTED]: {
          message: 'Transaction rejected',
          description: 'Transaction creation failed',
      },
      [ERR_RPC_UNSUPPORTED_METHOD]: {
          message: 'Method not supported',
          description: 'Method is not implemented',
      },
      [ERR_RPC_LIMIT_EXCEEDED]: {
          message: 'Limit exceeded',
          description: 'Request exceeds defined limit',
      },
      [ERR_RPC_NOT_SUPPORTED]: {
          message: 'JSON-RPC version not supported',
          description: 'Version of JSON-RPC protocol is not supported',
      },
      // EIP-1193
      // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#provider-errors
      [JSONRPC_ERR_REJECTED_REQUEST]: {
          name: 'User Rejected Request',
          message: 'The user rejected the request.',
      },
      [JSONRPC_ERR_UNAUTHORIZED]: {
          name: 'Unauthorized',
          message: 'The requested method and/or account has not been authorized by the user.',
      },
      [JSONRPC_ERR_UNSUPPORTED_METHOD]: {
          name: 'Unsupported Method',
          message: 'The Provider does not support the requested method.',
      },
      [JSONRPC_ERR_DISCONNECTED]: {
          name: 'Disconnected',
          message: 'The Provider is disconnected from all chains.',
      },
      [JSONRPC_ERR_CHAIN_DISCONNECTED]: {
          name: 'Chain Disconnected',
          message: 'The Provider is not connected to the requested chain.',
      },
      // EIP-1193 - CloseEvent
      // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/code
      '0-999': {
          name: '',
          message: 'Not used.',
      },
      1000: {
          name: 'Normal Closure',
          message: 'The connection successfully completed the purpose for which it was created.',
      },
      1001: {
          name: 'Going Away',
          message: 'The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.',
      },
      1002: {
          name: 'Protocol error',
          message: 'The endpoint is terminating the connection due to a protocol error.',
      },
      1003: {
          name: 'Unsupported Data',
          message: 'The connection is being terminated because the endpoint received data of a type it cannot accept. (For example, a text-only endpoint received binary data.)',
      },
      1004: {
          name: 'Reserved',
          message: 'Reserved. A meaning might be defined in the future.',
      },
      1005: {
          name: 'No Status Rcvd',
          message: 'Reserved. Indicates that no status code was provided even though one was expected.',
      },
      1006: {
          name: 'Abnormal Closure',
          message: 'Reserved. Indicates that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected.',
      },
      1007: {
          name: 'Invalid frame payload data',
          message: 'The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message).',
      },
      1008: {
          name: 'Policy Violation',
          message: 'The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable.',
      },
      1009: {
          name: 'Message Too Big',
          message: 'The endpoint is terminating the connection because a data frame was received that is too large.',
      },
      1010: {
          name: 'Mandatory Ext.',
          message: "The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't.",
      },
      1011: {
          name: 'Internal Error',
          message: 'The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.',
      },
      1012: {
          name: 'Service Restart',
          message: 'The server is terminating the connection because it is restarting.',
      },
      1013: {
          name: 'Try Again Later',
          message: 'The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients.',
      },
      1014: {
          name: 'Bad Gateway',
          message: 'The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code.',
      },
      1015: {
          name: 'TLS handshake',
          message: "Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).",
      },
      '1016-2999': {
          name: '',
          message: 'For definition by future revisions of the WebSocket Protocol specification, and for definition by extension specifications.',
      },
      '3000-3999': {
          name: '',
          message: 'For use by libraries, frameworks, and applications. These status codes are registered directly with IANA. The interpretation of these codes is undefined by the WebSocket protocol.',
      },
      '4000-4999': {
          name: '',
          message: "For private use, and thus can't be registered. Such codes can be used by prior agreements between WebSocket applications. The interpretation of these codes is undefined by the WebSocket protocol.",
      },
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  class RpcError extends BaseWeb3Error {
      constructor(rpcError, message) {
          super(message !== null && message !== void 0 ? message : genericRpcErrorMessageTemplate.replace('*code*', rpcError.error.code.toString()));
          this.code = rpcError.error.code;
          this.id = rpcError.id;
          this.jsonrpc = rpcError.jsonrpc;
          this.jsonRpcError = rpcError.error;
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { error: this.jsonRpcError, id: this.id, jsonRpc: this.jsonrpc });
      }
  }
  class EIP1193ProviderRpcError extends BaseWeb3Error {
      constructor(code, data) {
          var _a, _b, _c, _d;
          if (!code) {
              // this case should ideally not happen
              super();
          }
          else if ((_a = RpcErrorMessages[code]) === null || _a === void 0 ? void 0 : _a.message) {
              super(RpcErrorMessages[code].message);
          }
          else {
              // Retrieve the status code object for the given code from the table, by searching through the appropriate range
              const statusCodeRange = Object.keys(RpcErrorMessages).find(statusCode => typeof statusCode === 'string' &&
                  code >= parseInt(statusCode.split('-')[0], 10) &&
                  code <= parseInt(statusCode.split('-')[1], 10));
              super((_c = (_b = RpcErrorMessages[statusCodeRange !== null && statusCodeRange !== void 0 ? statusCodeRange : '']) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : genericRpcErrorMessageTemplate.replace('*code*', (_d = code === null || code === void 0 ? void 0 : code.toString()) !== null && _d !== void 0 ? _d : '""'));
          }
          this.code = code;
          this.data = data;
      }
  }
  class ParseError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);
          this.code = ERR_RPC_INVALID_JSON;
      }
  }
  class InvalidRequestError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);
          this.code = ERR_RPC_INVALID_REQUEST;
      }
  }
  class MethodNotFoundError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);
          this.code = ERR_RPC_INVALID_METHOD;
      }
  }
  class InvalidParamsError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);
          this.code = ERR_RPC_INVALID_PARAMS;
      }
  }
  class InternalError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);
          this.code = ERR_RPC_INTERNAL_ERROR;
      }
  }
  class InvalidInputError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);
          this.code = ERR_RPC_INVALID_INPUT;
      }
  }
  class MethodNotSupported extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);
          this.code = ERR_RPC_UNSUPPORTED_METHOD;
      }
  }
  class ResourceUnavailableError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);
          this.code = ERR_RPC_UNAVAILABLE_RESOURCE;
      }
  }
  class ResourcesNotFoundError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);
          this.code = ERR_RPC_MISSING_RESOURCE;
      }
  }
  class VersionNotSupportedError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);
          this.code = ERR_RPC_NOT_SUPPORTED;
      }
  }
  class TransactionRejectedError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);
          this.code = ERR_RPC_TRANSACTION_REJECTED;
      }
  }
  class LimitExceededError extends RpcError {
      constructor(rpcError) {
          super(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);
          this.code = ERR_RPC_LIMIT_EXCEEDED;
      }
  }
  const rpcErrorsMap = new Map();
  rpcErrorsMap.set(ERR_RPC_INVALID_JSON, { error: ParseError });
  rpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {
      error: InvalidRequestError,
  });
  rpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {
      error: MethodNotFoundError,
  });
  rpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, { error: InvalidParamsError });
  rpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, { error: InternalError });
  rpcErrorsMap.set(ERR_RPC_INVALID_INPUT, { error: InvalidInputError });
  rpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {
      error: MethodNotSupported,
  });
  rpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {
      error: ResourceUnavailableError,
  });
  rpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {
      error: TransactionRejectedError,
  });
  rpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {
      error: ResourcesNotFoundError,
  });
  rpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {
      error: VersionNotSupportedError,
  });
  rpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, { error: LimitExceededError });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  class SchemaFormatError extends BaseWeb3Error {
      constructor(type) {
          super(`Format for the type ${type} is unsupported`);
          this.type = type;
          this.code = ERR_SCHEMA_FORMAT;
      }
      toJSON() {
          return Object.assign(Object.assign({}, super.toJSON()), { type: this.type });
      }
  }

  function number(n) {
      if (!Number.isSafeInteger(n) || n < 0)
          throw new Error(`positive integer expected, not ${n}`);
  }
  function bool(b) {
      if (typeof b !== 'boolean')
          throw new Error(`boolean expected, not ${b}`);
  }
  // copied from utils
  function isBytes$2(a) {
      return (a instanceof Uint8Array ||
          (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
  }
  function bytes(b, ...lengths) {
      if (!isBytes$2(b))
          throw new Error('Uint8Array expected');
      if (lengths.length > 0 && !lengths.includes(b.length))
          throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
  }
  function hash(h) {
      if (typeof h !== 'function' || typeof h.create !== 'function')
          throw new Error('Hash should be wrapped by utils.wrapConstructor');
      number(h.outputLen);
      number(h.blockLen);
  }
  function exists(instance, checkFinished = true) {
      if (instance.destroyed)
          throw new Error('Hash instance has been destroyed');
      if (checkFinished && instance.finished)
          throw new Error('Hash#digest() has already been called');
  }
  function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
          throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
  }
  const assert = { number, bool, bytes, hash, exists, output };

  const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
  const _32n = /* @__PURE__ */ BigInt(32);
  // We are not using BigUint64Array, because they are extremely slow as per 2022
  function fromBig(n, le = false) {
      if (le)
          return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
      return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split$1(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
          const { h, l } = fromBig(lst[i], le);
          [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
  }
  // Left rotate for Shift in [1, 32)
  const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
  const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
  // Left rotate for Shift in (32, 64), NOTE: 32 is special case.
  const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
  const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));

  const crypto$1 = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
  // node.js versions earlier than v19 don't declare it in global scope.
  // For node.js, package.json#exports field mapping rewrites import
  // from `crypto` to `cryptoNode`, which imports native module.
  // Makes the utils un-importable in browsers without a bundler.
  // Once node.js 18 is deprecated (2025-04-30), we can just drop the import.
  const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  // Cast array to view
  const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  // The rotate right (circular right shift) operation for uint32
  const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
  // The rotate left (circular left shift) operation for uint32
  const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);
  const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
  // The byte swap operation for uint32
  const byteSwap = (word) => ((word << 24) & 0xff000000) |
      ((word << 8) & 0xff0000) |
      ((word >>> 8) & 0xff00) |
      ((word >>> 24) & 0xff);
  // In place byte swap for Uint32Array
  function byteSwap32(arr) {
      for (let i = 0; i < arr.length; i++) {
          arr[i] = byteSwap(arr[i]);
      }
  }
  /**
   * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
   */
  function utf8ToBytes$2(str) {
      if (typeof str !== 'string')
          throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
  }
  /**
   * Normalizes (non-hex) string or Uint8Array to Uint8Array.
   * Warning: when Uint8Array is passed, it would NOT get copied.
   * Keep in mind for future mutable operations.
   */
  function toBytes(data) {
      if (typeof data === 'string')
          data = utf8ToBytes$2(data);
      bytes(data);
      return data;
  }
  /**
   * Copies several Uint8Arrays into one.
   */
  function concatBytes$1(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
          const a = arrays[i];
          bytes(a);
          sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
          const a = arrays[i];
          res.set(a, pad);
          pad += a.length;
      }
      return res;
  }
  // For runtime check if class implements interface
  class Hash {
      // Safe version that clones internal state
      clone() {
          return this._cloneInto();
      }
  }
  const toStr = {}.toString;
  function checkOpts(defaults, opts) {
      if (opts !== undefined && toStr.call(opts) !== '[object Object]')
          throw new Error('Options should be object or undefined');
      const merged = Object.assign(defaults, opts);
      return merged;
  }
  function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
  }
  /**
   * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
   */
  function randomBytes$1(bytesLength = 32) {
      if (crypto$1 && typeof crypto$1.getRandomValues === 'function') {
          return crypto$1.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error('crypto.getRandomValues must be defined');
  }

  // SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
  // It's called a sponge function.
  // Various per round constants calculations
  const SHA3_PI = [];
  const SHA3_ROTL = [];
  const _SHA3_IOTA = [];
  const _0n$4 = /* @__PURE__ */ BigInt(0);
  const _1n$5 = /* @__PURE__ */ BigInt(1);
  const _2n$3 = /* @__PURE__ */ BigInt(2);
  const _7n = /* @__PURE__ */ BigInt(7);
  const _256n = /* @__PURE__ */ BigInt(256);
  const _0x71n = /* @__PURE__ */ BigInt(0x71);
  for (let round = 0, R = _1n$5, x = 1, y = 0; round < 24; round++) {
      // Pi
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      // Rotational
      SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
      // Iota
      let t = _0n$4;
      for (let j = 0; j < 7; j++) {
          R = ((R << _1n$5) ^ ((R >> _7n) * _0x71n)) % _256n;
          if (R & _2n$3)
              t ^= _1n$5 << ((_1n$5 << /* @__PURE__ */ BigInt(j)) - _1n$5);
      }
      _SHA3_IOTA.push(t);
  }
  const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split$1(_SHA3_IOTA, true);
  // Left rotation (without 0, 32, 64)
  const rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));
  const rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));
  // Same as keccakf1600, but allows to skip some rounds
  function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
      for (let round = 24 - rounds; round < 24; round++) {
          // Theta θ
          for (let x = 0; x < 10; x++)
              B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
          for (let x = 0; x < 10; x += 2) {
              const idx1 = (x + 8) % 10;
              const idx0 = (x + 2) % 10;
              const B0 = B[idx0];
              const B1 = B[idx0 + 1];
              const Th = rotlH(B0, B1, 1) ^ B[idx1];
              const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
              for (let y = 0; y < 50; y += 10) {
                  s[x + y] ^= Th;
                  s[x + y + 1] ^= Tl;
              }
          }
          // Rho (ρ) and Pi (π)
          let curH = s[2];
          let curL = s[3];
          for (let t = 0; t < 24; t++) {
              const shift = SHA3_ROTL[t];
              const Th = rotlH(curH, curL, shift);
              const Tl = rotlL(curH, curL, shift);
              const PI = SHA3_PI[t];
              curH = s[PI];
              curL = s[PI + 1];
              s[PI] = Th;
              s[PI + 1] = Tl;
          }
          // Chi (χ)
          for (let y = 0; y < 50; y += 10) {
              for (let x = 0; x < 10; x++)
                  B[x] = s[y + x];
              for (let x = 0; x < 10; x++)
                  s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
          }
          // Iota (ι)
          s[0] ^= SHA3_IOTA_H[round];
          s[1] ^= SHA3_IOTA_L[round];
      }
      B.fill(0);
  }
  class Keccak extends Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
          super();
          this.blockLen = blockLen;
          this.suffix = suffix;
          this.outputLen = outputLen;
          this.enableXOF = enableXOF;
          this.rounds = rounds;
          this.pos = 0;
          this.posOut = 0;
          this.finished = false;
          this.destroyed = false;
          // Can be passed from user as dkLen
          number(outputLen);
          // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
          if (0 >= this.blockLen || this.blockLen >= 200)
              throw new Error('Sha3 supports only keccak-f1600 function');
          this.state = new Uint8Array(200);
          this.state32 = u32(this.state);
      }
      keccak() {
          if (!isLE)
              byteSwap32(this.state32);
          keccakP(this.state32, this.rounds);
          if (!isLE)
              byteSwap32(this.state32);
          this.posOut = 0;
          this.pos = 0;
      }
      update(data) {
          exists(this);
          const { blockLen, state } = this;
          data = toBytes(data);
          const len = data.length;
          for (let pos = 0; pos < len;) {
              const take = Math.min(blockLen - this.pos, len - pos);
              for (let i = 0; i < take; i++)
                  state[this.pos++] ^= data[pos++];
              if (this.pos === blockLen)
                  this.keccak();
          }
          return this;
      }
      finish() {
          if (this.finished)
              return;
          this.finished = true;
          const { state, suffix, pos, blockLen } = this;
          // Do the padding
          state[pos] ^= suffix;
          if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
              this.keccak();
          state[blockLen - 1] ^= 0x80;
          this.keccak();
      }
      writeInto(out) {
          exists(this, false);
          bytes(out);
          this.finish();
          const bufferOut = this.state;
          const { blockLen } = this;
          for (let pos = 0, len = out.length; pos < len;) {
              if (this.posOut >= blockLen)
                  this.keccak();
              const take = Math.min(blockLen - this.posOut, len - pos);
              out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
              this.posOut += take;
              pos += take;
          }
          return out;
      }
      xofInto(out) {
          // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
          if (!this.enableXOF)
              throw new Error('XOF is not possible for this instance');
          return this.writeInto(out);
      }
      xof(bytes) {
          number(bytes);
          return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
          output(out, this);
          if (this.finished)
              throw new Error('digest() was already called');
          this.writeInto(out);
          this.destroy();
          return out;
      }
      digest() {
          return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
          this.destroyed = true;
          this.state.fill(0);
      }
      _cloneInto(to) {
          const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
          to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
          to.state32.set(this.state32);
          to.pos = this.pos;
          to.posOut = this.posOut;
          to.finished = this.finished;
          to.rounds = rounds;
          // Suffix can change in cSHAKE
          to.suffix = suffix;
          to.outputLen = outputLen;
          to.enableXOF = enableXOF;
          to.destroyed = this.destroyed;
          return to;
      }
  }
  const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
  /**
   * keccak-256 hash function. Different from SHA3-256.
   * @param message - that would be hashed
   */
  const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);

  const assertBytes = assert.bytes;
  // buf.toString('utf8') -> bytesToUtf8(buf)
  function bytesToUtf8(data) {
      if (!(data instanceof Uint8Array)) {
          throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
      }
      return new TextDecoder().decode(data);
  }
  // buf.equals(buf2) -> equalsBytes(buf, buf2)
  function equalsBytes(a, b) {
      if (a.length !== b.length) {
          return false;
      }
      for (let i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
              return false;
          }
      }
      return true;
  }
  // Internal utils
  function wrapHash(hash) {
      return (msg) => {
          assert.bytes(msg);
          return hash(msg);
      };
  }
  // TODO(v3): switch away from node crypto, remove this unnecessary variable.
  (() => {
      const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;
      const nodeRequire = typeof module !== "undefined" &&
          typeof module.require === "function" &&
          module.require.bind(module);
      return {
          node: nodeRequire && !webCrypto ? nodeRequire("crypto") : undefined,
          web: webCrypto
      };
  })();

  const keccak256 = (() => {
      const k = wrapHash(keccak_256);
      k.create = keccak_256.create;
      return k;
  })();

  var util;
  (function (util) {
      util.assertEqual = (val) => val;
      function assertIs(_arg) { }
      util.assertIs = assertIs;
      function assertNever(_x) {
          throw new Error();
      }
      util.assertNever = assertNever;
      util.arrayToEnum = (items) => {
          const obj = {};
          for (const item of items) {
              obj[item] = item;
          }
          return obj;
      };
      util.getValidEnumValues = (obj) => {
          const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
          const filtered = {};
          for (const k of validKeys) {
              filtered[k] = obj[k];
          }
          return util.objectValues(filtered);
      };
      util.objectValues = (obj) => {
          return util.objectKeys(obj).map(function (e) {
              return obj[e];
          });
      };
      util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
          ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
          : (object) => {
              const keys = [];
              for (const key in object) {
                  if (Object.prototype.hasOwnProperty.call(object, key)) {
                      keys.push(key);
                  }
              }
              return keys;
          };
      util.find = (arr, checker) => {
          for (const item of arr) {
              if (checker(item))
                  return item;
          }
          return undefined;
      };
      util.isInteger = typeof Number.isInteger === "function"
          ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
          : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
          return array
              .map((val) => (typeof val === "string" ? `'${val}'` : val))
              .join(separator);
      }
      util.joinValues = joinValues;
      util.jsonStringifyReplacer = (_, value) => {
          if (typeof value === "bigint") {
              return value.toString();
          }
          return value;
      };
  })(util || (util = {}));
  var objectUtil;
  (function (objectUtil) {
      objectUtil.mergeShapes = (first, second) => {
          return {
              ...first,
              ...second, // second overwrites first
          };
      };
  })(objectUtil || (objectUtil = {}));
  const ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set",
  ]);
  const getParsedType = (data) => {
      const t = typeof data;
      switch (t) {
          case "undefined":
              return ZodParsedType.undefined;
          case "string":
              return ZodParsedType.string;
          case "number":
              return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
          case "boolean":
              return ZodParsedType.boolean;
          case "function":
              return ZodParsedType.function;
          case "bigint":
              return ZodParsedType.bigint;
          case "symbol":
              return ZodParsedType.symbol;
          case "object":
              if (Array.isArray(data)) {
                  return ZodParsedType.array;
              }
              if (data === null) {
                  return ZodParsedType.null;
              }
              if (data.then &&
                  typeof data.then === "function" &&
                  data.catch &&
                  typeof data.catch === "function") {
                  return ZodParsedType.promise;
              }
              if (typeof Map !== "undefined" && data instanceof Map) {
                  return ZodParsedType.map;
              }
              if (typeof Set !== "undefined" && data instanceof Set) {
                  return ZodParsedType.set;
              }
              if (typeof Date !== "undefined" && data instanceof Date) {
                  return ZodParsedType.date;
              }
              return ZodParsedType.object;
          default:
              return ZodParsedType.unknown;
      }
  };

  const ZodIssueCode = util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite",
  ]);
  const quotelessJson = (obj) => {
      const json = JSON.stringify(obj, null, 2);
      return json.replace(/"([^"]+)":/g, "$1:");
  };
  class ZodError extends Error {
      constructor(issues) {
          super();
          this.issues = [];
          this.addIssue = (sub) => {
              this.issues = [...this.issues, sub];
          };
          this.addIssues = (subs = []) => {
              this.issues = [...this.issues, ...subs];
          };
          const actualProto = new.target.prototype;
          if (Object.setPrototypeOf) {
              // eslint-disable-next-line ban/ban
              Object.setPrototypeOf(this, actualProto);
          }
          else {
              this.__proto__ = actualProto;
          }
          this.name = "ZodError";
          this.issues = issues;
      }
      get errors() {
          return this.issues;
      }
      format(_mapper) {
          const mapper = _mapper ||
              function (issue) {
                  return issue.message;
              };
          const fieldErrors = { _errors: [] };
          const processError = (error) => {
              for (const issue of error.issues) {
                  if (issue.code === "invalid_union") {
                      issue.unionErrors.map(processError);
                  }
                  else if (issue.code === "invalid_return_type") {
                      processError(issue.returnTypeError);
                  }
                  else if (issue.code === "invalid_arguments") {
                      processError(issue.argumentsError);
                  }
                  else if (issue.path.length === 0) {
                      fieldErrors._errors.push(mapper(issue));
                  }
                  else {
                      let curr = fieldErrors;
                      let i = 0;
                      while (i < issue.path.length) {
                          const el = issue.path[i];
                          const terminal = i === issue.path.length - 1;
                          if (!terminal) {
                              curr[el] = curr[el] || { _errors: [] };
                              // if (typeof el === "string") {
                              //   curr[el] = curr[el] || { _errors: [] };
                              // } else if (typeof el === "number") {
                              //   const errorArray: any = [];
                              //   errorArray._errors = [];
                              //   curr[el] = curr[el] || errorArray;
                              // }
                          }
                          else {
                              curr[el] = curr[el] || { _errors: [] };
                              curr[el]._errors.push(mapper(issue));
                          }
                          curr = curr[el];
                          i++;
                      }
                  }
              }
          };
          processError(this);
          return fieldErrors;
      }
      static assert(value) {
          if (!(value instanceof ZodError)) {
              throw new Error(`Not a ZodError: ${value}`);
          }
      }
      toString() {
          return this.message;
      }
      get message() {
          return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
          return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
          const fieldErrors = {};
          const formErrors = [];
          for (const sub of this.issues) {
              if (sub.path.length > 0) {
                  fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                  fieldErrors[sub.path[0]].push(mapper(sub));
              }
              else {
                  formErrors.push(mapper(sub));
              }
          }
          return { formErrors, fieldErrors };
      }
      get formErrors() {
          return this.flatten();
      }
  }
  ZodError.create = (issues) => {
      const error = new ZodError(issues);
      return error;
  };

  const errorMap = (issue, _ctx) => {
      let message;
      switch (issue.code) {
          case ZodIssueCode.invalid_type:
              if (issue.received === ZodParsedType.undefined) {
                  message = "Required";
              }
              else {
                  message = `Expected ${issue.expected}, received ${issue.received}`;
              }
              break;
          case ZodIssueCode.invalid_literal:
              message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
              break;
          case ZodIssueCode.unrecognized_keys:
              message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
              break;
          case ZodIssueCode.invalid_union:
              message = `Invalid input`;
              break;
          case ZodIssueCode.invalid_union_discriminator:
              message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
              break;
          case ZodIssueCode.invalid_enum_value:
              message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
              break;
          case ZodIssueCode.invalid_arguments:
              message = `Invalid function arguments`;
              break;
          case ZodIssueCode.invalid_return_type:
              message = `Invalid function return type`;
              break;
          case ZodIssueCode.invalid_date:
              message = `Invalid date`;
              break;
          case ZodIssueCode.invalid_string:
              if (typeof issue.validation === "object") {
                  if ("includes" in issue.validation) {
                      message = `Invalid input: must include "${issue.validation.includes}"`;
                      if (typeof issue.validation.position === "number") {
                          message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                      }
                  }
                  else if ("startsWith" in issue.validation) {
                      message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                  }
                  else if ("endsWith" in issue.validation) {
                      message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                  }
                  else {
                      util.assertNever(issue.validation);
                  }
              }
              else if (issue.validation !== "regex") {
                  message = `Invalid ${issue.validation}`;
              }
              else {
                  message = "Invalid";
              }
              break;
          case ZodIssueCode.too_small:
              if (issue.type === "array")
                  message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
              else if (issue.type === "string")
                  message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
              else if (issue.type === "number")
                  message = `Number must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${issue.minimum}`;
              else if (issue.type === "date")
                  message = `Date must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${new Date(Number(issue.minimum))}`;
              else
                  message = "Invalid input";
              break;
          case ZodIssueCode.too_big:
              if (issue.type === "array")
                  message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
              else if (issue.type === "string")
                  message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
              else if (issue.type === "number")
                  message = `Number must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
              else if (issue.type === "bigint")
                  message = `BigInt must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
              else if (issue.type === "date")
                  message = `Date must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `smaller than or equal to`
                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
              else
                  message = "Invalid input";
              break;
          case ZodIssueCode.custom:
              message = `Invalid input`;
              break;
          case ZodIssueCode.invalid_intersection_types:
              message = `Intersection results could not be merged`;
              break;
          case ZodIssueCode.not_multiple_of:
              message = `Number must be a multiple of ${issue.multipleOf}`;
              break;
          case ZodIssueCode.not_finite:
              message = "Number must be finite";
              break;
          default:
              message = _ctx.defaultError;
              util.assertNever(issue);
      }
      return { message };
  };

  let overrideErrorMap = errorMap;
  function setErrorMap(map) {
      overrideErrorMap = map;
  }
  function getErrorMap() {
      return overrideErrorMap;
  }

  const makeIssue = (params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...(issueData.path || [])];
      const fullIssue = {
          ...issueData,
          path: fullPath,
      };
      if (issueData.message !== undefined) {
          return {
              ...issueData,
              path: fullPath,
              message: issueData.message,
          };
      }
      let errorMessage = "";
      const maps = errorMaps
          .filter((m) => !!m)
          .slice()
          .reverse();
      for (const map of maps) {
          errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
          ...issueData,
          path: fullPath,
          message: errorMessage,
      };
  };
  const EMPTY_PATH = [];
  function addIssueToContext(ctx, issueData) {
      const overrideMap = getErrorMap();
      const issue = makeIssue({
          issueData: issueData,
          data: ctx.data,
          path: ctx.path,
          errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              overrideMap,
              overrideMap === errorMap ? undefined : errorMap, // then global default map
          ].filter((x) => !!x),
      });
      ctx.common.issues.push(issue);
  }
  class ParseStatus {
      constructor() {
          this.value = "valid";
      }
      dirty() {
          if (this.value === "valid")
              this.value = "dirty";
      }
      abort() {
          if (this.value !== "aborted")
              this.value = "aborted";
      }
      static mergeArray(status, results) {
          const arrayValue = [];
          for (const s of results) {
              if (s.status === "aborted")
                  return INVALID;
              if (s.status === "dirty")
                  status.dirty();
              arrayValue.push(s.value);
          }
          return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
          const syncPairs = [];
          for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                  key,
                  value,
              });
          }
          return ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
          const finalObject = {};
          for (const pair of pairs) {
              const { key, value } = pair;
              if (key.status === "aborted")
                  return INVALID;
              if (value.status === "aborted")
                  return INVALID;
              if (key.status === "dirty")
                  status.dirty();
              if (value.status === "dirty")
                  status.dirty();
              if (key.value !== "__proto__" &&
                  (typeof value.value !== "undefined" || pair.alwaysSet)) {
                  finalObject[key.value] = value.value;
              }
          }
          return { status: status.value, value: finalObject };
      }
  }
  const INVALID = Object.freeze({
      status: "aborted",
  });
  const DIRTY = (value) => ({ status: "dirty", value });
  const OK = (value) => ({ status: "valid", value });
  const isAborted = (x) => x.status === "aborted";
  const isDirty = (x) => x.status === "dirty";
  const isValid$2 = (x) => x.status === "valid";
  const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __classPrivateFieldGet(receiver, state, kind, f) {
      if (typeof state === "function" ? receiver !== state || true : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return state.get(receiver);
  }

  function __classPrivateFieldSet(receiver, state, value, kind, f) {
      if (typeof state === "function" ? receiver !== state || true : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return (state.set(receiver, value)), value;
  }

  typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };

  var errorUtil;
  (function (errorUtil) {
      errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
      errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
  })(errorUtil || (errorUtil = {}));

  var _ZodEnum_cache, _ZodNativeEnum_cache;
  class ParseInputLazyPath {
      constructor(parent, value, path, key) {
          this._cachedPath = [];
          this.parent = parent;
          this.data = value;
          this._path = path;
          this._key = key;
      }
      get path() {
          if (!this._cachedPath.length) {
              if (this._key instanceof Array) {
                  this._cachedPath.push(...this._path, ...this._key);
              }
              else {
                  this._cachedPath.push(...this._path, this._key);
              }
          }
          return this._cachedPath;
      }
  }
  const handleResult = (ctx, result) => {
      if (isValid$2(result)) {
          return { success: true, data: result.value };
      }
      else {
          if (!ctx.common.issues.length) {
              throw new Error("Validation failed but no issues detected.");
          }
          return {
              success: false,
              get error() {
                  if (this._error)
                      return this._error;
                  const error = new ZodError(ctx.common.issues);
                  this._error = error;
                  return this._error;
              },
          };
      }
  };
  function processCreateParams(params) {
      if (!params)
          return {};
      const { errorMap, invalid_type_error, required_error, description } = params;
      if (errorMap && (invalid_type_error || required_error)) {
          throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      }
      if (errorMap)
          return { errorMap: errorMap, description };
      const customMap = (iss, ctx) => {
          var _a, _b;
          const { message } = params;
          if (iss.code === "invalid_enum_value") {
              return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
          }
          if (typeof ctx.data === "undefined") {
              return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
          }
          if (iss.code !== "invalid_type")
              return { message: ctx.defaultError };
          return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
      };
      return { errorMap: customMap, description };
  }
  class ZodType {
      constructor(def) {
          /** Alias of safeParseAsync */
          this.spa = this.safeParseAsync;
          this._def = def;
          this.parse = this.parse.bind(this);
          this.safeParse = this.safeParse.bind(this);
          this.parseAsync = this.parseAsync.bind(this);
          this.safeParseAsync = this.safeParseAsync.bind(this);
          this.spa = this.spa.bind(this);
          this.refine = this.refine.bind(this);
          this.refinement = this.refinement.bind(this);
          this.superRefine = this.superRefine.bind(this);
          this.optional = this.optional.bind(this);
          this.nullable = this.nullable.bind(this);
          this.nullish = this.nullish.bind(this);
          this.array = this.array.bind(this);
          this.promise = this.promise.bind(this);
          this.or = this.or.bind(this);
          this.and = this.and.bind(this);
          this.transform = this.transform.bind(this);
          this.brand = this.brand.bind(this);
          this.default = this.default.bind(this);
          this.catch = this.catch.bind(this);
          this.describe = this.describe.bind(this);
          this.pipe = this.pipe.bind(this);
          this.readonly = this.readonly.bind(this);
          this.isNullable = this.isNullable.bind(this);
          this.isOptional = this.isOptional.bind(this);
      }
      get description() {
          return this._def.description;
      }
      _getType(input) {
          return getParsedType(input.data);
      }
      _getOrReturnCtx(input, ctx) {
          return (ctx || {
              common: input.parent.common,
              data: input.data,
              parsedType: getParsedType(input.data),
              schemaErrorMap: this._def.errorMap,
              path: input.path,
              parent: input.parent,
          });
      }
      _processInputParams(input) {
          return {
              status: new ParseStatus(),
              ctx: {
                  common: input.parent.common,
                  data: input.data,
                  parsedType: getParsedType(input.data),
                  schemaErrorMap: this._def.errorMap,
                  path: input.path,
                  parent: input.parent,
              },
          };
      }
      _parseSync(input) {
          const result = this._parse(input);
          if (isAsync(result)) {
              throw new Error("Synchronous parse encountered promise.");
          }
          return result;
      }
      _parseAsync(input) {
          const result = this._parse(input);
          return Promise.resolve(result);
      }
      parse(data, params) {
          const result = this.safeParse(data, params);
          if (result.success)
              return result.data;
          throw result.error;
      }
      safeParse(data, params) {
          var _a;
          const ctx = {
              common: {
                  issues: [],
                  async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                  contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
              },
              path: (params === null || params === void 0 ? void 0 : params.path) || [],
              schemaErrorMap: this._def.errorMap,
              parent: null,
              data,
              parsedType: getParsedType(data),
          };
          const result = this._parseSync({ data, path: ctx.path, parent: ctx });
          return handleResult(ctx, result);
      }
      async parseAsync(data, params) {
          const result = await this.safeParseAsync(data, params);
          if (result.success)
              return result.data;
          throw result.error;
      }
      async safeParseAsync(data, params) {
          const ctx = {
              common: {
                  issues: [],
                  contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                  async: true,
              },
              path: (params === null || params === void 0 ? void 0 : params.path) || [],
              schemaErrorMap: this._def.errorMap,
              parent: null,
              data,
              parsedType: getParsedType(data),
          };
          const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
          const result = await (isAsync(maybeAsyncResult)
              ? maybeAsyncResult
              : Promise.resolve(maybeAsyncResult));
          return handleResult(ctx, result);
      }
      refine(check, message) {
          const getIssueProperties = (val) => {
              if (typeof message === "string" || typeof message === "undefined") {
                  return { message };
              }
              else if (typeof message === "function") {
                  return message(val);
              }
              else {
                  return message;
              }
          };
          return this._refinement((val, ctx) => {
              const result = check(val);
              const setError = () => ctx.addIssue({
                  code: ZodIssueCode.custom,
                  ...getIssueProperties(val),
              });
              if (typeof Promise !== "undefined" && result instanceof Promise) {
                  return result.then((data) => {
                      if (!data) {
                          setError();
                          return false;
                      }
                      else {
                          return true;
                      }
                  });
              }
              if (!result) {
                  setError();
                  return false;
              }
              else {
                  return true;
              }
          });
      }
      refinement(check, refinementData) {
          return this._refinement((val, ctx) => {
              if (!check(val)) {
                  ctx.addIssue(typeof refinementData === "function"
                      ? refinementData(val, ctx)
                      : refinementData);
                  return false;
              }
              else {
                  return true;
              }
          });
      }
      _refinement(refinement) {
          return new ZodEffects({
              schema: this,
              typeName: ZodFirstPartyTypeKind.ZodEffects,
              effect: { type: "refinement", refinement },
          });
      }
      superRefine(refinement) {
          return this._refinement(refinement);
      }
      optional() {
          return ZodOptional.create(this, this._def);
      }
      nullable() {
          return ZodNullable.create(this, this._def);
      }
      nullish() {
          return this.nullable().optional();
      }
      array() {
          return ZodArray.create(this, this._def);
      }
      promise() {
          return ZodPromise.create(this, this._def);
      }
      or(option) {
          return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
          return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform) {
          return new ZodEffects({
              ...processCreateParams(this._def),
              schema: this,
              typeName: ZodFirstPartyTypeKind.ZodEffects,
              effect: { type: "transform", transform },
          });
      }
      default(def) {
          const defaultValueFunc = typeof def === "function" ? def : () => def;
          return new ZodDefault({
              ...processCreateParams(this._def),
              innerType: this,
              defaultValue: defaultValueFunc,
              typeName: ZodFirstPartyTypeKind.ZodDefault,
          });
      }
      brand() {
          return new ZodBranded({
              typeName: ZodFirstPartyTypeKind.ZodBranded,
              type: this,
              ...processCreateParams(this._def),
          });
      }
      catch(def) {
          const catchValueFunc = typeof def === "function" ? def : () => def;
          return new ZodCatch({
              ...processCreateParams(this._def),
              innerType: this,
              catchValue: catchValueFunc,
              typeName: ZodFirstPartyTypeKind.ZodCatch,
          });
      }
      describe(description) {
          const This = this.constructor;
          return new This({
              ...this._def,
              description,
          });
      }
      pipe(target) {
          return ZodPipeline.create(this, target);
      }
      readonly() {
          return ZodReadonly.create(this);
      }
      isOptional() {
          return this.safeParse(undefined).success;
      }
      isNullable() {
          return this.safeParse(null).success;
      }
  }
  const cuidRegex = /^c[^\s-]{8,}$/i;
  const cuid2Regex = /^[0-9a-z]+$/;
  const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
  // const uuidRegex =
  //   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
  const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  const nanoidRegex = /^[a-z0-9_-]{21}$/i;
  const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
  // from https://stackoverflow.com/a/46181/1550155
  // old version: too slow, didn't support unicode
  // const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
  //old email regex
  // const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
  // eslint-disable-next-line
  // const emailRegex =
  //   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
  // const emailRegex =
  //   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  // const emailRegex =
  //   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
  const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  // const emailRegex =
  //   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
  // from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
  const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
  let emojiRegex;
  // faster, simpler, safer
  const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
  const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
  // https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript
  const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
  // simple
  // const dateRegexSource = `\\d{4}-\\d{2}-\\d{2}`;
  // no leap year validation
  // const dateRegexSource = `\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d))`;
  // with leap year validation
  const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
  const dateRegex = new RegExp(`^${dateRegexSource}$`);
  function timeRegexSource(args) {
      // let regex = `\\d{2}:\\d{2}:\\d{2}`;
      let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
      if (args.precision) {
          regex = `${regex}\\.\\d{${args.precision}}`;
      }
      else if (args.precision == null) {
          regex = `${regex}(\\.\\d+)?`;
      }
      return regex;
  }
  function timeRegex(args) {
      return new RegExp(`^${timeRegexSource(args)}$`);
  }
  // Adapted from https://stackoverflow.com/a/3143231
  function datetimeRegex(args) {
      let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
      const opts = [];
      opts.push(args.local ? `Z?` : `Z`);
      if (args.offset)
          opts.push(`([+-]\\d{2}:?\\d{2})`);
      regex = `${regex}(${opts.join("|")})`;
      return new RegExp(`^${regex}$`);
  }
  function isValidIP(ip, version) {
      if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
          return true;
      }
      if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
          return true;
      }
      return false;
  }
  class ZodString extends ZodType {
      _parse(input) {
          if (this._def.coerce) {
              input.data = String(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.string) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.string,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          const status = new ParseStatus();
          let ctx = undefined;
          for (const check of this._def.checks) {
              if (check.kind === "min") {
                  if (input.data.length < check.value) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.too_small,
                          minimum: check.value,
                          type: "string",
                          inclusive: true,
                          exact: false,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "max") {
                  if (input.data.length > check.value) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.too_big,
                          maximum: check.value,
                          type: "string",
                          inclusive: true,
                          exact: false,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "length") {
                  const tooBig = input.data.length > check.value;
                  const tooSmall = input.data.length < check.value;
                  if (tooBig || tooSmall) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      if (tooBig) {
                          addIssueToContext(ctx, {
                              code: ZodIssueCode.too_big,
                              maximum: check.value,
                              type: "string",
                              inclusive: true,
                              exact: true,
                              message: check.message,
                          });
                      }
                      else if (tooSmall) {
                          addIssueToContext(ctx, {
                              code: ZodIssueCode.too_small,
                              minimum: check.value,
                              type: "string",
                              inclusive: true,
                              exact: true,
                              message: check.message,
                          });
                      }
                      status.dirty();
                  }
              }
              else if (check.kind === "email") {
                  if (!emailRegex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "email",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "emoji") {
                  if (!emojiRegex) {
                      emojiRegex = new RegExp(_emojiRegex, "u");
                  }
                  if (!emojiRegex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "emoji",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "uuid") {
                  if (!uuidRegex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "uuid",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "nanoid") {
                  if (!nanoidRegex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "nanoid",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "cuid") {
                  if (!cuidRegex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "cuid",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "cuid2") {
                  if (!cuid2Regex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "cuid2",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "ulid") {
                  if (!ulidRegex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "ulid",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "url") {
                  try {
                      new URL(input.data);
                  }
                  catch (_a) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "url",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "regex") {
                  check.regex.lastIndex = 0;
                  const testResult = check.regex.test(input.data);
                  if (!testResult) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "regex",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "trim") {
                  input.data = input.data.trim();
              }
              else if (check.kind === "includes") {
                  if (!input.data.includes(check.value, check.position)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.invalid_string,
                          validation: { includes: check.value, position: check.position },
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "toLowerCase") {
                  input.data = input.data.toLowerCase();
              }
              else if (check.kind === "toUpperCase") {
                  input.data = input.data.toUpperCase();
              }
              else if (check.kind === "startsWith") {
                  if (!input.data.startsWith(check.value)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.invalid_string,
                          validation: { startsWith: check.value },
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "endsWith") {
                  if (!input.data.endsWith(check.value)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.invalid_string,
                          validation: { endsWith: check.value },
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "datetime") {
                  const regex = datetimeRegex(check);
                  if (!regex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.invalid_string,
                          validation: "datetime",
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "date") {
                  const regex = dateRegex;
                  if (!regex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.invalid_string,
                          validation: "date",
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "time") {
                  const regex = timeRegex(check);
                  if (!regex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.invalid_string,
                          validation: "time",
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "duration") {
                  if (!durationRegex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "duration",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "ip") {
                  if (!isValidIP(input.data, check.version)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "ip",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "base64") {
                  if (!base64Regex.test(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          validation: "base64",
                          code: ZodIssueCode.invalid_string,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else {
                  util.assertNever(check);
              }
          }
          return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message) {
          return this.refinement((data) => regex.test(data), {
              validation,
              code: ZodIssueCode.invalid_string,
              ...errorUtil.errToObj(message),
          });
      }
      _addCheck(check) {
          return new ZodString({
              ...this._def,
              checks: [...this._def.checks, check],
          });
      }
      email(message) {
          return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
      }
      url(message) {
          return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
      }
      emoji(message) {
          return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
      }
      uuid(message) {
          return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
      }
      nanoid(message) {
          return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
      }
      cuid(message) {
          return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
      }
      cuid2(message) {
          return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
      }
      ulid(message) {
          return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
      }
      base64(message) {
          return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
      }
      ip(options) {
          return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
      }
      datetime(options) {
          var _a, _b;
          if (typeof options === "string") {
              return this._addCheck({
                  kind: "datetime",
                  precision: null,
                  offset: false,
                  local: false,
                  message: options,
              });
          }
          return this._addCheck({
              kind: "datetime",
              precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
              offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
              local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
              ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
          });
      }
      date(message) {
          return this._addCheck({ kind: "date", message });
      }
      time(options) {
          if (typeof options === "string") {
              return this._addCheck({
                  kind: "time",
                  precision: null,
                  message: options,
              });
          }
          return this._addCheck({
              kind: "time",
              precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
              ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
          });
      }
      duration(message) {
          return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
      }
      regex(regex, message) {
          return this._addCheck({
              kind: "regex",
              regex: regex,
              ...errorUtil.errToObj(message),
          });
      }
      includes(value, options) {
          return this._addCheck({
              kind: "includes",
              value: value,
              position: options === null || options === void 0 ? void 0 : options.position,
              ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
          });
      }
      startsWith(value, message) {
          return this._addCheck({
              kind: "startsWith",
              value: value,
              ...errorUtil.errToObj(message),
          });
      }
      endsWith(value, message) {
          return this._addCheck({
              kind: "endsWith",
              value: value,
              ...errorUtil.errToObj(message),
          });
      }
      min(minLength, message) {
          return this._addCheck({
              kind: "min",
              value: minLength,
              ...errorUtil.errToObj(message),
          });
      }
      max(maxLength, message) {
          return this._addCheck({
              kind: "max",
              value: maxLength,
              ...errorUtil.errToObj(message),
          });
      }
      length(len, message) {
          return this._addCheck({
              kind: "length",
              value: len,
              ...errorUtil.errToObj(message),
          });
      }
      /**
       * @deprecated Use z.string().min(1) instead.
       * @see {@link ZodString.min}
       */
      nonempty(message) {
          return this.min(1, errorUtil.errToObj(message));
      }
      trim() {
          return new ZodString({
              ...this._def,
              checks: [...this._def.checks, { kind: "trim" }],
          });
      }
      toLowerCase() {
          return new ZodString({
              ...this._def,
              checks: [...this._def.checks, { kind: "toLowerCase" }],
          });
      }
      toUpperCase() {
          return new ZodString({
              ...this._def,
              checks: [...this._def.checks, { kind: "toUpperCase" }],
          });
      }
      get isDatetime() {
          return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
          return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
          return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
          return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
          return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
          return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
          return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
          return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
          return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
          return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
          return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isBase64() {
          return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get minLength() {
          let min = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "min") {
                  if (min === null || ch.value > min)
                      min = ch.value;
              }
          }
          return min;
      }
      get maxLength() {
          let max = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "max") {
                  if (max === null || ch.value < max)
                      max = ch.value;
              }
          }
          return max;
      }
  }
  ZodString.create = (params) => {
      var _a;
      return new ZodString({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodString,
          coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
          ...processCreateParams(params),
      });
  };
  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
  function floatSafeRemainder(val, step) {
      const valDecCount = (val.toString().split(".")[1] || "").length;
      const stepDecCount = (step.toString().split(".")[1] || "").length;
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
      const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
      const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
      return (valInt % stepInt) / Math.pow(10, decCount);
  }
  class ZodNumber extends ZodType {
      constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
          this.step = this.multipleOf;
      }
      _parse(input) {
          if (this._def.coerce) {
              input.data = Number(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.number) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.number,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          let ctx = undefined;
          const status = new ParseStatus();
          for (const check of this._def.checks) {
              if (check.kind === "int") {
                  if (!util.isInteger(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.invalid_type,
                          expected: "integer",
                          received: "float",
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "min") {
                  const tooSmall = check.inclusive
                      ? input.data < check.value
                      : input.data <= check.value;
                  if (tooSmall) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.too_small,
                          minimum: check.value,
                          type: "number",
                          inclusive: check.inclusive,
                          exact: false,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "max") {
                  const tooBig = check.inclusive
                      ? input.data > check.value
                      : input.data >= check.value;
                  if (tooBig) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.too_big,
                          maximum: check.value,
                          type: "number",
                          inclusive: check.inclusive,
                          exact: false,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "multipleOf") {
                  if (floatSafeRemainder(input.data, check.value) !== 0) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.not_multiple_of,
                          multipleOf: check.value,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "finite") {
                  if (!Number.isFinite(input.data)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.not_finite,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else {
                  util.assertNever(check);
              }
          }
          return { status: status.value, value: input.data };
      }
      gte(value, message) {
          return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
          return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
          return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
          return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
          return new ZodNumber({
              ...this._def,
              checks: [
                  ...this._def.checks,
                  {
                      kind,
                      value,
                      inclusive,
                      message: errorUtil.toString(message),
                  },
              ],
          });
      }
      _addCheck(check) {
          return new ZodNumber({
              ...this._def,
              checks: [...this._def.checks, check],
          });
      }
      int(message) {
          return this._addCheck({
              kind: "int",
              message: errorUtil.toString(message),
          });
      }
      positive(message) {
          return this._addCheck({
              kind: "min",
              value: 0,
              inclusive: false,
              message: errorUtil.toString(message),
          });
      }
      negative(message) {
          return this._addCheck({
              kind: "max",
              value: 0,
              inclusive: false,
              message: errorUtil.toString(message),
          });
      }
      nonpositive(message) {
          return this._addCheck({
              kind: "max",
              value: 0,
              inclusive: true,
              message: errorUtil.toString(message),
          });
      }
      nonnegative(message) {
          return this._addCheck({
              kind: "min",
              value: 0,
              inclusive: true,
              message: errorUtil.toString(message),
          });
      }
      multipleOf(value, message) {
          return this._addCheck({
              kind: "multipleOf",
              value: value,
              message: errorUtil.toString(message),
          });
      }
      finite(message) {
          return this._addCheck({
              kind: "finite",
              message: errorUtil.toString(message),
          });
      }
      safe(message) {
          return this._addCheck({
              kind: "min",
              inclusive: true,
              value: Number.MIN_SAFE_INTEGER,
              message: errorUtil.toString(message),
          })._addCheck({
              kind: "max",
              inclusive: true,
              value: Number.MAX_SAFE_INTEGER,
              message: errorUtil.toString(message),
          });
      }
      get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "min") {
                  if (min === null || ch.value > min)
                      min = ch.value;
              }
          }
          return min;
      }
      get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "max") {
                  if (max === null || ch.value < max)
                      max = ch.value;
              }
          }
          return max;
      }
      get isInt() {
          return !!this._def.checks.find((ch) => ch.kind === "int" ||
              (ch.kind === "multipleOf" && util.isInteger(ch.value)));
      }
      get isFinite() {
          let max = null, min = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "finite" ||
                  ch.kind === "int" ||
                  ch.kind === "multipleOf") {
                  return true;
              }
              else if (ch.kind === "min") {
                  if (min === null || ch.value > min)
                      min = ch.value;
              }
              else if (ch.kind === "max") {
                  if (max === null || ch.value < max)
                      max = ch.value;
              }
          }
          return Number.isFinite(min) && Number.isFinite(max);
      }
  }
  ZodNumber.create = (params) => {
      return new ZodNumber({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodNumber,
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
          ...processCreateParams(params),
      });
  };
  class ZodBigInt extends ZodType {
      constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
      }
      _parse(input) {
          if (this._def.coerce) {
              input.data = BigInt(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.bigint) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.bigint,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          let ctx = undefined;
          const status = new ParseStatus();
          for (const check of this._def.checks) {
              if (check.kind === "min") {
                  const tooSmall = check.inclusive
                      ? input.data < check.value
                      : input.data <= check.value;
                  if (tooSmall) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.too_small,
                          type: "bigint",
                          minimum: check.value,
                          inclusive: check.inclusive,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "max") {
                  const tooBig = check.inclusive
                      ? input.data > check.value
                      : input.data >= check.value;
                  if (tooBig) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.too_big,
                          type: "bigint",
                          maximum: check.value,
                          inclusive: check.inclusive,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "multipleOf") {
                  if (input.data % check.value !== BigInt(0)) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.not_multiple_of,
                          multipleOf: check.value,
                          message: check.message,
                      });
                      status.dirty();
                  }
              }
              else {
                  util.assertNever(check);
              }
          }
          return { status: status.value, value: input.data };
      }
      gte(value, message) {
          return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
          return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
          return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
          return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
          return new ZodBigInt({
              ...this._def,
              checks: [
                  ...this._def.checks,
                  {
                      kind,
                      value,
                      inclusive,
                      message: errorUtil.toString(message),
                  },
              ],
          });
      }
      _addCheck(check) {
          return new ZodBigInt({
              ...this._def,
              checks: [...this._def.checks, check],
          });
      }
      positive(message) {
          return this._addCheck({
              kind: "min",
              value: BigInt(0),
              inclusive: false,
              message: errorUtil.toString(message),
          });
      }
      negative(message) {
          return this._addCheck({
              kind: "max",
              value: BigInt(0),
              inclusive: false,
              message: errorUtil.toString(message),
          });
      }
      nonpositive(message) {
          return this._addCheck({
              kind: "max",
              value: BigInt(0),
              inclusive: true,
              message: errorUtil.toString(message),
          });
      }
      nonnegative(message) {
          return this._addCheck({
              kind: "min",
              value: BigInt(0),
              inclusive: true,
              message: errorUtil.toString(message),
          });
      }
      multipleOf(value, message) {
          return this._addCheck({
              kind: "multipleOf",
              value,
              message: errorUtil.toString(message),
          });
      }
      get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "min") {
                  if (min === null || ch.value > min)
                      min = ch.value;
              }
          }
          return min;
      }
      get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "max") {
                  if (max === null || ch.value < max)
                      max = ch.value;
              }
          }
          return max;
      }
  }
  ZodBigInt.create = (params) => {
      var _a;
      return new ZodBigInt({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodBigInt,
          coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
          ...processCreateParams(params),
      });
  };
  class ZodBoolean extends ZodType {
      _parse(input) {
          if (this._def.coerce) {
              input.data = Boolean(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.boolean) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.boolean,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          return OK(input.data);
      }
  }
  ZodBoolean.create = (params) => {
      return new ZodBoolean({
          typeName: ZodFirstPartyTypeKind.ZodBoolean,
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
          ...processCreateParams(params),
      });
  };
  class ZodDate extends ZodType {
      _parse(input) {
          if (this._def.coerce) {
              input.data = new Date(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.date) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.date,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          if (isNaN(input.data.getTime())) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_date,
              });
              return INVALID;
          }
          const status = new ParseStatus();
          let ctx = undefined;
          for (const check of this._def.checks) {
              if (check.kind === "min") {
                  if (input.data.getTime() < check.value) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.too_small,
                          message: check.message,
                          inclusive: true,
                          exact: false,
                          minimum: check.value,
                          type: "date",
                      });
                      status.dirty();
                  }
              }
              else if (check.kind === "max") {
                  if (input.data.getTime() > check.value) {
                      ctx = this._getOrReturnCtx(input, ctx);
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.too_big,
                          message: check.message,
                          inclusive: true,
                          exact: false,
                          maximum: check.value,
                          type: "date",
                      });
                      status.dirty();
                  }
              }
              else {
                  util.assertNever(check);
              }
          }
          return {
              status: status.value,
              value: new Date(input.data.getTime()),
          };
      }
      _addCheck(check) {
          return new ZodDate({
              ...this._def,
              checks: [...this._def.checks, check],
          });
      }
      min(minDate, message) {
          return this._addCheck({
              kind: "min",
              value: minDate.getTime(),
              message: errorUtil.toString(message),
          });
      }
      max(maxDate, message) {
          return this._addCheck({
              kind: "max",
              value: maxDate.getTime(),
              message: errorUtil.toString(message),
          });
      }
      get minDate() {
          let min = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "min") {
                  if (min === null || ch.value > min)
                      min = ch.value;
              }
          }
          return min != null ? new Date(min) : null;
      }
      get maxDate() {
          let max = null;
          for (const ch of this._def.checks) {
              if (ch.kind === "max") {
                  if (max === null || ch.value < max)
                      max = ch.value;
              }
          }
          return max != null ? new Date(max) : null;
      }
  }
  ZodDate.create = (params) => {
      return new ZodDate({
          checks: [],
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
          typeName: ZodFirstPartyTypeKind.ZodDate,
          ...processCreateParams(params),
      });
  };
  class ZodSymbol extends ZodType {
      _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.symbol) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.symbol,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          return OK(input.data);
      }
  }
  ZodSymbol.create = (params) => {
      return new ZodSymbol({
          typeName: ZodFirstPartyTypeKind.ZodSymbol,
          ...processCreateParams(params),
      });
  };
  class ZodUndefined extends ZodType {
      _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.undefined) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.undefined,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          return OK(input.data);
      }
  }
  ZodUndefined.create = (params) => {
      return new ZodUndefined({
          typeName: ZodFirstPartyTypeKind.ZodUndefined,
          ...processCreateParams(params),
      });
  };
  class ZodNull extends ZodType {
      _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.null) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.null,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          return OK(input.data);
      }
  }
  ZodNull.create = (params) => {
      return new ZodNull({
          typeName: ZodFirstPartyTypeKind.ZodNull,
          ...processCreateParams(params),
      });
  };
  class ZodAny extends ZodType {
      constructor() {
          super(...arguments);
          // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
          this._any = true;
      }
      _parse(input) {
          return OK(input.data);
      }
  }
  ZodAny.create = (params) => {
      return new ZodAny({
          typeName: ZodFirstPartyTypeKind.ZodAny,
          ...processCreateParams(params),
      });
  };
  class ZodUnknown extends ZodType {
      constructor() {
          super(...arguments);
          // required
          this._unknown = true;
      }
      _parse(input) {
          return OK(input.data);
      }
  }
  ZodUnknown.create = (params) => {
      return new ZodUnknown({
          typeName: ZodFirstPartyTypeKind.ZodUnknown,
          ...processCreateParams(params),
      });
  };
  class ZodNever extends ZodType {
      _parse(input) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.never,
              received: ctx.parsedType,
          });
          return INVALID;
      }
  }
  ZodNever.create = (params) => {
      return new ZodNever({
          typeName: ZodFirstPartyTypeKind.ZodNever,
          ...processCreateParams(params),
      });
  };
  class ZodVoid extends ZodType {
      _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.undefined) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.void,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          return OK(input.data);
      }
  }
  ZodVoid.create = (params) => {
      return new ZodVoid({
          typeName: ZodFirstPartyTypeKind.ZodVoid,
          ...processCreateParams(params),
      });
  };
  class ZodArray extends ZodType {
      _parse(input) {
          const { ctx, status } = this._processInputParams(input);
          const def = this._def;
          if (ctx.parsedType !== ZodParsedType.array) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.array,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          if (def.exactLength !== null) {
              const tooBig = ctx.data.length > def.exactLength.value;
              const tooSmall = ctx.data.length < def.exactLength.value;
              if (tooBig || tooSmall) {
                  addIssueToContext(ctx, {
                      code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                      minimum: (tooSmall ? def.exactLength.value : undefined),
                      maximum: (tooBig ? def.exactLength.value : undefined),
                      type: "array",
                      inclusive: true,
                      exact: true,
                      message: def.exactLength.message,
                  });
                  status.dirty();
              }
          }
          if (def.minLength !== null) {
              if (ctx.data.length < def.minLength.value) {
                  addIssueToContext(ctx, {
                      code: ZodIssueCode.too_small,
                      minimum: def.minLength.value,
                      type: "array",
                      inclusive: true,
                      exact: false,
                      message: def.minLength.message,
                  });
                  status.dirty();
              }
          }
          if (def.maxLength !== null) {
              if (ctx.data.length > def.maxLength.value) {
                  addIssueToContext(ctx, {
                      code: ZodIssueCode.too_big,
                      maximum: def.maxLength.value,
                      type: "array",
                      inclusive: true,
                      exact: false,
                      message: def.maxLength.message,
                  });
                  status.dirty();
              }
          }
          if (ctx.common.async) {
              return Promise.all([...ctx.data].map((item, i) => {
                  return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
              })).then((result) => {
                  return ParseStatus.mergeArray(status, result);
              });
          }
          const result = [...ctx.data].map((item, i) => {
              return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          });
          return ParseStatus.mergeArray(status, result);
      }
      get element() {
          return this._def.type;
      }
      min(minLength, message) {
          return new ZodArray({
              ...this._def,
              minLength: { value: minLength, message: errorUtil.toString(message) },
          });
      }
      max(maxLength, message) {
          return new ZodArray({
              ...this._def,
              maxLength: { value: maxLength, message: errorUtil.toString(message) },
          });
      }
      length(len, message) {
          return new ZodArray({
              ...this._def,
              exactLength: { value: len, message: errorUtil.toString(message) },
          });
      }
      nonempty(message) {
          return this.min(1, message);
      }
  }
  ZodArray.create = (schema, params) => {
      return new ZodArray({
          type: schema,
          minLength: null,
          maxLength: null,
          exactLength: null,
          typeName: ZodFirstPartyTypeKind.ZodArray,
          ...processCreateParams(params),
      });
  };
  function deepPartialify(schema) {
      if (schema instanceof ZodObject) {
          const newShape = {};
          for (const key in schema.shape) {
              const fieldSchema = schema.shape[key];
              newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
          }
          return new ZodObject({
              ...schema._def,
              shape: () => newShape,
          });
      }
      else if (schema instanceof ZodArray) {
          return new ZodArray({
              ...schema._def,
              type: deepPartialify(schema.element),
          });
      }
      else if (schema instanceof ZodOptional) {
          return ZodOptional.create(deepPartialify(schema.unwrap()));
      }
      else if (schema instanceof ZodNullable) {
          return ZodNullable.create(deepPartialify(schema.unwrap()));
      }
      else if (schema instanceof ZodTuple) {
          return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
      }
      else {
          return schema;
      }
  }
  class ZodObject extends ZodType {
      constructor() {
          super(...arguments);
          this._cached = null;
          /**
           * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
           * If you want to pass through unknown properties, use `.passthrough()` instead.
           */
          this.nonstrict = this.passthrough;
          // extend<
          //   Augmentation extends ZodRawShape,
          //   NewOutput extends util.flatten<{
          //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
          //       ? Augmentation[k]["_output"]
          //       : k extends keyof Output
          //       ? Output[k]
          //       : never;
          //   }>,
          //   NewInput extends util.flatten<{
          //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
          //       ? Augmentation[k]["_input"]
          //       : k extends keyof Input
          //       ? Input[k]
          //       : never;
          //   }>
          // >(
          //   augmentation: Augmentation
          // ): ZodObject<
          //   extendShape<T, Augmentation>,
          //   UnknownKeys,
          //   Catchall,
          //   NewOutput,
          //   NewInput
          // > {
          //   return new ZodObject({
          //     ...this._def,
          //     shape: () => ({
          //       ...this._def.shape(),
          //       ...augmentation,
          //     }),
          //   }) as any;
          // }
          /**
           * @deprecated Use `.extend` instead
           *  */
          this.augment = this.extend;
      }
      _getCached() {
          if (this._cached !== null)
              return this._cached;
          const shape = this._def.shape();
          const keys = util.objectKeys(shape);
          return (this._cached = { shape, keys });
      }
      _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.object) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.object,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          const { status, ctx } = this._processInputParams(input);
          const { shape, keys: shapeKeys } = this._getCached();
          const extraKeys = [];
          if (!(this._def.catchall instanceof ZodNever &&
              this._def.unknownKeys === "strip")) {
              for (const key in ctx.data) {
                  if (!shapeKeys.includes(key)) {
                      extraKeys.push(key);
                  }
              }
          }
          const pairs = [];
          for (const key of shapeKeys) {
              const keyValidator = shape[key];
              const value = ctx.data[key];
              pairs.push({
                  key: { status: "valid", value: key },
                  value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                  alwaysSet: key in ctx.data,
              });
          }
          if (this._def.catchall instanceof ZodNever) {
              const unknownKeys = this._def.unknownKeys;
              if (unknownKeys === "passthrough") {
                  for (const key of extraKeys) {
                      pairs.push({
                          key: { status: "valid", value: key },
                          value: { status: "valid", value: ctx.data[key] },
                      });
                  }
              }
              else if (unknownKeys === "strict") {
                  if (extraKeys.length > 0) {
                      addIssueToContext(ctx, {
                          code: ZodIssueCode.unrecognized_keys,
                          keys: extraKeys,
                      });
                      status.dirty();
                  }
              }
              else if (unknownKeys === "strip") ;
              else {
                  throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
              }
          }
          else {
              // run catchall validation
              const catchall = this._def.catchall;
              for (const key of extraKeys) {
                  const value = ctx.data[key];
                  pairs.push({
                      key: { status: "valid", value: key },
                      value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                      ),
                      alwaysSet: key in ctx.data,
                  });
              }
          }
          if (ctx.common.async) {
              return Promise.resolve()
                  .then(async () => {
                  const syncPairs = [];
                  for (const pair of pairs) {
                      const key = await pair.key;
                      const value = await pair.value;
                      syncPairs.push({
                          key,
                          value,
                          alwaysSet: pair.alwaysSet,
                      });
                  }
                  return syncPairs;
              })
                  .then((syncPairs) => {
                  return ParseStatus.mergeObjectSync(status, syncPairs);
              });
          }
          else {
              return ParseStatus.mergeObjectSync(status, pairs);
          }
      }
      get shape() {
          return this._def.shape();
      }
      strict(message) {
          errorUtil.errToObj;
          return new ZodObject({
              ...this._def,
              unknownKeys: "strict",
              ...(message !== undefined
                  ? {
                      errorMap: (issue, ctx) => {
                          var _a, _b, _c, _d;
                          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                          if (issue.code === "unrecognized_keys")
                              return {
                                  message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                              };
                          return {
                              message: defaultError,
                          };
                      },
                  }
                  : {}),
          });
      }
      strip() {
          return new ZodObject({
              ...this._def,
              unknownKeys: "strip",
          });
      }
      passthrough() {
          return new ZodObject({
              ...this._def,
              unknownKeys: "passthrough",
          });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
          return new ZodObject({
              ...this._def,
              shape: () => ({
                  ...this._def.shape(),
                  ...augmentation,
              }),
          });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
          const merged = new ZodObject({
              unknownKeys: merging._def.unknownKeys,
              catchall: merging._def.catchall,
              shape: () => ({
                  ...this._def.shape(),
                  ...merging._def.shape(),
              }),
              typeName: ZodFirstPartyTypeKind.ZodObject,
          });
          return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
          return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
          return new ZodObject({
              ...this._def,
              catchall: index,
          });
      }
      pick(mask) {
          const shape = {};
          util.objectKeys(mask).forEach((key) => {
              if (mask[key] && this.shape[key]) {
                  shape[key] = this.shape[key];
              }
          });
          return new ZodObject({
              ...this._def,
              shape: () => shape,
          });
      }
      omit(mask) {
          const shape = {};
          util.objectKeys(this.shape).forEach((key) => {
              if (!mask[key]) {
                  shape[key] = this.shape[key];
              }
          });
          return new ZodObject({
              ...this._def,
              shape: () => shape,
          });
      }
      /**
       * @deprecated
       */
      deepPartial() {
          return deepPartialify(this);
      }
      partial(mask) {
          const newShape = {};
          util.objectKeys(this.shape).forEach((key) => {
              const fieldSchema = this.shape[key];
              if (mask && !mask[key]) {
                  newShape[key] = fieldSchema;
              }
              else {
                  newShape[key] = fieldSchema.optional();
              }
          });
          return new ZodObject({
              ...this._def,
              shape: () => newShape,
          });
      }
      required(mask) {
          const newShape = {};
          util.objectKeys(this.shape).forEach((key) => {
              if (mask && !mask[key]) {
                  newShape[key] = this.shape[key];
              }
              else {
                  const fieldSchema = this.shape[key];
                  let newField = fieldSchema;
                  while (newField instanceof ZodOptional) {
                      newField = newField._def.innerType;
                  }
                  newShape[key] = newField;
              }
          });
          return new ZodObject({
              ...this._def,
              shape: () => newShape,
          });
      }
      keyof() {
          return createZodEnum(util.objectKeys(this.shape));
      }
  }
  ZodObject.create = (shape, params) => {
      return new ZodObject({
          shape: () => shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params),
      });
  };
  ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
          shape: () => shape,
          unknownKeys: "strict",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params),
      });
  };
  ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
          shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params),
      });
  };
  class ZodUnion extends ZodType {
      _parse(input) {
          const { ctx } = this._processInputParams(input);
          const options = this._def.options;
          function handleResults(results) {
              // return first issue-free validation if it exists
              for (const result of results) {
                  if (result.result.status === "valid") {
                      return result.result;
                  }
              }
              for (const result of results) {
                  if (result.result.status === "dirty") {
                      // add issues from dirty option
                      ctx.common.issues.push(...result.ctx.common.issues);
                      return result.result;
                  }
              }
              // return invalid
              const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_union,
                  unionErrors,
              });
              return INVALID;
          }
          if (ctx.common.async) {
              return Promise.all(options.map(async (option) => {
                  const childCtx = {
                      ...ctx,
                      common: {
                          ...ctx.common,
                          issues: [],
                      },
                      parent: null,
                  };
                  return {
                      result: await option._parseAsync({
                          data: ctx.data,
                          path: ctx.path,
                          parent: childCtx,
                      }),
                      ctx: childCtx,
                  };
              })).then(handleResults);
          }
          else {
              let dirty = undefined;
              const issues = [];
              for (const option of options) {
                  const childCtx = {
                      ...ctx,
                      common: {
                          ...ctx.common,
                          issues: [],
                      },
                      parent: null,
                  };
                  const result = option._parseSync({
                      data: ctx.data,
                      path: ctx.path,
                      parent: childCtx,
                  });
                  if (result.status === "valid") {
                      return result;
                  }
                  else if (result.status === "dirty" && !dirty) {
                      dirty = { result, ctx: childCtx };
                  }
                  if (childCtx.common.issues.length) {
                      issues.push(childCtx.common.issues);
                  }
              }
              if (dirty) {
                  ctx.common.issues.push(...dirty.ctx.common.issues);
                  return dirty.result;
              }
              const unionErrors = issues.map((issues) => new ZodError(issues));
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_union,
                  unionErrors,
              });
              return INVALID;
          }
      }
      get options() {
          return this._def.options;
      }
  }
  ZodUnion.create = (types, params) => {
      return new ZodUnion({
          options: types,
          typeName: ZodFirstPartyTypeKind.ZodUnion,
          ...processCreateParams(params),
      });
  };
  /////////////////////////////////////////////////////
  /////////////////////////////////////////////////////
  //////////                                 //////////
  //////////      ZodDiscriminatedUnion      //////////
  //////////                                 //////////
  /////////////////////////////////////////////////////
  /////////////////////////////////////////////////////
  const getDiscriminator = (type) => {
      if (type instanceof ZodLazy) {
          return getDiscriminator(type.schema);
      }
      else if (type instanceof ZodEffects) {
          return getDiscriminator(type.innerType());
      }
      else if (type instanceof ZodLiteral) {
          return [type.value];
      }
      else if (type instanceof ZodEnum) {
          return type.options;
      }
      else if (type instanceof ZodNativeEnum) {
          // eslint-disable-next-line ban/ban
          return util.objectValues(type.enum);
      }
      else if (type instanceof ZodDefault) {
          return getDiscriminator(type._def.innerType);
      }
      else if (type instanceof ZodUndefined) {
          return [undefined];
      }
      else if (type instanceof ZodNull) {
          return [null];
      }
      else if (type instanceof ZodOptional) {
          return [undefined, ...getDiscriminator(type.unwrap())];
      }
      else if (type instanceof ZodNullable) {
          return [null, ...getDiscriminator(type.unwrap())];
      }
      else if (type instanceof ZodBranded) {
          return getDiscriminator(type.unwrap());
      }
      else if (type instanceof ZodReadonly) {
          return getDiscriminator(type.unwrap());
      }
      else if (type instanceof ZodCatch) {
          return getDiscriminator(type._def.innerType);
      }
      else {
          return [];
      }
  };
  class ZodDiscriminatedUnion extends ZodType {
      _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.object) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.object,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          const discriminator = this.discriminator;
          const discriminatorValue = ctx.data[discriminator];
          const option = this.optionsMap.get(discriminatorValue);
          if (!option) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_union_discriminator,
                  options: Array.from(this.optionsMap.keys()),
                  path: [discriminator],
              });
              return INVALID;
          }
          if (ctx.common.async) {
              return option._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx,
              });
          }
          else {
              return option._parseSync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx,
              });
          }
      }
      get discriminator() {
          return this._def.discriminator;
      }
      get options() {
          return this._def.options;
      }
      get optionsMap() {
          return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
          // Get all the valid discriminator values
          const optionsMap = new Map();
          // try {
          for (const type of options) {
              const discriminatorValues = getDiscriminator(type.shape[discriminator]);
              if (!discriminatorValues.length) {
                  throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
              }
              for (const value of discriminatorValues) {
                  if (optionsMap.has(value)) {
                      throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                  }
                  optionsMap.set(value, type);
              }
          }
          return new ZodDiscriminatedUnion({
              typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
              discriminator,
              options,
              optionsMap,
              ...processCreateParams(params),
          });
      }
  }
  function mergeValues(a, b) {
      const aType = getParsedType(a);
      const bType = getParsedType(b);
      if (a === b) {
          return { valid: true, data: a };
      }
      else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
          const bKeys = util.objectKeys(b);
          const sharedKeys = util
              .objectKeys(a)
              .filter((key) => bKeys.indexOf(key) !== -1);
          const newObj = { ...a, ...b };
          for (const key of sharedKeys) {
              const sharedValue = mergeValues(a[key], b[key]);
              if (!sharedValue.valid) {
                  return { valid: false };
              }
              newObj[key] = sharedValue.data;
          }
          return { valid: true, data: newObj };
      }
      else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
          if (a.length !== b.length) {
              return { valid: false };
          }
          const newArray = [];
          for (let index = 0; index < a.length; index++) {
              const itemA = a[index];
              const itemB = b[index];
              const sharedValue = mergeValues(itemA, itemB);
              if (!sharedValue.valid) {
                  return { valid: false };
              }
              newArray.push(sharedValue.data);
          }
          return { valid: true, data: newArray };
      }
      else if (aType === ZodParsedType.date &&
          bType === ZodParsedType.date &&
          +a === +b) {
          return { valid: true, data: a };
      }
      else {
          return { valid: false };
      }
  }
  class ZodIntersection extends ZodType {
      _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const handleParsed = (parsedLeft, parsedRight) => {
              if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                  return INVALID;
              }
              const merged = mergeValues(parsedLeft.value, parsedRight.value);
              if (!merged.valid) {
                  addIssueToContext(ctx, {
                      code: ZodIssueCode.invalid_intersection_types,
                  });
                  return INVALID;
              }
              if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                  status.dirty();
              }
              return { status: status.value, value: merged.data };
          };
          if (ctx.common.async) {
              return Promise.all([
                  this._def.left._parseAsync({
                      data: ctx.data,
                      path: ctx.path,
                      parent: ctx,
                  }),
                  this._def.right._parseAsync({
                      data: ctx.data,
                      path: ctx.path,
                      parent: ctx,
                  }),
              ]).then(([left, right]) => handleParsed(left, right));
          }
          else {
              return handleParsed(this._def.left._parseSync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx,
              }), this._def.right._parseSync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx,
              }));
          }
      }
  }
  ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
          left: left,
          right: right,
          typeName: ZodFirstPartyTypeKind.ZodIntersection,
          ...processCreateParams(params),
      });
  };
  class ZodTuple extends ZodType {
      _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.array) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.array,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          if (ctx.data.length < this._def.items.length) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: this._def.items.length,
                  inclusive: true,
                  exact: false,
                  type: "array",
              });
              return INVALID;
          }
          const rest = this._def.rest;
          if (!rest && ctx.data.length > this._def.items.length) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: this._def.items.length,
                  inclusive: true,
                  exact: false,
                  type: "array",
              });
              status.dirty();
          }
          const items = [...ctx.data]
              .map((item, itemIndex) => {
              const schema = this._def.items[itemIndex] || this._def.rest;
              if (!schema)
                  return null;
              return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
          })
              .filter((x) => !!x); // filter nulls
          if (ctx.common.async) {
              return Promise.all(items).then((results) => {
                  return ParseStatus.mergeArray(status, results);
              });
          }
          else {
              return ParseStatus.mergeArray(status, items);
          }
      }
      get items() {
          return this._def.items;
      }
      rest(rest) {
          return new ZodTuple({
              ...this._def,
              rest,
          });
      }
  }
  ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
          throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
          items: schemas,
          typeName: ZodFirstPartyTypeKind.ZodTuple,
          rest: null,
          ...processCreateParams(params),
      });
  };
  class ZodRecord extends ZodType {
      get keySchema() {
          return this._def.keyType;
      }
      get valueSchema() {
          return this._def.valueType;
      }
      _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.object) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.object,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          const pairs = [];
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          for (const key in ctx.data) {
              pairs.push({
                  key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                  value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
                  alwaysSet: key in ctx.data,
              });
          }
          if (ctx.common.async) {
              return ParseStatus.mergeObjectAsync(status, pairs);
          }
          else {
              return ParseStatus.mergeObjectSync(status, pairs);
          }
      }
      get element() {
          return this._def.valueType;
      }
      static create(first, second, third) {
          if (second instanceof ZodType) {
              return new ZodRecord({
                  keyType: first,
                  valueType: second,
                  typeName: ZodFirstPartyTypeKind.ZodRecord,
                  ...processCreateParams(third),
              });
          }
          return new ZodRecord({
              keyType: ZodString.create(),
              valueType: first,
              typeName: ZodFirstPartyTypeKind.ZodRecord,
              ...processCreateParams(second),
          });
      }
  }
  class ZodMap extends ZodType {
      get keySchema() {
          return this._def.keyType;
      }
      get valueSchema() {
          return this._def.valueType;
      }
      _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.map) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.map,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          const pairs = [...ctx.data.entries()].map(([key, value], index) => {
              return {
                  key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                  value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
              };
          });
          if (ctx.common.async) {
              const finalMap = new Map();
              return Promise.resolve().then(async () => {
                  for (const pair of pairs) {
                      const key = await pair.key;
                      const value = await pair.value;
                      if (key.status === "aborted" || value.status === "aborted") {
                          return INVALID;
                      }
                      if (key.status === "dirty" || value.status === "dirty") {
                          status.dirty();
                      }
                      finalMap.set(key.value, value.value);
                  }
                  return { status: status.value, value: finalMap };
              });
          }
          else {
              const finalMap = new Map();
              for (const pair of pairs) {
                  const key = pair.key;
                  const value = pair.value;
                  if (key.status === "aborted" || value.status === "aborted") {
                      return INVALID;
                  }
                  if (key.status === "dirty" || value.status === "dirty") {
                      status.dirty();
                  }
                  finalMap.set(key.value, value.value);
              }
              return { status: status.value, value: finalMap };
          }
      }
  }
  ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
          valueType,
          keyType,
          typeName: ZodFirstPartyTypeKind.ZodMap,
          ...processCreateParams(params),
      });
  };
  class ZodSet extends ZodType {
      _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.set) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.set,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          const def = this._def;
          if (def.minSize !== null) {
              if (ctx.data.size < def.minSize.value) {
                  addIssueToContext(ctx, {
                      code: ZodIssueCode.too_small,
                      minimum: def.minSize.value,
                      type: "set",
                      inclusive: true,
                      exact: false,
                      message: def.minSize.message,
                  });
                  status.dirty();
              }
          }
          if (def.maxSize !== null) {
              if (ctx.data.size > def.maxSize.value) {
                  addIssueToContext(ctx, {
                      code: ZodIssueCode.too_big,
                      maximum: def.maxSize.value,
                      type: "set",
                      inclusive: true,
                      exact: false,
                      message: def.maxSize.message,
                  });
                  status.dirty();
              }
          }
          const valueType = this._def.valueType;
          function finalizeSet(elements) {
              const parsedSet = new Set();
              for (const element of elements) {
                  if (element.status === "aborted")
                      return INVALID;
                  if (element.status === "dirty")
                      status.dirty();
                  parsedSet.add(element.value);
              }
              return { status: status.value, value: parsedSet };
          }
          const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
          if (ctx.common.async) {
              return Promise.all(elements).then((elements) => finalizeSet(elements));
          }
          else {
              return finalizeSet(elements);
          }
      }
      min(minSize, message) {
          return new ZodSet({
              ...this._def,
              minSize: { value: minSize, message: errorUtil.toString(message) },
          });
      }
      max(maxSize, message) {
          return new ZodSet({
              ...this._def,
              maxSize: { value: maxSize, message: errorUtil.toString(message) },
          });
      }
      size(size, message) {
          return this.min(size, message).max(size, message);
      }
      nonempty(message) {
          return this.min(1, message);
      }
  }
  ZodSet.create = (valueType, params) => {
      return new ZodSet({
          valueType,
          minSize: null,
          maxSize: null,
          typeName: ZodFirstPartyTypeKind.ZodSet,
          ...processCreateParams(params),
      });
  };
  class ZodFunction extends ZodType {
      constructor() {
          super(...arguments);
          this.validate = this.implement;
      }
      _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.function) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.function,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          function makeArgsIssue(args, error) {
              return makeIssue({
                  data: args,
                  path: ctx.path,
                  errorMaps: [
                      ctx.common.contextualErrorMap,
                      ctx.schemaErrorMap,
                      getErrorMap(),
                      errorMap,
                  ].filter((x) => !!x),
                  issueData: {
                      code: ZodIssueCode.invalid_arguments,
                      argumentsError: error,
                  },
              });
          }
          function makeReturnsIssue(returns, error) {
              return makeIssue({
                  data: returns,
                  path: ctx.path,
                  errorMaps: [
                      ctx.common.contextualErrorMap,
                      ctx.schemaErrorMap,
                      getErrorMap(),
                      errorMap,
                  ].filter((x) => !!x),
                  issueData: {
                      code: ZodIssueCode.invalid_return_type,
                      returnTypeError: error,
                  },
              });
          }
          const params = { errorMap: ctx.common.contextualErrorMap };
          const fn = ctx.data;
          if (this._def.returns instanceof ZodPromise) {
              // Would love a way to avoid disabling this rule, but we need
              // an alias (using an arrow function was what caused 2651).
              // eslint-disable-next-line @typescript-eslint/no-this-alias
              const me = this;
              return OK(async function (...args) {
                  const error = new ZodError([]);
                  const parsedArgs = await me._def.args
                      .parseAsync(args, params)
                      .catch((e) => {
                      error.addIssue(makeArgsIssue(args, e));
                      throw error;
                  });
                  const result = await Reflect.apply(fn, this, parsedArgs);
                  const parsedReturns = await me._def.returns._def.type
                      .parseAsync(result, params)
                      .catch((e) => {
                      error.addIssue(makeReturnsIssue(result, e));
                      throw error;
                  });
                  return parsedReturns;
              });
          }
          else {
              // Would love a way to avoid disabling this rule, but we need
              // an alias (using an arrow function was what caused 2651).
              // eslint-disable-next-line @typescript-eslint/no-this-alias
              const me = this;
              return OK(function (...args) {
                  const parsedArgs = me._def.args.safeParse(args, params);
                  if (!parsedArgs.success) {
                      throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                  }
                  const result = Reflect.apply(fn, this, parsedArgs.data);
                  const parsedReturns = me._def.returns.safeParse(result, params);
                  if (!parsedReturns.success) {
                      throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                  }
                  return parsedReturns.data;
              });
          }
      }
      parameters() {
          return this._def.args;
      }
      returnType() {
          return this._def.returns;
      }
      args(...items) {
          return new ZodFunction({
              ...this._def,
              args: ZodTuple.create(items).rest(ZodUnknown.create()),
          });
      }
      returns(returnType) {
          return new ZodFunction({
              ...this._def,
              returns: returnType,
          });
      }
      implement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
      }
      strictImplement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
      }
      static create(args, returns, params) {
          return new ZodFunction({
              args: (args
                  ? args
                  : ZodTuple.create([]).rest(ZodUnknown.create())),
              returns: returns || ZodUnknown.create(),
              typeName: ZodFirstPartyTypeKind.ZodFunction,
              ...processCreateParams(params),
          });
      }
  }
  class ZodLazy extends ZodType {
      get schema() {
          return this._def.getter();
      }
      _parse(input) {
          const { ctx } = this._processInputParams(input);
          const lazySchema = this._def.getter();
          return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
  }
  ZodLazy.create = (getter, params) => {
      return new ZodLazy({
          getter: getter,
          typeName: ZodFirstPartyTypeKind.ZodLazy,
          ...processCreateParams(params),
      });
  };
  class ZodLiteral extends ZodType {
      _parse(input) {
          if (input.data !== this._def.value) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  received: ctx.data,
                  code: ZodIssueCode.invalid_literal,
                  expected: this._def.value,
              });
              return INVALID;
          }
          return { status: "valid", value: input.data };
      }
      get value() {
          return this._def.value;
      }
  }
  ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
          value: value,
          typeName: ZodFirstPartyTypeKind.ZodLiteral,
          ...processCreateParams(params),
      });
  };
  function createZodEnum(values, params) {
      return new ZodEnum({
          values,
          typeName: ZodFirstPartyTypeKind.ZodEnum,
          ...processCreateParams(params),
      });
  }
  class ZodEnum extends ZodType {
      constructor() {
          super(...arguments);
          _ZodEnum_cache.set(this, void 0);
      }
      _parse(input) {
          if (typeof input.data !== "string") {
              const ctx = this._getOrReturnCtx(input);
              const expectedValues = this._def.values;
              addIssueToContext(ctx, {
                  expected: util.joinValues(expectedValues),
                  received: ctx.parsedType,
                  code: ZodIssueCode.invalid_type,
              });
              return INVALID;
          }
          if (!__classPrivateFieldGet(this, _ZodEnum_cache)) {
              __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values));
          }
          if (!__classPrivateFieldGet(this, _ZodEnum_cache).has(input.data)) {
              const ctx = this._getOrReturnCtx(input);
              const expectedValues = this._def.values;
              addIssueToContext(ctx, {
                  received: ctx.data,
                  code: ZodIssueCode.invalid_enum_value,
                  options: expectedValues,
              });
              return INVALID;
          }
          return OK(input.data);
      }
      get options() {
          return this._def.values;
      }
      get enum() {
          const enumValues = {};
          for (const val of this._def.values) {
              enumValues[val] = val;
          }
          return enumValues;
      }
      get Values() {
          const enumValues = {};
          for (const val of this._def.values) {
              enumValues[val] = val;
          }
          return enumValues;
      }
      get Enum() {
          const enumValues = {};
          for (const val of this._def.values) {
              enumValues[val] = val;
          }
          return enumValues;
      }
      extract(values, newDef = this._def) {
          return ZodEnum.create(values, {
              ...this._def,
              ...newDef,
          });
      }
      exclude(values, newDef = this._def) {
          return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
              ...this._def,
              ...newDef,
          });
      }
  }
  _ZodEnum_cache = new WeakMap();
  ZodEnum.create = createZodEnum;
  class ZodNativeEnum extends ZodType {
      constructor() {
          super(...arguments);
          _ZodNativeEnum_cache.set(this, void 0);
      }
      _parse(input) {
          const nativeEnumValues = util.getValidEnumValues(this._def.values);
          const ctx = this._getOrReturnCtx(input);
          if (ctx.parsedType !== ZodParsedType.string &&
              ctx.parsedType !== ZodParsedType.number) {
              const expectedValues = util.objectValues(nativeEnumValues);
              addIssueToContext(ctx, {
                  expected: util.joinValues(expectedValues),
                  received: ctx.parsedType,
                  code: ZodIssueCode.invalid_type,
              });
              return INVALID;
          }
          if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache)) {
              __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)));
          }
          if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache).has(input.data)) {
              const expectedValues = util.objectValues(nativeEnumValues);
              addIssueToContext(ctx, {
                  received: ctx.data,
                  code: ZodIssueCode.invalid_enum_value,
                  options: expectedValues,
              });
              return INVALID;
          }
          return OK(input.data);
      }
      get enum() {
          return this._def.values;
      }
  }
  _ZodNativeEnum_cache = new WeakMap();
  ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
          values: values,
          typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
          ...processCreateParams(params),
      });
  };
  class ZodPromise extends ZodType {
      unwrap() {
          return this._def.type;
      }
      _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.promise &&
              ctx.common.async === false) {
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.promise,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          const promisified = ctx.parsedType === ZodParsedType.promise
              ? ctx.data
              : Promise.resolve(ctx.data);
          return OK(promisified.then((data) => {
              return this._def.type.parseAsync(data, {
                  path: ctx.path,
                  errorMap: ctx.common.contextualErrorMap,
              });
          }));
      }
  }
  ZodPromise.create = (schema, params) => {
      return new ZodPromise({
          type: schema,
          typeName: ZodFirstPartyTypeKind.ZodPromise,
          ...processCreateParams(params),
      });
  };
  class ZodEffects extends ZodType {
      innerType() {
          return this._def.schema;
      }
      sourceType() {
          return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
              ? this._def.schema.sourceType()
              : this._def.schema;
      }
      _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const effect = this._def.effect || null;
          const checkCtx = {
              addIssue: (arg) => {
                  addIssueToContext(ctx, arg);
                  if (arg.fatal) {
                      status.abort();
                  }
                  else {
                      status.dirty();
                  }
              },
              get path() {
                  return ctx.path;
              },
          };
          checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
          if (effect.type === "preprocess") {
              const processed = effect.transform(ctx.data, checkCtx);
              if (ctx.common.async) {
                  return Promise.resolve(processed).then(async (processed) => {
                      if (status.value === "aborted")
                          return INVALID;
                      const result = await this._def.schema._parseAsync({
                          data: processed,
                          path: ctx.path,
                          parent: ctx,
                      });
                      if (result.status === "aborted")
                          return INVALID;
                      if (result.status === "dirty")
                          return DIRTY(result.value);
                      if (status.value === "dirty")
                          return DIRTY(result.value);
                      return result;
                  });
              }
              else {
                  if (status.value === "aborted")
                      return INVALID;
                  const result = this._def.schema._parseSync({
                      data: processed,
                      path: ctx.path,
                      parent: ctx,
                  });
                  if (result.status === "aborted")
                      return INVALID;
                  if (result.status === "dirty")
                      return DIRTY(result.value);
                  if (status.value === "dirty")
                      return DIRTY(result.value);
                  return result;
              }
          }
          if (effect.type === "refinement") {
              const executeRefinement = (acc) => {
                  const result = effect.refinement(acc, checkCtx);
                  if (ctx.common.async) {
                      return Promise.resolve(result);
                  }
                  if (result instanceof Promise) {
                      throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                  }
                  return acc;
              };
              if (ctx.common.async === false) {
                  const inner = this._def.schema._parseSync({
                      data: ctx.data,
                      path: ctx.path,
                      parent: ctx,
                  });
                  if (inner.status === "aborted")
                      return INVALID;
                  if (inner.status === "dirty")
                      status.dirty();
                  // return value is ignored
                  executeRefinement(inner.value);
                  return { status: status.value, value: inner.value };
              }
              else {
                  return this._def.schema
                      ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                      .then((inner) => {
                      if (inner.status === "aborted")
                          return INVALID;
                      if (inner.status === "dirty")
                          status.dirty();
                      return executeRefinement(inner.value).then(() => {
                          return { status: status.value, value: inner.value };
                      });
                  });
              }
          }
          if (effect.type === "transform") {
              if (ctx.common.async === false) {
                  const base = this._def.schema._parseSync({
                      data: ctx.data,
                      path: ctx.path,
                      parent: ctx,
                  });
                  if (!isValid$2(base))
                      return base;
                  const result = effect.transform(base.value, checkCtx);
                  if (result instanceof Promise) {
                      throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                  }
                  return { status: status.value, value: result };
              }
              else {
                  return this._def.schema
                      ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                      .then((base) => {
                      if (!isValid$2(base))
                          return base;
                      return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                  });
              }
          }
          util.assertNever(effect);
      }
  }
  ZodEffects.create = (schema, effect, params) => {
      return new ZodEffects({
          schema,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect,
          ...processCreateParams(params),
      });
  };
  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects({
          schema,
          effect: { type: "preprocess", transform: preprocess },
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          ...processCreateParams(params),
      });
  };
  class ZodOptional extends ZodType {
      _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === ZodParsedType.undefined) {
              return OK(undefined);
          }
          return this._def.innerType._parse(input);
      }
      unwrap() {
          return this._def.innerType;
      }
  }
  ZodOptional.create = (type, params) => {
      return new ZodOptional({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodOptional,
          ...processCreateParams(params),
      });
  };
  class ZodNullable extends ZodType {
      _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === ZodParsedType.null) {
              return OK(null);
          }
          return this._def.innerType._parse(input);
      }
      unwrap() {
          return this._def.innerType;
      }
  }
  ZodNullable.create = (type, params) => {
      return new ZodNullable({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodNullable,
          ...processCreateParams(params),
      });
  };
  class ZodDefault extends ZodType {
      _parse(input) {
          const { ctx } = this._processInputParams(input);
          let data = ctx.data;
          if (ctx.parsedType === ZodParsedType.undefined) {
              data = this._def.defaultValue();
          }
          return this._def.innerType._parse({
              data,
              path: ctx.path,
              parent: ctx,
          });
      }
      removeDefault() {
          return this._def.innerType;
      }
  }
  ZodDefault.create = (type, params) => {
      return new ZodDefault({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodDefault,
          defaultValue: typeof params.default === "function"
              ? params.default
              : () => params.default,
          ...processCreateParams(params),
      });
  };
  class ZodCatch extends ZodType {
      _parse(input) {
          const { ctx } = this._processInputParams(input);
          // newCtx is used to not collect issues from inner types in ctx
          const newCtx = {
              ...ctx,
              common: {
                  ...ctx.common,
                  issues: [],
              },
          };
          const result = this._def.innerType._parse({
              data: newCtx.data,
              path: newCtx.path,
              parent: {
                  ...newCtx,
              },
          });
          if (isAsync(result)) {
              return result.then((result) => {
                  return {
                      status: "valid",
                      value: result.status === "valid"
                          ? result.value
                          : this._def.catchValue({
                              get error() {
                                  return new ZodError(newCtx.common.issues);
                              },
                              input: newCtx.data,
                          }),
                  };
              });
          }
          else {
              return {
                  status: "valid",
                  value: result.status === "valid"
                      ? result.value
                      : this._def.catchValue({
                          get error() {
                              return new ZodError(newCtx.common.issues);
                          },
                          input: newCtx.data,
                      }),
              };
          }
      }
      removeCatch() {
          return this._def.innerType;
      }
  }
  ZodCatch.create = (type, params) => {
      return new ZodCatch({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodCatch,
          catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
          ...processCreateParams(params),
      });
  };
  class ZodNaN extends ZodType {
      _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.nan) {
              const ctx = this._getOrReturnCtx(input);
              addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: ZodParsedType.nan,
                  received: ctx.parsedType,
              });
              return INVALID;
          }
          return { status: "valid", value: input.data };
      }
  }
  ZodNaN.create = (params) => {
      return new ZodNaN({
          typeName: ZodFirstPartyTypeKind.ZodNaN,
          ...processCreateParams(params),
      });
  };
  const BRAND = Symbol("zod_brand");
  class ZodBranded extends ZodType {
      _parse(input) {
          const { ctx } = this._processInputParams(input);
          const data = ctx.data;
          return this._def.type._parse({
              data,
              path: ctx.path,
              parent: ctx,
          });
      }
      unwrap() {
          return this._def.type;
      }
  }
  class ZodPipeline extends ZodType {
      _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.common.async) {
              const handleAsync = async () => {
                  const inResult = await this._def.in._parseAsync({
                      data: ctx.data,
                      path: ctx.path,
                      parent: ctx,
                  });
                  if (inResult.status === "aborted")
                      return INVALID;
                  if (inResult.status === "dirty") {
                      status.dirty();
                      return DIRTY(inResult.value);
                  }
                  else {
                      return this._def.out._parseAsync({
                          data: inResult.value,
                          path: ctx.path,
                          parent: ctx,
                      });
                  }
              };
              return handleAsync();
          }
          else {
              const inResult = this._def.in._parseSync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: ctx,
              });
              if (inResult.status === "aborted")
                  return INVALID;
              if (inResult.status === "dirty") {
                  status.dirty();
                  return {
                      status: "dirty",
                      value: inResult.value,
                  };
              }
              else {
                  return this._def.out._parseSync({
                      data: inResult.value,
                      path: ctx.path,
                      parent: ctx,
                  });
              }
          }
      }
      static create(a, b) {
          return new ZodPipeline({
              in: a,
              out: b,
              typeName: ZodFirstPartyTypeKind.ZodPipeline,
          });
      }
  }
  class ZodReadonly extends ZodType {
      _parse(input) {
          const result = this._def.innerType._parse(input);
          const freeze = (data) => {
              if (isValid$2(data)) {
                  data.value = Object.freeze(data.value);
              }
              return data;
          };
          return isAsync(result)
              ? result.then((data) => freeze(data))
              : freeze(result);
      }
      unwrap() {
          return this._def.innerType;
      }
  }
  ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodReadonly,
          ...processCreateParams(params),
      });
  };
  function custom(check, params = {}, 
  /**
   * @deprecated
   *
   * Pass `fatal` into the params object instead:
   *
   * ```ts
   * z.string().custom((val) => val.length > 5, { fatal: false })
   * ```
   *
   */
  fatal) {
      if (check)
          return ZodAny.create().superRefine((data, ctx) => {
              var _a, _b;
              if (!check(data)) {
                  const p = typeof params === "function"
                      ? params(data)
                      : typeof params === "string"
                          ? { message: params }
                          : params;
                  const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                  const p2 = typeof p === "string" ? { message: p } : p;
                  ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
              }
          });
      return ZodAny.create();
  }
  const late = {
      object: ZodObject.lazycreate,
  };
  var ZodFirstPartyTypeKind;
  (function (ZodFirstPartyTypeKind) {
      ZodFirstPartyTypeKind["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  const instanceOfType = (
  // const instanceOfType = <T extends new (...args: any[]) => any>(
  cls, params = {
      message: `Input not instance of ${cls.name}`,
  }) => custom((data) => data instanceof cls, params);
  const stringType = ZodString.create;
  const numberType = ZodNumber.create;
  const nanType = ZodNaN.create;
  const bigIntType = ZodBigInt.create;
  const booleanType = ZodBoolean.create;
  const dateType = ZodDate.create;
  const symbolType = ZodSymbol.create;
  const undefinedType = ZodUndefined.create;
  const nullType = ZodNull.create;
  const anyType = ZodAny.create;
  const unknownType = ZodUnknown.create;
  const neverType = ZodNever.create;
  const voidType = ZodVoid.create;
  const arrayType = ZodArray.create;
  const objectType = ZodObject.create;
  const strictObjectType = ZodObject.strictCreate;
  const unionType = ZodUnion.create;
  const discriminatedUnionType = ZodDiscriminatedUnion.create;
  const intersectionType = ZodIntersection.create;
  const tupleType = ZodTuple.create;
  const recordType = ZodRecord.create;
  const mapType = ZodMap.create;
  const setType = ZodSet.create;
  const functionType = ZodFunction.create;
  const lazyType = ZodLazy.create;
  const literalType = ZodLiteral.create;
  const enumType = ZodEnum.create;
  const nativeEnumType = ZodNativeEnum.create;
  const promiseType = ZodPromise.create;
  const effectsType = ZodEffects.create;
  const optionalType = ZodOptional.create;
  const nullableType = ZodNullable.create;
  const preprocessType = ZodEffects.createWithPreprocess;
  const pipelineType = ZodPipeline.create;
  const ostring = () => stringType().optional();
  const onumber = () => numberType().optional();
  const oboolean = () => booleanType().optional();
  const coerce = {
      string: ((arg) => ZodString.create({ ...arg, coerce: true })),
      number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
      boolean: ((arg) => ZodBoolean.create({
          ...arg,
          coerce: true,
      })),
      bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
      date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
  };
  const NEVER = INVALID;

  var z = /*#__PURE__*/Object.freeze({
      __proto__: null,
      defaultErrorMap: errorMap,
      setErrorMap: setErrorMap,
      getErrorMap: getErrorMap,
      makeIssue: makeIssue,
      EMPTY_PATH: EMPTY_PATH,
      addIssueToContext: addIssueToContext,
      ParseStatus: ParseStatus,
      INVALID: INVALID,
      DIRTY: DIRTY,
      OK: OK,
      isAborted: isAborted,
      isDirty: isDirty,
      isValid: isValid$2,
      isAsync: isAsync,
      get util () { return util; },
      get objectUtil () { return objectUtil; },
      ZodParsedType: ZodParsedType,
      getParsedType: getParsedType,
      ZodType: ZodType,
      datetimeRegex: datetimeRegex,
      ZodString: ZodString,
      ZodNumber: ZodNumber,
      ZodBigInt: ZodBigInt,
      ZodBoolean: ZodBoolean,
      ZodDate: ZodDate,
      ZodSymbol: ZodSymbol,
      ZodUndefined: ZodUndefined,
      ZodNull: ZodNull,
      ZodAny: ZodAny,
      ZodUnknown: ZodUnknown,
      ZodNever: ZodNever,
      ZodVoid: ZodVoid,
      ZodArray: ZodArray,
      ZodObject: ZodObject,
      ZodUnion: ZodUnion,
      ZodDiscriminatedUnion: ZodDiscriminatedUnion,
      ZodIntersection: ZodIntersection,
      ZodTuple: ZodTuple,
      ZodRecord: ZodRecord,
      ZodMap: ZodMap,
      ZodSet: ZodSet,
      ZodFunction: ZodFunction,
      ZodLazy: ZodLazy,
      ZodLiteral: ZodLiteral,
      ZodEnum: ZodEnum,
      ZodNativeEnum: ZodNativeEnum,
      ZodPromise: ZodPromise,
      ZodEffects: ZodEffects,
      ZodTransformer: ZodEffects,
      ZodOptional: ZodOptional,
      ZodNullable: ZodNullable,
      ZodDefault: ZodDefault,
      ZodCatch: ZodCatch,
      ZodNaN: ZodNaN,
      BRAND: BRAND,
      ZodBranded: ZodBranded,
      ZodPipeline: ZodPipeline,
      ZodReadonly: ZodReadonly,
      custom: custom,
      Schema: ZodType,
      ZodSchema: ZodType,
      late: late,
      get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
      coerce: coerce,
      any: anyType,
      array: arrayType,
      bigint: bigIntType,
      boolean: booleanType,
      date: dateType,
      discriminatedUnion: discriminatedUnionType,
      effect: effectsType,
      'enum': enumType,
      'function': functionType,
      'instanceof': instanceOfType,
      intersection: intersectionType,
      lazy: lazyType,
      literal: literalType,
      map: mapType,
      nan: nanType,
      nativeEnum: nativeEnumType,
      never: neverType,
      'null': nullType,
      nullable: nullableType,
      number: numberType,
      object: objectType,
      oboolean: oboolean,
      onumber: onumber,
      optional: optionalType,
      ostring: ostring,
      pipeline: pipelineType,
      preprocess: preprocessType,
      promise: promiseType,
      record: recordType,
      set: setType,
      strictObject: strictObjectType,
      string: stringType,
      symbol: symbolType,
      transformer: effectsType,
      tuple: tupleType,
      'undefined': undefinedType,
      union: unionType,
      unknown: unknownType,
      'void': voidType,
      NEVER: NEVER,
      ZodIssueCode: ZodIssueCode,
      quotelessJson: quotelessJson,
      ZodError: ZodError
  });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const errorFormatter = (error) => {
      if (error.message) {
          return error.message;
      }
      return 'unspecified error';
  };
  class Web3ValidatorError extends BaseWeb3Error {
      constructor(errors) {
          super();
          this.code = ERR_VALIDATION;
          this.errors = errors;
          super.message = `Web3 validator found ${errors.length} error[s]:\n${this._compileErrors().join('\n')}`;
      }
      _compileErrors() {
          return this.errors.map(errorFormatter);
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const VALID_ETH_BASE_TYPES = ['bool', 'int', 'uint', 'bytes', 'string', 'address', 'tuple'];

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isAbiParameterSchema = (schema) => typeof schema === 'object' && 'type' in schema && 'name' in schema;

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * checks input if typeof data is valid string input
   */
  const isString = (value) => typeof value === 'string';
  const isHexStrict$1 = (hex) => typeof hex === 'string' && /^((-)?0x[0-9a-f]+|(0x))$/i.test(hex);
  /**
   * Is the string a hex string.
   *
   * @param  value
   * @param  length
   * @returns  output the string is a hex string
   */
  function isHexString(value, length) {
      if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))
          return false;
      return true;
  }
  const isHex$1 = (hex) => typeof hex === 'number' ||
      typeof hex === 'bigint' ||
      (typeof hex === 'string' && /^((-0x|0x|-)?[0-9a-f]+|(0x))$/i.test(hex));
  /**
   * Returns a `Boolean` on whether or not the a `String` starts with '0x'
   * @param str the string input value
   * @return a boolean if it is or is not hex prefixed
   * @throws if the str input is not a string
   */
  function isHexPrefixed(str) {
      if (typeof str !== 'string') {
          throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);
      }
      return str.startsWith('0x');
  }
  /**
   * Checks provided Uint8Array for leading zeroes and throws if found.
   *
   * Examples:
   *
   * Valid values: 0x1, 0x, 0x01, 0x1234
   * Invalid values: 0x0, 0x00, 0x001, 0x0001
   *
   * Note: This method is useful for validating that RLP encoded integers comply with the rule that all
   * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes
   * @param values An object containing string keys and Uint8Array values
   * @throws if any provided value is found to have leading zero bytes
   */
  const validateNoLeadingZeroes = function (values) {
      for (const [k, v] of Object.entries(values)) {
          if (v !== undefined && v.length > 0 && v[0] === 0) {
              throw new Error(`${k} cannot have leading zeroes, received: ${v.toString()}`);
          }
      }
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const extraTypes = ['hex', 'number', 'blockNumber', 'blockNumberOrTag', 'filter', 'bloom'];
  const parseBaseType$1 = (type) => {
      // Remove all empty spaces to avoid any parsing issue.
      let strippedType = type.replace(/ /, '');
      let baseTypeSize;
      let isArray = false;
      let arraySizes = [];
      if (type.includes('[')) {
          // Extract the array type
          strippedType = strippedType.slice(0, strippedType.indexOf('['));
          // Extract array indexes
          arraySizes = [...type.matchAll(/(?:\[(\d*)\])/g)]
              .map(match => parseInt(match[1], 10))
              .map(size => (Number.isNaN(size) ? -1 : size));
          isArray = arraySizes.length > 0;
      }
      if (VALID_ETH_BASE_TYPES.includes(strippedType)) {
          return { baseType: strippedType, isArray, baseTypeSize, arraySizes };
      }
      if (strippedType.startsWith('int')) {
          baseTypeSize = parseInt(strippedType.substring(3), 10);
          strippedType = 'int';
      }
      else if (strippedType.startsWith('uint')) {
          baseTypeSize = parseInt(type.substring(4), 10);
          strippedType = 'uint';
      }
      else if (strippedType.startsWith('bytes')) {
          baseTypeSize = parseInt(strippedType.substring(5), 10);
          strippedType = 'bytes';
      }
      else {
          return { baseType: undefined, isArray: false, baseTypeSize: undefined, arraySizes };
      }
      return { baseType: strippedType, isArray, baseTypeSize, arraySizes };
  };
  const convertEthType = (type, parentSchema = {}) => {
      const typePropertyPresent = Object.keys(parentSchema).includes('type');
      if (typePropertyPresent) {
          throw new Web3ValidatorError([
              {
                  keyword: 'eth',
                  message: 'Either "eth" or "type" can be presented in schema',
                  params: { eth: type },
                  instancePath: '',
                  schemaPath: '',
              },
          ]);
      }
      const { baseType, baseTypeSize } = parseBaseType$1(type);
      if (!baseType && !extraTypes.includes(type)) {
          throw new Web3ValidatorError([
              {
                  keyword: 'eth',
                  message: `Eth data type "${type}" is not valid`,
                  params: { eth: type },
                  instancePath: '',
                  schemaPath: '',
              },
          ]);
      }
      if (baseType) {
          if (baseType === 'tuple') {
              throw new Error('"tuple" type is not implemented directly.');
          }
          return { format: `${baseType}${baseTypeSize !== null && baseTypeSize !== void 0 ? baseTypeSize : ''}`, required: true };
      }
      if (type) {
          return { format: type, required: true };
      }
      return {};
  };
  const abiSchemaToJsonSchema = (abis, level = '/0') => {
      const schema = {
          type: 'array',
          items: [],
          maxItems: abis.length,
          minItems: abis.length,
      };
      for (const [index, abi] of abis.entries()) {
          // eslint-disable-next-line no-nested-ternary
          let abiType;
          let abiName;
          let abiComponents = [];
          // If it's a complete Abi Parameter
          // e.g. {name: 'a', type: 'uint'}
          if (isAbiParameterSchema(abi)) {
              abiType = abi.type;
              abiName = abi.name || `${level}/${index}`;
              abiComponents = abi.components;
              // If its short form string value e.g. ['uint']
          }
          else if (typeof abi === 'string') {
              abiType = abi;
              abiName = `${level}/${index}`;
              // If it's provided in short form of tuple e.g. [['uint', 'string']]
          }
          else if (Array.isArray(abi)) {
              // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]
              if (abi[0] &&
                  typeof abi[0] === 'string' &&
                  abi[0].startsWith('tuple') &&
                  !Array.isArray(abi[0]) &&
                  abi[1] &&
                  Array.isArray(abi[1])) {
                  // eslint-disable-next-line prefer-destructuring
                  abiType = abi[0];
                  abiName = `${level}/${index}`;
                  abiComponents = abi[1];
              }
              else {
                  abiType = 'tuple';
                  abiName = `${level}/${index}`;
                  abiComponents = abi;
              }
          }
          const { baseType, isArray, arraySizes } = parseBaseType$1(abiType);
          let childSchema;
          let lastSchema = schema;
          for (let i = arraySizes.length - 1; i > 0; i -= 1) {
              childSchema = {
                  type: 'array',
                  $id: abiName,
                  items: [],
                  maxItems: arraySizes[i],
                  minItems: arraySizes[i],
              };
              if (arraySizes[i] < 0) {
                  delete childSchema.maxItems;
                  delete childSchema.minItems;
              }
              // lastSchema.items is a Schema, concat with 'childSchema'
              if (!Array.isArray(lastSchema.items)) {
                  lastSchema.items = [lastSchema.items, childSchema];
              } // lastSchema.items is an empty Scheme array, set it to 'childSchema'
              else if (lastSchema.items.length === 0) {
                  lastSchema.items = [childSchema];
              } // lastSchema.items is a non-empty Scheme array, append 'childSchema'
              else {
                  lastSchema.items.push(childSchema);
              }
              lastSchema = childSchema;
          }
          if (baseType === 'tuple' && !isArray) {
              const nestedTuple = abiSchemaToJsonSchema(abiComponents, abiName);
              nestedTuple.$id = abiName;
              lastSchema.items.push(nestedTuple);
          }
          else if (baseType === 'tuple' && isArray) {
              const arraySize = arraySizes[0];
              const item = Object.assign({ type: 'array', $id: abiName, items: abiSchemaToJsonSchema(abiComponents, abiName) }, (arraySize >= 0 && { minItems: arraySize, maxItems: arraySize }));
              lastSchema.items.push(item);
          }
          else if (isArray) {
              const arraySize = arraySizes[0];
              const item = Object.assign({ type: 'array', $id: abiName, items: convertEthType(abiType) }, (arraySize >= 0 && { minItems: arraySize, maxItems: arraySize }));
              lastSchema.items.push(item);
          }
          else if (Array.isArray(lastSchema.items)) {
              // Array of non-tuple items
              lastSchema.items.push(Object.assign({ $id: abiName }, convertEthType(abiType)));
          }
          else {
              // Nested object
              lastSchema.items.push(Object.assign({ $id: abiName }, convertEthType(abiType)));
          }
          lastSchema = schema;
      }
      return schema;
  };
  const ethAbiToJsonSchema = (abis) => abiSchemaToJsonSchema(abis);
  const fetchArrayElement = (data, level) => {
      if (level === 1) {
          return data;
      }
      return fetchArrayElement(data[0], level - 1);
  };
  const transformJsonDataToAbiFormat = (abis, data, transformedData) => {
      const newData = [];
      for (const [index, abi] of abis.entries()) {
          // eslint-disable-next-line no-nested-ternary
          let abiType;
          let abiName;
          let abiComponents = [];
          // If it's a complete Abi Parameter
          // e.g. {name: 'a', type: 'uint'}
          if (isAbiParameterSchema(abi)) {
              abiType = abi.type;
              abiName = abi.name;
              abiComponents = abi.components;
              // If its short form string value e.g. ['uint']
          }
          else if (typeof abi === 'string') {
              abiType = abi;
              // If it's provided in short form of tuple e.g. [['uint', 'string']]
          }
          else if (Array.isArray(abi)) {
              // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]
              if (abi[1] && Array.isArray(abi[1])) {
                  abiType = abi[0];
                  abiComponents = abi[1];
              }
              else {
                  abiType = 'tuple';
                  abiComponents = abi;
              }
          }
          const { baseType, isArray, arraySizes } = parseBaseType$1(abiType);
          const dataItem = Array.isArray(data)
              ? data[index]
              : data[abiName];
          if (baseType === 'tuple' && !isArray) {
              newData.push(transformJsonDataToAbiFormat(abiComponents, dataItem, transformedData));
          }
          else if (baseType === 'tuple' && isArray) {
              const tupleData = [];
              for (const tupleItem of dataItem) {
                  // Nested array
                  if (arraySizes.length > 1) {
                      const nestedItems = fetchArrayElement(tupleItem, arraySizes.length - 1);
                      const nestedData = [];
                      for (const nestedItem of nestedItems) {
                          nestedData.push(transformJsonDataToAbiFormat(abiComponents, nestedItem, transformedData));
                      }
                      tupleData.push(nestedData);
                  }
                  else {
                      tupleData.push(transformJsonDataToAbiFormat(abiComponents, tupleItem, transformedData));
                  }
              }
              newData.push(tupleData);
          }
          else {
              newData.push(dataItem);
          }
      }
      // Have to reassign before pushing to transformedData
      // eslint-disable-next-line no-param-reassign
      transformedData = transformedData !== null && transformedData !== void 0 ? transformedData : [];
      transformedData.push(...newData);
      return transformedData;
  };
  /**
   * Code points to int
   */
  const codePointToInt = (codePoint) => {
      if (codePoint >= 48 && codePoint <= 57) {
          /* ['0'..'9'] -> [0..9] */
          return codePoint - 48;
      }
      if (codePoint >= 65 && codePoint <= 70) {
          /* ['A'..'F'] -> [10..15] */
          return codePoint - 55;
      }
      if (codePoint >= 97 && codePoint <= 102) {
          /* ['a'..'f'] -> [10..15] */
          return codePoint - 87;
      }
      throw new Error(`Invalid code point: ${codePoint}`);
  };
  /**
   * Converts value to it's number representation
   */
  const hexToNumber$2 = (value) => {
      if (!isHexStrict$1(value)) {
          throw new Error('Invalid hex string');
      }
      const [negative, hexValue] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];
      const num = BigInt(hexValue);
      if (num > Number.MAX_SAFE_INTEGER) {
          return negative ? -num : num;
      }
      if (num < Number.MIN_SAFE_INTEGER) {
          return num;
      }
      return negative ? -1 * Number(num) : Number(num);
  };
  /**
   * Converts value to it's hex representation
   */
  const numberToHex$1 = (value) => {
      if ((typeof value === 'number' || typeof value === 'bigint') && value < 0) {
          return `-0x${value.toString(16).slice(1)}`;
      }
      if ((typeof value === 'number' || typeof value === 'bigint') && value >= 0) {
          return `0x${value.toString(16)}`;
      }
      if (typeof value === 'string' && isHexStrict$1(value)) {
          const [negative, hex] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];
          const hexValue = hex.split(/^(-)?0(x|X)/).slice(-1)[0];
          return `${negative ? '-' : ''}0x${hexValue.replace(/^0+/, '').toLowerCase()}`;
      }
      if (typeof value === 'string' && !isHexStrict$1(value)) {
          return numberToHex$1(BigInt(value));
      }
      throw new InvalidNumberError(value);
  };
  /**
   * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.
   */
  const padLeft$1 = (value, characterAmount, sign = '0') => {
      if (typeof value === 'string' && !isHexStrict$1(value)) {
          return value.padStart(characterAmount, sign);
      }
      const hex = typeof value === 'string' && isHexStrict$1(value) ? value : numberToHex$1(value);
      const [prefix, hexValue] = hex.startsWith('-') ? ['-0x', hex.slice(3)] : ['0x', hex.slice(2)];
      return `${prefix}${hexValue.padStart(characterAmount, sign)}`;
  };
  function uint8ArrayToHexString$1(uint8Array) {
      let hexString = '0x';
      for (const e of uint8Array) {
          const hex = e.toString(16);
          hexString += hex.length === 1 ? `0${hex}` : hex;
      }
      return hexString;
  }
  // for optimized technique for hex to bytes conversion
  const charCodeMap = {
      zero: 48,
      nine: 57,
      A: 65,
      F: 70,
      a: 97,
      f: 102,
  };
  function charCodeToBase16(char) {
      if (char >= charCodeMap.zero && char <= charCodeMap.nine)
          return char - charCodeMap.zero;
      if (char >= charCodeMap.A && char <= charCodeMap.F)
          return char - (charCodeMap.A - 10);
      if (char >= charCodeMap.a && char <= charCodeMap.f)
          return char - (charCodeMap.a - 10);
      return undefined;
  }
  function hexToUint8Array$1(hex) {
      let offset = 0;
      if (hex.startsWith('0') && (hex[1] === 'x' || hex[1] === 'X')) {
          offset = 2;
      }
      if (hex.length % 2 !== 0) {
          throw new InvalidBytesError(`hex string has odd length: ${hex}`);
      }
      const length = (hex.length - offset) / 2;
      const bytes = new Uint8Array(length);
      for (let index = 0, j = offset; index < length; index += 1) {
          // eslint-disable-next-line no-plusplus
          const nibbleLeft = charCodeToBase16(hex.charCodeAt(j++));
          // eslint-disable-next-line no-plusplus
          const nibbleRight = charCodeToBase16(hex.charCodeAt(j++));
          if (nibbleLeft === undefined || nibbleRight === undefined) {
              throw new InvalidBytesError(`Invalid byte sequence ("${hex[j - 2]}${hex[j - 1]}" in "${hex}").`);
          }
          bytes[index] = nibbleLeft * 16 + nibbleRight;
      }
      return bytes;
  }
  // @TODO: Remove this function and its usages once all sub dependencies uses version 1.3.3 or above of @noble/hashes
  function ensureIfUint8Array(data) {
      var _a;
      if (!(data instanceof Uint8Array) &&
          ((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array') {
          return Uint8Array.from(data);
      }
      return data;
  }

  var utils$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    abiSchemaToJsonSchema: abiSchemaToJsonSchema,
    codePointToInt: codePointToInt,
    ensureIfUint8Array: ensureIfUint8Array,
    ethAbiToJsonSchema: ethAbiToJsonSchema,
    fetchArrayElement: fetchArrayElement,
    hexToNumber: hexToNumber$2,
    hexToUint8Array: hexToUint8Array$1,
    numberToHex: numberToHex$1,
    padLeft: padLeft$1,
    parseBaseType: parseBaseType$1,
    transformJsonDataToAbiFormat: transformJsonDataToAbiFormat,
    uint8ArrayToHexString: uint8ArrayToHexString$1
  });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * checks input if typeof data is valid Uint8Array input
   */
  const isUint8Array$1 = (data) => { var _a, _b; return data instanceof Uint8Array || ((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array' || ((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'Buffer'; };
  const isBytes$1 = (value, options = {
      abiType: 'bytes',
  }) => {
      if (typeof value !== 'string' && !Array.isArray(value) && !isUint8Array$1(value)) {
          return false;
      }
      // isHexStrict also accepts - prefix which can not exists in bytes
      if (typeof value === 'string' && isHexStrict$1(value) && value.startsWith('-')) {
          return false;
      }
      if (typeof value === 'string' && !isHexStrict$1(value)) {
          return false;
      }
      let valueToCheck;
      if (typeof value === 'string') {
          if (value.length % 2 !== 0) {
              // odd length hex
              return false;
          }
          valueToCheck = hexToUint8Array$1(value);
      }
      else if (Array.isArray(value)) {
          if (value.some(d => d < 0 || d > 255 || !Number.isInteger(d))) {
              return false;
          }
          valueToCheck = new Uint8Array(value);
      }
      else {
          valueToCheck = value;
      }
      if (options === null || options === void 0 ? void 0 : options.abiType) {
          const { baseTypeSize } = parseBaseType$1(options.abiType);
          return baseTypeSize ? valueToCheck.length === baseTypeSize : true;
      }
      if (options === null || options === void 0 ? void 0 : options.size) {
          return valueToCheck.length === (options === null || options === void 0 ? void 0 : options.size);
      }
      return true;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * Checks the checksum of a given address. Will also return false on non-checksum addresses.
   */
  const checkAddressCheckSum$1 = (data) => {
      if (!/^(0x)?[0-9a-f]{40}$/i.test(data))
          return false;
      const address = data.slice(2);
      const updatedData = utf8ToBytes$2(address.toLowerCase());
      const addressHash = uint8ArrayToHexString$1(keccak256(ensureIfUint8Array(updatedData))).slice(2);
      for (let i = 0; i < 40; i += 1) {
          // the nth letter should be uppercase if the nth digit of casemap is 1
          if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||
              (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
              return false;
          }
      }
      return true;
  };
  /**
   * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.
   */
  const isAddress$1 = (value, checkChecksum = true) => {
      if (typeof value !== 'string' && !isUint8Array$1(value)) {
          return false;
      }
      let valueToCheck;
      if (isUint8Array$1(value)) {
          valueToCheck = uint8ArrayToHexString$1(value);
      }
      else if (typeof value === 'string' && !isHexStrict$1(value)) {
          valueToCheck = value.toLowerCase().startsWith('0x') ? value : `0x${value}`;
      }
      else {
          valueToCheck = value;
      }
      // check if it has the basic requirements of an address
      if (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) {
          return false;
      }
      // If it's ALL lowercase or ALL upppercase
      if (/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) ||
          /^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)) {
          return true;
          // Otherwise check each case
      }
      return checkChecksum ? checkAddressCheckSum$1(valueToCheck) : true;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // Note: this could be simplified using ** operator, but babel does not handle it well
  // 	you can find more at: https://github.com/babel/babel/issues/13109 and https://github.com/web3/web3.js/issues/6187
  /** @internal */
  const bigintPower = (base, expo) => {
      // edge case
      if (expo === BigInt(0)) {
          return BigInt(1);
      }
      let res = base;
      for (let index = 1; index < expo; index += 1) {
          res *= base;
      }
      return res;
  };
  const isUInt = (value, options = {
      abiType: 'uint',
  }) => {
      if (!['number', 'string', 'bigint'].includes(typeof value) ||
          (typeof value === 'string' && value.length === 0)) {
          return false;
      }
      let size;
      if (options === null || options === void 0 ? void 0 : options.abiType) {
          const { baseTypeSize } = parseBaseType$1(options.abiType);
          if (baseTypeSize) {
              size = baseTypeSize;
          }
      }
      else if (options.bitSize) {
          size = options.bitSize;
      }
      const maxSize = bigintPower(BigInt(2), BigInt(size !== null && size !== void 0 ? size : 256)) - BigInt(1);
      try {
          const valueToCheck = typeof value === 'string' && isHexStrict$1(value)
              ? BigInt(hexToNumber$2(value))
              : BigInt(value);
          return valueToCheck >= 0 && valueToCheck <= maxSize;
      }
      catch (error) {
          // Some invalid number value given which can not be converted via BigInt
          return false;
      }
  };
  const isInt = (value, options = {
      abiType: 'int',
  }) => {
      if (!['number', 'string', 'bigint'].includes(typeof value)) {
          return false;
      }
      if (typeof value === 'number' && value > Number.MAX_SAFE_INTEGER) {
          return false;
      }
      let size;
      if (options === null || options === void 0 ? void 0 : options.abiType) {
          const { baseTypeSize, baseType } = parseBaseType$1(options.abiType);
          if (baseType !== 'int') {
              return false;
          }
          if (baseTypeSize) {
              size = baseTypeSize;
          }
      }
      else if (options.bitSize) {
          size = options.bitSize;
      }
      const maxSize = bigintPower(BigInt(2), BigInt((size !== null && size !== void 0 ? size : 256) - 1));
      const minSize = BigInt(-1) * bigintPower(BigInt(2), BigInt((size !== null && size !== void 0 ? size : 256) - 1));
      try {
          const valueToCheck = typeof value === 'string' && isHexStrict$1(value)
              ? BigInt(hexToNumber$2(value))
              : BigInt(value);
          return valueToCheck >= minSize && valueToCheck <= maxSize;
      }
      catch (error) {
          // Some invalid number value given which can not be converted via BigInt
          return false;
      }
  };
  const isNumber = (value) => {
      if (isInt(value)) {
          return true;
      }
      // It would be a decimal number
      if (typeof value === 'string' &&
          /[0-9.]/.test(value) &&
          value.indexOf('.') === value.lastIndexOf('.')) {
          return true;
      }
      if (typeof value === 'number') {
          return true;
      }
      return false;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isBlockNumber = (value) => isUInt(value);
  /**
   * Returns true if the given blockNumber is 'latest', 'pending', 'earliest, 'safe' or 'finalized'
   */
  const isBlockTag = (value) => Object.values(BlockTags).includes(value);
  /**
   * Returns true if given value is valid hex string and not negative, or is a valid BlockTag
   */
  const isBlockNumberOrTag = (value) => isBlockTag(value) || isBlockNumber(value);

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * Returns true if the bloom is a valid bloom
   * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7
   */
  const isBloom$1 = (bloom) => {
      if (typeof bloom !== 'string') {
          return false;
      }
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
          return false;
      }
      if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
          return true;
      }
      return false;
  };
  /**
   * Returns true if the value is part of the given bloom
   * note: false positives are possible.
   */
  const isInBloom$1 = (bloom, value) => {
      if (typeof value === 'string' && !isHexStrict$1(value)) {
          return false;
      }
      if (!isBloom$1(bloom)) {
          return false;
      }
      const uint8Array = typeof value === 'string' ? hexToUint8Array$1(value) : value;
      const hash = uint8ArrayToHexString$1(keccak256(uint8Array)).slice(2);
      for (let i = 0; i < 12; i += 4) {
          // calculate bit position in bloom filter that must be active
          const bitpos = 
          // eslint-disable-next-line no-bitwise
          ((parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16)) &
              2047;
          // test if bitpos in bloom is active
          const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
          // eslint-disable-next-line no-bitwise
          const offset = 1 << bitpos % 4;
          // eslint-disable-next-line no-bitwise
          if ((code & offset) !== offset) {
              return false;
          }
      }
      return true;
  };
  /**
   * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.
   */
  const isUserEthereumAddressInBloom$1 = (bloom, ethereumAddress) => {
      if (!isBloom$1(bloom)) {
          return false;
      }
      if (!isAddress$1(ethereumAddress)) {
          return false;
      }
      // you have to pad the ethereum address to 32 bytes
      // else the bloom filter does not work
      // this is only if your matching the USERS
      // ethereum address. Contract address do not need this
      // hence why we have 2 methods
      // (0x is not in the 2nd parameter of padleft so 64 chars is fine)
      const address = padLeft$1(ethereumAddress, 64);
      return isInBloom$1(bloom, address);
  };
  /**
   * Returns true if the contract address is part of the given bloom.
   * note: false positives are possible.
   */
  const isContractAddressInBloom$1 = (bloom, contractAddress) => {
      if (!isBloom$1(bloom)) {
          return false;
      }
      if (!isAddress$1(contractAddress)) {
          return false;
      }
      return isInBloom$1(bloom, contractAddress);
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isBoolean = (value) => {
      if (!['number', 'string', 'boolean'].includes(typeof value)) {
          return false;
      }
      if (typeof value === 'boolean') {
          return true;
      }
      if (typeof value === 'string' && !isHexStrict$1(value)) {
          return value === '1' || value === '0';
      }
      if (typeof value === 'string' && isHexStrict$1(value)) {
          return value === '0x1' || value === '0x0';
      }
      // type === number
      return value === 1 || value === 0;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // Explicitly check for the
  // eslint-disable-next-line @typescript-eslint/ban-types
  const isNullish$1 = (item) => 
  // Using "null" value intentionally for validation
  // eslint-disable-next-line no-null/no-null
  item === undefined || item === null;
  const isObject = (item) => typeof item === 'object' &&
      !isNullish$1(item) &&
      !Array.isArray(item) &&
      !(item instanceof TypedArray);

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * Checks if its a valid topic
   */
  const isTopic$1 = (topic) => {
      if (typeof topic !== 'string') {
          return false;
      }
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
          return false;
      }
      if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
          return true;
      }
      return false;
  };
  /**
   * Returns true if the topic is part of the given bloom.
   * note: false positives are possible.
   */
  const isTopicInBloom$1 = (bloom, topic) => {
      if (!isBloom$1(bloom)) {
          return false;
      }
      if (!isTopic$1(topic)) {
          return false;
      }
      return isInBloom$1(bloom, topic);
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * First we check if all properties in the provided value are expected,
   * then because all Filter properties are optional, we check if the expected properties
   * are defined. If defined and they're not the expected type, we immediately return false,
   * otherwise we return true after all checks pass.
   */
  const isFilterObject = (value) => {
      const expectedFilterProperties = [
          'fromBlock',
          'toBlock',
          'address',
          'topics',
          'blockHash',
      ];
      if (isNullish$1(value) || typeof value !== 'object')
          return false;
      if (!Object.keys(value).every(property => expectedFilterProperties.includes(property)))
          return false;
      if ((!isNullish$1(value.fromBlock) && !isBlockNumberOrTag(value.fromBlock)) ||
          (!isNullish$1(value.toBlock) && !isBlockNumberOrTag(value.toBlock)))
          return false;
      if (!isNullish$1(value.address)) {
          if (Array.isArray(value.address)) {
              if (!value.address.every(address => isAddress$1(address)))
                  return false;
          }
          else if (!isAddress$1(value.address))
              return false;
      }
      if (!isNullish$1(value.topics)) {
          if (!value.topics.every(topic => {
              if (isNullish$1(topic))
                  return true;
              if (Array.isArray(topic)) {
                  return topic.every(nestedTopic => isTopic$1(nestedTopic));
              }
              if (isTopic$1(topic))
                  return true;
              return false;
          }))
              return false;
      }
      return true;
  };

  const formats = {
      address: (data) => isAddress$1(data),
      bloom: (data) => isBloom$1(data),
      blockNumber: (data) => isBlockNumber(data),
      blockTag: (data) => isBlockTag(data),
      blockNumberOrTag: (data) => isBlockNumberOrTag(data),
      bool: (data) => isBoolean(data),
      bytes: (data) => isBytes$1(data),
      filter: (data) => isFilterObject(data),
      hex: (data) => isHexStrict$1(data),
      uint: (data) => isUInt(data),
      int: (data) => isInt(data),
      number: (data) => isNumber(data),
      string: (data) => isString(data),
  };
  // generate formats for all numbers types
  for (let bitSize = 8; bitSize <= 256; bitSize += 8) {
      formats[`int${bitSize}`] = data => isInt(data, { bitSize });
      formats[`uint${bitSize}`] = data => isUInt(data, { bitSize });
  }
  // generate bytes
  for (let size = 1; size <= 32; size += 1) {
      formats[`bytes${size}`] = data => isBytes$1(data, { size });
  }
  formats.bytes256 = formats.bytes;

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const convertToZod = (schema) => {
      if ((!(schema === null || schema === void 0 ? void 0 : schema.type) || (schema === null || schema === void 0 ? void 0 : schema.type) === 'object') && (schema === null || schema === void 0 ? void 0 : schema.properties)) {
          const obj = {};
          for (const name of Object.keys(schema.properties)) {
              const zItem = convertToZod(schema.properties[name]);
              if (zItem) {
                  obj[name] = zItem;
              }
          }
          if (Array.isArray(schema.required)) {
              return z
                  .object(obj)
                  .partial()
                  .required(schema.required.reduce((acc, v) => (Object.assign(Object.assign({}, acc), { [v]: true })), {}));
          }
          return z.object(obj).partial();
      }
      if ((schema === null || schema === void 0 ? void 0 : schema.type) === 'array' && (schema === null || schema === void 0 ? void 0 : schema.items)) {
          if (Array.isArray(schema.items) && schema.items.length > 1
              && schema.maxItems !== undefined
              && new Set(schema.items.map((item) => item.$id)).size === schema.items.length) {
              const arr = [];
              for (const item of schema.items) {
                  const zItem = convertToZod(item);
                  if (zItem) {
                      arr.push(zItem);
                  }
              }
              return z.tuple(arr);
          }
          const nextSchema = Array.isArray(schema.items) ? schema.items[0] : schema.items;
          let zodArraySchema = z.array(convertToZod(nextSchema));
          zodArraySchema = schema.minItems !== undefined ? zodArraySchema.min(schema.minItems) : zodArraySchema;
          zodArraySchema = schema.maxItems !== undefined ? zodArraySchema.max(schema.maxItems) : zodArraySchema;
          return zodArraySchema;
      }
      if (schema.oneOf && Array.isArray(schema.oneOf)) {
          return z.union(schema.oneOf.map(oneOfSchema => convertToZod(oneOfSchema)));
      }
      if (schema === null || schema === void 0 ? void 0 : schema.format) {
          if (!formats[schema.format]) {
              throw new SchemaFormatError(schema.format);
          }
          return z.any().refine(formats[schema.format], (value) => ({
              params: { value, format: schema.format },
          }));
      }
      if ((schema === null || schema === void 0 ? void 0 : schema.type) &&
          (schema === null || schema === void 0 ? void 0 : schema.type) !== 'object' &&
          typeof z[String(schema.type)] === 'function') {
          return z[String(schema.type)]();
      }
      return z.object({ data: z.any() }).partial();
  };
  class Validator {
      // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function
      static factory() {
          if (!Validator.validatorInstance) {
              Validator.validatorInstance = new Validator();
          }
          return Validator.validatorInstance;
      }
      validate(schema, data, options) {
          var _a, _b;
          const zod = convertToZod(schema);
          const result = zod.safeParse(data);
          if (!result.success) {
              const errors = this.convertErrors((_b = (_a = result.error) === null || _a === void 0 ? void 0 : _a.issues) !== null && _b !== void 0 ? _b : []);
              if (errors) {
                  if (options === null || options === void 0 ? void 0 : options.silent) {
                      return errors;
                  }
                  throw new Web3ValidatorError(errors);
              }
          }
          return undefined;
      }
      // eslint-disable-next-line class-methods-use-this
      convertErrors(errors) {
          if (errors && Array.isArray(errors) && errors.length > 0) {
              return errors.map((error) => {
                  var _a;
                  let message;
                  let keyword;
                  let params;
                  let schemaPath;
                  schemaPath = error.path.join('/');
                  const field = String(error.path[error.path.length - 1]);
                  const instancePath = error.path.join('/');
                  if (error.code === ZodIssueCode.too_big) {
                      keyword = 'maxItems';
                      schemaPath = `${instancePath}/maxItems`;
                      params = { limit: error.maximum };
                      message = `must NOT have more than ${error.maximum} items`;
                  }
                  else if (error.code === ZodIssueCode.too_small) {
                      keyword = 'minItems';
                      schemaPath = `${instancePath}/minItems`;
                      params = { limit: error.minimum };
                      message = `must NOT have fewer than ${error.minimum} items`;
                  }
                  else if (error.code === ZodIssueCode.custom) {
                      const { value, format } = ((_a = error.params) !== null && _a !== void 0 ? _a : {});
                      if (typeof value === 'undefined') {
                          message = `value at "/${schemaPath}" is required`;
                      }
                      else {
                          message = `value "${
                        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                        typeof value === 'object' ? JSON.stringify(value) : value}" at "/${schemaPath}" must pass "${format}" validation`;
                      }
                      params = { value };
                  }
                  return {
                      keyword: keyword !== null && keyword !== void 0 ? keyword : field,
                      instancePath: instancePath ? `/${instancePath}` : '',
                      schemaPath: schemaPath ? `#${schemaPath}` : '#',
                      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                      params: params !== null && params !== void 0 ? params : { value: error.message },
                      message: message !== null && message !== void 0 ? message : error.message,
                  };
              });
          }
          return undefined;
      }
  }

  class Web3Validator {
      constructor() {
          this._validator = Validator.factory();
      }
      validateJSONSchema(schema, data, options) {
          return this._validator.validate(schema, data, options);
      }
      validate(schema, data, options = { silent: false }) {
          var _a, _b;
          const jsonSchema = ethAbiToJsonSchema(schema);
          if (Array.isArray(jsonSchema.items) &&
              ((_a = jsonSchema.items) === null || _a === void 0 ? void 0 : _a.length) === 0 &&
              data.length === 0) {
              return undefined;
          }
          if (Array.isArray(jsonSchema.items) &&
              ((_b = jsonSchema.items) === null || _b === void 0 ? void 0 : _b.length) === 0 &&
              data.length !== 0) {
              throw new Web3ValidatorError([
                  {
                      instancePath: '/0',
                      schemaPath: '/',
                      keyword: 'required',
                      message: 'empty schema against data can not be validated',
                      params: data,
                  },
              ]);
          }
          return this._validator.validate(jsonSchema, data, options);
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const validator = new Web3Validator();

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function isUint8Array(data) {
      var _a, _b;
      return (data instanceof Uint8Array ||
          ((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array' ||
          ((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'Buffer');
  }
  function uint8ArrayConcat(...parts) {
      const length = parts.reduce((prev, part) => {
          const agg = prev + part.length;
          return agg;
      }, 0);
      const result = new Uint8Array(length);
      let offset = 0;
      for (const part of parts) {
          result.set(part, offset);
          offset += part.length;
      }
      return result;
  }
  /**
   * Returns true if the two passed Uint8Arrays have the same content
   */
  function uint8ArrayEquals(a, b) {
      if (a === b) {
          return true;
      }
      if (a.byteLength !== b.byteLength) {
          return false;
      }
      for (let i = 0; i < a.byteLength; i += 1) {
          if (a[i] !== b[i]) {
              return false;
          }
      }
      return true;
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @module Utils
   */
  // Ref: https://ethdocs.org/en/latest/ether.html
  // Note: this could be simplified using ** operator, but babel does not handle it well (https://github.com/babel/babel/issues/13109)
  /** @internal */
  const ethUnitMap = {
      noether: BigInt(0),
      wei: BigInt(1),
      kwei: BigInt(1000),
      Kwei: BigInt(1000),
      babbage: BigInt(1000),
      femtoether: BigInt(1000),
      mwei: BigInt(1000000),
      Mwei: BigInt(1000000),
      lovelace: BigInt(1000000),
      picoether: BigInt(1000000),
      gwei: BigInt(1000000000),
      Gwei: BigInt(1000000000),
      shannon: BigInt(1000000000),
      nanoether: BigInt(1000000000),
      nano: BigInt(1000000000),
      szabo: BigInt(1000000000000),
      microether: BigInt(1000000000000),
      micro: BigInt(1000000000000),
      finney: BigInt(1000000000000000),
      milliether: BigInt(1000000000000000),
      milli: BigInt(1000000000000000),
      ether: BigInt('1000000000000000000'),
      kether: BigInt('1000000000000000000000'),
      grand: BigInt('1000000000000000000000'),
      mether: BigInt('1000000000000000000000000'),
      gether: BigInt('1000000000000000000000000000'),
      tether: BigInt('1000000000000000000000000000000'),
  };
  const PrecisionLossWarning = 'Warning: Using type `number` with values that are large or contain many decimals may cause loss of precision, it is recommended to use type `string` or `BigInt` when using conversion methods';
  /**
   * Convert a value from bytes to Uint8Array
   * @param data - Data to be converted
   * @returns - The Uint8Array representation of the input data
   *
   * @example
   * ```ts
   * console.log(web3.utils.bytesToUint8Array("0xab")));
   * > Uint8Array(1) [ 171 ]
   * ```
   */
  const bytesToUint8Array = (data) => {
      validator.validate(['bytes'], [data]);
      if (isUint8Array(data)) {
          return data;
      }
      if (Array.isArray(data)) {
          return new Uint8Array(data);
      }
      if (typeof data === 'string') {
          return hexToUint8Array$1(data);
      }
      throw new InvalidBytesError(data);
  };
  /**
   * @internal
   */
  const { uint8ArrayToHexString } = utils$1;
  /**
   * Convert a byte array to a hex string
   * @param bytes - Byte array to be converted
   * @returns - The hex string representation of the input byte array
   *
   * @example
   * ```ts
   * console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));
   * > "0x480c"
   *
   */
  const bytesToHex$1 = (bytes) => uint8ArrayToHexString(bytesToUint8Array(bytes));
  /**
   * Convert a hex string to a byte array
   * @param hex - Hex string to be converted
   * @returns - The byte array representation of the input hex string
   *
   * @example
   * ```ts
   * console.log(web3.utils.hexToBytes('0x74657374'));
   * > Uint8Array(4) [ 116, 101, 115, 116 ]
   * ```
   */
  const hexToBytes$1 = (bytes) => {
      if (typeof bytes === 'string' && bytes.slice(0, 2).toLowerCase() !== '0x') {
          return bytesToUint8Array(`0x${bytes}`);
      }
      return bytesToUint8Array(bytes);
  };
  /**
   * Converts value to it's number representation
   * @param value - Hex string to be converted
   * @returns - The number representation of the input value
   *
   * @example
   * ```ts
   * conoslle.log(web3.utils.hexToNumber('0xa'));
   * > 10
   * ```
   */
  const hexToNumber$1 = (value) => {
      validator.validate(['hex'], [value]);
      // To avoid duplicate code and circular dependency we will
      // use `hexToNumber` implementation from `web3-validator`
      return hexToNumber$2(value);
  };
  /**
   * Converts value to it's number representation @alias `hexToNumber`
   */
  const toDecimal = hexToNumber$1;
  /**
   * Converts value to it's hex representation
   * @param value - Value to be converted
   * @param hexstrict - Add padding to converted value if odd, to make it hexstrict
   * @returns - The hex representation of the input value
   *
   * @example
   * ```ts
   * console.log(web3.utils.numberToHex(10));
   * > "0xa"
   * ```
   */
  const numberToHex = (value, hexstrict) => {
      if (typeof value !== 'bigint')
          validator.validate(['int'], [value]);
      // To avoid duplicate code and circular dependency we will
      // use `numberToHex` implementation from `web3-validator`
      let updatedValue = numberToHex$1(value);
      if (hexstrict) {
          if (!updatedValue.startsWith('-') && updatedValue.length % 2 === 1) {
              // To avoid duplicate a circular dependency we will not be using the padLeft method
              updatedValue = '0x0'.concat(updatedValue.slice(2));
          }
          else if (updatedValue.length % 2 === 0 && updatedValue.startsWith('-'))
              updatedValue = '-0x0'.concat(updatedValue.slice(3));
      }
      return updatedValue;
  };
  /**
   * Converts value to it's hex representation @alias `numberToHex`
   *
   */
  const fromDecimal = numberToHex;
  /**
   * Converts value to it's decimal representation in string
   * @param value - Hex string to be converted
   * @returns - The decimal representation of the input value
   *
   * @example
   * ```ts
   * console.log(web3.utils.hexToNumberString('0xa'));
   * > "10"
   * ```
   */
  const hexToNumberString = (data) => hexToNumber$1(data).toString();
  /**
   * Should be called to get hex representation (prefixed by 0x) of utf8 string
   * @param str - Utf8 string to be converted
   * @returns - The hex representation of the input string
   *
   * @example
   * ```ts
   * console.log(utf8ToHex('web3.js'));
   * > "0x776562332e6a73"
   * ```
   *
   */
  const utf8ToHex = (str) => {
      validator.validate(['string'], [str]);
      // To be compatible with 1.x trim null character
      // eslint-disable-next-line no-control-regex
      let strWithoutNullCharacter = str.replace(/^(?:\u0000)/, '');
      // eslint-disable-next-line no-control-regex
      strWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\u0000)$/, '');
      return bytesToHex$1(new TextEncoder().encode(strWithoutNullCharacter));
  };
  /**
   * @alias utf8ToHex
   */
  const fromUtf8 = utf8ToHex;
  /**
   * @alias utf8ToHex
   */
  const stringToHex = utf8ToHex;
  /**
   * Should be called to get utf8 from it's hex representation
   * @param str - Hex string to be converted
   * @returns - Utf8 string
   *
   * @example
   * ```ts
   * console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));
   * > Hello World
   * ```
   */
  const hexToUtf8 = (str) => bytesToUtf8(hexToBytes$1(str));
  /**
   * @alias hexToUtf8
   */
  const toUtf8 = (input) => {
      if (typeof input === 'string') {
          return hexToUtf8(input);
      }
      validator.validate(['bytes'], [input]);
      return bytesToUtf8(input);
  };
  const utf8ToBytes$1 = utf8ToBytes$2;
  /**
   * @alias hexToUtf8
   */
  const hexToString = hexToUtf8;
  /**
   * Should be called to get hex representation (prefixed by 0x) of ascii string
   * @param str - String to be converted to hex
   * @returns - Hex string
   *
   * @example
   * ```ts
   * console.log(web3.utils.asciiToHex('Hello World'));
   * > 0x48656c6c6f20576f726c64
   * ```
   */
  const asciiToHex = (str) => {
      validator.validate(['string'], [str]);
      let hexString = '';
      for (let i = 0; i < str.length; i += 1) {
          const hexCharCode = str.charCodeAt(i).toString(16);
          // might need a leading 0
          hexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;
      }
      return `0x${hexString}`;
  };
  /**
   * @alias asciiToHex
   */
  const fromAscii = asciiToHex;
  /**
   * Should be called to get ascii from it's hex representation
   * @param str - Hex string to be converted to ascii
   * @returns - Ascii string
   *
   * @example
   * ```ts
   * console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));
   * > Hello World
   * ```
   */
  const hexToAscii = (str) => {
      const decoder = new TextDecoder('ascii');
      return decoder.decode(hexToBytes$1(str));
  };
  /**
   * @alias hexToAscii
   */
  const toAscii = hexToAscii;
  /**
   * Auto converts any given value into it's hex representation.
   * @param value - Value to be converted to hex
   * @param returnType - If true, it will return the type of the value
   *
   * @example
   * ```ts
   * console.log(web3.utils.toHex(10));
   * > 0xa
   *
   * console.log(web3.utils.toHex('0x123', true));
   * > bytes
   *```
   */
  const toHex = (value, returnType) => {
      if (typeof value === 'string' && isAddress$1(value)) {
          return returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;
      }
      if (typeof value === 'boolean') {
          // eslint-disable-next-line no-nested-ternary
          return returnType ? 'bool' : value ? '0x01' : '0x00';
      }
      if (typeof value === 'number') {
          // eslint-disable-next-line no-nested-ternary
          return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);
      }
      if (typeof value === 'bigint') {
          return returnType ? 'bigint' : numberToHex(value);
      }
      if (isUint8Array(value)) {
          return returnType ? 'bytes' : bytesToHex$1(value);
      }
      if (typeof value === 'object' && !!value) {
          return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
      }
      if (typeof value === 'string') {
          if (value.startsWith('-0x') || value.startsWith('-0X')) {
              return returnType ? 'int256' : numberToHex(value);
          }
          if (isHexStrict$1(value)) {
              return returnType ? 'bytes' : value;
          }
          if (isHex$1(value) && !isInt(value) && !isUInt(value)) {
              return returnType ? 'bytes' : `0x${value}`;
          }
          if (isHex$1(value) && !isInt(value) && isUInt(value)) {
              // This condition seems problematic because meeting
              // both conditions `!isInt(value) && isUInt(value)` should be impossible.
              // But a value pass for those conditions: "101611154195520776335741463917853444671577865378275924493376429267637792638729"
              // Note that according to the docs: it is supposed to be treated as a string (https://docs.web3js.org/guides/web3_upgrade_guide/x/web3_utils_migration_guide#conversion-to-hex)
              // In short, the strange is that isInt(value) is false but isUInt(value) is true for the value above.
              // TODO: isUInt(value) should be investigated.
              // However, if `toHex('101611154195520776335741463917853444671577865378275924493376429267637792638729', true)` is called, it will return `true`.
              // But, if `toHex('101611154195520776335741463917853444671577865378275924493376429267637792638729')` is called, it will throw inside `numberToHex`.
              return returnType ? 'uint' : numberToHex(value);
          }
          if (!Number.isFinite(value)) {
              return returnType ? 'string' : utf8ToHex(value);
          }
      }
      throw new HexProcessingError(value);
  };
  /**
   * Converts any given value into it's number representation, if possible, else into it's bigint representation.
   * @param value - The value to convert
   * @returns - Returns the value in number or bigint representation
   *
   * @example
   * ```ts
   * console.log(web3.utils.toNumber(1));
   * > 1
   * console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));
   * > 9007199254740991
   *
   * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));
   * > 9007199254740991
   *
   * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));
   * > 9007199254740992n
   *
   * ```
   */
  const toNumber = (value) => {
      if (typeof value === 'number') {
          if (value > 1e20) {
              console.warn(PrecisionLossWarning);
              // JavaScript converts numbers >= 10^21 to scientific notation when coerced to strings,
              // leading to potential parsing errors and incorrect representations.
              // For instance, String(10000000000000000000000) yields '1e+22'.
              // Using BigInt prevents this
              return BigInt(value);
          }
          return value;
      }
      if (typeof value === 'bigint') {
          return value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER
              ? Number(value)
              : value;
      }
      if (typeof value === 'string' && isHexStrict$1(value)) {
          return hexToNumber$1(value);
      }
      try {
          return toNumber(BigInt(value));
      }
      catch (_a) {
          throw new InvalidNumberError(value);
      }
  };
  /**
   * Auto converts any given value into it's bigint representation
   *
   * @param value - The value to convert
   * @returns - Returns the value in bigint representation

   * @example
   * ```ts
   * console.log(web3.utils.toBigInt(1));
   * > 1n
   * ```
   */
  const toBigInt = (value) => {
      if (typeof value === 'number') {
          return BigInt(value);
      }
      if (typeof value === 'bigint') {
          return value;
      }
      // isHex passes for dec, too
      if (typeof value === 'string' && isHex$1(value)) {
          if (value.startsWith('-')) {
              return -BigInt(value.substring(1));
          }
          return BigInt(value);
      }
      throw new InvalidNumberError(value);
  };
  /**
   * Takes a number of wei and converts it to any other ether unit.
   * @param number - The value in wei
   * @param unit - The unit to convert to
   * @returns - Returns the converted value in the given unit
   *
   * @example
   * ```ts
   * console.log(web3.utils.fromWei("1", "ether"));
   * > 0.000000000000000001
   *
   * console.log(web3.utils.fromWei("1", "shannon"));
   * > 0.000000001
   * ```
   */
  const fromWei = (number, unit) => {
      let denomination;
      if (typeof unit === 'string') {
          denomination = ethUnitMap[unit];
          if (!denomination) {
              throw new InvalidUnitError(unit);
          }
      }
      else {
          if (unit < 0 || !Number.isInteger(unit)) {
              throw new InvalidIntegerError(unit);
          }
          denomination = bigintPower(BigInt(10), BigInt(unit));
      }
      // value in wei would always be integer
      // 13456789, 1234
      const value = String(toNumber(number));
      // count number of zeros in denomination
      // 1000000 -> 6
      const numberOfZerosInDenomination = denomination.toString().length - 1;
      if (numberOfZerosInDenomination <= 0) {
          return value.toString();
      }
      // pad the value with required zeros
      // 13456789 -> 13456789, 1234 -> 001234
      const zeroPaddedValue = value.padStart(numberOfZerosInDenomination, '0');
      // get the integer part of value by counting number of zeros from start
      // 13456789 -> '13'
      // 001234 -> ''
      const integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);
      // get the fraction part of value by counting number of zeros backward
      // 13456789 -> '456789'
      // 001234 -> '001234'
      const fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\.?0+$/, '');
      if (integer === '') {
          return fraction ? `0.${fraction}` : '0';
      }
      if (fraction === '') {
          return integer;
      }
      const updatedValue = `${integer}.${fraction}`;
      return updatedValue.slice(0, integer.length + numberOfZerosInDenomination + 1);
  };
  /**
   * Takes a number of a unit and converts it to wei.
   *
   * @param number - The number to convert.
   * @param unit - {@link EtherUnits} The unit of the number passed.
   * @returns The number converted to wei.
   *
   * @example
   * ```ts
   * console.log(web3.utils.toWei("0.001", "ether"));
   * > 1000000000000000 //(wei)
   * ```
   */
  // todo in 1.x unit defaults to 'ether'
  const toWei = (number, unit) => {
      validator.validate(['number'], [number]);
      let denomination;
      if (typeof unit === 'string') {
          denomination = ethUnitMap[unit];
          if (!denomination) {
              throw new InvalidUnitError(unit);
          }
      }
      else {
          if (unit < 0 || !Number.isInteger(unit)) {
              throw new InvalidIntegerError(unit);
          }
          denomination = bigintPower(BigInt(10), BigInt(unit));
      }
      let parsedNumber = number;
      if (typeof parsedNumber === 'number') {
          if (parsedNumber < 1e-15) {
              console.warn(PrecisionLossWarning);
          }
          if (parsedNumber > 1e20) {
              console.warn(PrecisionLossWarning);
              parsedNumber = BigInt(parsedNumber);
          }
          else {
              // in case there is a decimal point, we need to convert it to string
              parsedNumber = parsedNumber.toLocaleString('fullwide', {
                  useGrouping: false,
                  maximumFractionDigits: 20,
              });
          }
      }
      // if value is decimal e.g. 24.56 extract `integer` and `fraction` part
      // to avoid `fraction` to be null use `concat` with empty string
      const [integer, fraction] = String(typeof parsedNumber === 'string' && !isHexStrict$1(parsedNumber)
          ? parsedNumber
          : toNumber(parsedNumber))
          .split('.')
          .concat('');
      // join the value removing `.` from
      // 24.56 -> 2456
      const value = BigInt(`${integer}${fraction}`);
      // multiply value with denomination
      // 2456 * 1000000 -> 2456000000
      const updatedValue = value * denomination;
      // check if whole number was passed in
      const decimals = fraction.length;
      if (decimals === 0) {
          return updatedValue.toString();
      }
      // trim the value to remove extra zeros
      return updatedValue.toString().slice(0, -decimals);
  };
  /**
   * Will convert an upper or lowercase Ethereum address to a checksum address.
   * @param address - An address string
   * @returns	The checksum address
   * @example
   * ```ts
   * web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');
   * > "0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d"
   * ```
   */
  const toChecksumAddress = (address) => {
      if (!isAddress$1(address, false)) {
          throw new InvalidAddressError(address);
      }
      const lowerCaseAddress = address.toLowerCase().replace(/^0x/i, '');
      // calling `Uint8Array.from` because `noble-hashes` checks with `instanceof Uint8Array` that fails in some edge cases:
      // 	https://github.com/paulmillr/noble-hashes/issues/25#issuecomment-1750106284
      const hash = uint8ArrayToHexString$1(keccak256(ensureIfUint8Array(utf8ToBytes$1(lowerCaseAddress))));
      if (isNullish$1(hash) ||
          hash === '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470')
          return ''; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data
      let checksumAddress = '0x';
      const addressHash = hash.replace(/^0x/i, '');
      for (let i = 0; i < lowerCaseAddress.length; i += 1) {
          // If ith character is 8 to f then make it uppercase
          if (parseInt(addressHash[i], 16) > 7) {
              checksumAddress += lowerCaseAddress[i].toUpperCase();
          }
          else {
              checksumAddress += lowerCaseAddress[i];
          }
      }
      return checksumAddress;
  };
  const toBool = (value) => {
      if (typeof value === 'boolean') {
          return value;
      }
      if (typeof value === 'number' && (value === 0 || value === 1)) {
          return Boolean(value);
      }
      if (typeof value === 'bigint' && (value === BigInt(0) || value === BigInt(1))) {
          return Boolean(value);
      }
      if (typeof value === 'string' &&
          !isHexStrict$1(value) &&
          (value === '1' || value === '0' || value === 'false' || value === 'true')) {
          if (value === 'true') {
              return true;
          }
          if (value === 'false') {
              return false;
          }
          return Boolean(Number(value));
      }
      if (typeof value === 'string' && isHexStrict$1(value) && (value === '0x1' || value === '0x0')) {
          return Boolean(toNumber(value));
      }
      throw new InvalidBooleanError(value);
  };

  var eventemitter3 = {exports: {}};

  var hasRequiredEventemitter3;

  function requireEventemitter3 () {
  	if (hasRequiredEventemitter3) return eventemitter3.exports;
  	hasRequiredEventemitter3 = 1;
  	(function (module) {

  		var has = Object.prototype.hasOwnProperty
  		  , prefix = '~';

  		/**
  		 * Constructor to create a storage for our `EE` objects.
  		 * An `Events` instance is a plain object whose properties are event names.
  		 *
  		 * @constructor
  		 * @private
  		 */
  		function Events() {}

  		//
  		// We try to not inherit from `Object.prototype`. In some engines creating an
  		// instance in this way is faster than calling `Object.create(null)` directly.
  		// If `Object.create(null)` is not supported we prefix the event names with a
  		// character to make sure that the built-in object properties are not
  		// overridden or used as an attack vector.
  		//
  		if (Object.create) {
  		  Events.prototype = Object.create(null);

  		  //
  		  // This hack is needed because the `__proto__` property is still inherited in
  		  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  		  //
  		  if (!new Events().__proto__) prefix = false;
  		}

  		/**
  		 * Representation of a single event listener.
  		 *
  		 * @param {Function} fn The listener function.
  		 * @param {*} context The context to invoke the listener with.
  		 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
  		 * @constructor
  		 * @private
  		 */
  		function EE(fn, context, once) {
  		  this.fn = fn;
  		  this.context = context;
  		  this.once = once || false;
  		}

  		/**
  		 * Add a listener for a given event.
  		 *
  		 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
  		 * @param {(String|Symbol)} event The event name.
  		 * @param {Function} fn The listener function.
  		 * @param {*} context The context to invoke the listener with.
  		 * @param {Boolean} once Specify if the listener is a one-time listener.
  		 * @returns {EventEmitter}
  		 * @private
  		 */
  		function addListener(emitter, event, fn, context, once) {
  		  if (typeof fn !== 'function') {
  		    throw new TypeError('The listener must be a function');
  		  }

  		  var listener = new EE(fn, context || emitter, once)
  		    , evt = prefix ? prefix + event : event;

  		  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  		  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  		  else emitter._events[evt] = [emitter._events[evt], listener];

  		  return emitter;
  		}

  		/**
  		 * Clear event by name.
  		 *
  		 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
  		 * @param {(String|Symbol)} evt The Event name.
  		 * @private
  		 */
  		function clearEvent(emitter, evt) {
  		  if (--emitter._eventsCount === 0) emitter._events = new Events();
  		  else delete emitter._events[evt];
  		}

  		/**
  		 * Minimal `EventEmitter` interface that is molded against the Node.js
  		 * `EventEmitter` interface.
  		 *
  		 * @constructor
  		 * @public
  		 */
  		function EventEmitter() {
  		  this._events = new Events();
  		  this._eventsCount = 0;
  		}

  		/**
  		 * Return an array listing the events for which the emitter has registered
  		 * listeners.
  		 *
  		 * @returns {Array}
  		 * @public
  		 */
  		EventEmitter.prototype.eventNames = function eventNames() {
  		  var names = []
  		    , events
  		    , name;

  		  if (this._eventsCount === 0) return names;

  		  for (name in (events = this._events)) {
  		    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  		  }

  		  if (Object.getOwnPropertySymbols) {
  		    return names.concat(Object.getOwnPropertySymbols(events));
  		  }

  		  return names;
  		};

  		/**
  		 * Return the listeners registered for a given event.
  		 *
  		 * @param {(String|Symbol)} event The event name.
  		 * @returns {Array} The registered listeners.
  		 * @public
  		 */
  		EventEmitter.prototype.listeners = function listeners(event) {
  		  var evt = prefix ? prefix + event : event
  		    , handlers = this._events[evt];

  		  if (!handlers) return [];
  		  if (handlers.fn) return [handlers.fn];

  		  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
  		    ee[i] = handlers[i].fn;
  		  }

  		  return ee;
  		};

  		/**
  		 * Return the number of listeners listening to a given event.
  		 *
  		 * @param {(String|Symbol)} event The event name.
  		 * @returns {Number} The number of listeners.
  		 * @public
  		 */
  		EventEmitter.prototype.listenerCount = function listenerCount(event) {
  		  var evt = prefix ? prefix + event : event
  		    , listeners = this._events[evt];

  		  if (!listeners) return 0;
  		  if (listeners.fn) return 1;
  		  return listeners.length;
  		};

  		/**
  		 * Calls each of the listeners registered for a given event.
  		 *
  		 * @param {(String|Symbol)} event The event name.
  		 * @returns {Boolean} `true` if the event had listeners, else `false`.
  		 * @public
  		 */
  		EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  		  var evt = prefix ? prefix + event : event;

  		  if (!this._events[evt]) return false;

  		  var listeners = this._events[evt]
  		    , len = arguments.length
  		    , args
  		    , i;

  		  if (listeners.fn) {
  		    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

  		    switch (len) {
  		      case 1: return listeners.fn.call(listeners.context), true;
  		      case 2: return listeners.fn.call(listeners.context, a1), true;
  		      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
  		      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
  		      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
  		      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
  		    }

  		    for (i = 1, args = new Array(len -1); i < len; i++) {
  		      args[i - 1] = arguments[i];
  		    }

  		    listeners.fn.apply(listeners.context, args);
  		  } else {
  		    var length = listeners.length
  		      , j;

  		    for (i = 0; i < length; i++) {
  		      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

  		      switch (len) {
  		        case 1: listeners[i].fn.call(listeners[i].context); break;
  		        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
  		        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
  		        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
  		        default:
  		          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
  		            args[j - 1] = arguments[j];
  		          }

  		          listeners[i].fn.apply(listeners[i].context, args);
  		      }
  		    }
  		  }

  		  return true;
  		};

  		/**
  		 * Add a listener for a given event.
  		 *
  		 * @param {(String|Symbol)} event The event name.
  		 * @param {Function} fn The listener function.
  		 * @param {*} [context=this] The context to invoke the listener with.
  		 * @returns {EventEmitter} `this`.
  		 * @public
  		 */
  		EventEmitter.prototype.on = function on(event, fn, context) {
  		  return addListener(this, event, fn, context, false);
  		};

  		/**
  		 * Add a one-time listener for a given event.
  		 *
  		 * @param {(String|Symbol)} event The event name.
  		 * @param {Function} fn The listener function.
  		 * @param {*} [context=this] The context to invoke the listener with.
  		 * @returns {EventEmitter} `this`.
  		 * @public
  		 */
  		EventEmitter.prototype.once = function once(event, fn, context) {
  		  return addListener(this, event, fn, context, true);
  		};

  		/**
  		 * Remove the listeners of a given event.
  		 *
  		 * @param {(String|Symbol)} event The event name.
  		 * @param {Function} fn Only remove the listeners that match this function.
  		 * @param {*} context Only remove the listeners that have this context.
  		 * @param {Boolean} once Only remove one-time listeners.
  		 * @returns {EventEmitter} `this`.
  		 * @public
  		 */
  		EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  		  var evt = prefix ? prefix + event : event;

  		  if (!this._events[evt]) return this;
  		  if (!fn) {
  		    clearEvent(this, evt);
  		    return this;
  		  }

  		  var listeners = this._events[evt];

  		  if (listeners.fn) {
  		    if (
  		      listeners.fn === fn &&
  		      (!once || listeners.once) &&
  		      (!context || listeners.context === context)
  		    ) {
  		      clearEvent(this, evt);
  		    }
  		  } else {
  		    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
  		      if (
  		        listeners[i].fn !== fn ||
  		        (once && !listeners[i].once) ||
  		        (context && listeners[i].context !== context)
  		      ) {
  		        events.push(listeners[i]);
  		      }
  		    }

  		    //
  		    // Reset the array, or remove it completely if we have no more listeners.
  		    //
  		    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
  		    else clearEvent(this, evt);
  		  }

  		  return this;
  		};

  		/**
  		 * Remove all listeners, or those of the specified event.
  		 *
  		 * @param {(String|Symbol)} [event] The event name.
  		 * @returns {EventEmitter} `this`.
  		 * @public
  		 */
  		EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  		  var evt;

  		  if (event) {
  		    evt = prefix ? prefix + event : event;
  		    if (this._events[evt]) clearEvent(this, evt);
  		  } else {
  		    this._events = new Events();
  		    this._eventsCount = 0;
  		  }

  		  return this;
  		};

  		//
  		// Alias methods names because people roll like that.
  		//
  		EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  		EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  		//
  		// Expose the prefix.
  		//
  		EventEmitter.prefixed = prefix;

  		//
  		// Allow `EventEmitter` to be imported as module namespace.
  		//
  		EventEmitter.EventEmitter = EventEmitter;

  		//
  		// Expose the module.
  		//
  		{
  		  module.exports = EventEmitter;
  		} 
  	} (eventemitter3));
  	return eventemitter3.exports;
  }

  var eventemitter3Exports = requireEventemitter3();
  var EventEmitter$1 = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable max-classes-per-file */
  /**
   * This class copy the behavior of Node.js EventEmitter class.
   * It is used to provide the same interface for the browser environment.
   */
  class EventEmitter extends EventEmitter$1 {
      constructor() {
          super(...arguments);
          // must be defined for backwards compatibility
          this.maxListeners = Number.MAX_SAFE_INTEGER;
      }
      setMaxListeners(maxListeners) {
          this.maxListeners = maxListeners;
          return this;
      }
      getMaxListeners() {
          return this.maxListeners;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @module Utils
   */
  /**
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isHexStrict = isHexStrict$1;
  /**
   * returns true if input is a hexstring, number or bigint
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isHex = isHex$1;
  /**
   * Checks the checksum of a given address. Will also return false on non-checksum addresses.
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const checkAddressCheckSum = checkAddressCheckSum$1;
  /**
   * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isAddress = isAddress$1;
  /**
   * Returns true if the bloom is a valid bloom
   * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isBloom = isBloom$1;
  /**
   * Returns true if the value is part of the given bloom
   * note: false positives are possible.
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isInBloom = isInBloom$1;
  /**
   * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isUserEthereumAddressInBloom = isUserEthereumAddressInBloom$1;
  /**
   * Returns true if the contract address is part of the given bloom.
   * note: false positives are possible.
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isContractAddressInBloom = isContractAddressInBloom$1;
  /**
   * Checks if its a valid topic
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isTopic = isTopic$1;
  /**
   * Returns true if the topic is part of the given bloom.
   * note: false positives are possible.
   *
   * @deprecated Will be removed in next release. Please use `web3-validator` package instead.
   */
  const isTopicInBloom = isTopicInBloom$1;
  /**
   * Compares between block A and block B
   * @param blockA - Block number or string
   * @param blockB - Block number or string
   *
   * @returns - Returns -1 if a \< b, returns 1 if a \> b and returns 0 if a == b
   *
   * @example
   * ```ts
   * console.log(web3.utils.compareBlockNumbers('latest', 'pending'));
   * > -1
   *
   * console.log(web3.utils.compareBlockNumbers(12, 11));
   * > 1
   * ```
   */
  const compareBlockNumbers = (blockA, blockB) => {
      const isABlockTag = typeof blockA === 'string' && isBlockTag(blockA);
      const isBBlockTag = typeof blockB === 'string' && isBlockTag(blockB);
      if (blockA === blockB ||
          ((blockA === 'earliest' || blockA === 0) && (blockB === 'earliest' || blockB === 0)) // only exception compare blocktag with number
      ) {
          return 0;
      }
      if (blockA === 'earliest') {
          return -1;
      }
      if (blockB === 'earliest') {
          return 1;
      }
      if (isABlockTag && isBBlockTag) {
          // Increasing order:  earliest, finalized , safe, latest, pending
          const tagsOrder = {
              [BlockTags.EARLIEST]: 1,
              [BlockTags.FINALIZED]: 2,
              [BlockTags.SAFE]: 3,
              [BlockTags.LATEST]: 4,
              [BlockTags.PENDING]: 5,
          };
          if (tagsOrder[blockA] < tagsOrder[blockB]) {
              return -1;
          }
          return 1;
      }
      if ((isABlockTag && !isBBlockTag) || (!isABlockTag && isBBlockTag)) {
          throw new InvalidBlockError('Cannot compare blocktag with provided non-blocktag input.');
      }
      const bigIntA = BigInt(blockA);
      const bigIntB = BigInt(blockB);
      if (bigIntA < bigIntB) {
          return -1;
      }
      if (bigIntA === bigIntB) {
          return 0;
      }
      return 1;
  };
  const isContractInitOptions = (options) => typeof options === 'object' &&
      !isNullish$1(options) &&
      Object.keys(options).length !== 0 &&
      [
          'input',
          'data',
          'from',
          'gas',
          'gasPrice',
          'gasLimit',
          'address',
          'jsonInterface',
          'syncWithContext',
          'dataInputFill',
      ].some(key => key in options);
  const isNullish = isNullish$1;

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isIterable = (item) => typeof item === 'object' &&
      !isNullish$1(item) &&
      !Array.isArray(item) &&
      !(item instanceof TypedArray);
  // The following code is a derivative work of the code from the "LiskHQ/lisk-sdk" project,
  // which is licensed under Apache version 2.
  /**
   * Deep merge two objects.
   * @param destination - The destination object.
   * @param sources - An array of source objects.
   * @returns - The merged object.
   */
  const mergeDeep = (destination, ...sources) => {
      if (!isIterable(destination)) {
          return destination;
      }
      const result = Object.assign({}, destination); // clone deep here
      for (const src of sources) {
          // const src = { ..._src };
          // eslint-disable-next-line no-restricted-syntax
          for (const key in src) {
              if (isIterable(src[key])) {
                  if (!result[key]) {
                      result[key] = {};
                  }
                  result[key] = mergeDeep(result[key], src[key]);
              }
              else if (!isNullish$1(src[key]) && Object.hasOwnProperty.call(src, key)) {
                  if (Array.isArray(src[key]) || src[key] instanceof TypedArray) {
                      result[key] = src[key].slice(0);
                  }
                  else {
                      result[key] = src[key];
                  }
              }
          }
      }
      return result;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.
   * @param value - The value to be padded.
   * @param characterAmount - The amount of characters the string should have.
   * @param sign - The sign to be added (default is 0).
   * @returns The padded string.
   *
   * @example
   * ```ts
   *
   * console.log(web3.utils.padLeft('0x123', 10));
   * >0x0000000123
   * ```
   */
  const padLeft = (value, characterAmount, sign = '0') => {
      // To avoid duplicate code and circular dependency we will
      // use `padLeft` implementation from `web3-validator`
      if (typeof value === 'string') {
          if (!isHexStrict$1(value)) {
              return value.padStart(characterAmount, sign);
          }
          return padLeft$1(value, characterAmount, sign);
      }
      validator.validate(['int'], [value]);
      return padLeft$1(value, characterAmount, sign);
  };
  /**
   * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string.
   * @param value - The value to be padded.
   * @param characterAmount - The amount of characters the string should have.
   * @param sign - The sign to be added (default is 0).
   * @returns The padded string.
   *
   * @example
   * ```ts
   * console.log(web3.utils.padRight('0x123', 10));
   * > 0x1230000000
   *
   * console.log(web3.utils.padRight('0x123', 10, '1'));
   * > 0x1231111111
   * ```
   */
  const padRight = (value, characterAmount, sign = '0') => {
      if (typeof value === 'string' && !isHexStrict$1(value)) {
          return value.padEnd(characterAmount, sign);
      }
      const hexString = typeof value === 'string' && isHexStrict$1(value) ? value : numberToHex(value);
      const prefixLength = hexString.startsWith('-') ? 3 : 2;
      validator.validate([hexString.startsWith('-') ? 'int' : 'uint'], [value]);
      return hexString.padEnd(characterAmount + prefixLength, sign);
  };
  /**
   * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padRight`
   */
  const rightPad = padRight;
  /**
   * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padLeft`
   */
  const leftPad = padLeft;
  /**
   * Converts a negative number into the two’s complement and return a hexstring of 64 nibbles.
   * @param value - The value to be converted.
   * @param nibbleWidth - The nibble width of the hex string (default is 64).
   *
   * @returns The hex string of the two’s complement.
   *
   * @example
   * ```ts
   * console.log(web3.utils.toTwosComplement(13, 32));
   * > 0x0000000000000000000000000000000d
   *
   * console.log(web3.utils.toTwosComplement('-0x1', 32));
   * > 0xffffffffffffffffffffffffffffffff
   *
   * console.log(web3.utils.toTwosComplement(BigInt('9007199254740992'), 32));
   * > 0x00000000000000000020000000000000
   * ```
   */
  const toTwosComplement = (value, nibbleWidth = 64) => {
      validator.validate(['int'], [value]);
      const val = toNumber(value);
      if (val >= 0)
          return padLeft(toHex(val), nibbleWidth);
      const largestBit = bigintPower(BigInt(2), BigInt(nibbleWidth * 4));
      if (-val >= largestBit) {
          throw new NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);
      }
      const updatedVal = BigInt(val);
      const complement = updatedVal + largestBit;
      return padLeft(numberToHex(complement), nibbleWidth);
  };
  /**
   * Converts the twos complement into a decimal number or big int.
   * @param value - The value to be converted.
   * @param nibbleWidth - The nibble width of the hex string (default is 64).
   * @returns The decimal number or big int.
   *
   * @example
   * ```ts
   * console.log(web3.utils.fromTwosComplement('0x0000000000000000000000000000000d', 32'));
   * > 13
   *
   * console.log(web3.utils.fromTwosComplement('0x00000000000000000020000000000000', 32));
   * > 9007199254740992n
   * ```
   */
  const fromTwosComplement = (value, nibbleWidth = 64) => {
      validator.validate(['int'], [value]);
      const val = toNumber(value);
      if (val < 0)
          return val;
      const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));
      if (largestBit > nibbleWidth * 4)
          throw new NibbleWidthError(`value: "${value}", nibbleWidth: "${nibbleWidth}"`);
      // check the largest bit to see if negative
      if (nibbleWidth * 4 !== largestBit)
          return val;
      const complement = bigintPower(BigInt(2), BigInt(nibbleWidth) * BigInt(4));
      return toNumber(BigInt(val) - complement);
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const { parseBaseType } = utils$1;
  const isDataFormat = (dataFormat) => typeof dataFormat === 'object' &&
      !isNullish$1(dataFormat) &&
      'number' in dataFormat &&
      'bytes' in dataFormat;
  /**
   * Finds the schema that corresponds to a specific data path within a larger JSON schema.
   * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.
   *
   * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data
   * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema
   * @param oneOfPath - represents an optional array of two-element tuples that specifies the "oneOf" option to choose, if the schema has oneOf and the data path can match multiple subschemas
   * @returns the JSON schema that matches the data path
   *
   */
  const findSchemaByDataPath = (schema, dataPath, oneOfPath = []) => {
      let result = Object.assign({}, schema);
      let previousDataPath;
      for (const dataPart of dataPath) {
          if (result.oneOf && previousDataPath) {
              const currentDataPath = previousDataPath;
              const path = oneOfPath.find(([key]) => key === currentDataPath);
              if (path && path[0] === previousDataPath) {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
                  result = result.oneOf[path[1]];
              }
          }
          if (!result.properties && !result.items) {
              return undefined;
          }
          if (result.properties) {
              result = result.properties[dataPart];
          }
          else if (result.items && result.items.properties) {
              const node = result.items.properties;
              result = node[dataPart];
          }
          else if (result.items && isObject(result.items)) {
              result = result.items;
          }
          else if (result.items && Array.isArray(result.items)) {
              result = result.items[parseInt(dataPart, 10)];
          }
          if (result && dataPart)
              previousDataPath = dataPart;
      }
      return result;
  };
  /**
   * Converts a value depending on the format
   * @param value - value to convert
   * @param ethType - The type of the value to be parsed
   * @param format - The format to be converted to
   * @returns - The value converted to the specified format
   */
  const convertScalarValue = (value, ethType, format) => {
      try {
          const { baseType, baseTypeSize } = parseBaseType(ethType);
          if (baseType === 'int' || baseType === 'uint') {
              switch (format.number) {
                  case FMT_NUMBER.NUMBER:
                      return Number(toBigInt(value));
                  case FMT_NUMBER.HEX:
                      return numberToHex(toBigInt(value));
                  case FMT_NUMBER.STR:
                      return toBigInt(value).toString();
                  case FMT_NUMBER.BIGINT:
                      return toBigInt(value);
                  default:
                      throw new FormatterError(`Invalid format: ${String(format.number)}`);
              }
          }
          if (baseType === 'bytes') {
              let paddedValue;
              if (baseTypeSize) {
                  if (typeof value === 'string')
                      paddedValue = padLeft(value, baseTypeSize * 2);
                  else if (isUint8Array(value)) {
                      paddedValue = uint8ArrayConcat(new Uint8Array(baseTypeSize - value.length), value);
                  }
              }
              else {
                  paddedValue = value;
              }
              switch (format.bytes) {
                  case FMT_BYTES.HEX:
                      return bytesToHex$1(bytesToUint8Array(paddedValue));
                  case FMT_BYTES.UINT8ARRAY:
                      return bytesToUint8Array(paddedValue);
                  default:
                      throw new FormatterError(`Invalid format: ${String(format.bytes)}`);
              }
          }
          if (baseType === 'string') {
              return String(value);
          }
      }
      catch (error) {
          // If someone didn't use `eth` keyword we can return original value
          // as the scope of this code is formatting not validation
          return value;
      }
      return value;
  };
  const convertArray = ({ value, schemaProp, schema, object, key, dataPath, format, oneOfPath = [], }) => {
      var _a, _b;
      // If value is an array
      if (Array.isArray(value)) {
          let _schemaProp = schemaProp;
          // TODO This is a naive approach to solving the issue of
          // a schema using oneOf. This chunk of code was intended to handle
          // BlockSchema.transactions
          // TODO BlockSchema.transactions are not being formatted
          if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== undefined) {
              // The following code is basically saying:
              // if the schema specifies oneOf, then we are to loop
              // over each possible schema and check if they type of the schema
              // matches the type of value[0], and if so we use the oneOfSchemaProp
              // as the schema for formatting
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
              schemaProp.oneOf.forEach((oneOfSchemaProp, index) => {
                  var _a, _b;
                  if (!Array.isArray(schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.items) &&
                      ((typeof value[0] === 'object' &&
                          ((_a = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _a === void 0 ? void 0 : _a.type) === 'object') ||
                          (typeof value[0] === 'string' &&
                              ((_b = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _b === void 0 ? void 0 : _b.type) !== 'object'))) {
                      _schemaProp = oneOfSchemaProp;
                      oneOfPath.push([key, index]);
                  }
              });
          }
          if (isNullish$1(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {
              // Can not find schema for array item, delete that item
              // eslint-disable-next-line no-param-reassign
              delete object[key];
              dataPath.pop();
              return true;
          }
          // If schema for array items is a single type
          if (isObject(_schemaProp.items) && !isNullish$1(_schemaProp.items.format)) {
              for (let i = 0; i < value.length; i += 1) {
                  // eslint-disable-next-line no-param-reassign
                  object[key][i] = convertScalarValue(value[i], 
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                  (_a = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _a === void 0 ? void 0 : _a.format, format);
              }
              dataPath.pop();
              return true;
          }
          // If schema for array items is an object
          if (!Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) && ((_b = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _b === void 0 ? void 0 : _b.type) === 'object') {
              for (const arrObject of value) {
                  // eslint-disable-next-line no-use-before-define
                  convert(arrObject, schema, dataPath, format, oneOfPath);
              }
              dataPath.pop();
              return true;
          }
          // If schema for array is a tuple
          if (Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {
              for (let i = 0; i < value.length; i += 1) {
                  // eslint-disable-next-line no-param-reassign
                  object[key][i] = convertScalarValue(value[i], _schemaProp.items[i].format, format);
              }
              dataPath.pop();
              return true;
          }
      }
      return false;
  };
  /**
   * Converts the data to the specified format
   * @param data - data to convert
   * @param schema - The JSON schema that describes the structure of the data
   * @param dataPath - A string array that specifies the path to the data within the JSON schema
   * @param format  - The format to be converted to
   * @param oneOfPath - An optional array of two-element tuples that specifies the "oneOf" option to choose, if the schema has oneOf and the data path can match multiple subschemas
   * @returns - The data converted to the specified format
   */
  const convert = (data, schema, dataPath, format, oneOfPath = []) => {
      var _a;
      // If it's a scalar value
      if (!isObject(data) && !Array.isArray(data)) {
          return convertScalarValue(data, schema === null || schema === void 0 ? void 0 : schema.format, format);
      }
      const object = data;
      // case when schema is array and `items` is object
      if (Array.isArray(object) &&
          (schema === null || schema === void 0 ? void 0 : schema.type) === 'array' &&
          ((_a = schema === null || schema === void 0 ? void 0 : schema.items) === null || _a === void 0 ? void 0 : _a.type) === 'object') {
          convertArray({
              value: object,
              schemaProp: schema,
              schema,
              object,
              key: '',
              dataPath,
              format,
              oneOfPath,
          });
      }
      else {
          for (const [key, value] of Object.entries(object)) {
              dataPath.push(key);
              let schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);
              // If value is a scaler value
              if (isNullish$1(schemaProp)) {
                  delete object[key];
                  dataPath.pop();
                  continue;
              }
              // If value is an object, recurse into it
              if (isObject(value)) {
                  convert(value, schema, dataPath, format, oneOfPath);
                  dataPath.pop();
                  continue;
              }
              // If value is an array
              if (convertArray({
                  value,
                  schemaProp,
                  schema,
                  object,
                  key,
                  dataPath,
                  format,
                  oneOfPath,
              })) {
                  continue;
              }
              // The following code is basically saying:
              // if the schema specifies oneOf, then we are to loop
              // over each possible schema and check if they type of the schema specifies format
              // and if so we use the oneOfSchemaProp as the schema for formatting
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
              if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.format) === undefined && (schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== undefined) {
                  for (const [_index, oneOfSchemaProp] of schemaProp.oneOf.entries()) {
                      if ((oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.format) !== undefined) {
                          schemaProp = oneOfSchemaProp;
                          break;
                      }
                  }
              }
              object[key] = convertScalarValue(value, schemaProp.format, format);
              dataPath.pop();
          }
      }
      return object;
  };
  /**
   * Given data that can be interpreted according to the provided schema, returns equivalent data that has been formatted
   * according to the provided return format.
   *
   * @param schema - how to interpret the data
   * @param data - data to be formatted
   * @param returnFormat - how to format the data
   * @returns - formatted data
   *
   * @example
   *
   * ```js
   * import { FMT_NUMBER, utils } from "web3";
   *
   * console.log(
   *   utils.format({ format: "uint" }, "221", { number: FMT_NUMBER.HEX }),
   * );
   * // 0xdd
   * ```
   *
   */
  const format = (schema, data, returnFormat = DEFAULT_RETURN_FORMAT) => {
      let dataToParse;
      if (isObject(data)) {
          dataToParse = mergeDeep({}, data);
      }
      else if (Array.isArray(data)) {
          dataToParse = [...data];
      }
      else {
          dataToParse = data;
      }
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const jsonSchema = isObject(schema) ? schema : ethAbiToJsonSchema(schema);
      if (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {
          throw new FormatterError('Invalid json schema for formatting');
      }
      return convert(dataToParse, jsonSchema, [], returnFormat);
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * This package provides utility functions for Ethereum dapps and other web3.js packages.
   *
   * For using Utils functions, first install Web3 package using `npm i web3` or `yarn add web3`.
   * After that, Web3 Utils functions will be available as mentioned below.
   * ```ts
   * import { Web3 } from 'web3';
   * const web3 = new Web3();
   *
   * const value = web3.utils.fromWei("1", "ether")
   *
   * ```
   *
   * For using individual package install `web3-utils` package using `npm i web3-utils` or `yarn add web3-utils` and only import required functions.
   * This is more efficient approach for building lightweight applications.
   * ```ts
   * import { fromWei, soliditySha3Raw } from 'web3-utils';
   *
   * console.log(fromWei("1", "ether"));
   * console.log(soliditySha3Raw({ type: "string", value: "helloworld" }))
   *
   * ```
   * @module Utils
   */
  const SHA3_EMPTY_BYTES = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
  /**
   * A wrapper for ethereum-cryptography/keccak256 to allow hashing a `string` and a `bigint` in addition to `UInt8Array`
   * @param data - the input to hash
   * @returns - the Keccak-256 hash of the input
   *
   * @example
   * ```ts
   * console.log(web3.utils.keccak256Wrapper('web3.js'));
   * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a
   *
   * console.log(web3.utils.keccak256Wrapper(1));
   * > 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6
   *
   * console.log(web3.utils.keccak256Wrapper(0xaf12fd));
   * > 0x358640fd4719fa923525d74ab5ae80a594301aba5543e3492b052bf4598b794c
   * ```
   */
  const keccak256Wrapper = (data) => {
      let processedData;
      if (typeof data === 'bigint' || typeof data === 'number') {
          processedData = utf8ToBytes$2(data.toString());
      }
      else if (Array.isArray(data)) {
          processedData = new Uint8Array(data);
      }
      else if (typeof data === 'string' && !isHexStrict$1(data)) {
          processedData = utf8ToBytes$2(data);
      }
      else {
          processedData = bytesToUint8Array(data);
      }
      return bytesToHex$1(keccak256(ensureIfUint8Array(processedData)));
  };
  /**
   * computes the Keccak-256 hash of the input and returns a hexstring
   * @param data - the input to hash
   * @returns - the Keccak-256 hash of the input
   *
   * @example
   * ```ts
   * console.log(web3.utils.sha3('web3.js'));
   * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a
   *
   * console.log(web3.utils.sha3(''));
   * > undefined
   * ```
   */
  const sha3 = (data) => {
      let updatedData;
      if (typeof data === 'string') {
          if (data.startsWith('0x') && isHexStrict$1(data)) {
              updatedData = hexToBytes$1(data);
          }
          else {
              updatedData = utf8ToBytes$2(data);
          }
      }
      else {
          updatedData = data;
      }
      const hash = keccak256Wrapper(updatedData);
      // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data
      return hash === SHA3_EMPTY_BYTES ? undefined : hash;
  };
  /**
   * Will calculate the sha3 of the input but does return the hash value instead of null if for example a empty string is passed.
   * @param data - the input to hash
   * @returns - the Keccak-256 hash of the input
   *
   * @example
   * ```ts
   * conosle.log(web3.utils.sha3Raw('web3.js'));
   * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a
   *
   * console.log(web3.utils.sha3Raw(''));
   * > 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470
   * ```
   */
  const sha3Raw = (data) => {
      const hash = sha3(data);
      if (isNullish$1(hash)) {
          return SHA3_EMPTY_BYTES;
      }
      return hash;
  };
  /**
   * returns type and value
   * @param arg - the input to return the type and value
   * @returns - the type and value of the input
   */
  const getType = (arg) => {
      if (Array.isArray(arg)) {
          throw new Error('Autodetection of array types is not supported.');
      }
      let type;
      let value;
      // if type is given
      if (typeof arg === 'object' &&
          ('t' in arg || 'type' in arg) &&
          ('v' in arg || 'value' in arg)) {
          type = 't' in arg ? arg.t : arg.type;
          value = 'v' in arg ? arg.v : arg.value;
          type = type.toLowerCase() === 'bigint' ? 'int' : type;
      }
      else if (typeof arg === 'bigint') {
          return ['int', arg];
      }
      // otherwise try to guess the type
      else {
          type = toHex(arg, true);
          value = toHex(arg);
          if (!type.startsWith('int') && !type.startsWith('uint')) {
              type = 'bytes';
          }
      }
      if ((type.startsWith('int') || type.startsWith('uint')) &&
          typeof value === 'string' &&
          !/^(-)?0x/i.test(value)) {
          value = toBigInt(value);
      }
      return [type, value];
  };
  /**
   * returns the type with size if uint or int
   * @param name - the input to return the type with size
   * @returns - the type with size of the input
   */
  const elementaryName = (name) => {
      if (name.startsWith('int[')) {
          return `int256${name.slice(3)}`;
      }
      if (name === 'int') {
          return 'int256';
      }
      if (name.startsWith('uint[')) {
          return `uint256'${name.slice(4)}`;
      }
      if (name === 'uint') {
          return 'uint256';
      }
      return name;
  };
  /**
   * returns the size of the value of type 'byte'
   */
  const parseTypeN = (value, typeLength) => {
      const typesize = /^(\d+).*$/.exec(value.slice(typeLength));
      return typesize ? parseInt(typesize[1], 10) : 0;
  };
  /**
   * returns the bit length of the value
   * @param value - the input to return the bit length
   * @returns - the bit length of the input
   */
  const bitLength = (value) => {
      const updatedVal = value.toString(2);
      return updatedVal.length;
  };
  /**
   * Pads the value based on size and type
   * returns a string of the padded value
   * @param type - the input to pad
   * @returns = the padded value
   */
  const solidityPack = (type, val) => {
      const value = val.toString();
      if (type === 'string') {
          if (typeof val === 'string')
              return utf8ToHex(val);
          throw new InvalidStringError(val);
      }
      if (type === 'bool' || type === 'boolean') {
          if (typeof val === 'boolean')
              return val ? '01' : '00';
          throw new InvalidBooleanError(val);
      }
      if (type === 'address') {
          if (!isAddress$1(value)) {
              throw new InvalidAddressError(value);
          }
          return value;
      }
      const name = elementaryName(type);
      if (type.startsWith('uint')) {
          const size = parseTypeN(name, 'uint'.length);
          if (size % 8 || size < 8 || size > 256) {
              throw new InvalidSizeError(value);
          }
          const num = toNumber(value);
          if (bitLength(num) > size) {
              throw new InvalidLargeValueError(value);
          }
          if (num < BigInt(0)) {
              throw new InvalidUnsignedIntegerError(value);
          }
          return size ? leftPad(num.toString(16), (size / 8) * 2) : num.toString(16);
      }
      if (type.startsWith('int')) {
          const size = parseTypeN(name, 'int'.length);
          if (size % 8 || size < 8 || size > 256) {
              throw new InvalidSizeError(type);
          }
          const num = toNumber(value);
          if (bitLength(num) > size) {
              throw new InvalidLargeValueError(value);
          }
          if (num < BigInt(0)) {
              return toTwosComplement(num.toString(), (size / 8) * 2);
          }
          return size ? leftPad(num.toString(16), size / 4) : num.toString(16);
      }
      if (name === 'bytes') {
          if (value.replace(/^0x/i, '').length % 2 !== 0) {
              throw new InvalidBytesError(value);
          }
          return value;
      }
      if (type.startsWith('bytes')) {
          if (value.replace(/^0x/i, '').length % 2 !== 0) {
              throw new InvalidBytesError(value);
          }
          const size = parseTypeN(type, 'bytes'.length);
          if (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, '').length / 2) {
              throw new InvalidBytesError(value);
          }
          return rightPad(value, size * 2);
      }
      return '';
  };
  /**
   * returns a string of the tightly packed value given based on the type
   * @param arg - the input to return the tightly packed value
   * @returns - the tightly packed value
   */
  const processSolidityEncodePackedArgs = (arg) => {
      const [type, val] = getType(arg);
      // array case
      if (Array.isArray(val)) {
          // go through each element of the array and use map function to create new hexarg list
          const hexArg = val.map((v) => solidityPack(type, v).replace('0x', ''));
          return hexArg.join('');
      }
      const hexArg = solidityPack(type, val);
      return hexArg.replace('0x', '');
  };
  /**
   * Encode packed arguments to a hexstring
   */
  const encodePacked = (...values) => {
      const hexArgs = values.map(processSolidityEncodePackedArgs);
      return `0x${hexArgs.join('').toLowerCase()}`;
  };
  /**
   * Will tightly pack values given in the same way solidity would then hash.
   * returns a hash string, or null if input is empty
   * @param values - the input to return the tightly packed values
   * @returns - the keccack246 of the tightly packed values
   *
   * @example
   * ```ts
   * console.log(web3.utils.soliditySha3({ type: "string", value: "31323334" }));
   * > 0xf15f8da2ad27e486d632dc37d24912f634398918d6f9913a0a0ff84e388be62b
   * ```
   */
  const soliditySha3 = (...values) => sha3(encodePacked(...values));
  /**
   * Will tightly pack values given in the same way solidity would then hash.
   * returns a hash string, if input is empty will return `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470`
   * @param values - the input to return the tightly packed values
   * @returns - the keccack246 of the tightly packed values
   *
   * @example
   * ```ts
   * console.log(web3.utils.soliditySha3Raw({ type: "string", value: "helloworld" }))
   * > 0xfa26db7ca85ead399216e7c6316bc50ed24393c3122b582735e7f3b0f91b93f0
   * ```
   */
  const soliditySha3Raw = (...values) => sha3Raw(encodePacked(...values));
  /**
   * Get slot number for storage long string in contract. Basically for getStorage method
   * returns slotNumber where will data placed
   * @param mainSlotNumber - the slot number where will be stored hash of long string
   * @returns - the slot number where will be stored long string
   */
  const getStorageSlotNumForLongString = (mainSlotNumber) => sha3(`0x${(typeof mainSlotNumber === 'number'
    ? mainSlotNumber.toString()
    : mainSlotNumber).padStart(64, '0')}`);

  function getRandomBytesSync(bytes) {
      return randomBytes$1(bytes);
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @module Utils
   */
  /**
   * Returns a random byte array by the given bytes size
   * @param size - The size of the random byte array returned
   * @returns - random byte array
   *
   * @example
   * ```ts
   * console.log(web3.utils.randomBytes(32));
   * > Uint8Array(32) [
   *       93, 172, 226,  32,  33, 176, 156, 156,
   *       182,  30, 240,   2,  69,  96, 174, 197,
   *       33, 136, 194, 241, 197, 156, 110, 111,
   *       66,  87,  17,  88,  67,  48, 245, 183
   *    ]
   * ```
   */
  const randomBytes = (size) => getRandomBytesSync(size);
  /**
   * Returns a random hex string by the given bytes size
   * @param byteSize - The size of the random hex string returned
   * @returns - random hex string
   *
   * ```ts
   * console.log(web3.utils.randomHex(32));
   * > 0x139f5b88b72a25eab053d3b57fe1f8a9dbc62a526b1cb1774d0d7db1c3e7ce9e
   * ```
   */
  const randomHex = (byteSize) => bytesToHex$1(randomBytes(byteSize));

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$N = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * An alternative to the node function `isPromise` that exists in `util/types` because it is not available on the browser.
   * @param object - to check if it is a `Promise`
   * @returns `true` if it is an `object` or a `function` that has a `then` function. And returns `false` otherwise.
   */
  function isPromise(object) {
      return ((typeof object === 'object' || typeof object === 'function') &&
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          typeof object.then === 'function');
  }
  /**
   * Wait for a promise but interrupt it if it did not resolve within a given timeout.
   * If the timeout reached, before the promise code resolve, either throw an error if an error object was provided, or return `undefined`.
   * @param awaitable - The promise or function to wait for.
   * @param timeout - The timeout in milliseconds.
   * @param error - (Optional) The error to throw if the timeout reached.
   */
  function waitWithTimeout(awaitable, timeout, error) {
      return __awaiter$N(this, void 0, void 0, function* () {
          let timeoutId;
          const result = yield Promise.race([
              awaitable instanceof Promise ? awaitable : awaitable(),
              new Promise((resolve, reject) => {
                  timeoutId = setTimeout(() => (error ? reject(error) : resolve(undefined)), timeout);
              }),
          ]);
          if (timeoutId) {
              clearTimeout(timeoutId);
          }
          if (result instanceof Error) {
              throw result;
          }
          return result;
      });
  }
  /**
   * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),
   * or until a timeout is reached. It returns promise and intervalId.
   * @param func - The function to call.
   * @param interval - The interval in milliseconds.
   */
  function pollTillDefinedAndReturnIntervalId(func, interval) {
      let intervalId;
      const polledRes = new Promise((resolve, reject) => {
          intervalId = setInterval((function intervalCallbackFunc() {
              (() => __awaiter$N(this, void 0, void 0, function* () {
                  try {
                      const res = yield waitWithTimeout(func, interval);
                      if (!isNullish$1(res)) {
                          clearInterval(intervalId);
                          resolve(res);
                      }
                  }
                  catch (error) {
                      clearInterval(intervalId);
                      reject(error);
                  }
              }))();
              return intervalCallbackFunc;
          })(), // this will immediate invoke first call
          interval);
      });
      return [polledRes, intervalId];
  }
  /**
   * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),
   * or until a timeout is reached.
   * pollTillDefinedAndReturnIntervalId() function should be used instead of pollTillDefined if you need IntervalId in result.
   * This function will be deprecated in next major release so use pollTillDefinedAndReturnIntervalId().
   * @param func - The function to call.
   * @param interval - The interval in milliseconds.
   */
  function pollTillDefined(func, interval) {
      return __awaiter$N(this, void 0, void 0, function* () {
          return pollTillDefinedAndReturnIntervalId(func, interval)[0];
      });
  }
  /**
   * Enforce a timeout on a promise, so that it can be rejected if it takes too long to complete
   * @param timeout - The timeout to enforced in milliseconds.
   * @param error - The error to throw if the timeout is reached.
   * @returns A tuple of the timeout id and the promise that will be rejected if the timeout is reached.
   *
   * @example
   * ```ts
   * const [timerId, promise] = web3.utils.rejectIfTimeout(100, new Error('time out'));
   * ```
   */
  function rejectIfTimeout(timeout, error) {
      let timeoutId;
      const rejectOnTimeout = new Promise((_, reject) => {
          timeoutId = setTimeout(() => {
              reject(error);
          }, timeout);
      });
      return [timeoutId, rejectOnTimeout];
  }
  /**
   * Sets an interval that repeatedly executes the given cond function with the specified interval between each call.
   * If the condition is met, the interval is cleared and a Promise that rejects with the returned value is returned.
   * @param cond - The function/condition to call.
   * @param interval - The interval in milliseconds.
   * @returns - an array with the interval ID and the Promise.
   */
  function rejectIfConditionAtInterval(cond, interval) {
      let intervalId;
      const rejectIfCondition = new Promise((_, reject) => {
          intervalId = setInterval(() => {
              (() => __awaiter$N(this, void 0, void 0, function* () {
                  const error = yield cond();
                  if (error) {
                      clearInterval(intervalId);
                      reject(error);
                  }
              }))();
          }, interval);
      });
      return [intervalId, rejectIfCondition];
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @module Utils
   */
  /**
   * Generate a version 4 (random) uuid
   * https://github.com/uuidjs/uuid/blob/main/src/v4.js#L5
   * @returns - A version 4 uuid of the form xxxxxxxx-xxxx-4xxx-xxxx-xxxxxxxxxxxx
   * @example
   * ```ts
   * console.log(web3.utils.uuidV4());
   * > "1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed"
   * ```
   */
  const uuidV4 = () => {
      const bytes = randomBytes(16);
      // https://github.com/ethers-io/ethers.js/blob/ce8f1e4015c0f27bf178238770b1325136e3351a/packages/json-wallets/src.ts/utils.ts#L54
      // Section: 4.1.3:
      // - time_hi_and_version[12:16] = 0b0100
      /* eslint-disable-next-line */
      bytes[6] = (bytes[6] & 0x0f) | 0x40;
      // Section 4.4
      // - clock_seq_hi_and_reserved[6] = 0b0
      // - clock_seq_hi_and_reserved[7] = 0b1
      /* eslint-disable-next-line */
      bytes[8] = (bytes[8] & 0x3f) | 0x80;
      const hexString = bytesToHex$1(bytes);
      return [
          hexString.substring(2, 10),
          hexString.substring(10, 14),
          hexString.substring(14, 18),
          hexString.substring(18, 22),
          hexString.substring(22, 34),
      ].join('-');
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // check if code is a valid rpc server error code
  const isResponseRpcError = (rpcError) => {
      const errorCode = rpcError.error.code;
      return rpcErrorsMap.has(errorCode) || (errorCode >= -32099 && errorCode <= -32e3);
  };
  const isResponseWithResult = (response) => !Array.isArray(response) &&
      !!response &&
      response.jsonrpc === '2.0' &&
      // JSON RPC consider "null" as valid response
      'result' in response &&
      isNullish$1(response.error) &&
      (typeof response.id === 'number' || typeof response.id === 'string');
  // To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`
  const isResponseWithError = (response) => !Array.isArray(response) &&
      response.jsonrpc === '2.0' &&
      !!response &&
      isNullish$1(response.result) &&
      // JSON RPC consider "null" as valid response
      'error' in response &&
      (typeof response.id === 'number' || typeof response.id === 'string');
  const isResponseWithNotification = (response) => !Array.isArray(response) &&
      !!response &&
      response.jsonrpc === '2.0' &&
      !isNullish$1(response.params) &&
      !isNullish$1(response.method);
  const isSubscriptionResult = (response) => !Array.isArray(response) &&
      !!response &&
      response.jsonrpc === '2.0' &&
      'id' in response &&
      // JSON RPC consider "null" as valid response
      'result' in response;
  const validateResponse = (response) => isResponseWithResult(response) || isResponseWithError(response);
  const isValidResponse = (response) => Array.isArray(response) ? response.every(validateResponse) : validateResponse(response);
  const isBatchResponse = (response) => Array.isArray(response) && response.length > 0 && isValidResponse(response);
  // internal optional variable to increment and use for the jsonrpc `id`
  let requestIdSeed;
  /**
   * Optionally use to make the jsonrpc `id` start from a specific number.
   * Without calling this function, the `id` will be filled with a Uuid.
   * But after this being called with a number, the `id` will be a number starting from the provided `start` variable.
   * However, if `undefined` was passed to this function, the `id` will be a Uuid again.
   * @param start - a number to start incrementing from.
   * 	Or `undefined` to use a new Uuid (this is the default behavior)
   */
  const setRequestIdStart = (start) => {
      requestIdSeed = start;
  };
  const toPayload = (request) => {
      var _a, _b, _c, _d;
      if (typeof requestIdSeed !== 'undefined') {
          requestIdSeed += 1;
      }
      return {
          jsonrpc: (_a = request.jsonrpc) !== null && _a !== void 0 ? _a : '2.0',
          id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : uuidV4(),
          method: request.method,
          params: (_d = request.params) !== null && _d !== void 0 ? _d : undefined,
      };
  };
  const toBatchPayload = (requests) => requests.map(request => toPayload(request));
  const isBatchRequest = (request) => Array.isArray(request) && request.length > 0;

  var json_rpc = /*#__PURE__*/Object.freeze({
    __proto__: null,
    isBatchRequest: isBatchRequest,
    isBatchResponse: isBatchResponse,
    isResponseRpcError: isResponseRpcError,
    isResponseWithError: isResponseWithError,
    isResponseWithNotification: isResponseWithNotification,
    isResponseWithResult: isResponseWithResult,
    isSubscriptionResult: isSubscriptionResult,
    isValidResponse: isValidResponse,
    setRequestIdStart: setRequestIdStart,
    toBatchPayload: toBatchPayload,
    toPayload: toPayload,
    validateResponse: validateResponse
  });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$M = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var _a$2;
  /**
   * The class is a simple implementation of a deferred promise with optional timeout functionality,
   * which can be useful when dealing with asynchronous tasks.
   *
   */
  class Web3DeferredPromise {
      /**
       *
       * @param timeout - (optional) The timeout in milliseconds.
       * @param eagerStart - (optional) If true, the timer starts as soon as the promise is created.
       * @param timeoutMessage - (optional) The message to include in the timeout erro that is thrown when the promise times out.
       */
      constructor({ timeout, eagerStart, timeoutMessage, } = {
          timeout: 0,
          eagerStart: false,
          timeoutMessage: 'DeferredPromise timed out',
      }) {
          // public tag to treat object as promise by different libs
          // eslint-disable-next-line @typescript-eslint/prefer-as-const
          this[_a$2] = 'Promise';
          this._state = 'pending';
          this._promise = new Promise((resolve, reject) => {
              this._resolve = resolve;
              this._reject = reject;
          });
          this._timeoutMessage = timeoutMessage;
          this._timeoutInterval = timeout;
          if (eagerStart) {
              this.startTimer();
          }
      }
      /**
       * Returns the current state of the promise.
       * @returns 'pending' | 'fulfilled' | 'rejected'
       */
      get state() {
          return this._state;
      }
      /**
       *
       * @param onfulfilled - (optional) The callback to execute when the promise is fulfilled.
       * @param onrejected  - (optional) The callback to execute when the promise is rejected.
       * @returns
       */
      then(onfulfilled, onrejected) {
          return __awaiter$M(this, void 0, void 0, function* () {
              return this._promise.then(onfulfilled, onrejected);
          });
      }
      /**
       *
       * @param onrejected - (optional) The callback to execute when the promise is rejected.
       * @returns
       */
      catch(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      onrejected) {
          return __awaiter$M(this, void 0, void 0, function* () {
              return this._promise.catch(onrejected);
          });
      }
      /**
       *
       * @param onfinally - (optional) The callback to execute when the promise is settled (fulfilled or rejected).
       * @returns
       */
      finally(onfinally) {
          return __awaiter$M(this, void 0, void 0, function* () {
              return this._promise.finally(onfinally);
          });
      }
      /**
       * Resolves the current promise.
       * @param value - The value to resolve the promise with.
       */
      resolve(value) {
          this._resolve(value);
          this._state = 'fulfilled';
          this._clearTimeout();
      }
      /**
       * Rejects the current promise.
       * @param reason - The reason to reject the promise with.
       */
      reject(reason) {
          this._reject(reason);
          this._state = 'rejected';
          this._clearTimeout();
      }
      /**
       * Starts the timeout timer for the promise.
       */
      startTimer() {
          if (this._timeoutInterval && this._timeoutInterval > 0) {
              this._timeoutId = setTimeout(this._checkTimeout.bind(this), this._timeoutInterval);
          }
      }
      _checkTimeout() {
          if (this._state === 'pending' && this._timeoutId) {
              this.reject(new OperationTimeoutError(this._timeoutMessage));
          }
      }
      _clearTimeout() {
          if (this._timeoutId) {
              clearTimeout(this._timeoutId);
          }
      }
  }
  _a$2 = Symbol.toStringTag;

  class ChunkResponseParser {
      constructor(eventEmitter, autoReconnect) {
          this.eventEmitter = eventEmitter;
          this.autoReconnect = autoReconnect;
          this.chunkTimeout = 1000 * 15;
      }
      clearQueues() {
          if (typeof this._clearQueues === 'function') {
              this._clearQueues();
          }
      }
      onError(clearQueues) {
          this._clearQueues = clearQueues;
      }
      parseResponse(data) {
          const returnValues = [];
          // DE-CHUNKER
          const dechunkedData = data
              .replace(/\}[\n\r]?\{/g, '}|--|{') // }{
              .replace(/\}\][\n\r]?\[\{/g, '}]|--|[{') // }][{
              .replace(/\}[\n\r]?\[\{/g, '}|--|[{') // }[{
              .replace(/\}\][\n\r]?\{/g, '}]|--|{') // }]{
              .split('|--|');
          dechunkedData.forEach(_chunkData => {
              // prepend the last chunk
              let chunkData = _chunkData;
              if (this.lastChunk) {
                  chunkData = this.lastChunk + chunkData;
              }
              let result;
              try {
                  result = JSON.parse(chunkData);
              }
              catch (e) {
                  this.lastChunk = chunkData;
                  // start timeout to cancel all requests
                  if (this.lastChunkTimeout) {
                      clearTimeout(this.lastChunkTimeout);
                  }
                  this.lastChunkTimeout = setTimeout(() => {
                      if (this.autoReconnect)
                          return;
                      this.clearQueues();
                      this.eventEmitter.emit('error', new InvalidResponseError({
                          id: 1,
                          jsonrpc: '2.0',
                          error: { code: 2, message: 'Chunk timeout' },
                      }));
                  }, this.chunkTimeout);
                  return;
              }
              // cancel timeout and set chunk to null
              clearTimeout(this.lastChunkTimeout);
              this.lastChunk = undefined;
              if (result)
                  returnValues.push(result);
          });
          return returnValues;
      }
  }

  var __awaiter$L = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * This is an abstract class, which extends {@link Web3BaseProvider} class. This class is used to implement a provider that adheres to the EIP-1193 standard for Ethereum providers.
   */
  class Eip1193Provider extends Web3BaseProvider {
      constructor() {
          super(...arguments);
          this._eventEmitter = new EventEmitter$1();
          this._chainId = '';
          this._accounts = [];
      }
      _getChainId() {
          return __awaiter$L(this, void 0, void 0, function* () {
              var _a;
              const data = yield this.request(toPayload({
                  method: 'eth_chainId',
                  params: [],
              }));
              return (_a = data === null || data === void 0 ? void 0 : data.result) !== null && _a !== void 0 ? _a : '';
          });
      }
      _getAccounts() {
          return __awaiter$L(this, void 0, void 0, function* () {
              var _a;
              const data = yield this.request(toPayload({
                  method: 'eth_accounts',
                  params: [],
              }));
              return (_a = data === null || data === void 0 ? void 0 : data.result) !== null && _a !== void 0 ? _a : [];
          });
      }
      _onConnect() {
          Promise.all([
              this._getChainId()
                  .then(chainId => {
                  if (chainId !== this._chainId) {
                      this._chainId = chainId;
                      this._eventEmitter.emit('chainChanged', this._chainId);
                  }
              })
                  .catch(err => {
                  // todo: add error handler
                  console.error(err);
              }),
              this._getAccounts()
                  .then(accounts => {
                  if (!(this._accounts.length === accounts.length &&
                      accounts.every(v => accounts.includes(v)))) {
                      this._accounts = accounts;
                      this._onAccountsChanged();
                  }
              })
                  .catch(err => {
                  // todo: add error handler
                  // eslint-disable-next-line no-console
                  console.error(err);
              }),
          ])
              .then(() => this._eventEmitter.emit('connect', {
              chainId: this._chainId,
          }))
              .catch(err => {
              // todo: add error handler
              // eslint-disable-next-line no-console
              console.error(err);
          });
      }
      // todo this must be ProvideRpcError with a message too
      _onDisconnect(code, data) {
          this._eventEmitter.emit('disconnect', new EIP1193ProviderRpcError(code, data));
      }
      _onAccountsChanged() {
          // get chainId and safe to local
          this._eventEmitter.emit('accountsChanged', this._accounts);
      }
  }

  var __awaiter$K = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const DEFAULT_RECONNECTION_OPTIONS = {
      autoReconnect: true,
      delay: 5000,
      maxAttempts: 5,
  };
  const NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close
  class SocketProvider extends Eip1193Provider {
      get SocketConnection() {
          return this._socketConnection;
      }
      /**
       * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.
       * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)
       * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.
       * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}
       */
      constructor(socketPath, socketOptions, reconnectOptions) {
          super();
          this._connectionStatus = 'connecting';
          // Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.
          this._onMessageHandler = this._onMessage.bind(this);
          this._onOpenHandler = this._onConnect.bind(this);
          this._onCloseHandler = this._onCloseEvent.bind(this);
          this._onErrorHandler = this._onError.bind(this);
          if (!this._validateProviderPath(socketPath))
              throw new InvalidClientError(socketPath);
          this._socketPath = socketPath;
          this._socketOptions = socketOptions;
          this._reconnectOptions = Object.assign(Object.assign({}, DEFAULT_RECONNECTION_OPTIONS), (reconnectOptions !== null && reconnectOptions !== void 0 ? reconnectOptions : {}));
          this._pendingRequestsQueue = new Map();
          this._sentRequestsQueue = new Map();
          this._init();
          this.connect();
          this.chunkResponseParser = new ChunkResponseParser(this._eventEmitter, this._reconnectOptions.autoReconnect);
          this.chunkResponseParser.onError(() => {
              this._clearQueues();
          });
          this.isReconnecting = false;
      }
      _init() {
          this._reconnectAttempts = 0;
      }
      /**
       * Try to establish a connection to the socket
       */
      connect() {
          try {
              this._openSocketConnection();
              this._connectionStatus = 'connecting';
              this._addSocketListeners();
          }
          catch (e) {
              if (!this.isReconnecting) {
                  this._connectionStatus = 'disconnected';
                  if (e && e.message) {
                      throw new ConnectionError(`Error while connecting to ${this._socketPath}. Reason: ${e.message}`);
                  }
                  else {
                      throw new InvalidClientError(this._socketPath);
                  }
              }
              else {
                  setImmediate(() => {
                      this._reconnect();
                  });
              }
          }
      }
      // eslint-disable-next-line class-methods-use-this
      _validateProviderPath(path) {
          return !!path;
      }
      /**
       *
       * @returns the pendingRequestQueue size
       */
      // eslint-disable-next-line class-methods-use-this
      getPendingRequestQueueSize() {
          return this._pendingRequestsQueue.size;
      }
      /**
       *
       * @returns the sendPendingRequests size
       */
      // eslint-disable-next-line class-methods-use-this
      getSentRequestsQueueSize() {
          return this._sentRequestsQueue.size;
      }
      /**
       *
       * @returns `true` if the socket supports subscriptions
       */
      // eslint-disable-next-line class-methods-use-this
      supportsSubscriptions() {
          return true;
      }
      on(type, listener) {
          this._eventEmitter.on(type, listener);
      }
      once(type, listener) {
          this._eventEmitter.once(type, listener);
      }
      removeListener(type, listener) {
          this._eventEmitter.removeListener(type, listener);
      }
      _onDisconnect(code, data) {
          this._connectionStatus = 'disconnected';
          super._onDisconnect(code, data);
      }
      /**
       * Disconnects the socket
       * @param code - The code to be sent to the server
       * @param data - The data to be sent to the server
       */
      disconnect(code, data) {
          const disconnectCode = code !== null && code !== void 0 ? code : NORMAL_CLOSE_CODE;
          this._removeSocketListeners();
          if (this.getStatus() !== 'disconnected') {
              this._closeSocketConnection(disconnectCode, data);
          }
          this._onDisconnect(disconnectCode, data);
      }
      /**
       * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting
       * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0
       * @param ms - Determines the ms of setInterval
       * @param code - The code to be sent to the server
       * @param data - The data to be sent to the server
       */
      safeDisconnect(code_1, data_1) {
          return __awaiter$K(this, arguments, void 0, function* (code, data, forceDisconnect = false, ms = 1000) {
              let retryAttempt = 0;
              const checkQueue = () => __awaiter$K(this, void 0, void 0, function* () {
                  return new Promise(resolve => {
                      const interval = setInterval(() => {
                          if (forceDisconnect && retryAttempt >= 5) {
                              this.clearQueues();
                          }
                          if (this.getPendingRequestQueueSize() === 0 &&
                              this.getSentRequestsQueueSize() === 0) {
                              clearInterval(interval);
                              resolve(true);
                          }
                          retryAttempt += 1;
                      }, ms);
                  });
              });
              yield checkQueue();
              this.disconnect(code, data);
          });
      }
      /**
       * Removes all listeners for the specified event type.
       * @param type - The event type to remove the listeners for
       */
      removeAllListeners(type) {
          this._eventEmitter.removeAllListeners(type);
      }
      _onError(event) {
          // do not emit error while trying to reconnect
          if (this.isReconnecting) {
              this._reconnect();
          }
          else {
              this._eventEmitter.emit('error', event);
          }
      }
      /**
       * Resets the socket, removing all listeners and pending requests
       */
      reset() {
          this._sentRequestsQueue.clear();
          this._pendingRequestsQueue.clear();
          this._init();
          this._removeSocketListeners();
          this._addSocketListeners();
      }
      _reconnect() {
          if (this.isReconnecting) {
              return;
          }
          this.isReconnecting = true;
          if (this._sentRequestsQueue.size > 0) {
              this._sentRequestsQueue.forEach((request, key) => {
                  request.deferredPromise.reject(new PendingRequestsOnReconnectingError());
                  this._sentRequestsQueue.delete(key);
              });
          }
          if (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {
              this._reconnectAttempts += 1;
              setTimeout(() => {
                  this._removeSocketListeners();
                  this.connect(); // this can error out
                  this.isReconnecting = false;
              }, this._reconnectOptions.delay);
          }
          else {
              this.isReconnecting = false;
              this._clearQueues();
              this._removeSocketListeners();
              this._eventEmitter.emit('error', new MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts));
          }
      }
      /**
       *  Creates a request object to be sent to the server
       */
      request(request) {
          return __awaiter$K(this, void 0, void 0, function* () {
              if (isNullish(this._socketConnection)) {
                  throw new Error('Connection is undefined');
              }
              // if socket disconnected - open connection
              if (this.getStatus() === 'disconnected') {
                  this.connect();
              }
              const requestId = isBatchRequest(request)
                  ? request[0].id
                  : request.id;
              if (!requestId) {
                  throw new Web3WSProviderError('Request Id not defined');
              }
              if (this._sentRequestsQueue.has(requestId)) {
                  throw new RequestAlreadySentError(requestId);
              }
              const deferredPromise = new Web3DeferredPromise();
              deferredPromise.catch(error => {
                  this._eventEmitter.emit('error', error);
              });
              const reqItem = {
                  payload: request,
                  deferredPromise,
              };
              if (this.getStatus() === 'connecting') {
                  this._pendingRequestsQueue.set(requestId, reqItem);
                  return reqItem.deferredPromise;
              }
              this._sentRequestsQueue.set(requestId, reqItem);
              try {
                  this._sendToSocket(reqItem.payload);
              }
              catch (error) {
                  this._sentRequestsQueue.delete(requestId);
                  this._eventEmitter.emit('error', error);
              }
              return deferredPromise;
          });
      }
      _onConnect() {
          this._connectionStatus = 'connected';
          this._reconnectAttempts = 0;
          super._onConnect();
          this._sendPendingRequests();
      }
      _sendPendingRequests() {
          for (const [id, value] of this._pendingRequestsQueue.entries()) {
              try {
                  this._sendToSocket(value.payload);
                  this._pendingRequestsQueue.delete(id);
                  this._sentRequestsQueue.set(id, value);
              }
              catch (error) {
                  // catches if sendTosocket fails
                  this._pendingRequestsQueue.delete(id);
                  this._eventEmitter.emit('error', error);
              }
          }
      }
      _onMessage(event) {
          const responses = this._parseResponses(event);
          if (isNullish(responses) || responses.length === 0) {
              return;
          }
          for (const response of responses) {
              if (isResponseWithNotification(response) &&
                  response.method.endsWith('_subscription')) {
                  this._eventEmitter.emit('message', response);
                  return;
              }
              const requestId = isBatchResponse(response)
                  ? response[0].id
                  : response.id;
              const requestItem = this._sentRequestsQueue.get(requestId);
              if (!requestItem) {
                  return;
              }
              if (isBatchResponse(response) ||
                  isResponseWithResult(response) ||
                  isResponseWithError(response)) {
                  this._eventEmitter.emit('message', response);
                  requestItem.deferredPromise.resolve(response);
              }
              this._sentRequestsQueue.delete(requestId);
          }
      }
      clearQueues(event) {
          this._clearQueues(event);
      }
      _clearQueues(event) {
          if (this._pendingRequestsQueue.size > 0) {
              this._pendingRequestsQueue.forEach((request, key) => {
                  request.deferredPromise.reject(new ConnectionNotOpenError(event));
                  this._pendingRequestsQueue.delete(key);
              });
          }
          if (this._sentRequestsQueue.size > 0) {
              this._sentRequestsQueue.forEach((request, key) => {
                  request.deferredPromise.reject(new ConnectionNotOpenError(event));
                  this._sentRequestsQueue.delete(key);
              });
          }
          this._removeSocketListeners();
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */

  var utils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ChunkResponseParser: ChunkResponseParser,
    Eip1193Provider: Eip1193Provider,
    EventEmitter: EventEmitter,
    SocketProvider: SocketProvider,
    Web3DeferredPromise: Web3DeferredPromise,
    asciiToHex: asciiToHex,
    bytesToHex: bytesToHex$1,
    bytesToUint8Array: bytesToUint8Array,
    checkAddressCheckSum: checkAddressCheckSum,
    compareBlockNumbers: compareBlockNumbers,
    convert: convert,
    convertScalarValue: convertScalarValue,
    encodePacked: encodePacked,
    ethUnitMap: ethUnitMap,
    format: format,
    fromAscii: fromAscii,
    fromDecimal: fromDecimal,
    fromTwosComplement: fromTwosComplement,
    fromUtf8: fromUtf8,
    fromWei: fromWei,
    getStorageSlotNumForLongString: getStorageSlotNumForLongString,
    hexToAscii: hexToAscii,
    hexToBytes: hexToBytes$1,
    hexToNumber: hexToNumber$1,
    hexToNumberString: hexToNumberString,
    hexToString: hexToString,
    hexToUtf8: hexToUtf8,
    isAddress: isAddress,
    isBatchRequest: isBatchRequest,
    isBatchResponse: isBatchResponse,
    isBloom: isBloom,
    isContractAddressInBloom: isContractAddressInBloom,
    isContractInitOptions: isContractInitOptions,
    isDataFormat: isDataFormat,
    isHex: isHex,
    isHexStrict: isHexStrict,
    isInBloom: isInBloom,
    isNullish: isNullish,
    isPromise: isPromise,
    isResponseRpcError: isResponseRpcError,
    isResponseWithError: isResponseWithError,
    isResponseWithNotification: isResponseWithNotification,
    isResponseWithResult: isResponseWithResult,
    isSubscriptionResult: isSubscriptionResult,
    isTopic: isTopic,
    isTopicInBloom: isTopicInBloom,
    isUint8Array: isUint8Array,
    isUserEthereumAddressInBloom: isUserEthereumAddressInBloom,
    isValidResponse: isValidResponse,
    jsonRpc: json_rpc,
    keccak256: keccak256Wrapper,
    keccak256Wrapper: keccak256Wrapper,
    leftPad: leftPad,
    mergeDeep: mergeDeep,
    numberToHex: numberToHex,
    padLeft: padLeft,
    padRight: padRight,
    pollTillDefined: pollTillDefined,
    pollTillDefinedAndReturnIntervalId: pollTillDefinedAndReturnIntervalId,
    processSolidityEncodePackedArgs: processSolidityEncodePackedArgs,
    randomBytes: randomBytes,
    randomHex: randomHex,
    rejectIfConditionAtInterval: rejectIfConditionAtInterval,
    rejectIfTimeout: rejectIfTimeout,
    rightPad: rightPad,
    setRequestIdStart: setRequestIdStart,
    sha3: sha3,
    sha3Raw: sha3Raw,
    soliditySha3: soliditySha3,
    soliditySha3Raw: soliditySha3Raw,
    stringToHex: stringToHex,
    toAscii: toAscii,
    toBatchPayload: toBatchPayload,
    toBigInt: toBigInt,
    toBool: toBool,
    toChecksumAddress: toChecksumAddress,
    toDecimal: toDecimal,
    toHex: toHex,
    toNumber: toNumber,
    toPayload: toPayload,
    toTwosComplement: toTwosComplement,
    toUtf8: toUtf8,
    toWei: toWei,
    uint8ArrayConcat: uint8ArrayConcat,
    uint8ArrayEquals: uint8ArrayEquals,
    utf8ToBytes: utf8ToBytes$1,
    utf8ToHex: utf8ToHex,
    uuidV4: uuidV4,
    validateResponse: validateResponse,
    waitWithTimeout: waitWithTimeout
  });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  let Web3EventEmitter$1 = class Web3EventEmitter {
      constructor() {
          this._emitter = new EventEmitter();
      }
      on(eventName, fn) {
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          this._emitter.on(eventName, fn);
      }
      once(eventName, fn) {
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          this._emitter.once(eventName, fn);
      }
      off(eventName, fn) {
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          this._emitter.off(eventName, fn);
      }
      emit(eventName, params) {
          this._emitter.emit(eventName, params);
      }
      listenerCount(eventName) {
          return this._emitter.listenerCount(eventName);
      }
      listeners(eventName) {
          return this._emitter.listeners(eventName);
      }
      eventNames() {
          return this._emitter.eventNames();
      }
      removeAllListeners() {
          return this._emitter.removeAllListeners();
      }
      setMaxListenerWarningThreshold(maxListenersWarningThreshold) {
          this._emitter.setMaxListeners(maxListenersWarningThreshold);
      }
      getMaxListeners() {
          return this._emitter.getMaxListeners();
      }
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var Web3ConfigEvent$1;
  (function (Web3ConfigEvent) {
      Web3ConfigEvent["CONFIG_CHANGE"] = "CONFIG_CHANGE";
  })(Web3ConfigEvent$1 || (Web3ConfigEvent$1 = {}));
  let Web3Config$1 = class Web3Config extends Web3EventEmitter$1 {
      constructor(options) {
          super();
          this.config = {
              handleRevert: false,
              defaultAccount: undefined,
              defaultBlock: 'latest',
              transactionBlockTimeout: 50,
              transactionConfirmationBlocks: 24,
              transactionPollingInterval: 1000,
              transactionPollingTimeout: 750 * 1000,
              transactionReceiptPollingInterval: undefined,
              transactionSendTimeout: 750 * 1000,
              transactionConfirmationPollingInterval: undefined,
              blockHeaderTimeout: 10,
              maxListenersWarningThreshold: 100,
              contractDataInputFill: 'data',
              defaultNetworkId: undefined,
              defaultChain: 'mainnet',
              defaultHardfork: 'london',
              // TODO - Check if there is a default Common
              defaultCommon: undefined,
              defaultTransactionType: '0x2',
              defaultMaxPriorityFeePerGas: toHex(2500000000),
              enableExperimentalFeatures: {
                  useSubscriptionWhenCheckingBlockTimeout: false,
                  useRpcCallSpecification: false,
              },
              transactionBuilder: undefined,
              transactionTypeParser: undefined,
              customTransactionSchema: undefined,
              defaultReturnFormat: DEFAULT_RETURN_FORMAT,
              ignoreGasPricing: false,
          };
          this.setConfig(options !== null && options !== void 0 ? options : {});
      }
      setConfig(options) {
          // TODO: Improve and add key check
          const keys = Object.keys(options);
          for (const key of keys) {
              this._triggerConfigChange(key, options[key]);
              if (!isNullish(options[key]) &&
                  typeof options[key] === 'number' &&
                  key === 'maxListenersWarningThreshold') {
                  // additionally set in event emitter
                  this.setMaxListenerWarningThreshold(Number(options[key]));
              }
          }
          Object.assign(this.config, options);
      }
      /**
       * The `handleRevert` options property returns the revert reason string if enabled for the following methods:
       * - web3.eth.sendTransaction()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       * - myContract.methods.myMethod().send()
       * Default is `false`.
       *
       * `Note`: At the moment `handleRevert` is only supported for `sendTransaction` and not for `sendSignedTransaction`
       */
      get handleRevert() {
          return this.config.handleRevert;
      }
      /**
       * Will set the handleRevert
       */
      set handleRevert(val) {
          this._triggerConfigChange('handleRevert', val);
          this.config.handleRevert = val;
      }
      /**
       * The `contractDataInputFill` options property will allow you to set the hash of the method signature and encoded parameters to the property
       * either `data`, `input` or both within your contract.
       * This will affect the contracts send, call and estimateGas methods
       * Default is `data`.
       */
      get contractDataInputFill() {
          return this.config.contractDataInputFill;
      }
      /**
       * Will set the contractDataInputFill
       */
      set contractDataInputFill(val) {
          this._triggerConfigChange('contractDataInputFill', val);
          this.config.contractDataInputFill = val;
      }
      /**
       * This default address is used as the default `from` property, if no `from` property is specified in for the following methods:
       * - web3.eth.sendTransaction()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       * - myContract.methods.myMethod().send()
       */
      get defaultAccount() {
          return this.config.defaultAccount;
      }
      /**
       * Will set the default account.
       */
      set defaultAccount(val) {
          this._triggerConfigChange('defaultAccount', val);
          this.config.defaultAccount = val;
      }
      /**
       * The default block is used for certain methods. You can override it by passing in the defaultBlock as last parameter. The default value is `"latest"`.
       * - web3.eth.getBalance()
       * - web3.eth.getCode()
       * - web3.eth.getTransactionCount()
       * - web3.eth.getStorageAt()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       */
      get defaultBlock() {
          return this.config.defaultBlock;
      }
      /**
       * Will set the default block.
       *
       * - A block number
       * - `"earliest"` - String: The genesis block
       * - `"latest"` - String: The latest block (current head of the blockchain)
       * - `"pending"` - String: The currently mined block (including pending transactions)
       * - `"finalized"` - String: (For POS networks) The finalized block is one which has been accepted as canonical by greater than 2/3 of validators
       * - `"safe"` - String: (For POS networks) The safe head block is one which under normal network conditions, is expected to be included in the canonical chain. Under normal network conditions the safe head and the actual tip of the chain will be equivalent (with safe head trailing only by a few seconds). Safe heads will be less likely to be reorged than the proof of work network's latest blocks.
       */
      set defaultBlock(val) {
          this._triggerConfigChange('defaultBlock', val);
          this.config.defaultBlock = val;
      }
      /**
       * The time used to wait for Ethereum Node to return the sent transaction result.
       * Note: If the RPC call stuck at the Node and therefor timed-out, the transaction may still be pending or even mined by the Network. We recommend checking the pending transactions in such a case.
       * Default is `750` seconds (12.5 minutes).
       */
      get transactionSendTimeout() {
          return this.config.transactionSendTimeout;
      }
      /**
       * Will set the transactionSendTimeout.
       */
      set transactionSendTimeout(val) {
          this._triggerConfigChange('transactionSendTimeout', val);
          this.config.transactionSendTimeout = val;
      }
      /**
       * The `transactionBlockTimeout` is used over socket-based connections. This option defines the amount of new blocks it should wait until the first confirmation happens, otherwise the PromiEvent rejects with a timeout error.
       * Default is `50`.
       */
      get transactionBlockTimeout() {
          return this.config.transactionBlockTimeout;
      }
      /**
       * Will set the transactionBlockTimeout.
       */
      set transactionBlockTimeout(val) {
          this._triggerConfigChange('transactionBlockTimeout', val);
          this.config.transactionBlockTimeout = val;
      }
      /**
       * This defines the number of blocks it requires until a transaction is considered confirmed.
       * Default is `24`.
       */
      get transactionConfirmationBlocks() {
          return this.config.transactionConfirmationBlocks;
      }
      /**
       * Will set the transactionConfirmationBlocks.
       */
      set transactionConfirmationBlocks(val) {
          this._triggerConfigChange('transactionConfirmationBlocks', val);
          this.config.transactionConfirmationBlocks = val;
      }
      /**
       * Used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
       * Default is `1000` ms.
       */
      get transactionPollingInterval() {
          return this.config.transactionPollingInterval;
      }
      /**
       * Will set the transactionPollingInterval.
       */
      set transactionPollingInterval(val) {
          this._triggerConfigChange('transactionPollingInterval', val);
          this.config.transactionPollingInterval = val;
          this.transactionReceiptPollingInterval = val;
          this.transactionConfirmationPollingInterval = val;
      }
      /**
       * Used over HTTP connections. This option defines the number of seconds Web3 will wait for a receipt which confirms that a transaction was mined by the network. Note: If this method times out, the transaction may still be pending.
       * Default is `750` seconds (12.5 minutes).
       */
      get transactionPollingTimeout() {
          return this.config.transactionPollingTimeout;
      }
      /**
       * Will set the transactionPollingTimeout.
       */
      set transactionPollingTimeout(val) {
          this._triggerConfigChange('transactionPollingTimeout', val);
          this.config.transactionPollingTimeout = val;
      }
      /**
       * The `transactionPollingInterval` is used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
       * Default is `undefined`
       */
      get transactionReceiptPollingInterval() {
          return this.config.transactionReceiptPollingInterval;
      }
      /**
       * Will set the transactionReceiptPollingInterval
       */
      set transactionReceiptPollingInterval(val) {
          this._triggerConfigChange('transactionReceiptPollingInterval', val);
          this.config.transactionReceiptPollingInterval = val;
      }
      get transactionConfirmationPollingInterval() {
          return this.config.transactionConfirmationPollingInterval;
      }
      set transactionConfirmationPollingInterval(val) {
          this._triggerConfigChange('transactionConfirmationPollingInterval', val);
          this.config.transactionConfirmationPollingInterval = val;
      }
      /**
       * The blockHeaderTimeout is used over socket-based connections. This option defines the amount seconds it should wait for `'newBlockHeaders'` event before falling back to polling to fetch transaction receipt.
       * Default is `10` seconds.
       */
      get blockHeaderTimeout() {
          return this.config.blockHeaderTimeout;
      }
      /**
       * Will set the blockHeaderTimeout
       */
      set blockHeaderTimeout(val) {
          this._triggerConfigChange('blockHeaderTimeout', val);
          this.config.blockHeaderTimeout = val;
      }
      /**
       * The enableExperimentalFeatures is used to enable trying new experimental features that are still not fully implemented or not fully tested or still have some related issues.
       * Default is `false` for every feature.
       */
      get enableExperimentalFeatures() {
          return this.config.enableExperimentalFeatures;
      }
      /**
       * Will set the enableExperimentalFeatures
       */
      set enableExperimentalFeatures(val) {
          this._triggerConfigChange('enableExperimentalFeatures', val);
          this.config.enableExperimentalFeatures = val;
      }
      get maxListenersWarningThreshold() {
          return this.config.maxListenersWarningThreshold;
      }
      set maxListenersWarningThreshold(val) {
          this._triggerConfigChange('maxListenersWarningThreshold', val);
          this.setMaxListenerWarningThreshold(val);
          this.config.maxListenersWarningThreshold = val;
      }
      get defaultReturnFormat() {
          return this.config.defaultReturnFormat;
      }
      set defaultReturnFormat(val) {
          this._triggerConfigChange('defaultReturnFormat', val);
          this.config.defaultReturnFormat = val;
      }
      get defaultNetworkId() {
          return this.config.defaultNetworkId;
      }
      set defaultNetworkId(val) {
          this._triggerConfigChange('defaultNetworkId', val);
          this.config.defaultNetworkId = val;
      }
      get defaultChain() {
          return this.config.defaultChain;
      }
      set defaultChain(val) {
          if (!isNullish(this.config.defaultCommon) &&
              !isNullish(this.config.defaultCommon.baseChain) &&
              val !== this.config.defaultCommon.baseChain)
              throw new ConfigChainMismatchError(this.config.defaultChain, val);
          this._triggerConfigChange('defaultChain', val);
          this.config.defaultChain = val;
      }
      /**
       * Will return the default hardfork. Default is `london`
       * The default hardfork property can be one of the following:
       * - `chainstart`
       * - `homestead`
       * - `dao`
       * - `tangerineWhistle`
       * - `spuriousDragon`
       * - `byzantium`
       * - `constantinople`
       * - `petersburg`
       * - `istanbul`
       * - `berlin`
       * - `london`
       * - 'arrowGlacier',
       * - 'tangerineWhistle',
       * - 'muirGlacier'
       *
       */
      get defaultHardfork() {
          return this.config.defaultHardfork;
      }
      /**
       * Will set the default hardfork.
       *
       */
      set defaultHardfork(val) {
          if (!isNullish(this.config.defaultCommon) &&
              !isNullish(this.config.defaultCommon.hardfork) &&
              val !== this.config.defaultCommon.hardfork)
              throw new ConfigHardforkMismatchError(this.config.defaultCommon.hardfork, val);
          this._triggerConfigChange('defaultHardfork', val);
          this.config.defaultHardfork = val;
      }
      /**
       *
       * Will get the default common property
       * The default common property does contain the following Common object:
       * - `customChain` - `Object`: The custom chain properties
       * 	- `name` - `string`: (optional) The name of the chain
       * 	- `networkId` - `number`: Network ID of the custom chain
       * 	- `chainId` - `number`: Chain ID of the custom chain
       * - `baseChain` - `string`: (optional) mainnet, goerli, kovan, rinkeby, or ropsten
       * - `hardfork` - `string`: (optional) chainstart, homestead, dao, tangerineWhistle, spuriousDragon, byzantium, constantinople, petersburg, istanbul, berlin, or london
       * Default is `undefined`.
       *
       */
      get defaultCommon() {
          return this.config.defaultCommon;
      }
      /**
       * Will set the default common property
       *
       */
      set defaultCommon(val) {
          // validation check if default hardfork is set and matches defaultCommon hardfork
          if (!isNullish(this.config.defaultHardfork) &&
              !isNullish(val) &&
              !isNullish(val.hardfork) &&
              this.config.defaultHardfork !== val.hardfork)
              throw new ConfigHardforkMismatchError(this.config.defaultHardfork, val.hardfork);
          if (!isNullish(this.config.defaultChain) &&
              !isNullish(val) &&
              !isNullish(val.baseChain) &&
              this.config.defaultChain !== val.baseChain)
              throw new ConfigChainMismatchError(this.config.defaultChain, val.baseChain);
          this._triggerConfigChange('defaultCommon', val);
          this.config.defaultCommon = val;
      }
      /**
       *  Will get the ignoreGasPricing property. When true, the gasPrice, maxPriorityFeePerGas, and maxFeePerGas will not be autofilled in the transaction object.
       *  Useful when you want wallets to handle gas pricing.
       */
      get ignoreGasPricing() {
          return this.config.ignoreGasPricing;
      }
      set ignoreGasPricing(val) {
          this._triggerConfigChange('ignoreGasPricing', val);
          this.config.ignoreGasPricing = val;
      }
      get defaultTransactionType() {
          return this.config.defaultTransactionType;
      }
      set defaultTransactionType(val) {
          this._triggerConfigChange('defaultTransactionType', val);
          this.config.defaultTransactionType = val;
      }
      get defaultMaxPriorityFeePerGas() {
          return this.config.defaultMaxPriorityFeePerGas;
      }
      set defaultMaxPriorityFeePerGas(val) {
          this._triggerConfigChange('defaultMaxPriorityFeePerGas', val);
          this.config.defaultMaxPriorityFeePerGas = val;
      }
      get transactionBuilder() {
          return this.config.transactionBuilder;
      }
      set transactionBuilder(val) {
          this._triggerConfigChange('transactionBuilder', val);
          this.config.transactionBuilder = val;
      }
      get transactionTypeParser() {
          return this.config.transactionTypeParser;
      }
      set transactionTypeParser(val) {
          this._triggerConfigChange('transactionTypeParser', val);
          this.config.transactionTypeParser = val;
      }
      get customTransactionSchema() {
          return this.config.customTransactionSchema;
      }
      set customTransactionSchema(schema) {
          this._triggerConfigChange('customTransactionSchema', schema);
          this.config.customTransactionSchema = schema;
      }
      _triggerConfigChange(config, newValue) {
          this.emit(Web3ConfigEvent$1.CONFIG_CHANGE, {
              name: config,
              oldValue: this.config[config],
              newValue,
          });
      }
  };

  var browserPonyfill = {exports: {}};

  var hasRequiredBrowserPonyfill;

  function requireBrowserPonyfill () {
  	if (hasRequiredBrowserPonyfill) return browserPonyfill.exports;
  	hasRequiredBrowserPonyfill = 1;
  	(function (module, exports) {
  		// Save global object in a variable
  		var __global__ =
  		(typeof globalThis !== 'undefined' && globalThis) ||
  		(typeof self !== 'undefined' && self) ||
  		(typeof commonjsGlobal !== 'undefined' && commonjsGlobal);
  		// Create an object that extends from __global__ without the fetch function
  		var __globalThis__ = (function () {
  		function F() {
  		this.fetch = false;
  		this.DOMException = __global__.DOMException;
  		}
  		F.prototype = __global__; // Needed for feature detection on whatwg-fetch's code
  		return new F();
  		})();
  		// Wraps whatwg-fetch with a function scope to hijack the global object
  		// "globalThis" that's going to be patched
  		(function(globalThis) {

  		((function (exports) {

  		  var global =
  		    (typeof globalThis !== 'undefined' && globalThis) ||
  		    (typeof self !== 'undefined' && self) ||
  		    (typeof global !== 'undefined' && global);

  		  var support = {
  		    searchParams: 'URLSearchParams' in global,
  		    iterable: 'Symbol' in global && 'iterator' in Symbol,
  		    blob:
  		      'FileReader' in global &&
  		      'Blob' in global &&
  		      (function() {
  		        try {
  		          new Blob();
  		          return true
  		        } catch (e) {
  		          return false
  		        }
  		      })(),
  		    formData: 'FormData' in global,
  		    arrayBuffer: 'ArrayBuffer' in global
  		  };

  		  function isDataView(obj) {
  		    return obj && DataView.prototype.isPrototypeOf(obj)
  		  }

  		  if (support.arrayBuffer) {
  		    var viewClasses = [
  		      '[object Int8Array]',
  		      '[object Uint8Array]',
  		      '[object Uint8ClampedArray]',
  		      '[object Int16Array]',
  		      '[object Uint16Array]',
  		      '[object Int32Array]',
  		      '[object Uint32Array]',
  		      '[object Float32Array]',
  		      '[object Float64Array]'
  		    ];

  		    var isArrayBufferView =
  		      ArrayBuffer.isView ||
  		      function(obj) {
  		        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
  		      };
  		  }

  		  function normalizeName(name) {
  		    if (typeof name !== 'string') {
  		      name = String(name);
  		    }
  		    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
  		      throw new TypeError('Invalid character in header field name: "' + name + '"')
  		    }
  		    return name.toLowerCase()
  		  }

  		  function normalizeValue(value) {
  		    if (typeof value !== 'string') {
  		      value = String(value);
  		    }
  		    return value
  		  }

  		  // Build a destructive iterator for the value list
  		  function iteratorFor(items) {
  		    var iterator = {
  		      next: function() {
  		        var value = items.shift();
  		        return {done: value === undefined, value: value}
  		      }
  		    };

  		    if (support.iterable) {
  		      iterator[Symbol.iterator] = function() {
  		        return iterator
  		      };
  		    }

  		    return iterator
  		  }

  		  function Headers(headers) {
  		    this.map = {};

  		    if (headers instanceof Headers) {
  		      headers.forEach(function(value, name) {
  		        this.append(name, value);
  		      }, this);
  		    } else if (Array.isArray(headers)) {
  		      headers.forEach(function(header) {
  		        this.append(header[0], header[1]);
  		      }, this);
  		    } else if (headers) {
  		      Object.getOwnPropertyNames(headers).forEach(function(name) {
  		        this.append(name, headers[name]);
  		      }, this);
  		    }
  		  }

  		  Headers.prototype.append = function(name, value) {
  		    name = normalizeName(name);
  		    value = normalizeValue(value);
  		    var oldValue = this.map[name];
  		    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  		  };

  		  Headers.prototype['delete'] = function(name) {
  		    delete this.map[normalizeName(name)];
  		  };

  		  Headers.prototype.get = function(name) {
  		    name = normalizeName(name);
  		    return this.has(name) ? this.map[name] : null
  		  };

  		  Headers.prototype.has = function(name) {
  		    return this.map.hasOwnProperty(normalizeName(name))
  		  };

  		  Headers.prototype.set = function(name, value) {
  		    this.map[normalizeName(name)] = normalizeValue(value);
  		  };

  		  Headers.prototype.forEach = function(callback, thisArg) {
  		    for (var name in this.map) {
  		      if (this.map.hasOwnProperty(name)) {
  		        callback.call(thisArg, this.map[name], name, this);
  		      }
  		    }
  		  };

  		  Headers.prototype.keys = function() {
  		    var items = [];
  		    this.forEach(function(value, name) {
  		      items.push(name);
  		    });
  		    return iteratorFor(items)
  		  };

  		  Headers.prototype.values = function() {
  		    var items = [];
  		    this.forEach(function(value) {
  		      items.push(value);
  		    });
  		    return iteratorFor(items)
  		  };

  		  Headers.prototype.entries = function() {
  		    var items = [];
  		    this.forEach(function(value, name) {
  		      items.push([name, value]);
  		    });
  		    return iteratorFor(items)
  		  };

  		  if (support.iterable) {
  		    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  		  }

  		  function consumed(body) {
  		    if (body.bodyUsed) {
  		      return Promise.reject(new TypeError('Already read'))
  		    }
  		    body.bodyUsed = true;
  		  }

  		  function fileReaderReady(reader) {
  		    return new Promise(function(resolve, reject) {
  		      reader.onload = function() {
  		        resolve(reader.result);
  		      };
  		      reader.onerror = function() {
  		        reject(reader.error);
  		      };
  		    })
  		  }

  		  function readBlobAsArrayBuffer(blob) {
  		    var reader = new FileReader();
  		    var promise = fileReaderReady(reader);
  		    reader.readAsArrayBuffer(blob);
  		    return promise
  		  }

  		  function readBlobAsText(blob) {
  		    var reader = new FileReader();
  		    var promise = fileReaderReady(reader);
  		    reader.readAsText(blob);
  		    return promise
  		  }

  		  function readArrayBufferAsText(buf) {
  		    var view = new Uint8Array(buf);
  		    var chars = new Array(view.length);

  		    for (var i = 0; i < view.length; i++) {
  		      chars[i] = String.fromCharCode(view[i]);
  		    }
  		    return chars.join('')
  		  }

  		  function bufferClone(buf) {
  		    if (buf.slice) {
  		      return buf.slice(0)
  		    } else {
  		      var view = new Uint8Array(buf.byteLength);
  		      view.set(new Uint8Array(buf));
  		      return view.buffer
  		    }
  		  }

  		  function Body() {
  		    this.bodyUsed = false;

  		    this._initBody = function(body) {
  		      /*
  		        fetch-mock wraps the Response object in an ES6 Proxy to
  		        provide useful test harness features such as flush. However, on
  		        ES5 browsers without fetch or Proxy support pollyfills must be used;
  		        the proxy-pollyfill is unable to proxy an attribute unless it exists
  		        on the object before the Proxy is created. This change ensures
  		        Response.bodyUsed exists on the instance, while maintaining the
  		        semantic of setting Request.bodyUsed in the constructor before
  		        _initBody is called.
  		      */
  		      this.bodyUsed = this.bodyUsed;
  		      this._bodyInit = body;
  		      if (!body) {
  		        this._bodyText = '';
  		      } else if (typeof body === 'string') {
  		        this._bodyText = body;
  		      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
  		        this._bodyBlob = body;
  		      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
  		        this._bodyFormData = body;
  		      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
  		        this._bodyText = body.toString();
  		      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
  		        this._bodyArrayBuffer = bufferClone(body.buffer);
  		        // IE 10-11 can't handle a DataView body.
  		        this._bodyInit = new Blob([this._bodyArrayBuffer]);
  		      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
  		        this._bodyArrayBuffer = bufferClone(body);
  		      } else {
  		        this._bodyText = body = Object.prototype.toString.call(body);
  		      }

  		      if (!this.headers.get('content-type')) {
  		        if (typeof body === 'string') {
  		          this.headers.set('content-type', 'text/plain;charset=UTF-8');
  		        } else if (this._bodyBlob && this._bodyBlob.type) {
  		          this.headers.set('content-type', this._bodyBlob.type);
  		        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
  		          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
  		        }
  		      }
  		    };

  		    if (support.blob) {
  		      this.blob = function() {
  		        var rejected = consumed(this);
  		        if (rejected) {
  		          return rejected
  		        }

  		        if (this._bodyBlob) {
  		          return Promise.resolve(this._bodyBlob)
  		        } else if (this._bodyArrayBuffer) {
  		          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
  		        } else if (this._bodyFormData) {
  		          throw new Error('could not read FormData body as blob')
  		        } else {
  		          return Promise.resolve(new Blob([this._bodyText]))
  		        }
  		      };

  		      this.arrayBuffer = function() {
  		        if (this._bodyArrayBuffer) {
  		          var isConsumed = consumed(this);
  		          if (isConsumed) {
  		            return isConsumed
  		          }
  		          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
  		            return Promise.resolve(
  		              this._bodyArrayBuffer.buffer.slice(
  		                this._bodyArrayBuffer.byteOffset,
  		                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
  		              )
  		            )
  		          } else {
  		            return Promise.resolve(this._bodyArrayBuffer)
  		          }
  		        } else {
  		          return this.blob().then(readBlobAsArrayBuffer)
  		        }
  		      };
  		    }

  		    this.text = function() {
  		      var rejected = consumed(this);
  		      if (rejected) {
  		        return rejected
  		      }

  		      if (this._bodyBlob) {
  		        return readBlobAsText(this._bodyBlob)
  		      } else if (this._bodyArrayBuffer) {
  		        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
  		      } else if (this._bodyFormData) {
  		        throw new Error('could not read FormData body as text')
  		      } else {
  		        return Promise.resolve(this._bodyText)
  		      }
  		    };

  		    if (support.formData) {
  		      this.formData = function() {
  		        return this.text().then(decode)
  		      };
  		    }

  		    this.json = function() {
  		      return this.text().then(JSON.parse)
  		    };

  		    return this
  		  }

  		  // HTTP methods whose capitalization should be normalized
  		  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  		  function normalizeMethod(method) {
  		    var upcased = method.toUpperCase();
  		    return methods.indexOf(upcased) > -1 ? upcased : method
  		  }

  		  function Request(input, options) {
  		    if (!(this instanceof Request)) {
  		      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  		    }

  		    options = options || {};
  		    var body = options.body;

  		    if (input instanceof Request) {
  		      if (input.bodyUsed) {
  		        throw new TypeError('Already read')
  		      }
  		      this.url = input.url;
  		      this.credentials = input.credentials;
  		      if (!options.headers) {
  		        this.headers = new Headers(input.headers);
  		      }
  		      this.method = input.method;
  		      this.mode = input.mode;
  		      this.signal = input.signal;
  		      if (!body && input._bodyInit != null) {
  		        body = input._bodyInit;
  		        input.bodyUsed = true;
  		      }
  		    } else {
  		      this.url = String(input);
  		    }

  		    this.credentials = options.credentials || this.credentials || 'same-origin';
  		    if (options.headers || !this.headers) {
  		      this.headers = new Headers(options.headers);
  		    }
  		    this.method = normalizeMethod(options.method || this.method || 'GET');
  		    this.mode = options.mode || this.mode || null;
  		    this.signal = options.signal || this.signal;
  		    this.referrer = null;

  		    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
  		      throw new TypeError('Body not allowed for GET or HEAD requests')
  		    }
  		    this._initBody(body);

  		    if (this.method === 'GET' || this.method === 'HEAD') {
  		      if (options.cache === 'no-store' || options.cache === 'no-cache') {
  		        // Search for a '_' parameter in the query string
  		        var reParamSearch = /([?&])_=[^&]*/;
  		        if (reParamSearch.test(this.url)) {
  		          // If it already exists then set the value with the current time
  		          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
  		        } else {
  		          // Otherwise add a new '_' parameter to the end with the current time
  		          var reQueryString = /\?/;
  		          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
  		        }
  		      }
  		    }
  		  }

  		  Request.prototype.clone = function() {
  		    return new Request(this, {body: this._bodyInit})
  		  };

  		  function decode(body) {
  		    var form = new FormData();
  		    body
  		      .trim()
  		      .split('&')
  		      .forEach(function(bytes) {
  		        if (bytes) {
  		          var split = bytes.split('=');
  		          var name = split.shift().replace(/\+/g, ' ');
  		          var value = split.join('=').replace(/\+/g, ' ');
  		          form.append(decodeURIComponent(name), decodeURIComponent(value));
  		        }
  		      });
  		    return form
  		  }

  		  function parseHeaders(rawHeaders) {
  		    var headers = new Headers();
  		    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  		    // https://tools.ietf.org/html/rfc7230#section-3.2
  		    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
  		    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
  		    // https://github.com/github/fetch/issues/748
  		    // https://github.com/zloirock/core-js/issues/751
  		    preProcessedHeaders
  		      .split('\r')
  		      .map(function(header) {
  		        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
  		      })
  		      .forEach(function(line) {
  		        var parts = line.split(':');
  		        var key = parts.shift().trim();
  		        if (key) {
  		          var value = parts.join(':').trim();
  		          headers.append(key, value);
  		        }
  		      });
  		    return headers
  		  }

  		  Body.call(Request.prototype);

  		  function Response(bodyInit, options) {
  		    if (!(this instanceof Response)) {
  		      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  		    }
  		    if (!options) {
  		      options = {};
  		    }

  		    this.type = 'default';
  		    this.status = options.status === undefined ? 200 : options.status;
  		    this.ok = this.status >= 200 && this.status < 300;
  		    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
  		    this.headers = new Headers(options.headers);
  		    this.url = options.url || '';
  		    this._initBody(bodyInit);
  		  }

  		  Body.call(Response.prototype);

  		  Response.prototype.clone = function() {
  		    return new Response(this._bodyInit, {
  		      status: this.status,
  		      statusText: this.statusText,
  		      headers: new Headers(this.headers),
  		      url: this.url
  		    })
  		  };

  		  Response.error = function() {
  		    var response = new Response(null, {status: 0, statusText: ''});
  		    response.type = 'error';
  		    return response
  		  };

  		  var redirectStatuses = [301, 302, 303, 307, 308];

  		  Response.redirect = function(url, status) {
  		    if (redirectStatuses.indexOf(status) === -1) {
  		      throw new RangeError('Invalid status code')
  		    }

  		    return new Response(null, {status: status, headers: {location: url}})
  		  };

  		  exports.DOMException = global.DOMException;
  		  try {
  		    new exports.DOMException();
  		  } catch (err) {
  		    exports.DOMException = function(message, name) {
  		      this.message = message;
  		      this.name = name;
  		      var error = Error(message);
  		      this.stack = error.stack;
  		    };
  		    exports.DOMException.prototype = Object.create(Error.prototype);
  		    exports.DOMException.prototype.constructor = exports.DOMException;
  		  }

  		  function fetch(input, init) {
  		    return new Promise(function(resolve, reject) {
  		      var request = new Request(input, init);

  		      if (request.signal && request.signal.aborted) {
  		        return reject(new exports.DOMException('Aborted', 'AbortError'))
  		      }

  		      var xhr = new XMLHttpRequest();

  		      function abortXhr() {
  		        xhr.abort();
  		      }

  		      xhr.onload = function() {
  		        var options = {
  		          status: xhr.status,
  		          statusText: xhr.statusText,
  		          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
  		        };
  		        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
  		        var body = 'response' in xhr ? xhr.response : xhr.responseText;
  		        setTimeout(function() {
  		          resolve(new Response(body, options));
  		        }, 0);
  		      };

  		      xhr.onerror = function() {
  		        setTimeout(function() {
  		          reject(new TypeError('Network request failed'));
  		        }, 0);
  		      };

  		      xhr.ontimeout = function() {
  		        setTimeout(function() {
  		          reject(new TypeError('Network request failed'));
  		        }, 0);
  		      };

  		      xhr.onabort = function() {
  		        setTimeout(function() {
  		          reject(new exports.DOMException('Aborted', 'AbortError'));
  		        }, 0);
  		      };

  		      function fixUrl(url) {
  		        try {
  		          return url === '' && global.location.href ? global.location.href : url
  		        } catch (e) {
  		          return url
  		        }
  		      }

  		      xhr.open(request.method, fixUrl(request.url), true);

  		      if (request.credentials === 'include') {
  		        xhr.withCredentials = true;
  		      } else if (request.credentials === 'omit') {
  		        xhr.withCredentials = false;
  		      }

  		      if ('responseType' in xhr) {
  		        if (support.blob) {
  		          xhr.responseType = 'blob';
  		        } else if (
  		          support.arrayBuffer &&
  		          request.headers.get('Content-Type') &&
  		          request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
  		        ) {
  		          xhr.responseType = 'arraybuffer';
  		        }
  		      }

  		      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
  		        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
  		          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
  		        });
  		      } else {
  		        request.headers.forEach(function(value, name) {
  		          xhr.setRequestHeader(name, value);
  		        });
  		      }

  		      if (request.signal) {
  		        request.signal.addEventListener('abort', abortXhr);

  		        xhr.onreadystatechange = function() {
  		          // DONE (success or failure)
  		          if (xhr.readyState === 4) {
  		            request.signal.removeEventListener('abort', abortXhr);
  		          }
  		        };
  		      }

  		      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
  		    })
  		  }

  		  fetch.polyfill = true;

  		  if (!global.fetch) {
  		    global.fetch = fetch;
  		    global.Headers = Headers;
  		    global.Request = Request;
  		    global.Response = Response;
  		  }

  		  exports.Headers = Headers;
  		  exports.Request = Request;
  		  exports.Response = Response;
  		  exports.fetch = fetch;

  		  return exports;

  		}))({});
  		})(__globalThis__);
  		// This is a ponyfill, so...
  		__globalThis__.fetch.ponyfill = true;
  		delete __globalThis__.fetch.polyfill;
  		// Choose between native implementation (__global__) or custom implementation (__globalThis__)
  		var ctx = __global__.fetch ? __global__ : __globalThis__;
  		exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
  		exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
  		exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
  		exports.Headers = ctx.Headers;
  		exports.Request = ctx.Request;
  		exports.Response = ctx.Response;
  		module.exports = exports; 
  	} (browserPonyfill, browserPonyfill.exports));
  	return browserPonyfill.exports;
  }

  var browserPonyfillExports = requireBrowserPonyfill();
  var fetch$1 = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfillExports);

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$J = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class HttpProvider extends Web3BaseProvider {
      constructor(clientUrl, httpProviderOptions) {
          super();
          if (!HttpProvider.validateClientUrl(clientUrl))
              throw new InvalidClientError(clientUrl);
          this.clientUrl = clientUrl;
          this.httpProviderOptions = httpProviderOptions;
      }
      static validateClientUrl(clientUrl) {
          return typeof clientUrl === 'string' ? /^http(s)?:\/\//i.test(clientUrl) : false;
      }
      /* eslint-disable class-methods-use-this */
      getStatus() {
          throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      supportsSubscriptions() {
          return false;
      }
      request(payload, requestOptions) {
          var _a;
          return __awaiter$J(this, void 0, void 0, function* () {
              const providerOptionsCombined = Object.assign(Object.assign({}, (_a = this.httpProviderOptions) === null || _a === void 0 ? void 0 : _a.providerOptions), requestOptions);
              const response = yield fetch$1(this.clientUrl, Object.assign(Object.assign({}, providerOptionsCombined), { method: 'POST', headers: Object.assign(Object.assign({}, providerOptionsCombined.headers), { 'Content-Type': 'application/json' }), body: JSON.stringify(payload) }));
              if (!response.ok) {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                  throw new ResponseError(yield response.json(), undefined, undefined, response.status);
              }
              return (yield response.json());
          });
      }
      /* eslint-disable class-methods-use-this */
      on() {
          throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      removeListener() {
          throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      once() {
          throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      removeAllListeners() {
          throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      connect() {
          throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      disconnect() {
          throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      reset() {
          throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      reconnect() {
          throw new MethodNotImplementedError();
      }
  }

  // https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js

  var ws = null;

  if (typeof WebSocket !== 'undefined') {
    ws = WebSocket;
  } else if (typeof MozWebSocket !== 'undefined') {
    ws = MozWebSocket;
  } else if (typeof global !== 'undefined') {
    ws = global.WebSocket || global.MozWebSocket;
  } else if (typeof window !== 'undefined') {
    ws = window.WebSocket || window.MozWebSocket;
  } else if (typeof self !== 'undefined') {
    ws = self.WebSocket || self.MozWebSocket;
  }

  var WebSocket$1 = ws;

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * Use WebSocketProvider to connect to a Node using a WebSocket connection, i.e. over the `ws` or `wss` protocol.
   *
   * @example
   * ```ts
   * const provider = new WebSocketProvider(
   * 		`ws://localhost:8545`,
   * 		{
   * 			headers: {
   * 				// to provide the API key if the Node requires the key to be inside the `headers` for example:
   * 				'x-api-key': '<Api key>',
   * 			},
   * 		},
   * 		{
   * 			delay: 500,
   * 			autoReconnect: true,
   * 			maxAttempts: 10,
   * 		},
   * 	);
   * ```
   *
   * The second and the third parameters are both optional. And you can for example, the second parameter could be an empty object or undefined.
   *  * @example
   * ```ts
   * const provider = new WebSocketProvider(
   * 		`ws://localhost:8545`,
   * 		{},
   * 		{
   * 			delay: 500,
   * 			autoReconnect: true,
   * 			maxAttempts: 10,
   * 		},
   * 	);
   * ```
   */
  class WebSocketProvider extends SocketProvider {
      /**
       * This is a class used for Web Socket connections. It extends the abstract class SocketProvider {@link SocketProvider} that extends the EIP-1193 provider {@link EIP1193Provider}.
       * @param socketPath - The path to the Web Socket.
       * @param socketOptions - The options for the Web Socket client.
       * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}
       */
      // this constructor is to specify the type for `socketOptions` for a better intellisense.
      // eslint-disable-next-line no-useless-constructor
      constructor(socketPath, socketOptions, reconnectOptions) {
          super(socketPath, socketOptions, reconnectOptions);
      }
      // eslint-disable-next-line class-methods-use-this
      _validateProviderPath(providerUrl) {
          return typeof providerUrl === 'string' ? /^ws(s)?:\/\//i.test(providerUrl) : false;
      }
      getStatus() {
          if (this._socketConnection && !isNullish(this._socketConnection)) {
              switch (this._socketConnection.readyState) {
                  case this._socketConnection.CONNECTING: {
                      return 'connecting';
                  }
                  case this._socketConnection.OPEN: {
                      return 'connected';
                  }
                  default: {
                      return 'disconnected';
                  }
              }
          }
          return 'disconnected';
      }
      _openSocketConnection() {
          this._socketConnection = new WebSocket$1(this._socketPath, undefined, this._socketOptions && Object.keys(this._socketOptions).length === 0
              ? undefined
              : this._socketOptions);
      }
      _closeSocketConnection(code, data) {
          var _a;
          (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.close(code, data);
      }
      _sendToSocket(payload) {
          var _a;
          if (this.getStatus() === 'disconnected') {
              throw new ConnectionNotOpenError();
          }
          (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(payload));
      }
      _parseResponses(event) {
          return this.chunkResponseParser.parseResponse(event.data);
      }
      _addSocketListeners() {
          var _a, _b, _c, _d;
          (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.addEventListener('open', this._onOpenHandler);
          (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.addEventListener('message', this._onMessageHandler);
          (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.addEventListener('close', e => this._onCloseHandler(e));
          (_d = this._socketConnection) === null || _d === void 0 ? void 0 : _d.addEventListener('error', this._onErrorHandler);
      }
      _removeSocketListeners() {
          var _a, _b, _c;
          (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.removeEventListener('message', this._onMessageHandler);
          (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.removeEventListener('open', this._onOpenHandler);
          (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.removeEventListener('close', this._onCloseHandler);
          // note: we intentionally keep the error event listener to be able to emit it in case an error happens when closing the connection
      }
      _onCloseEvent(event) {
          var _a;
          if (this._reconnectOptions.autoReconnect &&
              (![1000, 1001].includes(event.code) || !event.wasClean)) {
              this._reconnect();
              return;
          }
          this._clearQueues(event);
          this._removeSocketListeners();
          this._onDisconnect(event.code, event.reason);
          // disconnect was successful and can safely remove error listener
          (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.removeEventListener('error', this._onErrorHandler);
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isWeb3Provider$1 = (provider) => Web3BaseProvider.isWeb3Provider(provider);
  const isLegacyRequestProvider$1 = (provider) => typeof provider !== 'string' &&
      'request' in provider &&
      provider.request.constructor.name === 'Function';
  const isEIP1193Provider$1 = (provider) => typeof provider !== 'string' &&
      'request' in provider &&
      provider.request.constructor.name === 'AsyncFunction';
  const isLegacySendProvider$1 = (provider) => typeof provider !== 'string' && 'send' in provider;
  const isLegacySendAsyncProvider$1 = (provider) => typeof provider !== 'string' && 'sendAsync' in provider;
  const isSupportedProvider$1 = (provider) => provider &&
      (isWeb3Provider$1(provider) ||
          isEIP1193Provider$1(provider) ||
          isLegacyRequestProvider$1(provider) ||
          isLegacySendAsyncProvider$1(provider) ||
          isLegacySendProvider$1(provider));
  const isSupportSubscriptions$1 = (provider) => {
      if (provider && 'supportsSubscriptions' in provider) {
          return provider.supportsSubscriptions();
      }
      if (provider && typeof provider !== 'string' && 'on' in provider) {
          return true;
      }
      return false;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$I = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var Web3RequestManagerEvent$1;
  (function (Web3RequestManagerEvent) {
      Web3RequestManagerEvent["PROVIDER_CHANGED"] = "PROVIDER_CHANGED";
      Web3RequestManagerEvent["BEFORE_PROVIDER_CHANGE"] = "BEFORE_PROVIDER_CHANGE";
  })(Web3RequestManagerEvent$1 || (Web3RequestManagerEvent$1 = {}));
  const availableProviders$1 = {
      HttpProvider: HttpProvider,
      WebsocketProvider: WebSocketProvider,
  };
  let Web3RequestManager$1 = class Web3RequestManager extends Web3EventEmitter$1 {
      constructor(provider, useRpcCallSpecification, requestManagerMiddleware) {
          super();
          if (!isNullish(provider)) {
              this.setProvider(provider);
          }
          this.useRpcCallSpecification = useRpcCallSpecification;
          if (!isNullish(requestManagerMiddleware))
              this.middleware = requestManagerMiddleware;
      }
      /**
       * Will return all available providers
       */
      static get providers() {
          return availableProviders$1;
      }
      /**
       * Will return the current provider.
       *
       * @returns Returns the current provider
       */
      get provider() {
          return this._provider;
      }
      /**
       * Will return all available providers
       */
      // eslint-disable-next-line class-methods-use-this
      get providers() {
          return availableProviders$1;
      }
      /**
       * Use to set provider. Provider can be a provider instance or a string.
       *
       * @param provider - The provider to set
       */
      setProvider(provider) {
          let newProvider;
          // autodetect provider
          if (provider && typeof provider === 'string' && this.providers) {
              // HTTP
              if (/^http(s)?:\/\//i.test(provider)) {
                  newProvider = new this.providers.HttpProvider(provider);
                  // WS
              }
              else if (/^ws(s)?:\/\//i.test(provider)) {
                  newProvider = new this.providers.WebsocketProvider(provider);
              }
              else {
                  throw new ProviderError(`Can't autodetect provider for "${provider}"`);
              }
          }
          else if (isNullish(provider)) {
              // In case want to unset the provider
              newProvider = undefined;
          }
          else {
              newProvider = provider;
          }
          this.emit(Web3RequestManagerEvent$1.BEFORE_PROVIDER_CHANGE, this._provider);
          this._provider = newProvider;
          this.emit(Web3RequestManagerEvent$1.PROVIDER_CHANGED, this._provider);
          return true;
      }
      setMiddleware(requestManagerMiddleware) {
          this.middleware = requestManagerMiddleware;
      }
      /**
       *
       * Will execute a request
       *
       * @param request - {@link Web3APIRequest} The request to send
       *
       * @returns The response of the request {@link ResponseType}. If there is error
       * in the response, will throw an error
       */
      send(request) {
          return __awaiter$I(this, void 0, void 0, function* () {
              const requestObj = Object.assign({}, request);
              let response = yield this._sendRequest(requestObj);
              if (!isNullish(this.middleware))
                  response = yield this.middleware.processResponse(response);
              if (isResponseWithResult(response)) {
                  return response.result;
              }
              throw new ResponseError(response);
          });
      }
      /**
       * Same as send, but, will execute a batch of requests
       *
       * @param request {@link JsonRpcBatchRequest} The batch request to send
       */
      sendBatch(request) {
          return __awaiter$I(this, void 0, void 0, function* () {
              const response = yield this._sendRequest(request);
              return response;
          });
      }
      _sendRequest(request) {
          return __awaiter$I(this, void 0, void 0, function* () {
              const { provider } = this;
              if (isNullish(provider)) {
                  throw new ProviderError('Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.');
              }
              let payload = (isBatchRequest(request)
                  ? toBatchPayload(request)
                  : toPayload(request));
              if (!isNullish(this.middleware)) {
                  payload = yield this.middleware.processRequest(payload);
              }
              if (isWeb3Provider$1(provider)) {
                  let response;
                  try {
                      response = yield provider.request(payload);
                  }
                  catch (error) {
                      // Check if the provider throw an error instead of reject with error
                      response = error;
                  }
                  return this._processJsonRpcResponse(payload, response, { legacy: false, error: false });
              }
              if (isEIP1193Provider$1(provider)) {
                  return provider
                      .request(payload)
                      .then(res => this._processJsonRpcResponse(payload, res, {
                      legacy: true,
                      error: false,
                  }))
                      .catch(error => this._processJsonRpcResponse(payload, error, { legacy: true, error: true }));
              }
              // TODO: This could be deprecated and removed.
              if (isLegacyRequestProvider$1(provider)) {
                  return new Promise((resolve, reject) => {
                      const rejectWithError = (err) => {
                          reject(this._processJsonRpcResponse(payload, err, {
                              legacy: true,
                              error: true,
                          }));
                      };
                      const resolveWithResponse = (response) => resolve(this._processJsonRpcResponse(payload, response, {
                          legacy: true,
                          error: false,
                      }));
                      const result = provider.request(payload, 
                      // a callback that is expected to be called after getting the response:
                      (err, response) => {
                          if (err) {
                              return rejectWithError(err);
                          }
                          return resolveWithResponse(response);
                      });
                      // Some providers, that follow a previous drafted version of EIP1193, has a `request` function
                      //	that is not defined as `async`, but it returns a promise.
                      // Such providers would not be picked with if(isEIP1193Provider(provider)) above
                      //	because the `request` function was not defined with `async` and so the function definition is not `AsyncFunction`.
                      // Like this provider: https://github.dev/NomicFoundation/hardhat/blob/62bea2600785595ba36f2105564076cf5cdf0fd8/packages/hardhat-core/src/internal/core/providers/backwards-compatibility.ts#L19
                      // So check if the returned result is a Promise, and resolve with it accordingly.
                      // Note: in this case we expect the callback provided above to never be called.
                      if (isPromise(result)) {
                          const responsePromise = result;
                          responsePromise.then(resolveWithResponse).catch(error => {
                              try {
                                  // Attempt to process the error response
                                  const processedError = this._processJsonRpcResponse(payload, error, { legacy: true, error: true });
                                  reject(processedError);
                              }
                              catch (processingError) {
                                  // Catch any errors that occur during the error processing
                                  reject(processingError);
                              }
                          });
                      }
                  });
              }
              // TODO: This could be deprecated and removed.
              if (isLegacySendProvider$1(provider)) {
                  return new Promise((resolve, reject) => {
                      provider.send(payload, (err, response) => {
                          if (err) {
                              return reject(this._processJsonRpcResponse(payload, err, {
                                  legacy: true,
                                  error: true,
                              }));
                          }
                          if (isNullish(response)) {
                              throw new ResponseError({}, 'Got a "nullish" response from provider.');
                          }
                          return resolve(this._processJsonRpcResponse(payload, response, {
                              legacy: true,
                              error: false,
                          }));
                      });
                  });
              }
              // TODO: This could be deprecated and removed.
              if (isLegacySendAsyncProvider$1(provider)) {
                  return provider
                      .sendAsync(payload)
                      .then(response => this._processJsonRpcResponse(payload, response, { legacy: true, error: false }))
                      .catch(error => this._processJsonRpcResponse(payload, error, {
                      legacy: true,
                      error: true,
                  }));
              }
              throw new ProviderError('Provider does not have a request or send method to use.');
          });
      }
      // eslint-disable-next-line class-methods-use-this
      _processJsonRpcResponse(payload, response, { legacy, error }) {
          if (isNullish(response)) {
              return this._buildResponse(payload, 
              // Some providers uses "null" as valid empty response
              // eslint-disable-next-line no-null/no-null
              null, error);
          }
          // This is the majority of the cases so check these first
          // A valid JSON-RPC response with error object
          if (isResponseWithError(response)) {
              // check if its an rpc error
              if (this.useRpcCallSpecification &&
                  isResponseRpcError(response)) {
                  const rpcErrorResponse = response;
                  // check if rpc error flag is on and response error code match an EIP-1474 or a standard rpc error code
                  if (rpcErrorsMap.get(rpcErrorResponse.error.code)) {
                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                      const Err = rpcErrorsMap.get(rpcErrorResponse.error.code).error;
                      throw new Err(rpcErrorResponse);
                  }
                  else {
                      throw new RpcError(rpcErrorResponse);
                  }
              }
              else if (!Web3RequestManager._isReverted(response)) {
                  throw new InvalidResponseError(response, payload);
              }
          }
          // This is the majority of the cases so check these first
          // A valid JSON-RPC response with result object
          if (isResponseWithResult(response)) {
              return response;
          }
          if (response instanceof Error) {
              Web3RequestManager._isReverted(response);
              throw response;
          }
          if (!legacy && isBatchRequest(payload) && isBatchResponse(response)) {
              return response;
          }
          if (legacy && !error && isBatchRequest(payload)) {
              return response;
          }
          if (legacy && error && isBatchRequest(payload)) {
              // In case of error batch response we don't want to throw Invalid response
              throw response;
          }
          if (legacy &&
              !isResponseWithError(response) &&
              !isResponseWithResult(response)) {
              return this._buildResponse(payload, response, error);
          }
          if (isBatchRequest(payload) && !Array.isArray(response)) {
              throw new ResponseError(response, 'Got normal response for a batch request.');
          }
          if (!isBatchRequest(payload) && Array.isArray(response)) {
              throw new ResponseError(response, 'Got batch response for a normal request.');
          }
          throw new ResponseError(response, 'Invalid response');
      }
      static _isReverted(response) {
          let error;
          if (isResponseWithError(response)) {
              error = response.error;
          }
          else if (response instanceof Error) {
              error = response;
          }
          // This message means that there was an error while executing the code of the smart contract
          // However, more processing will happen at a higher level to decode the error data,
          //	according to the Error ABI, if it was available as of EIP-838.
          if (error === null || error === void 0 ? void 0 : error.message.includes('revert'))
              throw new ContractExecutionError(error);
          return false;
      }
      // Need to use same types as _processJsonRpcResponse so have to declare as instance method
      // eslint-disable-next-line class-methods-use-this
      _buildResponse(payload, response, error) {
          const res = {
              jsonrpc: '2.0',
              // eslint-disable-next-line no-nested-ternary
              id: isBatchRequest(payload)
                  ? payload[0].id
                  : 'id' in payload
                      ? payload.id
                      : // Have to use the null here explicitly
                          // eslint-disable-next-line no-null/no-null
                          null,
          };
          if (error) {
              return Object.assign(Object.assign({}, res), { error: response });
          }
          return Object.assign(Object.assign({}, res), { result: response });
      }
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$H = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  let Web3SubscriptionManager$1 = class Web3SubscriptionManager {
      constructor(requestManager, registeredSubscriptions, tolerateUnlinkedSubscription = false) {
          this.requestManager = requestManager;
          this.registeredSubscriptions = registeredSubscriptions;
          this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;
          this._subscriptions = new Map();
          this.requestManager.on(Web3RequestManagerEvent$1.BEFORE_PROVIDER_CHANGE, () => __awaiter$H(this, void 0, void 0, function* () {
              yield this.unsubscribe();
          }));
          this.requestManager.on(Web3RequestManagerEvent$1.PROVIDER_CHANGED, () => {
              this.clear();
              this.listenToProviderEvents();
          });
          this.listenToProviderEvents();
      }
      listenToProviderEvents() {
          const providerAsWebProvider = this.requestManager.provider;
          if (!this.requestManager.provider ||
              (typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === 'function' &&
                  !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions()))) {
              return;
          }
          if (typeof this.requestManager.provider.on === 'function') {
              if (typeof this.requestManager.provider.request === 'function') {
                  // Listen to provider messages and data
                  this.requestManager.provider.on('message', 
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument
                  (message) => this.messageListener(message));
              }
              else {
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument
                  providerAsWebProvider.on('data', (data) => this.messageListener(data));
              }
          }
      }
      messageListener(data) {
          var _a, _b, _c;
          if (!data) {
              throw new SubscriptionError('Should not call messageListener with no data. Type was');
          }
          const subscriptionId = ((_a = data.params) === null || _a === void 0 ? void 0 : _a.subscription) ||
              ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) ||
              ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16));
          // Process if the received data is related to a subscription
          if (subscriptionId) {
              const sub = this._subscriptions.get(subscriptionId);
              sub === null || sub === void 0 ? void 0 : sub.processSubscriptionData(data);
          }
      }
      /**
       * Will create a new subscription
       *
       * @param name - The subscription you want to subscribe to
       * @param args - Optional additional parameters, depending on the subscription type
       * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       *
       * Will subscribe to a specific topic (note: name)
       * @returns The subscription object
       */
      subscribe(name_1, args_1) {
          return __awaiter$H(this, arguments, void 0, function* (name, args, returnFormat = DEFAULT_RETURN_FORMAT) {
              const Klass = this.registeredSubscriptions[name];
              if (!Klass) {
                  throw new SubscriptionError('Invalid subscription type');
              }
              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
              const subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {
                  subscriptionManager: this,
                  returnFormat,
                  // eslint.disable-next-line @typescript-eslint/no-unsafe-any
              });
              yield this.addSubscription(subscription);
              return subscription;
          });
      }
      /**
       * Will returns all subscriptions.
       */
      get subscriptions() {
          return this._subscriptions;
      }
      /**
       *
       * Adds an instance of {@link Web3Subscription} and subscribes to it
       *
       * @param sub - A {@link Web3Subscription} object
       */
      addSubscription(sub) {
          return __awaiter$H(this, void 0, void 0, function* () {
              if (!this.requestManager.provider) {
                  throw new ProviderError('Provider not available');
              }
              if (!this.supportsSubscriptions()) {
                  throw new SubscriptionError('The current provider does not support subscriptions');
              }
              if (sub.id && this._subscriptions.has(sub.id)) {
                  throw new SubscriptionError(`Subscription with id "${sub.id}" already exists`);
              }
              yield sub.sendSubscriptionRequest();
              if (isNullish(sub.id)) {
                  throw new SubscriptionError('Subscription is not subscribed yet.');
              }
              this._subscriptions.set(sub.id, sub);
              return sub.id;
          });
      }
      /**
       * Will clear a subscription
       *
       * @param id - The subscription of type {@link Web3Subscription}  to remove
       */
      removeSubscription(sub) {
          return __awaiter$H(this, void 0, void 0, function* () {
              const { id } = sub;
              if (isNullish(id)) {
                  throw new SubscriptionError('Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.');
              }
              if (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {
                  throw new SubscriptionError(`Subscription with id "${id.toString()}" does not exists`);
              }
              yield sub.sendUnsubscribeRequest();
              this._subscriptions.delete(id);
              return id;
          });
      }
      /**
       * Will unsubscribe all subscriptions that fulfill the condition
       *
       * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`
       * @returns An array of all the un-subscribed subscriptions
       */
      unsubscribe(condition) {
          return __awaiter$H(this, void 0, void 0, function* () {
              const result = [];
              for (const [id, sub] of this.subscriptions.entries()) {
                  if (!condition || (typeof condition === 'function' && condition({ id, sub }))) {
                      result.push(this.removeSubscription(sub));
                  }
              }
              return Promise.all(result);
          });
      }
      /**
       * Clears all subscriptions
       */
      clear() {
          this._subscriptions.clear();
      }
      /**
       * Check whether the current provider supports subscriptions.
       *
       * @returns `true` or `false` depending on if the current provider supports subscriptions
       */
      supportsSubscriptions() {
          return isNullish(this.requestManager.provider)
              ? false
              : isSupportSubscriptions$1(this.requestManager.provider);
      }
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$G = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  let Web3Subscription$1 = class Web3Subscription extends Web3EventEmitter$1 {
      constructor(args, options) {
          var _a;
          super();
          this.args = args;
          const { requestManager } = options;
          const { subscriptionManager } = options;
          if (requestManager) {
              // eslint-disable-next-line deprecation/deprecation
              this._subscriptionManager = new Web3SubscriptionManager$1(requestManager, {}, true);
          }
          else {
              this._subscriptionManager = subscriptionManager;
          }
          this._returnFormat = (_a = options === null || options === void 0 ? void 0 : options.returnFormat) !== null && _a !== void 0 ? _a : DEFAULT_RETURN_FORMAT;
      }
      get id() {
          return this._id;
      }
      get lastBlock() {
          return this._lastBlock;
      }
      subscribe() {
          return __awaiter$G(this, void 0, void 0, function* () {
              return this._subscriptionManager.addSubscription(this);
          });
      }
      processSubscriptionData(data) {
          var _a, _b;
          if (data === null || data === void 0 ? void 0 : data.data) {
              // for EIP-1193 provider
              this._processSubscriptionResult((_b = (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.result) !== null && _b !== void 0 ? _b : data === null || data === void 0 ? void 0 : data.data);
          }
          else if (data &&
              isResponseWithNotification(data)) {
              this._processSubscriptionResult(data === null || data === void 0 ? void 0 : data.params.result);
          }
      }
      sendSubscriptionRequest() {
          return __awaiter$G(this, void 0, void 0, function* () {
              this._id = yield this._subscriptionManager.requestManager.send({
                  method: 'eth_subscribe',
                  params: this._buildSubscriptionParams(),
              });
              this.emit('connected', this._id);
              return this._id;
          });
      }
      get returnFormat() {
          return this._returnFormat;
      }
      get subscriptionManager() {
          return this._subscriptionManager;
      }
      resubscribe() {
          return __awaiter$G(this, void 0, void 0, function* () {
              yield this.unsubscribe();
              yield this.subscribe();
          });
      }
      unsubscribe() {
          return __awaiter$G(this, void 0, void 0, function* () {
              if (!this.id) {
                  return;
              }
              yield this._subscriptionManager.removeSubscription(this);
          });
      }
      sendUnsubscribeRequest() {
          return __awaiter$G(this, void 0, void 0, function* () {
              yield this._subscriptionManager.requestManager.send({
                  method: 'eth_unsubscribe',
                  params: [this.id],
              });
              this._id = undefined;
          });
      }
      // eslint-disable-next-line class-methods-use-this
      formatSubscriptionResult(data) {
          return data;
      }
      _processSubscriptionResult(data) {
          this.emit('data', this.formatSubscriptionResult(data));
      }
      _processSubscriptionError(error) {
          this.emit('error', error);
      }
      // eslint-disable-next-line class-methods-use-this
      _buildSubscriptionParams() {
          // This should be overridden in the subclass
          throw new Error('Implement in the child class');
      }
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$F = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * Wallet is an in memory `wallet` that can hold multiple accounts.
   * These accounts can be used when using web3.eth.sendTransaction() or web3.eth.contract.methods.contractfunction().send();
   *
   * For using Wallet functionality, install Web3 package using `npm i web3` or `yarn add web3`.
   * After that, Wallet functionality will be available as mentioned below.
   *
   * ```ts
   * import { Web3 } from 'web3';
   * const web3 = new Web3('http://127.0.0.1:7545');
   *
   * const wallet = await web3.eth.accounts.wallet.create(2);
   *
   * const signature = wallet.at(0).sign("Test Data"); // use wallet
   *
   * // fund account before sending following transaction ...
   *
   * const receipt = await web3.eth.sendTransaction({ // internally sign transaction using wallet
   *    from: wallet.at(0).address,
   *    to: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
   *    value: 1
   *    //....
   * });
   * ```
   */
  class Wallet extends Web3BaseWallet {
      constructor() {
          super(...arguments);
          this._addressMap = new Map();
          this._defaultKeyName = 'web3js_wallet';
      }
      /**
       * Get the storage object of the browser
       *
       * @returns the storage
       */
      static getStorage() {
          let storage;
          try {
              storage = window.localStorage;
              const x = '__storage_test__';
              storage.setItem(x, x);
              storage.removeItem(x);
              return storage;
          }
          catch (e) {
              return e &&
                  // everything except Firefox
                  (e.code === 22 ||
                      // Firefox
                      e.code === 1014 ||
                      // test name field too, because code might not be present
                      // everything except Firefox
                      e.name === 'QuotaExceededError' ||
                      // Firefox
                      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
                  // acknowledge QuotaExceededError only if there's something already stored
                  !isNullish$1(storage) &&
                  storage.length !== 0
                  ? storage
                  : undefined;
          }
      }
      /**
       * Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.
       *
       * @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.
       * @returns The wallet
       * ```ts
       * web3.eth.accounts.wallet.create(2)
       * > Wallet(2) [
       *   {
       *     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',
       *     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',
       *     signTransaction: [Function: signTransaction],
       *     sign: [Function: sign],
       *     encrypt: [Function: encrypt]
       *   },
       *   {
       *     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',
       *     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',
       *     signTransaction: [Function: signTransaction],
       *     sign: [Function: sign],
       *     encrypt: [Function: encrypt]
       *   },
       *   _accountProvider: {
       *     create: [Function: create],
       *     privateKeyToAccount: [Function: privateKeyToAccount],
       *     decrypt: [Function: decrypt]
       *   },
       *   _addressMap: Map(2) {
       *     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,
       *     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1
       *   },
       *   _defaultKeyName: 'web3js_wallet'
       * ]
       *
       * ```
       */
      create(numberOfAccounts) {
          for (let i = 0; i < numberOfAccounts; i += 1) {
              this.add(this._accountProvider.create());
          }
          return this;
      }
      /**
       * Adds an account using a private key or account object to the wallet.
       *
       * @param account - A private key or account object
       * @returns The wallet
       *
       * ```ts
       * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');
       * > Wallet(1) [
       *   {
       *     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',
       *     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',
       *     signTransaction: [Function: signTransaction],
       *     sign: [Function: sign],
       *     encrypt: [Function: encrypt]
       *   },
       *   _accountProvider: {
       *     create: [Function: create],
       *     privateKeyToAccount: [Function: privateKeyToAccount],
       *     decrypt: [Function: decrypt]
       *   },
       *   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },
       *   _defaultKeyName: 'web3js_wallet'
       * ]
       * ```
       */
      add(account) {
          var _a;
          if (typeof account === 'string') {
              return this.add(this._accountProvider.privateKeyToAccount(account));
          }
          let index = this.length;
          const existAccount = this.get(account.address);
          if (existAccount) {
              console.warn(`Account ${account.address.toLowerCase()} already exists.`);
              index = (_a = this._addressMap.get(account.address.toLowerCase())) !== null && _a !== void 0 ? _a : index;
          }
          this._addressMap.set(account.address.toLowerCase(), index);
          this[index] = account;
          return this;
      }
      /**
       * Get the account of the wallet with either the index or public address.
       *
       * @param addressOrIndex - A string of the address or number index within the wallet.
       * @returns The account object or undefined if the account doesn't exist
       */
      get(addressOrIndex) {
          if (typeof addressOrIndex === 'string') {
              const index = this._addressMap.get(addressOrIndex.toLowerCase());
              if (!isNullish$1(index)) {
                  return this[index];
              }
              return undefined;
          }
          return this[addressOrIndex];
      }
      /**
       * Removes an account from the wallet.
       *
       * @param addressOrIndex - The account address, or index in the wallet.
       * @returns true if the wallet was removed. false if it couldn't be found.
       * ```ts
       * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');
       *
       * web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');
       * > true
       * web3.eth.accounts.wallet
       * > Wallet(0) [
       * _accountProvider: {
       *   create: [Function: create],
       *   privateKeyToAccount: [Function: privateKeyToAccount],
       *   decrypt: [Function: decrypt]
       * },
       * _addressMap: Map(0) {},
       * _defaultKeyName: 'web3js_wallet'
       * ]
       * ```
       */
      remove(addressOrIndex) {
          if (typeof addressOrIndex === 'string') {
              const index = this._addressMap.get(addressOrIndex.toLowerCase());
              if (isNullish$1(index)) {
                  return false;
              }
              this._addressMap.delete(addressOrIndex.toLowerCase());
              this.splice(index, 1);
              return true;
          }
          if (this[addressOrIndex]) {
              this.splice(addressOrIndex, 1);
              return true;
          }
          return false;
      }
      /**
       * Securely empties the wallet and removes all its accounts.
       * Use this with *caution as it will remove all accounts stored in local wallet.
       *
       * @returns The wallet object
       * ```ts
       *
       * web3.eth.accounts.wallet.clear();
       * > Wallet(0) [
       * _accountProvider: {
       *   create: [Function: create],
       *   privateKeyToAccount: [Function: privateKeyToAccount],
       *   decrypt: [Function: decrypt]
       * },
       * _addressMap: Map(0) {},
       * _defaultKeyName: 'web3js_wallet'
       * ]
       * ```
       */
      clear() {
          this._addressMap.clear();
          // Setting length clears the Array in JS.
          this.length = 0;
          return this;
      }
      /**
       * Encrypts all wallet accounts to an array of encrypted keystore v3 objects.
       *
       * @param password - The password which will be used for encryption
       * @param options - encryption options
       * @returns An array of the encrypted keystore v3.
       *
       * ```ts
       * web3.eth.accounts.wallet.create(1)
       * web3.eth.accounts.wallet.encrypt("abc").then(console.log);
       * > [
       * '{"version":3,"id":"fa46e213-a7c3-4844-b903-dd14d39cc7db",
       * "address":"fa3e41a401609103c241431cbdee8623ae2a321a","crypto":
       * {"ciphertext":"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c",
       * "cipherparams":{"iv":"acc888c6cf4a19b86846cef0185a7164"},"cipher":"aes-128-ctr",
       * "kdf":"scrypt","kdfparams":{"n":8192,"r":8,"p":1,"dklen":32,"salt":"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae"},
       * "mac":"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57"}}'
       * ]
       * ```
       */
      encrypt(password, options) {
          return __awaiter$F(this, void 0, void 0, function* () {
              return Promise.all(this.map((account) => __awaiter$F(this, void 0, void 0, function* () { return account.encrypt(password, options); })));
          });
      }
      /**
       * Decrypts keystore v3 objects.
       *
       * @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt
       * @param password - The password to encrypt with
       * @param options - decrypt options for the wallets
       * @returns The decrypted wallet object
       *
       * ```ts
       * web3.eth.accounts.wallet.decrypt([
       * { version: 3,
       * id: '83191a81-aaca-451f-b63d-0c5f3b849289',
       * address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',
       * crypto:
       * { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',
       *   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },
       *   cipher: 'aes-128-ctr',
       *   kdf: 'scrypt',
       *   kdfparams:
       *    { dklen: 32,
       *      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',
       *      n: 262144,
       *      r: 8,
       *      p: 1 },
       *   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },
       * { version: 3,
       * id: '7d6b91fa-3611-407b-b16b-396efb28f97e',
       * address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',
       * crypto:
       * { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',
       *   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },
       *   cipher: 'aes-128-ctr',
       *   kdf: 'scrypt',
       *   kdfparams:
       *    { dklen: 32,
       *      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',
       *      n: 262144,
       *      r: 8,
       *      p: 1 },
       *   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }
       * ], 'test').then(console.log)
       * > Wallet {
       *   _accountProvider: {
       *     create: [Function: create],
       *     privateKeyToAccount: [Function: privateKeyToAccount],
       *     decrypt: [Function: decrypt]
       *   },
       *   _defaultKeyName: 'web3js_wallet',
       *   _accounts: {
       *     '0x85d70633b90e03e0276b98880286d0d055685ed7': {
       *       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',
       *       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',
       *       signTransaction: [Function: signTransaction],
       *       sign: [Function: sign],
       *       encrypt: [Function: encrypt]
       *     },
       *     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {
       *       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',
       *       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',
       *       signTransaction: [Function: signTransaction],
       *       sign: [Function: sign],
       *       encrypt: [Function: encrypt]
       *     },
       *     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {
       *       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',
       *       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',
       *       signTransaction: [Function: signTransaction],
       *       sign: [Function: sign],
       *       encrypt: [Function: encrypt]
       *     }
       *   }
       * }
       * ```
       */
      decrypt(encryptedWallets, password, options) {
          return __awaiter$F(this, void 0, void 0, function* () {
              const results = yield Promise.all(encryptedWallets.map((wallet) => __awaiter$F(this, void 0, void 0, function* () { return this._accountProvider.decrypt(wallet, password, options); })));
              for (const res of results) {
                  this.add(res);
              }
              return this;
          });
      }
      /**
       * Stores the wallet encrypted and as string in local storage.
       * **__NOTE:__** Browser only
       *
       * @param password - The password to encrypt the wallet
       * @param keyName - (optional) The key used for the local storage position, defaults to `"web3js_wallet"`.
       * @returns Will return boolean value true if saved properly
       * ```ts
       * web3.eth.accounts.wallet.save('test#!$');
       * >true
       * ```
       */
      save(password, keyName) {
          return __awaiter$F(this, void 0, void 0, function* () {
              const storage = Wallet.getStorage();
              if (!storage) {
                  throw new Error('Local storage not available.');
              }
              storage.setItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName, JSON.stringify(yield this.encrypt(password)));
              return true;
          });
      }
      /**
       * Loads a wallet from local storage and decrypts it.
       * **__NOTE:__** Browser only
       *
       * @param password - The password to decrypt the wallet.
       * @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet"`
       * @returns Returns the wallet object
       *
       * ```ts
       * web3.eth.accounts.wallet.save('test#!$');
       * > true
       * web3.eth.accounts.wallet.load('test#!$');
       * { defaultKeyName: "web3js_wallet",
       *   length: 0,
       *   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},
       *   [[Prototype]]: Object
       * }
       * ```
       */
      load(password, keyName) {
          return __awaiter$F(this, void 0, void 0, function* () {
              const storage = Wallet.getStorage();
              if (!storage) {
                  throw new Error('Local storage not available.');
              }
              const keystore = storage.getItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName);
              if (keystore) {
                  yield this.decrypt(JSON.parse(keystore) || [], password);
              }
              return this;
          });
      }
  }

  const crypto = { web: crypto$1 };
  function validateOpt(key, iv, mode) {
      if (!mode.startsWith("aes-")) {
          throw new Error(`AES submodule doesn't support mode ${mode}`);
      }
      if (iv.length !== 16) {
          throw new Error("AES: wrong IV length");
      }
      if ((mode.startsWith("aes-128") && key.length !== 16) ||
          (mode.startsWith("aes-256") && key.length !== 32)) {
          throw new Error("AES: wrong key length");
      }
  }
  async function getBrowserKey(mode, key, iv) {
      if (!crypto.web) {
          throw new Error("Browser crypto not available.");
      }
      let keyMode;
      if (["aes-128-cbc", "aes-256-cbc"].includes(mode)) {
          keyMode = "cbc";
      }
      if (["aes-128-ctr", "aes-256-ctr"].includes(mode)) {
          keyMode = "ctr";
      }
      if (!keyMode) {
          throw new Error("AES: unsupported mode");
      }
      const wKey = await crypto.web.subtle.importKey("raw", key, { name: `AES-${keyMode.toUpperCase()}`, length: key.length * 8 }, true, ["encrypt", "decrypt"]);
      // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit
      // recommended by NIST SP800-38A
      return [wKey, { name: `aes-${keyMode}`, iv, counter: iv, length: 128 }];
  }
  async function encrypt$1(msg, key, iv, mode = "aes-128-ctr", pkcs7PaddingEnabled = true) {
      validateOpt(key, iv, mode);
      if (crypto.web) {
          const [wKey, wOpt] = await getBrowserKey(mode, key, iv);
          const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);
          // Remove PKCS7 padding on cbc mode by stripping end of message
          let res = new Uint8Array(cipher);
          if (!pkcs7PaddingEnabled && wOpt.name === "aes-cbc" && !(msg.length % 16)) {
              res = res.slice(0, -16);
          }
          return res;
      }
      else if (crypto.node) {
          const cipher = crypto.node.createCipheriv(mode, key, iv);
          cipher.setAutoPadding(pkcs7PaddingEnabled);
          return concatBytes$1(cipher.update(msg), cipher.final());
      }
      else {
          throw new Error("The environment doesn't have AES module");
      }
  }
  async function getPadding(cypherText, key, iv, mode) {
      const lastBlock = cypherText.slice(-16);
      for (let i = 0; i < 16; i++) {
          // Undo xor of iv and fill with lastBlock ^ padding (16)
          lastBlock[i] ^= iv[i] ^ 16;
      }
      const res = await encrypt$1(lastBlock, key, iv, mode);
      return res.slice(0, 16);
  }
  async function decrypt$1(cypherText, key, iv, mode = "aes-128-ctr", pkcs7PaddingEnabled = true) {
      validateOpt(key, iv, mode);
      if (crypto.web) {
          const [wKey, wOpt] = await getBrowserKey(mode, key, iv);
          // Add empty padding so Chrome will correctly decrypt message
          if (!pkcs7PaddingEnabled && wOpt.name === "aes-cbc") {
              const padding = await getPadding(cypherText, key, iv, mode);
              cypherText = concatBytes$1(cypherText, padding);
          }
          const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);
          const msgBytes = new Uint8Array(msg);
          // Safari always ignores padding (if no padding -> broken message)
          if (wOpt.name === "aes-cbc") {
              const encrypted = await encrypt$1(msgBytes, key, iv, mode);
              if (!equalsBytes(encrypted, cypherText)) {
                  throw new Error("AES: wrong padding");
              }
          }
          return msgBytes;
      }
      else if (crypto.node) {
          const decipher = crypto.node.createDecipheriv(mode, key, iv);
          decipher.setAutoPadding(pkcs7PaddingEnabled);
          return concatBytes$1(decipher.update(cypherText), decipher.final());
      }
      else {
          throw new Error("The environment doesn't have AES module");
      }
  }

  // HMAC (RFC 2104)
  class HMAC extends Hash {
      constructor(hash$1, _key) {
          super();
          this.finished = false;
          this.destroyed = false;
          hash(hash$1);
          const key = toBytes(_key);
          this.iHash = hash$1.create();
          if (typeof this.iHash.update !== 'function')
              throw new Error('Expected instance of class which extends utils.Hash');
          this.blockLen = this.iHash.blockLen;
          this.outputLen = this.iHash.outputLen;
          const blockLen = this.blockLen;
          const pad = new Uint8Array(blockLen);
          // blockLen can be bigger than outputLen
          pad.set(key.length > blockLen ? hash$1.create().update(key).digest() : key);
          for (let i = 0; i < pad.length; i++)
              pad[i] ^= 0x36;
          this.iHash.update(pad);
          // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
          this.oHash = hash$1.create();
          // Undo internal XOR && apply outer XOR
          for (let i = 0; i < pad.length; i++)
              pad[i] ^= 0x36 ^ 0x5c;
          this.oHash.update(pad);
          pad.fill(0);
      }
      update(buf) {
          exists(this);
          this.iHash.update(buf);
          return this;
      }
      digestInto(out) {
          exists(this);
          bytes(out, this.outputLen);
          this.finished = true;
          this.iHash.digestInto(out);
          this.oHash.update(out);
          this.oHash.digestInto(out);
          this.destroy();
      }
      digest() {
          const out = new Uint8Array(this.oHash.outputLen);
          this.digestInto(out);
          return out;
      }
      _cloneInto(to) {
          // Create new instance without calling constructor since key already in state and we don't know it.
          to || (to = Object.create(Object.getPrototypeOf(this), {}));
          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
          to = to;
          to.finished = finished;
          to.destroyed = destroyed;
          to.blockLen = blockLen;
          to.outputLen = outputLen;
          to.oHash = oHash._cloneInto(to.oHash);
          to.iHash = iHash._cloneInto(to.iHash);
          return to;
      }
      destroy() {
          this.destroyed = true;
          this.oHash.destroy();
          this.iHash.destroy();
      }
  }
  /**
   * HMAC: RFC2104 message authentication code.
   * @param hash - function that would be used e.g. sha256
   * @param key - message key
   * @param message - message data
   */
  const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
  hmac.create = (hash, key) => new HMAC(hash, key);

  // Common prologue and epilogue for sync/async functions
  function pbkdf2Init(hash$1, _password, _salt, _opts) {
      hash(hash$1);
      const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      number(c);
      number(dkLen);
      number(asyncTick);
      if (c < 1)
          throw new Error('PBKDF2: iterations (c) should be >= 1');
      const password = toBytes(_password);
      const salt = toBytes(_salt);
      // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
      const DK = new Uint8Array(dkLen);
      // U1 = PRF(Password, Salt + INT_32_BE(i))
      const PRF = hmac.create(hash$1, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
          prfW.destroy();
      u.fill(0);
      return DK;
  }
  /**
   * PBKDF2-HMAC: RFC 2898 key derivation function
   * @param hash - hash function that would be used e.g. sha256
   * @param password - password from which a derived key is generated
   * @param salt - cryptographic salt
   * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
   */
  function pbkdf2(hash, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW; // Working copy
      const arr = new Uint8Array(4);
      const view = createView(arr);
      const u = new Uint8Array(PRF.outputLen);
      // DK = T1 + T2 + ⋯ + Tdklen/hlen
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
          // Ti = F(Password, Salt, c, i)
          const Ti = DK.subarray(pos, pos + PRF.outputLen);
          view.setInt32(0, ti, false);
          // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
          // U1 = PRF(Password, Salt + INT_32_BE(i))
          (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
          Ti.set(u.subarray(0, Ti.length));
          for (let ui = 1; ui < c; ui++) {
              // Uc = PRF(Password, Uc−1)
              PRF._cloneInto(prfW).update(u).digestInto(u);
              for (let i = 0; i < Ti.length; i++)
                  Ti[i] ^= u[i];
          }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }

  // Polyfill for Safari 14
  function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === 'function')
          return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(0xffffffff);
      const wh = Number((value >> _32n) & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
  }
  // Choice: a ? b : c
  const Chi = (a, b, c) => (a & b) ^ (~a & c);
  // Majority function, true if any two inpust is true
  const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
  /**
   * Merkle-Damgard hash construction base class.
   * Could be used to create MD5, RIPEMD, SHA1, SHA2.
   */
  class HashMD extends Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
          super();
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.padOffset = padOffset;
          this.isLE = isLE;
          this.finished = false;
          this.length = 0;
          this.pos = 0;
          this.destroyed = false;
          this.buffer = new Uint8Array(blockLen);
          this.view = createView(this.buffer);
      }
      update(data) {
          exists(this);
          const { view, buffer, blockLen } = this;
          data = toBytes(data);
          const len = data.length;
          for (let pos = 0; pos < len;) {
              const take = Math.min(blockLen - this.pos, len - pos);
              // Fast path: we have at least one block in input, cast it to view and process
              if (take === blockLen) {
                  const dataView = createView(data);
                  for (; blockLen <= len - pos; pos += blockLen)
                      this.process(dataView, pos);
                  continue;
              }
              buffer.set(data.subarray(pos, pos + take), this.pos);
              this.pos += take;
              pos += take;
              if (this.pos === blockLen) {
                  this.process(view, 0);
                  this.pos = 0;
              }
          }
          this.length += data.length;
          this.roundClean();
          return this;
      }
      digestInto(out) {
          exists(this);
          output(out, this);
          this.finished = true;
          // Padding
          // We can avoid allocation of buffer for padding completely if it
          // was previously not allocated here. But it won't change performance.
          const { buffer, view, blockLen, isLE } = this;
          let { pos } = this;
          // append the bit '1' to the message
          buffer[pos++] = 0b10000000;
          this.buffer.subarray(pos).fill(0);
          // we have less than padOffset left in buffer, so we cannot put length in
          // current block, need process it and pad again
          if (this.padOffset > blockLen - pos) {
              this.process(view, 0);
              pos = 0;
          }
          // Pad until full block byte with zeros
          for (let i = pos; i < blockLen; i++)
              buffer[i] = 0;
          // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
          // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
          // So we just write lowest 64 bits of that value.
          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
          this.process(view, 0);
          const oview = createView(out);
          const len = this.outputLen;
          // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
          if (len % 4)
              throw new Error('_sha2: outputLen should be aligned to 32bit');
          const outLen = len / 4;
          const state = this.get();
          if (outLen > state.length)
              throw new Error('_sha2: outputLen bigger than state');
          for (let i = 0; i < outLen; i++)
              oview.setUint32(4 * i, state[i], isLE);
      }
      digest() {
          const { buffer, outputLen } = this;
          this.digestInto(buffer);
          const res = buffer.slice(0, outputLen);
          this.destroy();
          return res;
      }
      _cloneInto(to) {
          to || (to = new this.constructor());
          to.set(...this.get());
          const { blockLen, buffer, length, finished, destroyed, pos } = this;
          to.length = length;
          to.pos = pos;
          to.finished = finished;
          to.destroyed = destroyed;
          if (length % blockLen)
              to.buffer.set(buffer);
          return to;
      }
  }

  // SHA2-256 need to try 2^128 hashes to execute birthday attack.
  // BTC network is doing 2^67 hashes/sec as per early 2023.
  // Round constants:
  // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
  // prettier-ignore
  const SHA256_K = /* @__PURE__ */ new Uint32Array([
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ]);
  // Initial state:
  // first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19
  // prettier-ignore
  const SHA256_IV = /* @__PURE__ */ new Uint32Array([
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ]);
  // Temporary buffer, not used to store anything between runs
  // Named this way because it matches specification.
  const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
  class SHA256 extends HashMD {
      constructor() {
          super(64, 32, 8, false);
          // We cannot use array here since array allows indexing by variable
          // which means optimizer/compiler cannot use registers.
          this.A = SHA256_IV[0] | 0;
          this.B = SHA256_IV[1] | 0;
          this.C = SHA256_IV[2] | 0;
          this.D = SHA256_IV[3] | 0;
          this.E = SHA256_IV[4] | 0;
          this.F = SHA256_IV[5] | 0;
          this.G = SHA256_IV[6] | 0;
          this.H = SHA256_IV[7] | 0;
      }
      get() {
          const { A, B, C, D, E, F, G, H } = this;
          return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
          this.F = F | 0;
          this.G = G | 0;
          this.H = H | 0;
      }
      process(view, offset) {
          // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
          for (let i = 0; i < 16; i++, offset += 4)
              SHA256_W[i] = view.getUint32(offset, false);
          for (let i = 16; i < 64; i++) {
              const W15 = SHA256_W[i - 15];
              const W2 = SHA256_W[i - 2];
              const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);
              const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);
              SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
          }
          // Compression function main loop, 64 rounds
          let { A, B, C, D, E, F, G, H } = this;
          for (let i = 0; i < 64; i++) {
              const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
              const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
              const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
              const T2 = (sigma0 + Maj(A, B, C)) | 0;
              H = G;
              G = F;
              F = E;
              E = (D + T1) | 0;
              D = C;
              C = B;
              B = A;
              A = (T1 + T2) | 0;
          }
          // Add the compressed chunk to the current hash value
          A = (A + this.A) | 0;
          B = (B + this.B) | 0;
          C = (C + this.C) | 0;
          D = (D + this.D) | 0;
          E = (E + this.E) | 0;
          F = (F + this.F) | 0;
          G = (G + this.G) | 0;
          H = (H + this.H) | 0;
          this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
          SHA256_W.fill(0);
      }
      destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0);
          this.buffer.fill(0);
      }
  }
  /**
   * SHA2-256 hash function
   * @param message - data that would be hashed
   */
  const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());

  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
      if (!["sha256", "sha512"].includes(digest)) {
          throw new Error("Only sha256 and sha512 are supported");
      }
      assertBytes(password);
      assertBytes(salt);
      return pbkdf2(sha256 , password, salt, {
          c: iterations,
          dkLen: keylen
      });
  }

  // RFC 7914 Scrypt KDF
  // The main Scrypt loop: uses Salsa extensively.
  // Six versions of the function were tried, this is the fastest one.
  // prettier-ignore
  function XorAndSalsa(prev, pi, input, ii, out, oi) {
      // Based on https://cr.yp.to/salsa20.html
      // Xor blocks
      let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
      let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
      let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
      let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
      let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
      let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
      let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
      let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
      // Save state to temporary variables (salsa)
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      // Main loop (salsa)
      for (let i = 0; i < 8; i += 2) {
          x04 ^= rotl(x00 + x12 | 0, 7);
          x08 ^= rotl(x04 + x00 | 0, 9);
          x12 ^= rotl(x08 + x04 | 0, 13);
          x00 ^= rotl(x12 + x08 | 0, 18);
          x09 ^= rotl(x05 + x01 | 0, 7);
          x13 ^= rotl(x09 + x05 | 0, 9);
          x01 ^= rotl(x13 + x09 | 0, 13);
          x05 ^= rotl(x01 + x13 | 0, 18);
          x14 ^= rotl(x10 + x06 | 0, 7);
          x02 ^= rotl(x14 + x10 | 0, 9);
          x06 ^= rotl(x02 + x14 | 0, 13);
          x10 ^= rotl(x06 + x02 | 0, 18);
          x03 ^= rotl(x15 + x11 | 0, 7);
          x07 ^= rotl(x03 + x15 | 0, 9);
          x11 ^= rotl(x07 + x03 | 0, 13);
          x15 ^= rotl(x11 + x07 | 0, 18);
          x01 ^= rotl(x00 + x03 | 0, 7);
          x02 ^= rotl(x01 + x00 | 0, 9);
          x03 ^= rotl(x02 + x01 | 0, 13);
          x00 ^= rotl(x03 + x02 | 0, 18);
          x06 ^= rotl(x05 + x04 | 0, 7);
          x07 ^= rotl(x06 + x05 | 0, 9);
          x04 ^= rotl(x07 + x06 | 0, 13);
          x05 ^= rotl(x04 + x07 | 0, 18);
          x11 ^= rotl(x10 + x09 | 0, 7);
          x08 ^= rotl(x11 + x10 | 0, 9);
          x09 ^= rotl(x08 + x11 | 0, 13);
          x10 ^= rotl(x09 + x08 | 0, 18);
          x12 ^= rotl(x15 + x14 | 0, 7);
          x13 ^= rotl(x12 + x15 | 0, 9);
          x14 ^= rotl(x13 + x12 | 0, 13);
          x15 ^= rotl(x14 + x13 | 0, 18);
      }
      // Write output (salsa)
      out[oi++] = (y00 + x00) | 0;
      out[oi++] = (y01 + x01) | 0;
      out[oi++] = (y02 + x02) | 0;
      out[oi++] = (y03 + x03) | 0;
      out[oi++] = (y04 + x04) | 0;
      out[oi++] = (y05 + x05) | 0;
      out[oi++] = (y06 + x06) | 0;
      out[oi++] = (y07 + x07) | 0;
      out[oi++] = (y08 + x08) | 0;
      out[oi++] = (y09 + x09) | 0;
      out[oi++] = (y10 + x10) | 0;
      out[oi++] = (y11 + x11) | 0;
      out[oi++] = (y12 + x12) | 0;
      out[oi++] = (y13 + x13) | 0;
      out[oi++] = (y14 + x14) | 0;
      out[oi++] = (y15 + x15) | 0;
  }
  function BlockMix(input, ii, out, oi, r) {
      // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
      let head = oi + 0;
      let tail = oi + 16 * r;
      for (let i = 0; i < 16; i++)
          out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
      for (let i = 0; i < r; i++, head += 16, ii += 16) {
          // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
          XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
          if (i > 0)
              tail += 16; // First iteration overwrites tmp value in tail
          XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
      }
  }
  // Common prologue and epilogue for sync/async functions
  function scryptInit(password, salt, _opts) {
      // Maxmem - 1GB+1KB by default
      const opts = checkOpts({
          dkLen: 32,
          asyncTick: 10,
          maxmem: 1024 ** 3 + 1024,
      }, _opts);
      const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
      number(N);
      number(r);
      number(p);
      number(dkLen);
      number(asyncTick);
      number(maxmem);
      if (onProgress !== undefined && typeof onProgress !== 'function')
          throw new Error('progressCb should be function');
      const blockSize = 128 * r;
      const blockSize32 = blockSize / 4;
      if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
          // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
          // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
          throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');
      }
      if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {
          throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');
      }
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
          throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');
      }
      const memUsed = blockSize * (N + p);
      if (memUsed > maxmem) {
          throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      }
      // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
      // Since it has only one iteration there is no reason to use async variant
      const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
      const B32 = u32(B);
      // Re-used between parallel iterations. Array(iterations) of B
      const V = u32(new Uint8Array(blockSize * N));
      const tmp = u32(new Uint8Array(blockSize));
      let blockMixCb = () => { };
      if (onProgress) {
          const totalBlockMix = 2 * N * p;
          // Invoke callback if progress changes from 10.01 to 10.02
          // Allows to draw smooth progress bar on up to 8K screen
          const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
          let blockMixCnt = 0;
          blockMixCb = () => {
              blockMixCnt++;
              if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
                  onProgress(blockMixCnt / totalBlockMix);
          };
      }
      return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
  }
  function scryptOutput(password, dkLen, B, V, tmp) {
      const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
      B.fill(0);
      V.fill(0);
      tmp.fill(0);
      return res;
  }
  /**
   * Scrypt KDF from RFC 7914.
   * @param password - pass
   * @param salt - salt
   * @param opts - parameters
   * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
   * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
   * - `p` is parallelization factor (1 is common)
   * - `dkLen` is output key length in bytes e.g. 32.
   * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
   * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
   * - `onProgress` - callback function that would be executed for progress report
   * @returns Derived key
   */
  function scrypt(password, salt, opts) {
      const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
      if (!isLE)
          byteSwap32(B32);
      for (let pi = 0; pi < p; pi++) {
          const Pi = blockSize32 * pi;
          for (let i = 0; i < blockSize32; i++)
              V[i] = B32[Pi + i]; // V[0] = B[i]
          for (let i = 0, pos = 0; i < N - 1; i++) {
              BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
              blockMixCb();
          }
          BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
          blockMixCb();
          for (let i = 0; i < N; i++) {
              // First u32 of the last 64-byte block (u32 is LE)
              const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
              for (let k = 0; k < blockSize32; k++)
                  tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
              BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
              blockMixCb();
          }
      }
      if (!isLE)
          byteSwap32(B32);
      return scryptOutput(password, dkLen, B, V, tmp);
  }

  function scryptSync(password, salt, n, p, r, dkLen, onProgress) {
      assertBytes(password);
      assertBytes(salt);
      return scrypt(password, salt, { N: n, r, p, dkLen, onProgress });
  }

  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // 100 lines of code in the file are duplicated from noble-hashes (utils).
  // This is OK: `abstract` directory does not use noble-hashes.
  // User may opt-in into using different hashing library. This way, noble-hashes
  // won't be included into their bundle.
  const _0n$3 = /* @__PURE__ */ BigInt(0);
  const _1n$4 = /* @__PURE__ */ BigInt(1);
  const _2n$2 = /* @__PURE__ */ BigInt(2);
  function isBytes(a) {
      return (a instanceof Uint8Array ||
          (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
  }
  function abytes(item) {
      if (!isBytes(item))
          throw new Error('Uint8Array expected');
  }
  // Array where index 0xf0 (240) is mapped to string 'f0'
  const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
  /**
   * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
   */
  function bytesToHex(bytes) {
      abytes(bytes);
      // pre-caching improves the speed 6x
      let hex = '';
      for (let i = 0; i < bytes.length; i++) {
          hex += hexes[bytes[i]];
      }
      return hex;
  }
  function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber(hex) {
      if (typeof hex !== 'string')
          throw new Error('hex string expected, got ' + typeof hex);
      // Big Endian
      return BigInt(hex === '' ? '0' : `0x${hex}`);
  }
  // We use optimized technique to convert hex string to byte array
  const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
  function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
          return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
          return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
          return char - (asciis._a - 10);
      return;
  }
  /**
   * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
   */
  function hexToBytes(hex) {
      if (typeof hex !== 'string')
          throw new Error('hex string expected, got ' + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
          throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
          const n1 = asciiToBase16(hex.charCodeAt(hi));
          const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
          if (n1 === undefined || n2 === undefined) {
              const char = hex[hi] + hex[hi + 1];
              throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
          }
          array[ai] = n1 * 16 + n2;
      }
      return array;
  }
  // BE: Big Endian, LE: Little Endian
  function bytesToNumberBE(bytes) {
      return hexToNumber(bytesToHex(bytes));
  }
  function bytesToNumberLE(bytes) {
      abytes(bytes);
      return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
  }
  function numberToBytesBE(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, '0'));
  }
  function numberToBytesLE(n, len) {
      return numberToBytesBE(n, len).reverse();
  }
  // Unpadded, rarely used
  function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
  }
  /**
   * Takes hex string or Uint8Array, converts to Uint8Array.
   * Validates output length.
   * Will throw error for other types.
   * @param title descriptive title for an error e.g. 'private key'
   * @param hex hex string or Uint8Array
   * @param expectedLength optional, will compare to result array's length
   * @returns
   */
  function ensureBytes(title, hex, expectedLength) {
      let res;
      if (typeof hex === 'string') {
          try {
              res = hexToBytes(hex);
          }
          catch (e) {
              throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
          }
      }
      else if (isBytes(hex)) {
          // Uint8Array.from() instead of hash.slice() because node.js Buffer
          // is instance of Uint8Array, and its slice() creates **mutable** copy
          res = Uint8Array.from(hex);
      }
      else {
          throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === 'number' && len !== expectedLength)
          throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
  }
  /**
   * Copies several Uint8Arrays into one.
   */
  function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
          const a = arrays[i];
          abytes(a);
          sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
          const a = arrays[i];
          res.set(a, pad);
          pad += a.length;
      }
      return res;
  }
  // Compares 2 u8a-s in kinda constant time
  function equalBytes(a, b) {
      if (a.length !== b.length)
          return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
          diff |= a[i] ^ b[i];
      return diff === 0;
  }
  /**
   * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
   */
  function utf8ToBytes(str) {
      if (typeof str !== 'string')
          throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
  }
  // Bit operations
  /**
   * Calculates amount of bits in a bigint.
   * Same as `n.toString(2).length`
   */
  function bitLen(n) {
      let len;
      for (len = 0; n > _0n$3; n >>= _1n$4, len += 1)
          ;
      return len;
  }
  /**
   * Gets single bit at position.
   * NOTE: first bit position is 0 (same as arrays)
   * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
   */
  function bitGet(n, pos) {
      return (n >> BigInt(pos)) & _1n$4;
  }
  /**
   * Sets single bit at position.
   */
  function bitSet(n, pos, value) {
      return n | ((value ? _1n$4 : _0n$3) << BigInt(pos));
  }
  /**
   * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
   * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
   */
  const bitMask = (n) => (_2n$2 << BigInt(n - 1)) - _1n$4;
  // DRBG
  const u8n = (data) => new Uint8Array(data); // creates Uint8Array
  const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
  /**
   * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
   * @returns function that will call DRBG until 2nd arg returns something meaningful
   * @example
   *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
   *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
   */
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== 'number' || hashLen < 2)
          throw new Error('hashLen must be a number');
      if (typeof qByteLen !== 'number' || qByteLen < 2)
          throw new Error('qByteLen must be a number');
      if (typeof hmacFn !== 'function')
          throw new Error('hmacFn must be a function');
      // Step B, Step C: set hashLen to 8*ceil(hlen/8)
      let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
      let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
      let i = 0; // Iterations counter, will throw when over 1000
      const reset = () => {
          v.fill(1);
          k.fill(0);
          i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
      const reseed = (seed = u8n()) => {
          // HMAC-DRBG reseed() function. Steps D-G
          k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
          v = h(); // v = hmac(k || v)
          if (seed.length === 0)
              return;
          k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
          v = h(); // v = hmac(k || v)
      };
      const gen = () => {
          // HMAC-DRBG generate() function
          if (i++ >= 1000)
              throw new Error('drbg: tried 1000 values');
          let len = 0;
          const out = [];
          while (len < qByteLen) {
              v = h();
              const sl = v.slice();
              out.push(sl);
              len += v.length;
          }
          return concatBytes(...out);
      };
      const genUntil = (seed, pred) => {
          reset();
          reseed(seed); // Steps D-G
          let res = undefined; // Step H: grind until k is in [1..n-1]
          while (!(res = pred(gen())))
              reseed();
          reset();
          return res;
      };
      return genUntil;
  }
  // Validating curves and fields
  const validatorFns = {
      bigint: (val) => typeof val === 'bigint',
      function: (val) => typeof val === 'function',
      boolean: (val) => typeof val === 'boolean',
      string: (val) => typeof val === 'string',
      stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
  };
  // type Record<K extends string | number | symbol, T> = { [P in K]: T; }
  function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
          const checkVal = validatorFns[type];
          if (typeof checkVal !== 'function')
              throw new Error(`Invalid validator "${type}", expected function`);
          const val = object[fieldName];
          if (isOptional && val === undefined)
              return;
          if (!checkVal(val, object)) {
              throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
          }
      };
      for (const [fieldName, type] of Object.entries(validators))
          checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
          checkField(fieldName, type, true);
      return object;
  }
  // validate type tests
  // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
  // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
  // // Should fail type-check
  // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
  // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
  // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
  // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });

  var ut = /*#__PURE__*/Object.freeze({
    __proto__: null,
    abytes: abytes,
    bitGet: bitGet,
    bitLen: bitLen,
    bitMask: bitMask,
    bitSet: bitSet,
    bytesToHex: bytesToHex,
    bytesToNumberBE: bytesToNumberBE,
    bytesToNumberLE: bytesToNumberLE,
    concatBytes: concatBytes,
    createHmacDrbg: createHmacDrbg,
    ensureBytes: ensureBytes,
    equalBytes: equalBytes,
    hexToBytes: hexToBytes,
    hexToNumber: hexToNumber,
    isBytes: isBytes,
    numberToBytesBE: numberToBytesBE,
    numberToBytesLE: numberToBytesLE,
    numberToHexUnpadded: numberToHexUnpadded,
    numberToVarBytesBE: numberToVarBytesBE,
    utf8ToBytes: utf8ToBytes,
    validateObject: validateObject
  });

  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // Utilities for modular arithmetics and finite fields
  // prettier-ignore
  const _0n$2 = BigInt(0), _1n$3 = BigInt(1), _2n$1 = BigInt(2), _3n$1 = BigInt(3);
  // prettier-ignore
  const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
  // prettier-ignore
  BigInt(9); BigInt(16);
  // Calculates a modulo b
  function mod(a, b) {
      const result = a % b;
      return result >= _0n$2 ? result : b + result;
  }
  /**
   * Efficiently raise num to power and do modular division.
   * Unsafe in some contexts: uses ladder, so can expose bigint bits.
   * @example
   * pow(2n, 6n, 11n) // 64n % 11n == 9n
   */
  // TODO: use field version && remove
  function pow(num, power, modulo) {
      if (modulo <= _0n$2 || power < _0n$2)
          throw new Error('Expected power/modulo > 0');
      if (modulo === _1n$3)
          return _0n$2;
      let res = _1n$3;
      while (power > _0n$2) {
          if (power & _1n$3)
              res = (res * num) % modulo;
          num = (num * num) % modulo;
          power >>= _1n$3;
      }
      return res;
  }
  // Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
  function pow2(x, power, modulo) {
      let res = x;
      while (power-- > _0n$2) {
          res *= res;
          res %= modulo;
      }
      return res;
  }
  // Inverses number over modulo
  function invert(number, modulo) {
      if (number === _0n$2 || modulo <= _0n$2) {
          throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
      // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
      let a = mod(number, modulo);
      let b = modulo;
      // prettier-ignore
      let x = _0n$2, u = _1n$3;
      while (a !== _0n$2) {
          // JIT applies optimization if those two lines follow each other
          const q = b / a;
          const r = b % a;
          const m = x - u * q;
          // prettier-ignore
          b = a, a = r, x = u, u = m;
      }
      const gcd = b;
      if (gcd !== _1n$3)
          throw new Error('invert: does not exist');
      return mod(x, modulo);
  }
  /**
   * Tonelli-Shanks square root search algorithm.
   * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
   * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
   * Will start an infinite loop if field order P is not prime.
   * @param P field order
   * @returns function that takes field Fp (created from P) and number n
   */
  function tonelliShanks(P) {
      // Legendre constant: used to calculate Legendre symbol (a | p),
      // which denotes the value of a^((p-1)/2) (mod p).
      // (a | p) ≡ 1    if a is a square (mod p)
      // (a | p) ≡ -1   if a is not a square (mod p)
      // (a | p) ≡ 0    if a ≡ 0 (mod p)
      const legendreC = (P - _1n$3) / _2n$1;
      let Q, S, Z;
      // Step 1: By factoring out powers of 2 from p - 1,
      // find q and s such that p - 1 = q*(2^s) with q odd
      for (Q = P - _1n$3, S = 0; Q % _2n$1 === _0n$2; Q /= _2n$1, S++)
          ;
      // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
      for (Z = _2n$1; Z < P && pow(Z, legendreC, P) !== P - _1n$3; Z++)
          ;
      // Fast-path
      if (S === 1) {
          const p1div4 = (P + _1n$3) / _4n;
          return function tonelliFast(Fp, n) {
              const root = Fp.pow(n, p1div4);
              if (!Fp.eql(Fp.sqr(root), n))
                  throw new Error('Cannot find square root');
              return root;
          };
      }
      // Slow-path
      const Q1div2 = (Q + _1n$3) / _2n$1;
      return function tonelliSlow(Fp, n) {
          // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
          if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
              throw new Error('Cannot find square root');
          let r = S;
          // TODO: will fail at Fp2/etc
          let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
          let x = Fp.pow(n, Q1div2); // first guess at the square root
          let b = Fp.pow(n, Q); // first guess at the fudge factor
          while (!Fp.eql(b, Fp.ONE)) {
              if (Fp.eql(b, Fp.ZERO))
                  return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
              // Find m such b^(2^m)==1
              let m = 1;
              for (let t2 = Fp.sqr(b); m < r; m++) {
                  if (Fp.eql(t2, Fp.ONE))
                      break;
                  t2 = Fp.sqr(t2); // t2 *= t2
              }
              // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
              const ge = Fp.pow(g, _1n$3 << BigInt(r - m - 1)); // ge = 2^(r-m-1)
              g = Fp.sqr(ge); // g = ge * ge
              x = Fp.mul(x, ge); // x *= ge
              b = Fp.mul(b, g); // b *= g
              r = m;
          }
          return x;
      };
  }
  function FpSqrt(P) {
      // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
      // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
      // P ≡ 3 (mod 4)
      // √n = n^((P+1)/4)
      if (P % _4n === _3n$1) {
          // Not all roots possible!
          // const ORDER =
          //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
          // const NUM = 72057594037927816n;
          const p1div4 = (P + _1n$3) / _4n;
          return function sqrt3mod4(Fp, n) {
              const root = Fp.pow(n, p1div4);
              // Throw if root**2 != n
              if (!Fp.eql(Fp.sqr(root), n))
                  throw new Error('Cannot find square root');
              return root;
          };
      }
      // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
      if (P % _8n === _5n) {
          const c1 = (P - _5n) / _8n;
          return function sqrt5mod8(Fp, n) {
              const n2 = Fp.mul(n, _2n$1);
              const v = Fp.pow(n2, c1);
              const nv = Fp.mul(n, v);
              const i = Fp.mul(Fp.mul(nv, _2n$1), v);
              const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
              if (!Fp.eql(Fp.sqr(root), n))
                  throw new Error('Cannot find square root');
              return root;
          };
      }
      // Other cases: Tonelli-Shanks algorithm
      return tonelliShanks(P);
  }
  // prettier-ignore
  const FIELD_FIELDS = [
      'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
      'eql', 'add', 'sub', 'mul', 'pow', 'div',
      'addN', 'subN', 'mulN', 'sqrN'
  ];
  function validateField(field) {
      const initial = {
          ORDER: 'bigint',
          MASK: 'bigint',
          BYTES: 'isSafeInteger',
          BITS: 'isSafeInteger',
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
          map[val] = 'function';
          return map;
      }, initial);
      return validateObject(field, opts);
  }
  // Generic field functions
  /**
   * Same as `pow` but for Fp: non-constant-time.
   * Unsafe in some contexts: uses ladder, so can expose bigint bits.
   */
  function FpPow(f, num, power) {
      // Should have same speed as pow for bigints
      // TODO: benchmark!
      if (power < _0n$2)
          throw new Error('Expected power > 0');
      if (power === _0n$2)
          return f.ONE;
      if (power === _1n$3)
          return num;
      let p = f.ONE;
      let d = num;
      while (power > _0n$2) {
          if (power & _1n$3)
              p = f.mul(p, d);
          d = f.sqr(d);
          power >>= _1n$3;
      }
      return p;
  }
  /**
   * Efficiently invert an array of Field elements.
   * `inv(0)` will return `undefined` here: make sure to throw an error.
   */
  function FpInvertBatch(f, nums) {
      const tmp = new Array(nums.length);
      // Walk from first to last, multiply them by each other MOD p
      const lastMultiplied = nums.reduce((acc, num, i) => {
          if (f.is0(num))
              return acc;
          tmp[i] = acc;
          return f.mul(acc, num);
      }, f.ONE);
      // Invert last element
      const inverted = f.inv(lastMultiplied);
      // Walk from last to first, multiply them by inverted each other MOD p
      nums.reduceRight((acc, num, i) => {
          if (f.is0(num))
              return acc;
          tmp[i] = f.mul(acc, tmp[i]);
          return f.mul(acc, num);
      }, inverted);
      return tmp;
  }
  // CURVE.n lengths
  function nLength(n, nBitLength) {
      // Bit size, byte size of CURVE.n
      const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
  }
  /**
   * Initializes a finite field over prime. **Non-primes are not supported.**
   * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
   * Major performance optimizations:
   * * a) denormalized operations like mulN instead of mul
   * * b) same object shape: never add or remove keys
   * * c) Object.freeze
   * @param ORDER prime positive bigint
   * @param bitLen how many bits the field consumes
   * @param isLE (def: false) if encoding / decoding should be in little-endian
   * @param redef optional faster redefinitions of sqrt and other methods
   */
  function Field(ORDER, bitLen, isLE = false, redef = {}) {
      if (ORDER <= _0n$2)
          throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
          throw new Error('Field lengths over 2048 bytes are not supported');
      const sqrtP = FpSqrt(ORDER);
      const f = Object.freeze({
          ORDER,
          BITS,
          BYTES,
          MASK: bitMask(BITS),
          ZERO: _0n$2,
          ONE: _1n$3,
          create: (num) => mod(num, ORDER),
          isValid: (num) => {
              if (typeof num !== 'bigint')
                  throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
              return _0n$2 <= num && num < ORDER; // 0 is valid element, but it's not invertible
          },
          is0: (num) => num === _0n$2,
          isOdd: (num) => (num & _1n$3) === _1n$3,
          neg: (num) => mod(-num, ORDER),
          eql: (lhs, rhs) => lhs === rhs,
          sqr: (num) => mod(num * num, ORDER),
          add: (lhs, rhs) => mod(lhs + rhs, ORDER),
          sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
          mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
          pow: (num, power) => FpPow(f, num, power),
          div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
          // Same as above, but doesn't normalize
          sqrN: (num) => num * num,
          addN: (lhs, rhs) => lhs + rhs,
          subN: (lhs, rhs) => lhs - rhs,
          mulN: (lhs, rhs) => lhs * rhs,
          inv: (num) => invert(num, ORDER),
          sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
          invertBatch: (lst) => FpInvertBatch(f, lst),
          // TODO: do we really need constant cmov?
          // We don't have const-time bigints anyway, so probably will be not very useful
          cmov: (a, b, c) => (c ? b : a),
          toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),
          fromBytes: (bytes) => {
              if (bytes.length !== BYTES)
                  throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
              return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
          },
      });
      return Object.freeze(f);
  }
  /**
   * Returns total number of bytes consumed by the field element.
   * For example, 32 bytes for usual 256-bit weierstrass curve.
   * @param fieldOrder number of field elements, usually CURVE.n
   * @returns byte length of field
   */
  function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== 'bigint')
          throw new Error('field order must be bigint');
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
  }
  /**
   * Returns minimal amount of bytes that can be safely reduced
   * by field order.
   * Should be 2^-128 for 128-bit curve such as P256.
   * @param fieldOrder number of field elements, usually CURVE.n
   * @returns byte length of target hash
   */
  function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
  }
  /**
   * "Constant-time" private key generation utility.
   * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
   * and convert them into private scalar, with the modulo bias being negligible.
   * Needs at least 48 bytes of input for 32-byte private key.
   * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
   * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
   * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
   * @param hash hash output from SHA3 or a similar function
   * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
   * @param isLE interpret hash bytes as LE num
   * @returns valid private scalar
   */
  function mapHashToField(key, fieldOrder, isLE = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
      if (len < 16 || len < minLen || len > 1024)
          throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);
      // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
      const reduced = mod(num, fieldOrder - _1n$3) + _1n$3;
      return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
  }

  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // Abelian group utilities
  const _0n$1 = BigInt(0);
  const _1n$2 = BigInt(1);
  // Elliptic curve multiplication of Point by scalar. Fragile.
  // Scalars should always be less than curve order: this should be checked inside of a curve itself.
  // Creates precomputation tables for fast multiplication:
  // - private scalar is split by fixed size windows of W bits
  // - every window point is collected from window's table & added to accumulator
  // - since windows are different, same point inside tables won't be accessed more than once per calc
  // - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
  // - +1 window is neccessary for wNAF
  // - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
  // TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
  // windows to be in different memory locations
  function wNAF(c, bits) {
      const constTimeNegate = (condition, item) => {
          const neg = item.negate();
          return condition ? neg : item;
      };
      const opts = (W) => {
          const windows = Math.ceil(bits / W) + 1; // +1, because
          const windowSize = 2 ** (W - 1); // -1 because we skip zero
          return { windows, windowSize };
      };
      return {
          constTimeNegate,
          // non-const time multiplication ladder
          unsafeLadder(elm, n) {
              let p = c.ZERO;
              let d = elm;
              while (n > _0n$1) {
                  if (n & _1n$2)
                      p = p.add(d);
                  d = d.double();
                  n >>= _1n$2;
              }
              return p;
          },
          /**
           * Creates a wNAF precomputation window. Used for caching.
           * Default window size is set by `utils.precompute()` and is equal to 8.
           * Number of precomputed points depends on the curve size:
           * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
           * - 𝑊 is the window size
           * - 𝑛 is the bitlength of the curve order.
           * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
           * @returns precomputed point tables flattened to a single array
           */
          precomputeWindow(elm, W) {
              const { windows, windowSize } = opts(W);
              const points = [];
              let p = elm;
              let base = p;
              for (let window = 0; window < windows; window++) {
                  base = p;
                  points.push(base);
                  // =1, because we skip zero
                  for (let i = 1; i < windowSize; i++) {
                      base = base.add(p);
                      points.push(base);
                  }
                  p = base.double();
              }
              return points;
          },
          /**
           * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
           * @param W window size
           * @param precomputes precomputed tables
           * @param n scalar (we don't check here, but should be less than curve order)
           * @returns real and fake (for const-time) points
           */
          wNAF(W, precomputes, n) {
              // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
              // But need to carefully remove other checks before wNAF. ORDER == bits here
              const { windows, windowSize } = opts(W);
              let p = c.ZERO;
              let f = c.BASE;
              const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
              const maxNumber = 2 ** W;
              const shiftBy = BigInt(W);
              for (let window = 0; window < windows; window++) {
                  const offset = window * windowSize;
                  // Extract W bits.
                  let wbits = Number(n & mask);
                  // Shift number by W bits.
                  n >>= shiftBy;
                  // If the bits are bigger than max size, we'll split those.
                  // +224 => 256 - 32
                  if (wbits > windowSize) {
                      wbits -= maxNumber;
                      n += _1n$2;
                  }
                  // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                  // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                  // there is negate now: it is possible that negated element from low value
                  // would be the same as high element, which will create carry into next window.
                  // It's not obvious how this can fail, but still worth investigating later.
                  // Check if we're onto Zero point.
                  // Add random point inside current window to f.
                  const offset1 = offset;
                  const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                  const cond1 = window % 2 !== 0;
                  const cond2 = wbits < 0;
                  if (wbits === 0) {
                      // The most important part for const-time getPublicKey
                      f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                  }
                  else {
                      p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                  }
              }
              // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
              // Even if the variable is still unused, there are some checks which will
              // throw an exception, so compiler needs to prove they won't happen, which is hard.
              // At this point there is a way to F be infinity-point even if p is not,
              // which makes it less const-time: around 1 bigint multiply.
              return { p, f };
          },
          wNAFCached(P, precomputesMap, n, transform) {
              // @ts-ignore
              const W = P._WINDOW_SIZE || 1;
              // Calculate precomputes on a first run, reuse them after
              let comp = precomputesMap.get(P);
              if (!comp) {
                  comp = this.precomputeWindow(P, W);
                  if (W !== 1) {
                      precomputesMap.set(P, transform(comp));
                  }
              }
              return this.wNAF(W, comp, n);
          },
      };
  }
  function validateBasic(curve) {
      validateField(curve.Fp);
      validateObject(curve, {
          n: 'bigint',
          h: 'bigint',
          Gx: 'field',
          Gy: 'field',
      }, {
          nBitLength: 'isSafeInteger',
          nByteLength: 'isSafeInteger',
      });
      // Set defaults
      return Object.freeze({
          ...nLength(curve.n, curve.nBitLength),
          ...curve,
          ...{ p: curve.Fp.ORDER },
      });
  }

  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // Short Weierstrass curve. The formula is: y² = x³ + ax + b
  function validatePointOpts(curve) {
      const opts = validateBasic(curve);
      validateObject(opts, {
          a: 'field',
          b: 'field',
      }, {
          allowedPrivateKeyLengths: 'array',
          wrapPrivateKey: 'boolean',
          isTorsionFree: 'function',
          clearCofactor: 'function',
          allowInfinityPoint: 'boolean',
          fromBytes: 'function',
          toBytes: 'function',
      });
      const { endo, Fp, a } = opts;
      if (endo) {
          if (!Fp.eql(a, Fp.ZERO)) {
              throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
          }
          if (typeof endo !== 'object' ||
              typeof endo.beta !== 'bigint' ||
              typeof endo.splitScalar !== 'function') {
              throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
          }
      }
      return Object.freeze({ ...opts });
  }
  // ASN.1 DER encoding utilities
  const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
  const DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
          constructor(m = '') {
              super(m);
          }
      },
      _parseInt(data) {
          const { Err: E } = DER;
          if (data.length < 2 || data[0] !== 0x02)
              throw new E('Invalid signature integer tag');
          const len = data[1];
          const res = data.subarray(2, len + 2);
          if (!len || res.length !== len)
              throw new E('Invalid signature integer: wrong length');
          // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
          // since we always use positive integers here. It must always be empty:
          // - add zero byte if exists
          // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
          if (res[0] & 0b10000000)
              throw new E('Invalid signature integer: negative');
          if (res[0] === 0x00 && !(res[1] & 0b10000000))
              throw new E('Invalid signature integer: unnecessary leading zero');
          return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left
      },
      toSig(hex) {
          // parse DER signature
          const { Err: E } = DER;
          const data = typeof hex === 'string' ? h2b(hex) : hex;
          abytes(data);
          let l = data.length;
          if (l < 2 || data[0] != 0x30)
              throw new E('Invalid signature tag');
          if (data[1] !== l - 2)
              throw new E('Invalid signature: incorrect length');
          const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
          const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
          if (rBytesLeft.length)
              throw new E('Invalid signature: left bytes after parsing');
          return { r, s };
      },
      hexFromSig(sig) {
          // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
          const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);
          const h = (num) => {
              const hex = num.toString(16);
              return hex.length & 1 ? `0${hex}` : hex;
          };
          const s = slice(h(sig.s));
          const r = slice(h(sig.r));
          const shl = s.length / 2;
          const rhl = r.length / 2;
          const sl = h(shl);
          const rl = h(rhl);
          return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
      },
  };
  // Be friendly to bad ECMAScript parsers by not using bigint literals
  // prettier-ignore
  const _0n = BigInt(0), _1n$1 = BigInt(1); BigInt(2); const _3n = BigInt(3); BigInt(4);
  function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
      const toBytes = CURVE.toBytes ||
          ((_c, point, _isCompressed) => {
              const a = point.toAffine();
              return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
          });
      const fromBytes = CURVE.fromBytes ||
          ((bytes) => {
              // const head = bytes[0];
              const tail = bytes.subarray(1);
              // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
              const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
              const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
              return { x, y };
          });
      /**
       * y² = x³ + ax + b: Short weierstrass curve formula
       * @returns y²
       */
      function weierstrassEquation(x) {
          const { a, b } = CURVE;
          const x2 = Fp.sqr(x); // x * x
          const x3 = Fp.mul(x2, x); // x2 * x
          return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
      }
      // Validate whether the passed curve params are valid.
      // We check if curve equation works for generator point.
      // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
      // ProjectivePoint class has not been initialized yet.
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
          throw new Error('bad generator point: equation left != right');
      // Valid group elements reside in range 1..n-1
      function isWithinCurveOrder(num) {
          return typeof num === 'bigint' && _0n < num && num < CURVE.n;
      }
      function assertGE(num) {
          if (!isWithinCurveOrder(num))
              throw new Error('Expected valid bigint: 0 < bigint < curve.n');
      }
      // Validates if priv key is valid and converts it to bigint.
      // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
      function normPrivateKeyToScalar(key) {
          const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
          if (lengths && typeof key !== 'bigint') {
              if (isBytes(key))
                  key = bytesToHex(key);
              // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
              if (typeof key !== 'string' || !lengths.includes(key.length))
                  throw new Error('Invalid key');
              key = key.padStart(nByteLength * 2, '0');
          }
          let num;
          try {
              num =
                  typeof key === 'bigint'
                      ? key
                      : bytesToNumberBE(ensureBytes('private key', key, nByteLength));
          }
          catch (error) {
              throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
          }
          if (wrapPrivateKey)
              num = mod(num, n); // disabled by default, enabled for BLS
          assertGE(num); // num in range [1..N-1]
          return num;
      }
      const pointPrecomputes = new Map();
      function assertPrjPoint(other) {
          if (!(other instanceof Point))
              throw new Error('ProjectivePoint expected');
      }
      /**
       * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
       * Default Point works in 2d / affine coordinates: (x, y)
       * We're doing calculations in projective, because its operations don't require costly inversion.
       */
      class Point {
          constructor(px, py, pz) {
              this.px = px;
              this.py = py;
              this.pz = pz;
              if (px == null || !Fp.isValid(px))
                  throw new Error('x required');
              if (py == null || !Fp.isValid(py))
                  throw new Error('y required');
              if (pz == null || !Fp.isValid(pz))
                  throw new Error('z required');
          }
          // Does not validate if the point is on-curve.
          // Use fromHex instead, or call assertValidity() later.
          static fromAffine(p) {
              const { x, y } = p || {};
              if (!p || !Fp.isValid(x) || !Fp.isValid(y))
                  throw new Error('invalid affine point');
              if (p instanceof Point)
                  throw new Error('projective point not allowed');
              const is0 = (i) => Fp.eql(i, Fp.ZERO);
              // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
              if (is0(x) && is0(y))
                  return Point.ZERO;
              return new Point(x, y, Fp.ONE);
          }
          get x() {
              return this.toAffine().x;
          }
          get y() {
              return this.toAffine().y;
          }
          /**
           * Takes a bunch of Projective Points but executes only one
           * inversion on all of them. Inversion is very slow operation,
           * so this improves performance massively.
           * Optimization: converts a list of projective points to a list of identical points with Z=1.
           */
          static normalizeZ(points) {
              const toInv = Fp.invertBatch(points.map((p) => p.pz));
              return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
          }
          /**
           * Converts hash string or Uint8Array to Point.
           * @param hex short/long ECDSA hex
           */
          static fromHex(hex) {
              const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));
              P.assertValidity();
              return P;
          }
          // Multiplies generator point by privateKey.
          static fromPrivateKey(privateKey) {
              return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
          }
          // "Private method", don't use it directly
          _setWindowSize(windowSize) {
              this._WINDOW_SIZE = windowSize;
              pointPrecomputes.delete(this);
          }
          // A point on curve is valid if it conforms to equation.
          assertValidity() {
              if (this.is0()) {
                  // (0, 1, 0) aka ZERO is invalid in most contexts.
                  // In BLS, ZERO can be serialized, so we allow it.
                  // (0, 0, 0) is wrong representation of ZERO and is always invalid.
                  if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
                      return;
                  throw new Error('bad point: ZERO');
              }
              // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
              const { x, y } = this.toAffine();
              // Check if x, y are valid field elements
              if (!Fp.isValid(x) || !Fp.isValid(y))
                  throw new Error('bad point: x or y not FE');
              const left = Fp.sqr(y); // y²
              const right = weierstrassEquation(x); // x³ + ax + b
              if (!Fp.eql(left, right))
                  throw new Error('bad point: equation left != right');
              if (!this.isTorsionFree())
                  throw new Error('bad point: not in prime-order subgroup');
          }
          hasEvenY() {
              const { y } = this.toAffine();
              if (Fp.isOdd)
                  return !Fp.isOdd(y);
              throw new Error("Field doesn't support isOdd");
          }
          /**
           * Compare one point to another.
           */
          equals(other) {
              assertPrjPoint(other);
              const { px: X1, py: Y1, pz: Z1 } = this;
              const { px: X2, py: Y2, pz: Z2 } = other;
              const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
              const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
              return U1 && U2;
          }
          /**
           * Flips point to one corresponding to (x, -y) in Affine coordinates.
           */
          negate() {
              return new Point(this.px, Fp.neg(this.py), this.pz);
          }
          // Renes-Costello-Batina exception-free doubling formula.
          // There is 30% faster Jacobian formula, but it is not complete.
          // https://eprint.iacr.org/2015/1060, algorithm 3
          // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
          double() {
              const { a, b } = CURVE;
              const b3 = Fp.mul(b, _3n);
              const { px: X1, py: Y1, pz: Z1 } = this;
              let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
              let t0 = Fp.mul(X1, X1); // step 1
              let t1 = Fp.mul(Y1, Y1);
              let t2 = Fp.mul(Z1, Z1);
              let t3 = Fp.mul(X1, Y1);
              t3 = Fp.add(t3, t3); // step 5
              Z3 = Fp.mul(X1, Z1);
              Z3 = Fp.add(Z3, Z3);
              X3 = Fp.mul(a, Z3);
              Y3 = Fp.mul(b3, t2);
              Y3 = Fp.add(X3, Y3); // step 10
              X3 = Fp.sub(t1, Y3);
              Y3 = Fp.add(t1, Y3);
              Y3 = Fp.mul(X3, Y3);
              X3 = Fp.mul(t3, X3);
              Z3 = Fp.mul(b3, Z3); // step 15
              t2 = Fp.mul(a, t2);
              t3 = Fp.sub(t0, t2);
              t3 = Fp.mul(a, t3);
              t3 = Fp.add(t3, Z3);
              Z3 = Fp.add(t0, t0); // step 20
              t0 = Fp.add(Z3, t0);
              t0 = Fp.add(t0, t2);
              t0 = Fp.mul(t0, t3);
              Y3 = Fp.add(Y3, t0);
              t2 = Fp.mul(Y1, Z1); // step 25
              t2 = Fp.add(t2, t2);
              t0 = Fp.mul(t2, t3);
              X3 = Fp.sub(X3, t0);
              Z3 = Fp.mul(t2, t1);
              Z3 = Fp.add(Z3, Z3); // step 30
              Z3 = Fp.add(Z3, Z3);
              return new Point(X3, Y3, Z3);
          }
          // Renes-Costello-Batina exception-free addition formula.
          // There is 30% faster Jacobian formula, but it is not complete.
          // https://eprint.iacr.org/2015/1060, algorithm 1
          // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
          add(other) {
              assertPrjPoint(other);
              const { px: X1, py: Y1, pz: Z1 } = this;
              const { px: X2, py: Y2, pz: Z2 } = other;
              let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
              const a = CURVE.a;
              const b3 = Fp.mul(CURVE.b, _3n);
              let t0 = Fp.mul(X1, X2); // step 1
              let t1 = Fp.mul(Y1, Y2);
              let t2 = Fp.mul(Z1, Z2);
              let t3 = Fp.add(X1, Y1);
              let t4 = Fp.add(X2, Y2); // step 5
              t3 = Fp.mul(t3, t4);
              t4 = Fp.add(t0, t1);
              t3 = Fp.sub(t3, t4);
              t4 = Fp.add(X1, Z1);
              let t5 = Fp.add(X2, Z2); // step 10
              t4 = Fp.mul(t4, t5);
              t5 = Fp.add(t0, t2);
              t4 = Fp.sub(t4, t5);
              t5 = Fp.add(Y1, Z1);
              X3 = Fp.add(Y2, Z2); // step 15
              t5 = Fp.mul(t5, X3);
              X3 = Fp.add(t1, t2);
              t5 = Fp.sub(t5, X3);
              Z3 = Fp.mul(a, t4);
              X3 = Fp.mul(b3, t2); // step 20
              Z3 = Fp.add(X3, Z3);
              X3 = Fp.sub(t1, Z3);
              Z3 = Fp.add(t1, Z3);
              Y3 = Fp.mul(X3, Z3);
              t1 = Fp.add(t0, t0); // step 25
              t1 = Fp.add(t1, t0);
              t2 = Fp.mul(a, t2);
              t4 = Fp.mul(b3, t4);
              t1 = Fp.add(t1, t2);
              t2 = Fp.sub(t0, t2); // step 30
              t2 = Fp.mul(a, t2);
              t4 = Fp.add(t4, t2);
              t0 = Fp.mul(t1, t4);
              Y3 = Fp.add(Y3, t0);
              t0 = Fp.mul(t5, t4); // step 35
              X3 = Fp.mul(t3, X3);
              X3 = Fp.sub(X3, t0);
              t0 = Fp.mul(t3, t1);
              Z3 = Fp.mul(t5, Z3);
              Z3 = Fp.add(Z3, t0); // step 40
              return new Point(X3, Y3, Z3);
          }
          subtract(other) {
              return this.add(other.negate());
          }
          is0() {
              return this.equals(Point.ZERO);
          }
          wNAF(n) {
              return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
                  const toInv = Fp.invertBatch(comp.map((p) => p.pz));
                  return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
              });
          }
          /**
           * Non-constant-time multiplication. Uses double-and-add algorithm.
           * It's faster, but should only be used when you don't care about
           * an exposed private key e.g. sig verification, which works over *public* keys.
           */
          multiplyUnsafe(n) {
              const I = Point.ZERO;
              if (n === _0n)
                  return I;
              assertGE(n); // Will throw on 0
              if (n === _1n$1)
                  return this;
              const { endo } = CURVE;
              if (!endo)
                  return wnaf.unsafeLadder(this, n);
              // Apply endomorphism
              let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
              let k1p = I;
              let k2p = I;
              let d = this;
              while (k1 > _0n || k2 > _0n) {
                  if (k1 & _1n$1)
                      k1p = k1p.add(d);
                  if (k2 & _1n$1)
                      k2p = k2p.add(d);
                  d = d.double();
                  k1 >>= _1n$1;
                  k2 >>= _1n$1;
              }
              if (k1neg)
                  k1p = k1p.negate();
              if (k2neg)
                  k2p = k2p.negate();
              k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
              return k1p.add(k2p);
          }
          /**
           * Constant time multiplication.
           * Uses wNAF method. Windowed method may be 10% faster,
           * but takes 2x longer to generate and consumes 2x memory.
           * Uses precomputes when available.
           * Uses endomorphism for Koblitz curves.
           * @param scalar by which the point would be multiplied
           * @returns New point
           */
          multiply(scalar) {
              assertGE(scalar);
              let n = scalar;
              let point, fake; // Fake point is used to const-time mult
              const { endo } = CURVE;
              if (endo) {
                  const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                  let { p: k1p, f: f1p } = this.wNAF(k1);
                  let { p: k2p, f: f2p } = this.wNAF(k2);
                  k1p = wnaf.constTimeNegate(k1neg, k1p);
                  k2p = wnaf.constTimeNegate(k2neg, k2p);
                  k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                  point = k1p.add(k2p);
                  fake = f1p.add(f2p);
              }
              else {
                  const { p, f } = this.wNAF(n);
                  point = p;
                  fake = f;
              }
              // Normalize `z` for both points, but return only real one
              return Point.normalizeZ([point, fake])[0];
          }
          /**
           * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
           * Not using Strauss-Shamir trick: precomputation tables are faster.
           * The trick could be useful if both P and Q are not G (not in our case).
           * @returns non-zero affine point
           */
          multiplyAndAddUnsafe(Q, a, b) {
              const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
              const mul = (P, a // Select faster multiply() method
              ) => (a === _0n || a === _1n$1 || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
              const sum = mul(this, a).add(mul(Q, b));
              return sum.is0() ? undefined : sum;
          }
          // Converts Projective point to affine (x, y) coordinates.
          // Can accept precomputed Z^-1 - for example, from invertBatch.
          // (x, y, z) ∋ (x=x/z, y=y/z)
          toAffine(iz) {
              const { px: x, py: y, pz: z } = this;
              const is0 = this.is0();
              // If invZ was 0, we return zero point. However we still want to execute
              // all operations, so we replace invZ with a random number, 1.
              if (iz == null)
                  iz = is0 ? Fp.ONE : Fp.inv(z);
              const ax = Fp.mul(x, iz);
              const ay = Fp.mul(y, iz);
              const zz = Fp.mul(z, iz);
              if (is0)
                  return { x: Fp.ZERO, y: Fp.ZERO };
              if (!Fp.eql(zz, Fp.ONE))
                  throw new Error('invZ was invalid');
              return { x: ax, y: ay };
          }
          isTorsionFree() {
              const { h: cofactor, isTorsionFree } = CURVE;
              if (cofactor === _1n$1)
                  return true; // No subgroups, always torsion-free
              if (isTorsionFree)
                  return isTorsionFree(Point, this);
              throw new Error('isTorsionFree() has not been declared for the elliptic curve');
          }
          clearCofactor() {
              const { h: cofactor, clearCofactor } = CURVE;
              if (cofactor === _1n$1)
                  return this; // Fast-path
              if (clearCofactor)
                  return clearCofactor(Point, this);
              return this.multiplyUnsafe(CURVE.h);
          }
          toRawBytes(isCompressed = true) {
              this.assertValidity();
              return toBytes(Point, this, isCompressed);
          }
          toHex(isCompressed = true) {
              return bytesToHex(this.toRawBytes(isCompressed));
          }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      // Validate if generator point is on curve
      return {
          CURVE,
          ProjectivePoint: Point,
          normPrivateKeyToScalar,
          weierstrassEquation,
          isWithinCurveOrder,
      };
  }
  function validateOpts(curve) {
      const opts = validateBasic(curve);
      validateObject(opts, {
          hash: 'hash',
          hmac: 'function',
          randomBytes: 'function',
      }, {
          bits2int: 'function',
          bits2int_modN: 'function',
          lowS: 'boolean',
      });
      return Object.freeze({ lowS: true, ...opts });
  }
  function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
      const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
      function isValidFieldElement(num) {
          return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
      }
      function modN(a) {
          return mod(a, CURVE_ORDER);
      }
      function invN(a) {
          return invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
          ...CURVE,
          toBytes(_c, point, isCompressed) {
              const a = point.toAffine();
              const x = Fp.toBytes(a.x);
              const cat = concatBytes;
              if (isCompressed) {
                  return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
              }
              else {
                  return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
              }
          },
          fromBytes(bytes) {
              const len = bytes.length;
              const head = bytes[0];
              const tail = bytes.subarray(1);
              // this.assertValidity() is done inside of fromHex
              if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                  const x = bytesToNumberBE(tail);
                  if (!isValidFieldElement(x))
                      throw new Error('Point is not on curve');
                  const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                  let y;
                  try {
                      y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                  }
                  catch (sqrtError) {
                      const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';
                      throw new Error('Point is not on curve' + suffix);
                  }
                  const isYOdd = (y & _1n$1) === _1n$1;
                  // ECDSA
                  const isHeadOdd = (head & 1) === 1;
                  if (isHeadOdd !== isYOdd)
                      y = Fp.neg(y);
                  return { x, y };
              }
              else if (len === uncompressedLen && head === 0x04) {
                  const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                  const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                  return { x, y };
              }
              else {
                  throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
              }
          },
      });
      const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number) {
          const HALF = CURVE_ORDER >> _1n$1;
          return number > HALF;
      }
      function normalizeS(s) {
          return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      // slice bytes num
      const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
      /**
       * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
       */
      class Signature {
          constructor(r, s, recovery) {
              this.r = r;
              this.s = s;
              this.recovery = recovery;
              this.assertValidity();
          }
          // pair (bytes of r, bytes of s)
          static fromCompact(hex) {
              const l = CURVE.nByteLength;
              hex = ensureBytes('compactSignature', hex, l * 2);
              return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
          }
          // DER encoded ECDSA signature
          // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
          static fromDER(hex) {
              const { r, s } = DER.toSig(ensureBytes('DER', hex));
              return new Signature(r, s);
          }
          assertValidity() {
              // can use assertGE here
              if (!isWithinCurveOrder(this.r))
                  throw new Error('r must be 0 < r < CURVE.n');
              if (!isWithinCurveOrder(this.s))
                  throw new Error('s must be 0 < s < CURVE.n');
          }
          addRecoveryBit(recovery) {
              return new Signature(this.r, this.s, recovery);
          }
          recoverPublicKey(msgHash) {
              const { r, s, recovery: rec } = this;
              const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash
              if (rec == null || ![0, 1, 2, 3].includes(rec))
                  throw new Error('recovery id invalid');
              const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
              if (radj >= Fp.ORDER)
                  throw new Error('recovery id 2 or 3 invalid');
              const prefix = (rec & 1) === 0 ? '02' : '03';
              const R = Point.fromHex(prefix + numToNByteStr(radj));
              const ir = invN(radj); // r^-1
              const u1 = modN(-h * ir); // -hr^-1
              const u2 = modN(s * ir); // sr^-1
              const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
              if (!Q)
                  throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
              Q.assertValidity();
              return Q;
          }
          // Signatures should be low-s, to prevent malleability.
          hasHighS() {
              return isBiggerThanHalfOrder(this.s);
          }
          normalizeS() {
              return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
          }
          // DER-encoded
          toDERRawBytes() {
              return hexToBytes(this.toDERHex());
          }
          toDERHex() {
              return DER.hexFromSig({ r: this.r, s: this.s });
          }
          // padded bytes of r, then padded bytes of s
          toCompactRawBytes() {
              return hexToBytes(this.toCompactHex());
          }
          toCompactHex() {
              return numToNByteStr(this.r) + numToNByteStr(this.s);
          }
      }
      const utils = {
          isValidPrivateKey(privateKey) {
              try {
                  normPrivateKeyToScalar(privateKey);
                  return true;
              }
              catch (error) {
                  return false;
              }
          },
          normPrivateKeyToScalar: normPrivateKeyToScalar,
          /**
           * Produces cryptographically secure private key from random of size
           * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
           */
          randomPrivateKey: () => {
              const length = getMinHashLength(CURVE.n);
              return mapHashToField(CURVE.randomBytes(length), CURVE.n);
          },
          /**
           * Creates precompute table for an arbitrary EC point. Makes point "cached".
           * Allows to massively speed-up `point.multiply(scalar)`.
           * @returns cached point
           * @example
           * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
           * fast.multiply(privKey); // much faster ECDH now
           */
          precompute(windowSize = 8, point = Point.BASE) {
              point._setWindowSize(windowSize);
              point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
              return point;
          },
      };
      /**
       * Computes public key for a private key. Checks for validity of the private key.
       * @param privateKey private key
       * @param isCompressed whether to return compact (default), or full key
       * @returns Public key, full when isCompressed=false; short when isCompressed=true
       */
      function getPublicKey(privateKey, isCompressed = true) {
          return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      /**
       * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
       */
      function isProbPub(item) {
          const arr = isBytes(item);
          const str = typeof item === 'string';
          const len = (arr || str) && item.length;
          if (arr)
              return len === compressedLen || len === uncompressedLen;
          if (str)
              return len === 2 * compressedLen || len === 2 * uncompressedLen;
          if (item instanceof Point)
              return true;
          return false;
      }
      /**
       * ECDH (Elliptic Curve Diffie Hellman).
       * Computes shared public key from private key and public key.
       * Checks: 1) private key validity 2) shared key is on-curve.
       * Does NOT hash the result.
       * @param privateA private key
       * @param publicB different public key
       * @param isCompressed whether to return compact (default), or full key
       * @returns shared public key
       */
      function getSharedSecret(privateA, publicB, isCompressed = true) {
          if (isProbPub(privateA))
              throw new Error('first arg must be private key');
          if (!isProbPub(publicB))
              throw new Error('second arg must be public key');
          const b = Point.fromHex(publicB); // check for being on-curve
          return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
      // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
      // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
      // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
      const bits2int = CURVE.bits2int ||
          function (bytes) {
              // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
              // for some cases, since bytes.length * 8 is not actual bitLength.
              const num = bytesToNumberBE(bytes); // check for == u8 done here
              const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
              return delta > 0 ? num >> BigInt(delta) : num;
          };
      const bits2int_modN = CURVE.bits2int_modN ||
          function (bytes) {
              return modN(bits2int(bytes)); // can't use bytesToNumberBE here
          };
      // NOTE: pads output with zero as per spec
      const ORDER_MASK = bitMask(CURVE.nBitLength);
      /**
       * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
       */
      function int2octets(num) {
          if (typeof num !== 'bigint')
              throw new Error('bigint expected');
          if (!(_0n <= num && num < ORDER_MASK))
              throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
          // works with order, can have different size than numToField!
          return numberToBytesBE(num, CURVE.nByteLength);
      }
      // Steps A, D of RFC6979 3.2
      // Creates RFC6979 seed; converts msg/privKey to numbers.
      // Used only in sign, not in verify.
      // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
      // Also it can be bigger for P224 + SHA256
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
          if (['recovered', 'canonical'].some((k) => k in opts))
              throw new Error('sign() legacy options not supported');
          const { hash, randomBytes } = CURVE;
          let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
          if (lowS == null)
              lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
          msgHash = ensureBytes('msgHash', msgHash);
          if (prehash)
              msgHash = ensureBytes('prehashed msgHash', hash(msgHash));
          // We can't later call bits2octets, since nested bits2int is broken for curves
          // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
          // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
          const h1int = bits2int_modN(msgHash);
          const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
          const seedArgs = [int2octets(d), int2octets(h1int)];
          // extraEntropy. RFC6979 3.6: additional k' (optional).
          if (ent != null && ent !== false) {
              // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
              const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
              seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes
          }
          const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2
          const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
          // Converts signature params into point w r/s, checks result for validity.
          function k2sig(kBytes) {
              // RFC 6979 Section 3.2, step 3: k = bits2int(T)
              const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
              if (!isWithinCurveOrder(k))
                  return; // Important: all mod() calls here must be done over N
              const ik = invN(k); // k^-1 mod n
              const q = Point.BASE.multiply(k).toAffine(); // q = Gk
              const r = modN(q.x); // r = q.x mod n
              if (r === _0n)
                  return;
              // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
              // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
              // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
              const s = modN(ik * modN(m + r * d)); // Not using blinding here
              if (s === _0n)
                  return;
              let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n$1); // recovery bit (2 or 3, when q.x > n)
              let normS = s;
              if (lowS && isBiggerThanHalfOrder(s)) {
                  normS = normalizeS(s); // if lowS was passed, ensure s is always
                  recovery ^= 1; // // in the bottom half of N
              }
              return new Signature(r, normS, recovery); // use normS, not s
          }
          return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      /**
       * Signs message hash with a private key.
       * ```
       * sign(m, d, k) where
       *   (x, y) = G × k
       *   r = x mod n
       *   s = (m + dr)/k mod n
       * ```
       * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
       * @param privKey private key
       * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
       * @returns signature with recovery param
       */
      function sign(msgHash, privKey, opts = defaultSigOpts) {
          const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
          const C = CURVE;
          const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
          return drbg(seed, k2sig); // Steps B, C, D, E, F, G
      }
      // Enable precomputes. Slows down first publicKey computation by 20ms.
      Point.BASE._setWindowSize(8);
      // utils.precompute(8, ProjectivePoint.BASE)
      /**
       * Verifies a signature against message hash and public key.
       * Rejects lowS signatures by default: to override,
       * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
       *
       * ```
       * verify(r, s, h, P) where
       *   U1 = hs^-1 mod n
       *   U2 = rs^-1 mod n
       *   R = U1⋅G - U2⋅P
       *   mod(R.x, n) == r
       * ```
       */
      function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
          const sg = signature;
          msgHash = ensureBytes('msgHash', msgHash);
          publicKey = ensureBytes('publicKey', publicKey);
          if ('strict' in opts)
              throw new Error('options.strict was renamed to lowS');
          const { lowS, prehash } = opts;
          let _sig = undefined;
          let P;
          try {
              if (typeof sg === 'string' || isBytes(sg)) {
                  // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
                  // Since DER can also be 2*nByteLength bytes, we check for it first.
                  try {
                      _sig = Signature.fromDER(sg);
                  }
                  catch (derError) {
                      if (!(derError instanceof DER.Err))
                          throw derError;
                      _sig = Signature.fromCompact(sg);
                  }
              }
              else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
                  const { r, s } = sg;
                  _sig = new Signature(r, s);
              }
              else {
                  throw new Error('PARSE');
              }
              P = Point.fromHex(publicKey);
          }
          catch (error) {
              if (error.message === 'PARSE')
                  throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
              return false;
          }
          if (lowS && _sig.hasHighS())
              return false;
          if (prehash)
              msgHash = CURVE.hash(msgHash);
          const { r, s } = _sig;
          const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
          const is = invN(s); // s^-1
          const u1 = modN(h * is); // u1 = hs^-1 mod n
          const u2 = modN(r * is); // u2 = rs^-1 mod n
          const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
          if (!R)
              return false;
          const v = modN(R.x);
          return v === r;
      }
      return {
          CURVE,
          getPublicKey,
          getSharedSecret,
          sign,
          verify,
          ProjectivePoint: Point,
          Signature,
          utils,
      };
  }

  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  // connects noble-curves to noble-hashes
  function getHash(hash) {
      return {
          hash,
          hmac: (key, ...msgs) => hmac(hash, key, concatBytes$1(...msgs)),
          randomBytes: randomBytes$1,
      };
  }
  function createCurve(curveDef, defHash) {
      const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });
      return Object.freeze({ ...create(defHash), create });
  }

  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
  const secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const divNearest = (a, b) => (a + b / _2n) / b;
  /**
   * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
   * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
   */
  function sqrtMod(y) {
      const P = secp256k1P;
      // prettier-ignore
      const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      // prettier-ignore
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = (y * y * y) % P; // x^3, 11
      const b3 = (b2 * b2 * y) % P; // x^7
      const b6 = (pow2(b3, _3n, P) * b3) % P;
      const b9 = (pow2(b6, _3n, P) * b3) % P;
      const b11 = (pow2(b9, _2n, P) * b2) % P;
      const b22 = (pow2(b11, _11n, P) * b11) % P;
      const b44 = (pow2(b22, _22n, P) * b22) % P;
      const b88 = (pow2(b44, _44n, P) * b44) % P;
      const b176 = (pow2(b88, _88n, P) * b88) % P;
      const b220 = (pow2(b176, _44n, P) * b44) % P;
      const b223 = (pow2(b220, _3n, P) * b3) % P;
      const t1 = (pow2(b223, _23n, P) * b22) % P;
      const t2 = (pow2(t1, _6n, P) * b2) % P;
      const root = pow2(t2, _2n, P);
      if (!Fp.eql(Fp.sqr(root), y))
          throw new Error('Cannot find square root');
      return root;
  }
  const Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
  const secp256k1$1 = createCurve({
      a: BigInt(0), // equation params: a, b
      b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
      Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
      n: secp256k1N, // Curve order, total count of valid points in the field
      // Base point (x, y) aka generator point
      Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
      Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
      h: BigInt(1), // Cofactor
      lowS: true, // Allow only low-S signatures by default in sign() and verify()
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
          beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
          splitScalar: (k) => {
              const n = secp256k1N;
              const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
              const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
              const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
              const b2 = a1;
              const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)
              const c1 = divNearest(b2 * k, n);
              const c2 = divNearest(-b1 * k, n);
              let k1 = mod(k - c1 * a1 - c2 * a2, n);
              let k2 = mod(-c1 * b1 - c2 * b2, n);
              const k1neg = k1 > POW_2_128;
              const k2neg = k2 > POW_2_128;
              if (k1neg)
                  k1 = n - k1;
              if (k2neg)
                  k2 = n - k2;
              if (k1 > POW_2_128 || k2 > POW_2_128) {
                  throw new Error('splitScalar: Endomorphism failed, k=' + k);
              }
              return { k1neg, k1, k2neg, k2 };
          },
      },
  }, sha256);
  // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
  BigInt(0);
  secp256k1$1.ProjectivePoint;

  var ethereumCryptography = /*#__PURE__*/Object.freeze({
    __proto__: null,
    secp256k1: secp256k1$1
  });

  var _a$1;
  const secp256k1 = (_a$1 = secp256k1$1) !== null && _a$1 !== void 0 ? _a$1 : ethereumCryptography;
  /**
   * 2^64-1
   */
  const MAX_UINT64 = BigInt('0xffffffffffffffff');
  /**
   * The max integer that the evm can handle (2^256-1)
   */
  const MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
  const SECP256K1_ORDER = secp256k1.CURVE.n;
  const SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2);

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const keyStoreSchema = {
      type: 'object',
      required: ['crypto', 'id', 'version', 'address'],
      properties: {
          crypto: {
              type: 'object',
              required: ['cipher', 'ciphertext', 'cipherparams', 'kdf', 'kdfparams', 'mac'],
              properties: {
                  cipher: { type: 'string' },
                  ciphertext: { type: 'string' },
                  cipherparams: { type: 'object' },
                  kdf: { type: 'string' },
                  kdfparams: { type: 'object' },
                  salt: { type: 'string' },
                  mac: { type: 'string' },
              },
          },
          id: { type: 'string' },
          version: { type: 'number' },
          address: { type: 'string' },
      },
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var Chain;
  (function (Chain) {
      Chain[Chain["Mainnet"] = 1] = "Mainnet";
      Chain[Chain["Goerli"] = 5] = "Goerli";
      Chain[Chain["Sepolia"] = 11155111] = "Sepolia";
  })(Chain || (Chain = {}));
  var Hardfork;
  (function (Hardfork) {
      Hardfork["Chainstart"] = "chainstart";
      Hardfork["Homestead"] = "homestead";
      Hardfork["Dao"] = "dao";
      Hardfork["TangerineWhistle"] = "tangerineWhistle";
      Hardfork["SpuriousDragon"] = "spuriousDragon";
      Hardfork["Byzantium"] = "byzantium";
      Hardfork["Constantinople"] = "constantinople";
      Hardfork["Petersburg"] = "petersburg";
      Hardfork["Istanbul"] = "istanbul";
      Hardfork["MuirGlacier"] = "muirGlacier";
      Hardfork["Berlin"] = "berlin";
      Hardfork["London"] = "london";
      Hardfork["ArrowGlacier"] = "arrowGlacier";
      Hardfork["GrayGlacier"] = "grayGlacier";
      Hardfork["MergeForkIdTransition"] = "mergeForkIdTransition";
      Hardfork["Merge"] = "merge";
      Hardfork["Shanghai"] = "shanghai";
      Hardfork["ShardingForkDev"] = "shardingFork";
  })(Hardfork || (Hardfork = {}));
  var ConsensusType;
  (function (ConsensusType) {
      ConsensusType["ProofOfStake"] = "pos";
      ConsensusType["ProofOfWork"] = "pow";
      ConsensusType["ProofOfAuthority"] = "poa";
  })(ConsensusType || (ConsensusType = {}));
  var ConsensusAlgorithm;
  (function (ConsensusAlgorithm) {
      ConsensusAlgorithm["Ethash"] = "ethash";
      ConsensusAlgorithm["Clique"] = "clique";
      ConsensusAlgorithm["Casper"] = "casper";
  })(ConsensusAlgorithm || (ConsensusAlgorithm = {}));
  var CustomChain;
  (function (CustomChain) {
      /**
       * Polygon (Matic) Mainnet
       *
       * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
       */
      CustomChain["PolygonMainnet"] = "polygon-mainnet";
      /**
       * Polygon (Matic) Mumbai Testnet
       *
       * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
       */
      CustomChain["PolygonMumbai"] = "polygon-mumbai";
      /**
       * Arbitrum Rinkeby Testnet
       *
       * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)
       */
      CustomChain["ArbitrumRinkebyTestnet"] = "arbitrum-rinkeby-testnet";
      /**
       * Arbitrum One - mainnet for Arbitrum roll-up
       *
       * - [Documentation](https://developer.offchainlabs.com/public-chains)
       */
      CustomChain["ArbitrumOne"] = "arbitrum-one";
      /**
       * xDai EVM sidechain with a native stable token
       *
       * - [Documentation](https://www.xdaichain.com/)
       */
      CustomChain["xDaiChain"] = "x-dai-chain";
      /**
       * Optimistic Kovan - testnet for Optimism roll-up
       *
       * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
       */
      CustomChain["OptimisticKovan"] = "optimistic-kovan";
      /**
       * Optimistic Ethereum - mainnet for Optimism roll-up
       *
       * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
       */
      CustomChain["OptimisticEthereum"] = "optimistic-ethereum";
  })(CustomChain || (CustomChain = {}));

  /**
   * Type output options
   */
  var TypeOutput;
  (function (TypeOutput) {
      TypeOutput[TypeOutput["Number"] = 0] = "Number";
      TypeOutput[TypeOutput["BigInt"] = 1] = "BigInt";
      TypeOutput[TypeOutput["Uint8Array"] = 2] = "Uint8Array";
      TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
  })(TypeOutput || (TypeOutput = {}));

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * Removes '0x' from a given `String` if present
   * @param str the string value
   * @returns the string without 0x prefix
   */
  const stripHexPrefix = (str) => {
      if (typeof str !== 'string')
          throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
      return isHexPrefixed(str) ? str.slice(2) : str;
  };
  /**
   * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally
   * @param nonce string parsed from the Geth genesis file
   * @returns nonce as a 0x-prefixed 8 byte string
   */
  function formatNonce(nonce) {
      if (!nonce || nonce === '0x0') {
          return '0x0000000000000000';
      }
      if (isHexPrefixed(nonce)) {
          return `0x${stripHexPrefix(nonce).padStart(16, '0')}`;
      }
      return `0x${nonce.padStart(16, '0')}`;
  }
  /**
   * Converts a `Number` into a hex `String`
   * @param {Number} i
   * @return {String}
   */
  const intToHex = function (i) {
      if (!Number.isSafeInteger(i) || i < 0) {
          throw new Error(`Received an invalid integer type: ${i}`);
      }
      return `0x${i.toString(16)}`;
  };
  /**
   * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object
   * @param json object representing the Geth genesis file
   * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition
   * hardfork, which by default is post merge as with the merged eth networks but could also come
   * before merge like in kiln genesis
   * @returns genesis parameters in a `CommonOpts` compliant object
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function parseGethParams(json, mergeForkIdPostMerge = true) {
      var _a, _b;
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, } = json;
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      let { extraData, timestamp, nonce } = json;
      const genesisTimestamp = Number(timestamp);
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const { chainId } = config;
      // geth is not strictly putting empty fields with a 0x prefix
      if (extraData === '') {
          extraData = '0x';
      }
      // geth may use number for timestamp
      if (!isHexPrefixed(timestamp)) {
          // eslint-disable-next-line radix
          timestamp = intToHex(parseInt(timestamp));
      }
      // geth may not give us a nonce strictly formatted to an 8 byte hex string
      if (nonce.length !== 18) {
          nonce = formatNonce(nonce);
      }
      // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time
      // but have different configuration parameters in geth genesis parameters
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      if (config.eip155Block !== config.eip158Block) {
          throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');
      }
      const params = {
          name,
          chainId,
          networkId: chainId,
          genesis: {
              timestamp,
              // eslint-disable-next-line radix
              gasLimit: parseInt(gasLimit), // geth gasLimit and difficulty are hex strings while ours are `number`s
              // eslint-disable-next-line radix
              difficulty: parseInt(difficulty),
              nonce,
              extraData,
              mixHash,
              coinbase,
              baseFeePerGas,
          },
          hardfork: undefined,
          hardforks: [],
          bootstrapNodes: [],
          consensus: 
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          config.clique !== undefined
              ? {
                  type: 'poa',
                  algorithm: 'clique',
                  clique: {
                      // The recent geth genesis seems to be using blockperiodseconds
                      // and epochlength for clique specification
                      // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ
                      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                      period: (_a = config.clique.period) !== null && _a !== void 0 ? _a : config.clique.blockperiodseconds,
                      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment
                      epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength,
                  },
              }
              : {
                  type: 'pow',
                  algorithm: 'ethash',
                  ethash: {},
              },
      };
      const forkMap = {
          [Hardfork.Homestead]: { name: 'homesteadBlock' },
          [Hardfork.Dao]: { name: 'daoForkBlock' },
          [Hardfork.TangerineWhistle]: { name: 'eip150Block' },
          [Hardfork.SpuriousDragon]: { name: 'eip155Block' },
          [Hardfork.Byzantium]: { name: 'byzantiumBlock' },
          [Hardfork.Constantinople]: { name: 'constantinopleBlock' },
          [Hardfork.Petersburg]: { name: 'petersburgBlock' },
          [Hardfork.Istanbul]: { name: 'istanbulBlock' },
          [Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },
          [Hardfork.Berlin]: { name: 'berlinBlock' },
          [Hardfork.London]: { name: 'londonBlock' },
          [Hardfork.MergeForkIdTransition]: {
              name: 'mergeForkBlock',
              postMerge: mergeForkIdPostMerge,
          },
          [Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },
          [Hardfork.ShardingForkDev]: {
              name: 'shardingForkTime',
              postMerge: true,
              isTimestamp: true,
          },
      };
      // forkMapRev is the map from config field name to Hardfork
      const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {
          acc[forkMap[elem].name] = elem;
          return acc;
      }, {});
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      const configHardforkNames = Object.keys(config).filter(
      // eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/prefer-optional-chain
      key => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);
      params.hardforks = configHardforkNames
          .map(nameBlock => ({
          name: forkMapRev[nameBlock],
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          block: 
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          forkMap[forkMapRev[nameBlock]].isTimestamp === true ||
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
              typeof config[nameBlock] !== 'number'
              ? // eslint-disable-next-line no-null/no-null
                  null
              : // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  config[nameBlock],
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          timestamp: 
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          forkMap[forkMapRev[nameBlock]].isTimestamp === true &&
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
              typeof config[nameBlock] === 'number'
              ? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  config[nameBlock]
              : undefined,
      }))
          // eslint-disable-next-line no-null/no-null
          .filter(fork => fork.block !== null || fork.timestamp !== undefined);
      params.hardforks.sort((a, b) => { var _a, _b; return ((_a = a.block) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.block) !== null && _b !== void 0 ? _b : Infinity); });
      params.hardforks.sort((a, b) => { var _a, _b; return ((_a = a.timestamp) !== null && _a !== void 0 ? _a : genesisTimestamp) - ((_b = b.timestamp) !== null && _b !== void 0 ? _b : genesisTimestamp); });
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      if (config.terminalTotalDifficulty !== undefined) {
          // Following points need to be considered for placement of merge hf
          // - Merge hardfork can't be placed at genesis
          // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals
          // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL
          //   necessary for e.g. withdrawals
          const mergeConfig = {
              name: Hardfork.Merge,
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
              ttd: config.terminalTotalDifficulty,
              // eslint-disable-next-line no-null/no-null
              block: null,
          };
          // Merge hardfork has to be placed before first hardfork that is dependent on merge
          const postMergeIndex = params.hardforks.findIndex(
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          hf => { var _a; return ((_a = forkMap[hf.name]) === null || _a === void 0 ? void 0 : _a.postMerge) === true; });
          if (postMergeIndex !== -1) {
              params.hardforks.splice(postMergeIndex, 0, mergeConfig);
          }
          else {
              params.hardforks.push(mergeConfig);
          }
      }
      const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;
      params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;
      params.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 });
      return params;
  }
  /**
   * Parses a genesis.json exported from Geth into parameters for Common instance
   * @param json representing the Geth genesis file
   * @param name optional chain name
   * @returns parsed params
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function parseGethGenesis(json, name, mergeForkIdPostMerge) {
      try {
          if (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {
              throw new Error('Invalid format, expected geth genesis fields missing');
          }
          if (name !== undefined) {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign
              json.name = name;
          }
          return parseGethParams(json, mergeForkIdPostMerge);
      }
      catch (e) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions
          throw new Error(`Error parsing parameters file: ${e.message}`);
      }
  }
  /**
   * Pads a `String` to have an even length
   * @param value
   * @return output
   */
  function padToEven(value) {
      let a = value;
      if (typeof a !== 'string') {
          throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
      }
      if (a.length % 2)
          a = `0${a}`;
      return a;
  }
  /**
   * Converts an `Number` to a `Uint8Array`
   * @param {Number} i
   * @return {Uint8Array}
   */
  const intToUint8Array = function (i) {
      const hex = intToHex(i);
      return hexToBytes$1(`0x${padToEven(hex.slice(2))}`);
  };
  /**
   * Attempts to turn a value into a `Uint8Array`.
   * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects
   * with a `toArray()` or `toUint8Array()` method.
   * @param v the value
   */
  const toUint8Array = function (v) {
      var _a;
      // eslint-disable-next-line no-null/no-null
      if (v === null || v === undefined) {
          return new Uint8Array();
      }
      if (v instanceof Uint8Array) {
          return v;
      }
      if (((_a = v === null || v === void 0 ? void 0 : v.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array') {
          return Uint8Array.from(v);
      }
      if (Array.isArray(v)) {
          return Uint8Array.from(v);
      }
      if (typeof v === 'string') {
          if (!isHexString(v)) {
              throw new Error(`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`);
          }
          return hexToBytes$1(padToEven(stripHexPrefix(v)));
      }
      if (typeof v === 'number') {
          return toUint8Array(numberToHex(v));
      }
      if (typeof v === 'bigint') {
          if (v < BigInt(0)) {
              throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);
          }
          let n = v.toString(16);
          if (n.length % 2)
              n = `0${n}`;
          return toUint8Array(`0x${n}`);
      }
      if (v.toArray) {
          // converts a BN to a Uint8Array
          return Uint8Array.from(v.toArray());
      }
      throw new Error('invalid type');
  };
  /**
   * Converts a {@link Uint8Array} to a {@link bigint}
   */
  function uint8ArrayToBigInt$2(buf) {
      const hex = bytesToHex$1(buf);
      if (hex === '0x') {
          return BigInt(0);
      }
      return BigInt(hex);
  }
  /**
   * Converts a {@link bigint} to a {@link Uint8Array}
   */
  function bigIntToUint8Array$1(num) {
      return toUint8Array(`0x${num.toString(16)}`);
  }
  /**
   * Returns a Uint8Array filled with 0s.
   * @param bytes the number of bytes the Uint8Array should be
   */
  const zeros = function (bytes) {
      return new Uint8Array(bytes).fill(0);
  };
  /**
   * Pads a `Uint8Array` with zeros till it has `length` bytes.
   * Truncates the beginning or end of input if its length exceeds `length`.
   * @param msg the value to pad (Uint8Array)
   * @param length the number of bytes the output should be
   * @param right whether to start padding form the left or right
   * @return (Uint8Array)
   */
  const setLength = function (msg, length, right) {
      const buf = zeros(length);
      if (msg.length < length) {
          buf.set(msg, length - msg.length);
          return buf;
      }
      return msg.subarray(-length);
  };
  /**
   * Throws if input is not a Uint8Array
   * @param {Uint8Array} input value to check
   */
  function assertIsUint8Array(input) {
      if (!isUint8Array(input)) {
          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          const msg = `This method only supports Uint8Array but input was: ${input}`;
          throw new Error(msg);
      }
  }
  /**
   * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @param msg the value to pad (Uint8Array)
   * @param length the number of bytes the output should be
   * @return (Uint8Array)
   */
  const setLengthLeft = function (msg, length) {
      assertIsUint8Array(msg);
      return setLength(msg, length);
  };
  /**
   * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.
   * @param a (Uint8Array|Array|String)
   * @return (Uint8Array|Array|String)
   */
  function stripZeros(a) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
      let first = a[0];
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
      while (a.length > 0 && first.toString() === '0') {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign
          a = a.slice(1);
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access
          first = a[0];
      }
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return a;
  }
  /**
   * Trims leading zeros from a `Uint8Array`.
   * @param a (Uint8Array)
   * @return (Uint8Array)
   */
  const unpadUint8Array = function (a) {
      assertIsUint8Array(a);
      return stripZeros(a);
  };
  /**
   * Converts a {@link bigint} to a `0x` prefixed hex string
   */
  const bigIntToHex = (num) => `0x${num.toString(16)}`;
  /**
   * Convert value from bigint to an unpadded Uint8Array
   * (useful for RLP transport)
   * @param value value to convert
   */
  function bigIntToUnpaddedUint8Array(value) {
      return unpadUint8Array(bigIntToUint8Array$1(value));
  }
  function calculateSigRecovery(v, chainId) {
      if (v === BigInt(0) || v === BigInt(1))
          return v;
      if (chainId === undefined) {
          return v - BigInt(27);
      }
      return v - (chainId * BigInt(2) + BigInt(35));
  }
  function isValidSigRecovery(recovery) {
      return recovery === BigInt(0) || recovery === BigInt(1);
  }
  /**
   * ECDSA public key recovery from signature.
   * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions
   * @returns Recovered public key
   */
  const ecrecover = function (msgHash, v, r, s, chainId) {
      const recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
          throw new Error('Invalid signature v value');
      }
      const senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt$2(r), uint8ArrayToBigInt$2(s))
          .addRecoveryBit(Number(recovery))
          .recoverPublicKey(msgHash)
          .toRawBytes(false);
      return senderPubKey.slice(1);
  };
  function toType(input, outputType) {
      // eslint-disable-next-line no-null/no-null
      if (input === null) {
          // eslint-disable-next-line no-null/no-null
          return null;
      }
      if (input === undefined) {
          return undefined;
      }
      if (typeof input === 'string' && !isHexString(input)) {
          throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
      }
      else if (typeof input === 'number' && !Number.isSafeInteger(input)) {
          throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
      }
      const output = toUint8Array(input);
      switch (outputType) {
          case TypeOutput.Uint8Array:
              return output;
          case TypeOutput.BigInt:
              return uint8ArrayToBigInt$2(output);
          case TypeOutput.Number: {
              const bigInt = uint8ArrayToBigInt$2(output);
              if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {
                  throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');
              }
              return Number(bigInt);
          }
          case TypeOutput.PrefixedHexString:
              return bytesToHex$1(output);
          default:
              throw new Error('unknown outputType');
      }
  }

  var dist = {};

  var hasRequiredDist;

  function requireDist () {
  	if (hasRequiredDist) return dist;
  	hasRequiredDist = 1;
  	Object.defineProperty(dist, "__esModule", { value: true });
  	dist.RLP = dist.utils = dist.decode = dist.encode = void 0;
  	/**
  	 * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/
  	 * This function takes in data, converts it to Uint8Array if not,
  	 * and adds a length for recursion.
  	 * @param input Will be converted to Uint8Array
  	 * @returns Uint8Array of encoded data
  	 **/
  	function encode(input) {
  	    if (Array.isArray(input)) {
  	        const output = [];
  	        let outputLength = 0;
  	        for (let i = 0; i < input.length; i++) {
  	            const encoded = encode(input[i]);
  	            output.push(encoded);
  	            outputLength += encoded.length;
  	        }
  	        return concatBytes(encodeLength(outputLength, 192), ...output);
  	    }
  	    const inputBuf = toBytes(input);
  	    if (inputBuf.length === 1 && inputBuf[0] < 128) {
  	        return inputBuf;
  	    }
  	    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
  	}
  	dist.encode = encode;
  	/**
  	 * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.
  	 * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.
  	 * @param input
  	 * @param start
  	 * @param end
  	 */
  	function safeSlice(input, start, end) {
  	    if (end > input.length) {
  	        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');
  	    }
  	    return input.slice(start, end);
  	}
  	/**
  	 * Parse integers. Check if there is no leading zeros
  	 * @param v The value to parse
  	 */
  	function decodeLength(v) {
  	    if (v[0] === 0) {
  	        throw new Error('invalid RLP: extra zeros');
  	    }
  	    return parseHexByte(bytesToHex(v));
  	}
  	function encodeLength(len, offset) {
  	    if (len < 56) {
  	        return Uint8Array.from([len + offset]);
  	    }
  	    const hexLength = numberToHex(len);
  	    const lLength = hexLength.length / 2;
  	    const firstByte = numberToHex(offset + 55 + lLength);
  	    return Uint8Array.from(hexToBytes(firstByte + hexLength));
  	}
  	function decode(input, stream = false) {
  	    if (typeof input === 'undefined' || input === null || input.length === 0) {
  	        return Uint8Array.from([]);
  	    }
  	    const inputBytes = toBytes(input);
  	    const decoded = _decode(inputBytes);
  	    if (stream) {
  	        return decoded;
  	    }
  	    if (decoded.remainder.length !== 0) {
  	        throw new Error('invalid RLP: remainder must be zero');
  	    }
  	    return decoded.data;
  	}
  	dist.decode = decode;
  	/** Decode an input with RLP */
  	function _decode(input) {
  	    let length, llength, data, innerRemainder, d;
  	    const decoded = [];
  	    const firstByte = input[0];
  	    if (firstByte <= 0x7f) {
  	        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
  	        return {
  	            data: input.slice(0, 1),
  	            remainder: input.slice(1),
  	        };
  	    }
  	    else if (firstByte <= 0xb7) {
  	        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
  	        // The range of the first byte is [0x80, 0xb7]
  	        length = firstByte - 0x7f;
  	        // set 0x80 null to 0
  	        if (firstByte === 0x80) {
  	            data = Uint8Array.from([]);
  	        }
  	        else {
  	            data = safeSlice(input, 1, length);
  	        }
  	        if (length === 2 && data[0] < 0x80) {
  	            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');
  	        }
  	        return {
  	            data,
  	            remainder: input.slice(length),
  	        };
  	    }
  	    else if (firstByte <= 0xbf) {
  	        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
  	        // followed by the length, followed by the string
  	        llength = firstByte - 0xb6;
  	        if (input.length - 1 < llength) {
  	            throw new Error('invalid RLP: not enough bytes for string length');
  	        }
  	        length = decodeLength(safeSlice(input, 1, llength));
  	        if (length <= 55) {
  	            throw new Error('invalid RLP: expected string length to be greater than 55');
  	        }
  	        data = safeSlice(input, llength, length + llength);
  	        return {
  	            data,
  	            remainder: input.slice(length + llength),
  	        };
  	    }
  	    else if (firstByte <= 0xf7) {
  	        // a list between 0-55 bytes long
  	        length = firstByte - 0xbf;
  	        innerRemainder = safeSlice(input, 1, length);
  	        while (innerRemainder.length) {
  	            d = _decode(innerRemainder);
  	            decoded.push(d.data);
  	            innerRemainder = d.remainder;
  	        }
  	        return {
  	            data: decoded,
  	            remainder: input.slice(length),
  	        };
  	    }
  	    else {
  	        // a list over 55 bytes long
  	        llength = firstByte - 0xf6;
  	        length = decodeLength(safeSlice(input, 1, llength));
  	        if (length < 56) {
  	            throw new Error('invalid RLP: encoded list too short');
  	        }
  	        const totalLength = llength + length;
  	        if (totalLength > input.length) {
  	            throw new Error('invalid RLP: total length is larger than the data');
  	        }
  	        innerRemainder = safeSlice(input, llength, totalLength);
  	        while (innerRemainder.length) {
  	            d = _decode(innerRemainder);
  	            decoded.push(d.data);
  	            innerRemainder = d.remainder;
  	        }
  	        return {
  	            data: decoded,
  	            remainder: input.slice(totalLength),
  	        };
  	    }
  	}
  	const cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));
  	function bytesToHex(uint8a) {
  	    // Pre-caching chars with `cachedHexes` speeds this up 6x
  	    let hex = '';
  	    for (let i = 0; i < uint8a.length; i++) {
  	        hex += cachedHexes[uint8a[i]];
  	    }
  	    return hex;
  	}
  	function parseHexByte(hexByte) {
  	    const byte = Number.parseInt(hexByte, 16);
  	    if (Number.isNaN(byte))
  	        throw new Error('Invalid byte sequence');
  	    return byte;
  	}
  	// Caching slows it down 2-3x
  	function hexToBytes(hex) {
  	    if (typeof hex !== 'string') {
  	        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
  	    }
  	    if (hex.length % 2)
  	        throw new Error('hexToBytes: received invalid unpadded hex');
  	    const array = new Uint8Array(hex.length / 2);
  	    for (let i = 0; i < array.length; i++) {
  	        const j = i * 2;
  	        array[i] = parseHexByte(hex.slice(j, j + 2));
  	    }
  	    return array;
  	}
  	/** Concatenates two Uint8Arrays into one. */
  	function concatBytes(...arrays) {
  	    if (arrays.length === 1)
  	        return arrays[0];
  	    const length = arrays.reduce((a, arr) => a + arr.length, 0);
  	    const result = new Uint8Array(length);
  	    for (let i = 0, pad = 0; i < arrays.length; i++) {
  	        const arr = arrays[i];
  	        result.set(arr, pad);
  	        pad += arr.length;
  	    }
  	    return result;
  	}
  	function utf8ToBytes(utf) {
  	    return new TextEncoder().encode(utf);
  	}
  	/** Transform an integer into its hexadecimal value */
  	function numberToHex(integer) {
  	    if (integer < 0) {
  	        throw new Error('Invalid integer as argument, must be unsigned!');
  	    }
  	    const hex = integer.toString(16);
  	    return hex.length % 2 ? `0${hex}` : hex;
  	}
  	/** Pad a string to be even */
  	function padToEven(a) {
  	    return a.length % 2 ? `0${a}` : a;
  	}
  	/** Check if a string is prefixed by 0x */
  	function isHexPrefixed(str) {
  	    return str.length >= 2 && str[0] === '0' && str[1] === 'x';
  	}
  	/** Removes 0x from a given String */
  	function stripHexPrefix(str) {
  	    if (typeof str !== 'string') {
  	        return str;
  	    }
  	    return isHexPrefixed(str) ? str.slice(2) : str;
  	}
  	/** Transform anything into a Uint8Array */
  	function toBytes(v) {
  	    if (v instanceof Uint8Array) {
  	        return v;
  	    }
  	    if (typeof v === 'string') {
  	        if (isHexPrefixed(v)) {
  	            return hexToBytes(padToEven(stripHexPrefix(v)));
  	        }
  	        return utf8ToBytes(v);
  	    }
  	    if (typeof v === 'number' || typeof v === 'bigint') {
  	        if (!v) {
  	            return Uint8Array.from([]);
  	        }
  	        return hexToBytes(numberToHex(v));
  	    }
  	    if (v === null || v === undefined) {
  	        return Uint8Array.from([]);
  	    }
  	    throw new Error('toBytes: received unsupported type ' + typeof v);
  	}
  	dist.utils = {
  	    bytesToHex,
  	    concatBytes,
  	    hexToBytes,
  	    utf8ToBytes,
  	};
  	dist.RLP = { encode, decode };
  	
  	return dist;
  }

  var distExports = requireDist();

  var crc32 = {};

  /*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */

  var hasRequiredCrc32;

  function requireCrc32 () {
  	if (hasRequiredCrc32) return crc32;
  	hasRequiredCrc32 = 1;
  	(function (exports) {
  		(function (factory) {
  			/*jshint ignore:start */
  			/*eslint-disable */
  			if(typeof DO_NOT_EXPORT_CRC === 'undefined') {
  				{
  					factory(exports);
  				}
  			} else {
  				factory({});
  			}
  			/*eslint-enable */
  			/*jshint ignore:end */
  		}(function(CRC32) {
  		CRC32.version = '1.2.2';
  		/*global Int32Array */
  		function signed_crc_table() {
  			var c = 0, table = new Array(256);

  			for(var n =0; n != 256; ++n){
  				c = n;
  				c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
  				c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
  				c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
  				c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
  				c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
  				c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
  				c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
  				c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
  				table[n] = c;
  			}

  			return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
  		}

  		var T0 = signed_crc_table();
  		function slice_by_16_tables(T) {
  			var c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;

  			for(n = 0; n != 256; ++n) table[n] = T[n];
  			for(n = 0; n != 256; ++n) {
  				v = T[n];
  				for(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];
  			}
  			var out = [];
  			for(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
  			return out;
  		}
  		var TT = slice_by_16_tables(T0);
  		var T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];
  		var T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];
  		var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
  		function crc32_bstr(bstr, seed) {
  			var C = seed ^ -1;
  			for(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];
  			return ~C;
  		}

  		function crc32_buf(B, seed) {
  			var C = seed ^ -1, L = B.length - 15, i = 0;
  			for(; i < L;) C =
  				Tf[B[i++] ^ (C & 255)] ^
  				Te[B[i++] ^ ((C >> 8) & 255)] ^
  				Td[B[i++] ^ ((C >> 16) & 255)] ^
  				Tc[B[i++] ^ (C >>> 24)] ^
  				Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^
  				T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^
  				T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
  			L += 15;
  			while(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];
  			return ~C;
  		}

  		function crc32_str(str, seed) {
  			var C = seed ^ -1;
  			for(var i = 0, L = str.length, c = 0, d = 0; i < L;) {
  				c = str.charCodeAt(i++);
  				if(c < 0x80) {
  					C = (C>>>8) ^ T0[(C^c)&0xFF];
  				} else if(c < 0x800) {
  					C = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];
  					C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
  				} else if(c >= 0xD800 && c < 0xE000) {
  					c = (c&1023)+64; d = str.charCodeAt(i++)&1023;
  					C = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];
  					C = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];
  					C = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];
  					C = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];
  				} else {
  					C = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];
  					C = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];
  					C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
  				}
  			}
  			return ~C;
  		}
  		CRC32.table = T0;
  		// $FlowIgnore
  		CRC32.bstr = crc32_bstr;
  		// $FlowIgnore
  		CRC32.buf = crc32_buf;
  		// $FlowIgnore
  		CRC32.str = crc32_str;
  		})); 
  	} (crc32));
  	return crc32;
  }

  var crc32Exports = requireCrc32();
  var pkg = /*@__PURE__*/getDefaultExportFromCjs(crc32Exports);

  var goerli = {
      name: 'goerli',
      chainId: 5,
      networkId: 5,
      defaultHardfork: 'merge',
      consensus: {
          type: 'poa',
          algorithm: 'clique',
          clique: {
              period: 15,
              epoch: 30000,
          },
      },
      comment: 'Cross-client PoA test network',
      url: 'https://github.com/goerli/testnet',
      genesis: {
          timestamp: '0x5c51a607',
          gasLimit: 10485760,
          difficulty: 1,
          nonce: '0x0000000000000000',
          extraData: '0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      },
      hardforks: [
          {
              name: 'chainstart',
              block: 0,
              forkHash: '0xa3f5ab08',
          },
          {
              name: 'homestead',
              block: 0,
              forkHash: '0xa3f5ab08',
          },
          {
              name: 'tangerineWhistle',
              block: 0,
              forkHash: '0xa3f5ab08',
          },
          {
              name: 'spuriousDragon',
              block: 0,
              forkHash: '0xa3f5ab08',
          },
          {
              name: 'byzantium',
              block: 0,
              forkHash: '0xa3f5ab08',
          },
          {
              name: 'constantinople',
              block: 0,
              forkHash: '0xa3f5ab08',
          },
          {
              name: 'petersburg',
              block: 0,
              forkHash: '0xa3f5ab08',
          },
          {
              name: 'istanbul',
              block: 1561651,
              forkHash: '0xc25efa5c',
          },
          {
              name: 'berlin',
              block: 4460644,
              forkHash: '0x757a1c47',
          },
          {
              name: 'london',
              block: 5062605,
              forkHash: '0xb8c6299d',
          },
          {
              '//_comment': 'The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818',
              name: 'merge',
              ttd: '10790000',
              block: 7382819,
              forkHash: '0xb8c6299d',
          },
          {
              name: 'mergeForkIdTransition',
              block: null,
              forkHash: null,
          },
          {
              name: 'shanghai',
              block: null,
              forkHash: null,
          },
      ],
      bootstrapNodes: [],
      dnsNetworks: [
          'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net',
      ],
  };

  var mainnet$1 = {
      name: 'mainnet',
      chainId: 1,
      networkId: 1,
      defaultHardfork: 'merge',
      consensus: {
          type: 'pow',
          algorithm: 'ethash',
          ethash: {},
      },
      comment: 'The Ethereum main chain',
      url: 'https://ethstats.net/',
      genesis: {
          gasLimit: 5000,
          difficulty: 17179869184,
          nonce: '0x0000000000000042',
          extraData: '0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa',
      },
      hardforks: [
          {
              name: 'chainstart',
              block: 0,
              forkHash: '0xfc64ec04',
          },
          {
              name: 'homestead',
              block: 1150000,
              forkHash: '0x97c2c34c',
          },
          {
              name: 'dao',
              block: 1920000,
              forkHash: '0x91d1f948',
          },
          {
              name: 'tangerineWhistle',
              block: 2463000,
              forkHash: '0x7a64da13',
          },
          {
              name: 'spuriousDragon',
              block: 2675000,
              forkHash: '0x3edd5b10',
          },
          {
              name: 'byzantium',
              block: 4370000,
              forkHash: '0xa00bc324',
          },
          {
              name: 'constantinople',
              block: 7280000,
              forkHash: '0x668db0af',
          },
          {
              name: 'petersburg',
              block: 7280000,
              forkHash: '0x668db0af',
          },
          {
              name: 'istanbul',
              block: 9069000,
              forkHash: '0x879d6e30',
          },
          {
              name: 'muirGlacier',
              block: 9200000,
              forkHash: '0xe029e991',
          },
          {
              name: 'berlin',
              block: 12244000,
              forkHash: '0x0eb440f6',
          },
          {
              name: 'london',
              block: 12965000,
              forkHash: '0xb715077d',
          },
          {
              name: 'arrowGlacier',
              block: 13773000,
              forkHash: '0x20c327fc',
          },
          {
              name: 'grayGlacier',
              block: 15050000,
              forkHash: '0xf0afd0e3',
          },
          {
              '//_comment': 'The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393',
              name: 'merge',
              ttd: '58750000000000000000000',
              block: 15537394,
              forkHash: '0xf0afd0e3',
          },
          {
              name: 'mergeForkIdTransition',
              block: null,
              forkHash: null,
          },
          {
              name: 'shanghai',
              block: null,
              forkHash: null,
          },
      ],
      bootstrapNodes: [],
      dnsNetworks: [
          'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net',
      ],
  };

  var sepolia = {
      name: 'sepolia',
      chainId: 11155111,
      networkId: 11155111,
      defaultHardfork: 'merge',
      consensus: {
          type: 'pow',
          algorithm: 'ethash',
          ethash: {},
      },
      comment: 'PoW test network to replace Ropsten',
      url: 'https://github.com/ethereum/go-ethereum/pull/23730',
      genesis: {
          timestamp: '0x6159af19',
          gasLimit: 30000000,
          difficulty: 131072,
          nonce: '0x0000000000000000',
          extraData: '0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521',
      },
      hardforks: [
          {
              name: 'chainstart',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'homestead',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'tangerineWhistle',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'spuriousDragon',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'byzantium',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'constantinople',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'petersburg',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'istanbul',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'muirGlacier',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'berlin',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'london',
              block: 0,
              forkHash: '0xfe3366e7',
          },
          {
              '//_comment': 'The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408',
              name: 'merge',
              ttd: '17000000000000000',
              block: 1450409,
              forkHash: '0xfe3366e7',
          },
          {
              name: 'mergeForkIdTransition',
              block: 1735371,
              forkHash: '0xb96cbd13',
          },
          {
              name: 'shanghai',
              block: null,
              timestamp: '1677557088',
              forkHash: '0xf7f9bc08',
          },
      ],
      bootstrapNodes: [],
      dnsNetworks: [
          'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net',
      ],
  };

  var e1153 = {
      name: 'EIP-1153',
      number: 1153,
      comment: 'Transient Storage',
      url: 'https://eips.ethereum.org/EIPS/eip-1153',
      status: 'Review',
      minimumHardfork: 'chainstart',
      requiredEIPs: [],
      gasConfig: {},
      gasPrices: {
          tstore: {
              v: 100,
              d: 'Base fee of the TSTORE opcode',
          },
          tload: {
              v: 100,
              d: 'Base fee of the TLOAD opcode',
          },
      },
      vm: {},
      pow: {},
  };

  var e1559 = {
      name: 'EIP-1559',
      number: 1559,
      comment: 'Fee market change for ETH 1.0 chain',
      url: 'https://eips.ethereum.org/EIPS/eip-1559',
      status: 'Final',
      minimumHardfork: 'berlin',
      requiredEIPs: [2930],
      gasConfig: {
          baseFeeMaxChangeDenominator: {
              v: 8,
              d: 'Maximum base fee change denominator',
          },
          elasticityMultiplier: {
              v: 2,
              d: 'Maximum block gas target elasticity',
          },
          initialBaseFee: {
              v: 1000000000,
              d: 'Initial base fee on first EIP1559 block',
          },
      },
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e2315 = {
      name: 'EIP-2315',
      number: 2315,
      comment: 'Simple subroutines for the EVM',
      url: 'https://eips.ethereum.org/EIPS/eip-2315',
      status: 'Draft',
      minimumHardfork: 'istanbul',
      gasConfig: {},
      gasPrices: {
          beginsub: {
              v: 2,
              d: 'Base fee of the BEGINSUB opcode',
          },
          returnsub: {
              v: 5,
              d: 'Base fee of the RETURNSUB opcode',
          },
          jumpsub: {
              v: 10,
              d: 'Base fee of the JUMPSUB opcode',
          },
      },
      vm: {},
      pow: {},
  };

  var e2537 = {
      name: 'EIP-2537',
      number: 2537,
      comment: 'BLS12-381 precompiles',
      url: 'https://eips.ethereum.org/EIPS/eip-2537',
      status: 'Draft',
      minimumHardfork: 'chainstart',
      gasConfig: {},
      gasPrices: {
          Bls12381G1AddGas: {
              v: 600,
              d: 'Gas cost of a single BLS12-381 G1 addition precompile-call',
          },
          Bls12381G1MulGas: {
              v: 12000,
              d: 'Gas cost of a single BLS12-381 G1 multiplication precompile-call',
          },
          Bls12381G2AddGas: {
              v: 4500,
              d: 'Gas cost of a single BLS12-381 G2 addition precompile-call',
          },
          Bls12381G2MulGas: {
              v: 55000,
              d: 'Gas cost of a single BLS12-381 G2 multiplication precompile-call',
          },
          Bls12381PairingBaseGas: {
              v: 115000,
              d: 'Base gas cost of BLS12-381 pairing check',
          },
          Bls12381PairingPerPairGas: {
              v: 23000,
              d: 'Per-pair gas cost of BLS12-381 pairing check',
          },
          Bls12381MapG1Gas: {
              v: 5500,
              d: 'Gas cost of BLS12-381 map field element to G1',
          },
          Bls12381MapG2Gas: {
              v: 110000,
              d: 'Gas cost of BLS12-381 map field element to G2',
          },
          Bls12381MultiExpGasDiscount: {
              v: [
                  [1, 1200],
                  [2, 888],
                  [3, 764],
                  [4, 641],
                  [5, 594],
                  [6, 547],
                  [7, 500],
                  [8, 453],
                  [9, 438],
                  [10, 423],
                  [11, 408],
                  [12, 394],
                  [13, 379],
                  [14, 364],
                  [15, 349],
                  [16, 334],
                  [17, 330],
                  [18, 326],
                  [19, 322],
                  [20, 318],
                  [21, 314],
                  [22, 310],
                  [23, 306],
                  [24, 302],
                  [25, 298],
                  [26, 294],
                  [27, 289],
                  [28, 285],
                  [29, 281],
                  [30, 277],
                  [31, 273],
                  [32, 269],
                  [33, 268],
                  [34, 266],
                  [35, 265],
                  [36, 263],
                  [37, 262],
                  [38, 260],
                  [39, 259],
                  [40, 257],
                  [41, 256],
                  [42, 254],
                  [43, 253],
                  [44, 251],
                  [45, 250],
                  [46, 248],
                  [47, 247],
                  [48, 245],
                  [49, 244],
                  [50, 242],
                  [51, 241],
                  [52, 239],
                  [53, 238],
                  [54, 236],
                  [55, 235],
                  [56, 233],
                  [57, 232],
                  [58, 231],
                  [59, 229],
                  [60, 228],
                  [61, 226],
                  [62, 225],
                  [63, 223],
                  [64, 222],
                  [65, 221],
                  [66, 220],
                  [67, 219],
                  [68, 219],
                  [69, 218],
                  [70, 217],
                  [71, 216],
                  [72, 216],
                  [73, 215],
                  [74, 214],
                  [75, 213],
                  [76, 213],
                  [77, 212],
                  [78, 211],
                  [79, 211],
                  [80, 210],
                  [81, 209],
                  [82, 208],
                  [83, 208],
                  [84, 207],
                  [85, 206],
                  [86, 205],
                  [87, 205],
                  [88, 204],
                  [89, 203],
                  [90, 202],
                  [91, 202],
                  [92, 201],
                  [93, 200],
                  [94, 199],
                  [95, 199],
                  [96, 198],
                  [97, 197],
                  [98, 196],
                  [99, 196],
                  [100, 195],
                  [101, 194],
                  [102, 193],
                  [103, 193],
                  [104, 192],
                  [105, 191],
                  [106, 191],
                  [107, 190],
                  [108, 189],
                  [109, 188],
                  [110, 188],
                  [111, 187],
                  [112, 186],
                  [113, 185],
                  [114, 185],
                  [115, 184],
                  [116, 183],
                  [117, 182],
                  [118, 182],
                  [119, 181],
                  [120, 180],
                  [121, 179],
                  [122, 179],
                  [123, 178],
                  [124, 177],
                  [125, 176],
                  [126, 176],
                  [127, 175],
                  [128, 174],
              ],
              d: 'Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair',
          },
      },
      vm: {},
      pow: {},
  };

  var e2565 = {
      name: 'EIP-2565',
      number: 2565,
      comment: 'ModExp gas cost',
      url: 'https://eips.ethereum.org/EIPS/eip-2565',
      status: 'Final',
      minimumHardfork: 'byzantium',
      gasConfig: {},
      gasPrices: {
          modexpGquaddivisor: {
              v: 3,
              d: 'Gquaddivisor from modexp precompile for gas calculation',
          },
      },
      vm: {},
      pow: {},
  };

  var e2718 = {
      name: 'EIP-2718',
      comment: 'Typed Transaction Envelope',
      url: 'https://eips.ethereum.org/EIPS/eip-2718',
      status: 'Final',
      minimumHardfork: 'chainstart',
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e2929 = {
      name: 'EIP-2929',
      comment: 'Gas cost increases for state access opcodes',
      url: 'https://eips.ethereum.org/EIPS/eip-2929',
      status: 'Final',
      minimumHardfork: 'chainstart',
      gasConfig: {},
      gasPrices: {
          coldsload: {
              v: 2100,
              d: 'Gas cost of the first read of storage from a given location (per transaction)',
          },
          coldaccountaccess: {
              v: 2600,
              d: 'Gas cost of the first read of a given address (per transaction)',
          },
          warmstorageread: {
              v: 100,
              d: "Gas cost of reading storage locations which have already loaded 'cold'",
          },
          sstoreCleanGasEIP2200: {
              v: 2900,
              d: 'Once per SSTORE operation from clean non-zero to something else',
          },
          sstoreNoopGasEIP2200: {
              v: 100,
              d: "Once per SSTORE operation if the value doesn't change",
          },
          sstoreDirtyGasEIP2200: {
              v: 100,
              d: 'Once per SSTORE operation if a dirty value is changed',
          },
          sstoreInitRefundEIP2200: {
              v: 19900,
              d: 'Once per SSTORE operation for resetting to the original zero value',
          },
          sstoreCleanRefundEIP2200: {
              v: 4900,
              d: 'Once per SSTORE operation for resetting to the original non-zero value',
          },
          call: {
              v: 0,
              d: 'Base fee of the CALL opcode',
          },
          callcode: {
              v: 0,
              d: 'Base fee of the CALLCODE opcode',
          },
          delegatecall: {
              v: 0,
              d: 'Base fee of the DELEGATECALL opcode',
          },
          staticcall: {
              v: 0,
              d: 'Base fee of the STATICCALL opcode',
          },
          balance: {
              v: 0,
              d: 'Base fee of the BALANCE opcode',
          },
          extcodesize: {
              v: 0,
              d: 'Base fee of the EXTCODESIZE opcode',
          },
          extcodecopy: {
              v: 0,
              d: 'Base fee of the EXTCODECOPY opcode',
          },
          extcodehash: {
              v: 0,
              d: 'Base fee of the EXTCODEHASH opcode',
          },
          sload: {
              v: 0,
              d: 'Base fee of the SLOAD opcode',
          },
          sstore: {
              v: 0,
              d: 'Base fee of the SSTORE opcode',
          },
      },
      vm: {},
      pow: {},
  };

  var e2930 = {
      name: 'EIP-2930',
      comment: 'Optional access lists',
      url: 'https://eips.ethereum.org/EIPS/eip-2930',
      status: 'Final',
      minimumHardfork: 'istanbul',
      requiredEIPs: [2718, 2929],
      gasConfig: {},
      gasPrices: {
          accessListStorageKeyCost: {
              v: 1900,
              d: 'Gas cost per storage key in an Access List transaction',
          },
          accessListAddressCost: {
              v: 2400,
              d: 'Gas cost per storage key in an Access List transaction',
          },
      },
      vm: {},
      pow: {},
  };

  var e3198 = {
      name: 'EIP-3198',
      number: 3198,
      comment: 'BASEFEE opcode',
      url: 'https://eips.ethereum.org/EIPS/eip-3198',
      status: 'Final',
      minimumHardfork: 'london',
      gasConfig: {},
      gasPrices: {
          basefee: {
              v: 2,
              d: 'Gas cost of the BASEFEE opcode',
          },
      },
      vm: {},
      pow: {},
  };

  var e3529 = {
      name: 'EIP-3529',
      comment: 'Reduction in refunds',
      url: 'https://eips.ethereum.org/EIPS/eip-3529',
      status: 'Final',
      minimumHardfork: 'berlin',
      requiredEIPs: [2929],
      gasConfig: {
          maxRefundQuotient: {
              v: 5,
              d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',
          },
      },
      gasPrices: {
          selfdestructRefund: {
              v: 0,
              d: 'Refunded following a selfdestruct operation',
          },
          sstoreClearRefundEIP2200: {
              v: 4800,
              d: 'Once per SSTORE operation for clearing an originally existing storage slot',
          },
      },
      vm: {},
      pow: {},
  };

  var e3540 = {
      name: 'EIP-3540',
      number: 3540,
      comment: 'EVM Object Format (EOF) v1',
      url: 'https://eips.ethereum.org/EIPS/eip-3540',
      status: 'Review',
      minimumHardfork: 'london',
      requiredEIPs: [3541],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e3541 = {
      name: 'EIP-3541',
      comment: 'Reject new contracts starting with the 0xEF byte',
      url: 'https://eips.ethereum.org/EIPS/eip-3541',
      status: 'Final',
      minimumHardfork: 'berlin',
      requiredEIPs: [],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e3554 = {
      name: 'EIP-3554',
      comment: 'Reduction in refunds',
      url: 'Difficulty Bomb Delay to December 1st 2021',
      status: 'Final',
      minimumHardfork: 'muirGlacier',
      requiredEIPs: [],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {
          difficultyBombDelay: {
              v: 9500000,
              d: 'the amount of blocks to delay the difficulty bomb with',
          },
      },
  };

  var e3607 = {
      name: 'EIP-3607',
      number: 3607,
      comment: 'Reject transactions from senders with deployed code',
      url: 'https://eips.ethereum.org/EIPS/eip-3607',
      status: 'Final',
      minimumHardfork: 'chainstart',
      requiredEIPs: [],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e3651 = {
      name: 'EIP-3651',
      number: 3198,
      comment: 'Warm COINBASE',
      url: 'https://eips.ethereum.org/EIPS/eip-3651',
      status: 'Review',
      minimumHardfork: 'london',
      requiredEIPs: [2929],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e3670 = {
      name: 'EIP-3670',
      number: 3670,
      comment: 'EOF - Code Validation',
      url: 'https://eips.ethereum.org/EIPS/eip-3670',
      status: 'Review',
      minimumHardfork: 'london',
      requiredEIPs: [3540],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e3675 = {
      name: 'EIP-3675',
      number: 3675,
      comment: 'Upgrade consensus to Proof-of-Stake',
      url: 'https://eips.ethereum.org/EIPS/eip-3675',
      status: 'Final',
      minimumHardfork: 'london',
      requiredEIPs: [],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e3855 = {
      name: 'EIP-3855',
      number: 3855,
      comment: 'PUSH0 instruction',
      url: 'https://eips.ethereum.org/EIPS/eip-3855',
      status: 'Review',
      minimumHardfork: 'chainstart',
      requiredEIPs: [],
      gasConfig: {},
      gasPrices: {
          push0: {
              v: 2,
              d: 'Base fee of the PUSH0 opcode',
          },
      },
      vm: {},
      pow: {},
  };

  var e3860 = {
      name: 'EIP-3860',
      number: 3860,
      comment: 'Limit and meter initcode',
      url: 'https://eips.ethereum.org/EIPS/eip-3860',
      status: 'Review',
      minimumHardfork: 'spuriousDragon',
      requiredEIPs: [],
      gasConfig: {},
      gasPrices: {
          initCodeWordCost: {
              v: 2,
              d: 'Gas to pay for each word (32 bytes) of initcode when creating a contract',
          },
      },
      vm: {
          maxInitCodeSize: {
              v: 49152,
              d: 'Maximum length of initialization code when creating a contract',
          },
      },
      pow: {},
  };

  var e4345 = {
      name: 'EIP-4345',
      number: 4345,
      comment: 'Difficulty Bomb Delay to June 2022',
      url: 'https://eips.ethereum.org/EIPS/eip-4345',
      status: 'Final',
      minimumHardfork: 'london',
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {
          difficultyBombDelay: {
              v: 10700000,
              d: 'the amount of blocks to delay the difficulty bomb with',
          },
      },
  };

  var e4399 = {
      name: 'EIP-4399',
      number: 4399,
      comment: 'Supplant DIFFICULTY opcode with PREVRANDAO',
      url: 'https://eips.ethereum.org/EIPS/eip-4399',
      status: 'Review',
      minimumHardfork: 'london',
      requiredEIPs: [],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var e5133 = {
      name: 'EIP-5133',
      number: 5133,
      comment: 'Delaying Difficulty Bomb to mid-September 2022',
      url: 'https://eips.ethereum.org/EIPS/eip-5133',
      status: 'Draft',
      minimumHardfork: 'grayGlacier',
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {
          difficultyBombDelay: {
              v: 11400000,
              d: 'the amount of blocks to delay the difficulty bomb with',
          },
      },
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const EIPs = {
      1153: e1153,
      1559: e1559,
      2315: e2315,
      2537: e2537,
      2565: e2565,
      2718: e2718,
      2929: e2929,
      2930: e2930,
      3198: e3198,
      3529: e3529,
      3540: e3540,
      3541: e3541,
      3554: e3554,
      3607: e3607,
      3651: e3651,
      3670: e3670,
      3675: e3675,
      3855: e3855,
      3860: e3860,
      4345: e4345,
      4399: e4399,
      5133: e5133,
  };

  var chainstart = {
      name: 'chainstart',
      comment: 'Start of the Ethereum main chain',
      url: '',
      status: '',
      gasConfig: {
          minGasLimit: {
              v: 5000,
              d: 'Minimum the gas limit may ever be',
          },
          gasLimitBoundDivisor: {
              v: 1024,
              d: 'The bound divisor of the gas limit, used in update calculations',
          },
          maxRefundQuotient: {
              v: 2,
              d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',
          },
      },
      gasPrices: {
          base: {
              v: 2,
              d: 'Gas base cost, used e.g. for ChainID opcode (Istanbul)',
          },
          tierStep: {
              v: [0, 2, 3, 5, 8, 10, 20],
              d: 'Once per operation, for a selection of them',
          },
          exp: {
              v: 10,
              d: 'Base fee of the EXP opcode',
          },
          expByte: {
              v: 10,
              d: 'Times ceil(log256(exponent)) for the EXP instruction',
          },
          sha3: {
              v: 30,
              d: 'Base fee of the SHA3 opcode',
          },
          sha3Word: {
              v: 6,
              d: "Once per word of the SHA3 operation's data",
          },
          sload: {
              v: 50,
              d: 'Base fee of the SLOAD opcode',
          },
          sstoreSet: {
              v: 20000,
              d: 'Once per SSTORE operation if the zeroness changes from zero',
          },
          sstoreReset: {
              v: 5000,
              d: 'Once per SSTORE operation if the zeroness does not change from zero',
          },
          sstoreRefund: {
              v: 15000,
              d: 'Once per SSTORE operation if the zeroness changes to zero',
          },
          jumpdest: {
              v: 1,
              d: 'Base fee of the JUMPDEST opcode',
          },
          log: {
              v: 375,
              d: 'Base fee of the LOG opcode',
          },
          logData: {
              v: 8,
              d: "Per byte in a LOG* operation's data",
          },
          logTopic: {
              v: 375,
              d: 'Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas',
          },
          create: {
              v: 32000,
              d: 'Base fee of the CREATE opcode',
          },
          call: {
              v: 40,
              d: 'Base fee of the CALL opcode',
          },
          callStipend: {
              v: 2300,
              d: 'Free gas given at beginning of call',
          },
          callValueTransfer: {
              v: 9000,
              d: 'Paid for CALL when the value transfor is non-zero',
          },
          callNewAccount: {
              v: 25000,
              d: "Paid for CALL when the destination address didn't exist prior",
          },
          selfdestructRefund: {
              v: 24000,
              d: 'Refunded following a selfdestruct operation',
          },
          memory: {
              v: 3,
              d: 'Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL',
          },
          quadCoeffDiv: {
              v: 512,
              d: 'Divisor for the quadratic particle of the memory cost equation',
          },
          createData: {
              v: 200,
              d: '',
          },
          tx: {
              v: 21000,
              d: 'Per transaction. NOTE: Not payable on data of calls between transactions',
          },
          txCreation: {
              v: 32000,
              d: 'The cost of creating a contract via tx',
          },
          txDataZero: {
              v: 4,
              d: 'Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions',
          },
          txDataNonZero: {
              v: 68,
              d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',
          },
          copy: {
              v: 3,
              d: 'Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added',
          },
          ecRecover: {
              v: 3000,
              d: '',
          },
          sha256: {
              v: 60,
              d: '',
          },
          sha256Word: {
              v: 12,
              d: '',
          },
          ripemd160: {
              v: 600,
              d: '',
          },
          ripemd160Word: {
              v: 120,
              d: '',
          },
          identity: {
              v: 15,
              d: '',
          },
          identityWord: {
              v: 3,
              d: '',
          },
          stop: {
              v: 0,
              d: 'Base fee of the STOP opcode',
          },
          add: {
              v: 3,
              d: 'Base fee of the ADD opcode',
          },
          mul: {
              v: 5,
              d: 'Base fee of the MUL opcode',
          },
          sub: {
              v: 3,
              d: 'Base fee of the SUB opcode',
          },
          div: {
              v: 5,
              d: 'Base fee of the DIV opcode',
          },
          sdiv: {
              v: 5,
              d: 'Base fee of the SDIV opcode',
          },
          mod: {
              v: 5,
              d: 'Base fee of the MOD opcode',
          },
          smod: {
              v: 5,
              d: 'Base fee of the SMOD opcode',
          },
          addmod: {
              v: 8,
              d: 'Base fee of the ADDMOD opcode',
          },
          mulmod: {
              v: 8,
              d: 'Base fee of the MULMOD opcode',
          },
          signextend: {
              v: 5,
              d: 'Base fee of the SIGNEXTEND opcode',
          },
          lt: {
              v: 3,
              d: 'Base fee of the LT opcode',
          },
          gt: {
              v: 3,
              d: 'Base fee of the GT opcode',
          },
          slt: {
              v: 3,
              d: 'Base fee of the SLT opcode',
          },
          sgt: {
              v: 3,
              d: 'Base fee of the SGT opcode',
          },
          eq: {
              v: 3,
              d: 'Base fee of the EQ opcode',
          },
          iszero: {
              v: 3,
              d: 'Base fee of the ISZERO opcode',
          },
          and: {
              v: 3,
              d: 'Base fee of the AND opcode',
          },
          or: {
              v: 3,
              d: 'Base fee of the OR opcode',
          },
          xor: {
              v: 3,
              d: 'Base fee of the XOR opcode',
          },
          not: {
              v: 3,
              d: 'Base fee of the NOT opcode',
          },
          byte: {
              v: 3,
              d: 'Base fee of the BYTE opcode',
          },
          address: {
              v: 2,
              d: 'Base fee of the ADDRESS opcode',
          },
          balance: {
              v: 20,
              d: 'Base fee of the BALANCE opcode',
          },
          origin: {
              v: 2,
              d: 'Base fee of the ORIGIN opcode',
          },
          caller: {
              v: 2,
              d: 'Base fee of the CALLER opcode',
          },
          callvalue: {
              v: 2,
              d: 'Base fee of the CALLVALUE opcode',
          },
          calldataload: {
              v: 3,
              d: 'Base fee of the CALLDATALOAD opcode',
          },
          calldatasize: {
              v: 2,
              d: 'Base fee of the CALLDATASIZE opcode',
          },
          calldatacopy: {
              v: 3,
              d: 'Base fee of the CALLDATACOPY opcode',
          },
          codesize: {
              v: 2,
              d: 'Base fee of the CODESIZE opcode',
          },
          codecopy: {
              v: 3,
              d: 'Base fee of the CODECOPY opcode',
          },
          gasprice: {
              v: 2,
              d: 'Base fee of the GASPRICE opcode',
          },
          extcodesize: {
              v: 20,
              d: 'Base fee of the EXTCODESIZE opcode',
          },
          extcodecopy: {
              v: 20,
              d: 'Base fee of the EXTCODECOPY opcode',
          },
          blockhash: {
              v: 20,
              d: 'Base fee of the BLOCKHASH opcode',
          },
          coinbase: {
              v: 2,
              d: 'Base fee of the COINBASE opcode',
          },
          timestamp: {
              v: 2,
              d: 'Base fee of the TIMESTAMP opcode',
          },
          number: {
              v: 2,
              d: 'Base fee of the NUMBER opcode',
          },
          difficulty: {
              v: 2,
              d: 'Base fee of the DIFFICULTY opcode',
          },
          gaslimit: {
              v: 2,
              d: 'Base fee of the GASLIMIT opcode',
          },
          pop: {
              v: 2,
              d: 'Base fee of the POP opcode',
          },
          mload: {
              v: 3,
              d: 'Base fee of the MLOAD opcode',
          },
          mstore: {
              v: 3,
              d: 'Base fee of the MSTORE opcode',
          },
          mstore8: {
              v: 3,
              d: 'Base fee of the MSTORE8 opcode',
          },
          sstore: {
              v: 0,
              d: 'Base fee of the SSTORE opcode',
          },
          jump: {
              v: 8,
              d: 'Base fee of the JUMP opcode',
          },
          jumpi: {
              v: 10,
              d: 'Base fee of the JUMPI opcode',
          },
          pc: {
              v: 2,
              d: 'Base fee of the PC opcode',
          },
          msize: {
              v: 2,
              d: 'Base fee of the MSIZE opcode',
          },
          gas: {
              v: 2,
              d: 'Base fee of the GAS opcode',
          },
          push: {
              v: 3,
              d: 'Base fee of the PUSH opcode',
          },
          dup: {
              v: 3,
              d: 'Base fee of the DUP opcode',
          },
          swap: {
              v: 3,
              d: 'Base fee of the SWAP opcode',
          },
          callcode: {
              v: 40,
              d: 'Base fee of the CALLCODE opcode',
          },
          return: {
              v: 0,
              d: 'Base fee of the RETURN opcode',
          },
          invalid: {
              v: 0,
              d: 'Base fee of the INVALID opcode',
          },
          selfdestruct: {
              v: 0,
              d: 'Base fee of the SELFDESTRUCT opcode',
          },
      },
      vm: {
          stackLimit: {
              v: 1024,
              d: 'Maximum size of VM stack allowed',
          },
          callCreateDepth: {
              v: 1024,
              d: 'Maximum depth of call/create stack',
          },
          maxExtraDataSize: {
              v: 32,
              d: 'Maximum size extra data may be after Genesis',
          },
      },
      pow: {
          minimumDifficulty: {
              v: 131072,
              d: 'The minimum that the difficulty may ever be',
          },
          difficultyBoundDivisor: {
              v: 2048,
              d: 'The bound divisor of the difficulty, used in the update calculations',
          },
          durationLimit: {
              v: 13,
              d: 'The decision boundary on the blocktime duration used to determine whether difficulty should go up or not',
          },
          epochDuration: {
              v: 30000,
              d: 'Duration between proof-of-work epochs',
          },
          timebombPeriod: {
              v: 100000,
              d: 'Exponential difficulty timebomb period',
          },
          minerReward: {
              v: '5000000000000000000',
              d: 'the amount a miner get rewarded for mining a block',
          },
          difficultyBombDelay: {
              v: 0,
              d: 'the amount of blocks to delay the difficulty bomb with',
          },
      },
  };

  var dao = {
      name: 'dao',
      comment: 'DAO rescue hardfork',
      url: 'https://eips.ethereum.org/EIPS/eip-779',
      status: 'Final',
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var homestead = {
      name: 'homestead',
      comment: 'Homestead hardfork with protocol and network changes',
      url: 'https://eips.ethereum.org/EIPS/eip-606',
      status: 'Final',
      gasConfig: {},
      gasPrices: {
          delegatecall: {
              v: 40,
              d: 'Base fee of the DELEGATECALL opcode',
          },
      },
      vm: {},
      pow: {},
  };

  var tangerineWhistle = {
      name: 'tangerineWhistle',
      comment: 'Hardfork with gas cost changes for IO-heavy operations',
      url: 'https://eips.ethereum.org/EIPS/eip-608',
      status: 'Final',
      gasConfig: {},
      gasPrices: {
          sload: {
              v: 200,
              d: 'Once per SLOAD operation',
          },
          call: {
              v: 700,
              d: 'Once per CALL operation & message call transaction',
          },
          extcodesize: {
              v: 700,
              d: 'Base fee of the EXTCODESIZE opcode',
          },
          extcodecopy: {
              v: 700,
              d: 'Base fee of the EXTCODECOPY opcode',
          },
          balance: {
              v: 400,
              d: 'Base fee of the BALANCE opcode',
          },
          delegatecall: {
              v: 700,
              d: 'Base fee of the DELEGATECALL opcode',
          },
          callcode: {
              v: 700,
              d: 'Base fee of the CALLCODE opcode',
          },
          selfdestruct: {
              v: 5000,
              d: 'Base fee of the SELFDESTRUCT opcode',
          },
      },
      vm: {},
      pow: {},
  };

  var spuriousDragon = {
      name: 'spuriousDragon',
      comment: 'HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit',
      url: 'https://eips.ethereum.org/EIPS/eip-607',
      status: 'Final',
      gasConfig: {},
      gasPrices: {
          expByte: {
              v: 50,
              d: 'Times ceil(log256(exponent)) for the EXP instruction',
          },
      },
      vm: {
          maxCodeSize: {
              v: 24576,
              d: 'Maximum length of contract code',
          },
      },
      pow: {},
  };

  var byzantium = {
      name: 'byzantium',
      comment: 'Hardfork with new precompiles, instructions and other protocol changes',
      url: 'https://eips.ethereum.org/EIPS/eip-609',
      status: 'Final',
      gasConfig: {},
      gasPrices: {
          modexpGquaddivisor: {
              v: 20,
              d: 'Gquaddivisor from modexp precompile for gas calculation',
          },
          ecAdd: {
              v: 500,
              d: 'Gas costs for curve addition precompile',
          },
          ecMul: {
              v: 40000,
              d: 'Gas costs for curve multiplication precompile',
          },
          ecPairing: {
              v: 100000,
              d: 'Base gas costs for curve pairing precompile',
          },
          ecPairingWord: {
              v: 80000,
              d: 'Gas costs regarding curve pairing precompile input length',
          },
          revert: {
              v: 0,
              d: 'Base fee of the REVERT opcode',
          },
          staticcall: {
              v: 700,
              d: 'Base fee of the STATICCALL opcode',
          },
          returndatasize: {
              v: 2,
              d: 'Base fee of the RETURNDATASIZE opcode',
          },
          returndatacopy: {
              v: 3,
              d: 'Base fee of the RETURNDATACOPY opcode',
          },
      },
      vm: {},
      pow: {
          minerReward: {
              v: '3000000000000000000',
              d: 'the amount a miner get rewarded for mining a block',
          },
          difficultyBombDelay: {
              v: 3000000,
              d: 'the amount of blocks to delay the difficulty bomb with',
          },
      },
  };

  var constantinople = {
      name: 'constantinople',
      comment: 'Postponed hardfork including EIP-1283 (SSTORE gas metering changes)',
      url: 'https://eips.ethereum.org/EIPS/eip-1013',
      status: 'Final',
      gasConfig: {},
      gasPrices: {
          netSstoreNoopGas: {
              v: 200,
              d: "Once per SSTORE operation if the value doesn't change",
          },
          netSstoreInitGas: {
              v: 20000,
              d: 'Once per SSTORE operation from clean zero',
          },
          netSstoreCleanGas: {
              v: 5000,
              d: 'Once per SSTORE operation from clean non-zero',
          },
          netSstoreDirtyGas: {
              v: 200,
              d: 'Once per SSTORE operation from dirty',
          },
          netSstoreClearRefund: {
              v: 15000,
              d: 'Once per SSTORE operation for clearing an originally existing storage slot',
          },
          netSstoreResetRefund: {
              v: 4800,
              d: 'Once per SSTORE operation for resetting to the original non-zero value',
          },
          netSstoreResetClearRefund: {
              v: 19800,
              d: 'Once per SSTORE operation for resetting to the original zero value',
          },
          shl: {
              v: 3,
              d: 'Base fee of the SHL opcode',
          },
          shr: {
              v: 3,
              d: 'Base fee of the SHR opcode',
          },
          sar: {
              v: 3,
              d: 'Base fee of the SAR opcode',
          },
          extcodehash: {
              v: 400,
              d: 'Base fee of the EXTCODEHASH opcode',
          },
          create2: {
              v: 32000,
              d: 'Base fee of the CREATE2 opcode',
          },
      },
      vm: {},
      pow: {
          minerReward: {
              v: '2000000000000000000',
              d: 'The amount a miner gets rewarded for mining a block',
          },
          difficultyBombDelay: {
              v: 5000000,
              d: 'the amount of blocks to delay the difficulty bomb with',
          },
      },
  };

  var petersburg = {
      name: 'petersburg',
      comment: 'Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople',
      url: 'https://eips.ethereum.org/EIPS/eip-1716',
      status: 'Final',
      gasConfig: {},
      gasPrices: {
          netSstoreNoopGas: {
              v: null,
              d: 'Removed along EIP-1283',
          },
          netSstoreInitGas: {
              v: null,
              d: 'Removed along EIP-1283',
          },
          netSstoreCleanGas: {
              v: null,
              d: 'Removed along EIP-1283',
          },
          netSstoreDirtyGas: {
              v: null,
              d: 'Removed along EIP-1283',
          },
          netSstoreClearRefund: {
              v: null,
              d: 'Removed along EIP-1283',
          },
          netSstoreResetRefund: {
              v: null,
              d: 'Removed along EIP-1283',
          },
          netSstoreResetClearRefund: {
              v: null,
              d: 'Removed along EIP-1283',
          },
      },
      vm: {},
      pow: {},
  };

  var istanbul = {
      name: 'istanbul',
      comment: 'HF targeted for December 2019 following the Constantinople/Petersburg HF',
      url: 'https://eips.ethereum.org/EIPS/eip-1679',
      status: 'Final',
      gasConfig: {},
      gasPrices: {
          blake2Round: {
              v: 1,
              d: 'Gas cost per round for the Blake2 F precompile',
          },
          ecAdd: {
              v: 150,
              d: 'Gas costs for curve addition precompile',
          },
          ecMul: {
              v: 6000,
              d: 'Gas costs for curve multiplication precompile',
          },
          ecPairing: {
              v: 45000,
              d: 'Base gas costs for curve pairing precompile',
          },
          ecPairingWord: {
              v: 34000,
              d: 'Gas costs regarding curve pairing precompile input length',
          },
          txDataNonZero: {
              v: 16,
              d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',
          },
          sstoreSentryGasEIP2200: {
              v: 2300,
              d: 'Minimum gas required to be present for an SSTORE call, not consumed',
          },
          sstoreNoopGasEIP2200: {
              v: 800,
              d: "Once per SSTORE operation if the value doesn't change",
          },
          sstoreDirtyGasEIP2200: {
              v: 800,
              d: 'Once per SSTORE operation if a dirty value is changed',
          },
          sstoreInitGasEIP2200: {
              v: 20000,
              d: 'Once per SSTORE operation from clean zero to non-zero',
          },
          sstoreInitRefundEIP2200: {
              v: 19200,
              d: 'Once per SSTORE operation for resetting to the original zero value',
          },
          sstoreCleanGasEIP2200: {
              v: 5000,
              d: 'Once per SSTORE operation from clean non-zero to something else',
          },
          sstoreCleanRefundEIP2200: {
              v: 4200,
              d: 'Once per SSTORE operation for resetting to the original non-zero value',
          },
          sstoreClearRefundEIP2200: {
              v: 15000,
              d: 'Once per SSTORE operation for clearing an originally existing storage slot',
          },
          balance: {
              v: 700,
              d: 'Base fee of the BALANCE opcode',
          },
          extcodehash: {
              v: 700,
              d: 'Base fee of the EXTCODEHASH opcode',
          },
          chainid: {
              v: 2,
              d: 'Base fee of the CHAINID opcode',
          },
          selfbalance: {
              v: 5,
              d: 'Base fee of the SELFBALANCE opcode',
          },
          sload: {
              v: 800,
              d: 'Base fee of the SLOAD opcode',
          },
      },
      vm: {},
      pow: {},
  };

  var muirGlacier = {
      name: 'muirGlacier',
      comment: 'HF to delay the difficulty bomb',
      url: 'https://eips.ethereum.org/EIPS/eip-2384',
      status: 'Final',
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {
          difficultyBombDelay: {
              v: 9000000,
              d: 'the amount of blocks to delay the difficulty bomb with',
          },
      },
  };

  var berlin = {
      name: 'berlin',
      comment: 'HF targeted for July 2020 following the Muir Glacier HF',
      url: 'https://eips.ethereum.org/EIPS/eip-2070',
      status: 'Final',
      eips: [2565, 2929, 2718, 2930],
  };

  var london = {
      name: 'london',
      comment: 'HF targeted for July 2021 following the Berlin fork',
      url: 'https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md',
      status: 'Final',
      eips: [1559, 3198, 3529, 3541],
  };

  var shanghai = {
      name: 'shanghai',
      comment: 'Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode',
      url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md',
      status: 'Final',
      eips: [3651, 3855, 3860, 4895],
  };

  var arrowGlacier = {
      name: 'arrowGlacier',
      comment: 'HF to delay the difficulty bomb',
      url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md',
      status: 'Final',
      eips: [4345],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var grayGlacier = {
      name: 'grayGlacier',
      comment: 'Delaying the difficulty bomb to Mid September 2022',
      url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md',
      status: 'Draft',
      eips: [5133],
      gasConfig: {},
      gasPrices: {},
      vm: {},
      pow: {},
  };

  var mergeForkIdTransition = {
      name: 'mergeForkIdTransition',
      comment: 'Pre-merge hardfork to fork off non-upgraded clients',
      url: 'https://eips.ethereum.org/EIPS/eip-3675',
      status: 'Draft',
      eips: [],
  };

  var merge = {
      name: 'merge',
      comment: 'Hardfork to upgrade the consensus mechanism to Proof-of-Stake',
      url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md',
      status: 'Final',
      consensus: {
          type: 'pos',
          algorithm: 'casper',
          casper: {},
      },
      eips: [3675, 4399],
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const hardforks = {
      chainstart,
      homestead,
      dao,
      tangerineWhistle,
      spuriousDragon,
      byzantium,
      constantinople,
      petersburg,
      istanbul,
      muirGlacier,
      berlin,
      london,
      shanghai,
      arrowGlacier,
      grayGlacier,
      mergeForkIdTransition,
      merge,
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const { buf: crc32Uint8Array } = pkg;
  /**
   * Common class to access chain and hardfork parameters and to provide
   * a unified and shared view on the network and hardfork state.
   *
   * Use the {@link Common.custom} static constructor for creating simple
   * custom chain {@link Common} objects (more complete custom chain setups
   * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).
   */
  class Common extends EventEmitter {
      /**
       * Creates a {@link Common} object for a custom chain, based on a standard one.
       *
       * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
       * in a provided {@link chainParamsOrName} dictionary. Some usage example:
       *
       * ```javascript
       * Common.custom({chainId: 123})
       * ```
       *
       * There are also selected supported custom chains which can be initialized by using one of the
       * {@link CustomChains} for {@link chainParamsOrName}, e.g.:
       *
       * ```javascript
       * Common.custom(CustomChains.MaticMumbai)
       * ```
       *
       * Note that these supported custom chains only provide some base parameters (usually the chain and
       * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
       * the `web3-utils/tx` library to a Layer-2 chain).
       *
       * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
       * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
       */
      static custom(chainParamsOrName, opts = {}) {
          var _a;
          const baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';
          const standardChainParams = Object.assign({}, Common._getChainParams(baseChain));
          standardChainParams.name = 'custom-chain';
          if (typeof chainParamsOrName !== 'string') {
              return new Common(Object.assign({ chain: Object.assign(Object.assign({}, standardChainParams), chainParamsOrName) }, opts));
          }
          if (chainParamsOrName === CustomChain.PolygonMainnet) {
              return Common.custom({
                  name: CustomChain.PolygonMainnet,
                  chainId: 137,
                  networkId: 137,
              }, opts);
          }
          if (chainParamsOrName === CustomChain.PolygonMumbai) {
              return Common.custom({
                  name: CustomChain.PolygonMumbai,
                  chainId: 80001,
                  networkId: 80001,
              }, opts);
          }
          if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {
              return Common.custom({
                  name: CustomChain.ArbitrumRinkebyTestnet,
                  chainId: 421611,
                  networkId: 421611,
              }, opts);
          }
          if (chainParamsOrName === CustomChain.ArbitrumOne) {
              return Common.custom({
                  name: CustomChain.ArbitrumOne,
                  chainId: 42161,
                  networkId: 42161,
              }, opts);
          }
          if (chainParamsOrName === CustomChain.xDaiChain) {
              return Common.custom({
                  name: CustomChain.xDaiChain,
                  chainId: 100,
                  networkId: 100,
              }, opts);
          }
          if (chainParamsOrName === CustomChain.OptimisticKovan) {
              return Common.custom({
                  name: CustomChain.OptimisticKovan,
                  chainId: 69,
                  networkId: 69,
              }, Object.assign({ hardfork: Hardfork.Berlin }, opts));
          }
          if (chainParamsOrName === CustomChain.OptimisticEthereum) {
              return Common.custom({
                  name: CustomChain.OptimisticEthereum,
                  chainId: 10,
                  networkId: 10,
              }, Object.assign({ hardfork: Hardfork.Berlin }, opts));
          }
          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
          throw new Error(`Custom chain ${chainParamsOrName} not supported`);
      }
      /**
       * Static method to load and set common from a geth genesis json
       * @param genesisJson json of geth configuration
       * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance
       * @returns Common
       */
      static fromGethGenesis(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {
          var _a;
          const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);
          const common = new Common({
              chain: (_a = genesisParams.name) !== null && _a !== void 0 ? _a : 'custom',
              customChains: [genesisParams],
              eips,
              hardfork: hardfork !== null && hardfork !== void 0 ? hardfork : genesisParams.hardfork,
          });
          if (genesisHash !== undefined) {
              common.setForkHashes(genesisHash);
          }
          return common;
      }
      /**
       * Static method to determine if a {@link chainId} is supported as a standard chain
       * @param chainId bigint id (`1`) of a standard chain
       * @returns boolean
       */
      static isSupportedChainId(chainId) {
          const initializedChains = this._getInitializedChains();
          return Boolean(initializedChains.names[chainId.toString()]);
      }
      static _getChainParams(_chain, customChains) {
          let chain = _chain;
          const initializedChains = this._getInitializedChains(customChains);
          if (typeof chain === 'number' || typeof chain === 'bigint') {
              chain = chain.toString();
              if (initializedChains.names[chain]) {
                  const name = initializedChains.names[chain];
                  return initializedChains[name];
              }
              throw new Error(`Chain with ID ${chain} not supported`);
          }
          if (initializedChains[chain] !== undefined) {
              return initializedChains[chain];
          }
          throw new Error(`Chain with name ${chain} not supported`);
      }
      constructor(opts) {
          var _a, _b;
          super();
          this._eips = [];
          this._customChains = (_a = opts.customChains) !== null && _a !== void 0 ? _a : [];
          this._chainParams = this.setChain(opts.chain);
          this.DEFAULT_HARDFORK = (_b = this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : Hardfork.Merge;
          // Assign hardfork changes in the sequence of the applied hardforks
          this.HARDFORK_CHANGES = this.hardforks().map(hf => [
              hf.name,
              hardforks[hf.name],
          ]);
          this._hardfork = this.DEFAULT_HARDFORK;
          if (opts.hardfork !== undefined) {
              this.setHardfork(opts.hardfork);
          }
          if (opts.eips) {
              this.setEIPs(opts.eips);
          }
      }
      /**
       * Sets the chain
       * @param chain String ('mainnet') or Number (1) chain representation.
       *              Or, a Dictionary of chain parameters for a private network.
       * @returns The dictionary with parameters set as chain
       */
      setChain(chain) {
          if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {
              this._chainParams = Common._getChainParams(chain, this._customChains);
          }
          else if (typeof chain === 'object') {
              if (this._customChains.length > 0) {
                  throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');
              }
              const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];
              for (const param of required) {
                  if (!(param in chain)) {
                      throw new Error(`Missing required chain parameter: ${param}`);
                  }
              }
              this._chainParams = chain;
          }
          else {
              throw new Error('Wrong input format');
          }
          for (const hf of this.hardforks()) {
              if (hf.block === undefined) {
                  throw new Error(`Hardfork cannot have undefined block number`);
              }
          }
          return this._chainParams;
      }
      /**
       * Sets the hardfork to get params for
       * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
       */
      setHardfork(hardfork) {
          let existing = false;
          for (const hfChanges of this.HARDFORK_CHANGES) {
              if (hfChanges[0] === hardfork) {
                  if (this._hardfork !== hardfork) {
                      this._hardfork = hardfork;
                      this.emit('hardforkChanged', hardfork);
                  }
                  existing = true;
              }
          }
          if (!existing) {
              throw new Error(`Hardfork with name ${hardfork} not supported`);
          }
      }
      /**
       * Returns the hardfork based on the block number or an optional
       * total difficulty (Merge HF) provided.
       *
       * An optional TD takes precedence in case the corresponding HF block
       * is set to `null` or otherwise needs to match (if not an error
       * will be thrown).
       *
       * @param blockNumber
       * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)
       * @param timestamp: timestamp in seconds at which block was/is to be minted
       * @returns The name of the HF
       */
      getHardforkByBlockNumber(_blockNumber, _td, _timestamp) {
          const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
          const td = toType(_td, TypeOutput.BigInt);
          const timestamp = toType(_timestamp, TypeOutput.Number);
          // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)
          const hfs = this.hardforks().filter(hf => 
          // eslint-disable-next-line no-null/no-null
          hf.block !== null ||
              // eslint-disable-next-line no-null/no-null
              (hf.ttd !== null && hf.ttd !== undefined) ||
              hf.timestamp !== undefined);
          // eslint-disable-next-line no-null/no-null
          const mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);
          const doubleTTDHF = hfs
              .slice(mergeIndex + 1)
              // eslint-disable-next-line no-null/no-null
              .findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);
          if (doubleTTDHF >= 0) {
              throw Error(`More than one merge hardforks found with ttd specified`);
          }
          // Find the first hardfork that has a block number greater than `blockNumber`
          // (skips the merge hardfork since it cannot have a block number specified).
          // If timestamp is not provided, it also skips timestamps hardforks to continue
          // discovering/checking number hardforks.
          let hfIndex = hfs.findIndex(hf => 
          // eslint-disable-next-line no-null/no-null
          (hf.block !== null && hf.block > blockNumber) ||
              (timestamp !== undefined && Number(hf.timestamp) > timestamp));
          if (hfIndex === -1) {
              // all hardforks apply, set hfIndex to the last one as that's the candidate
              hfIndex = hfs.length;
          }
          else if (hfIndex === 0) {
              // cannot have a case where a block number is before all applied hardforks
              // since the chain has to start with a hardfork
              throw Error('Must have at least one hardfork at block 0');
          }
          // If timestamp is not provided, we need to rollback to the last hf with block or ttd
          if (timestamp === undefined) {
              const stepBack = hfs
                  .slice(0, hfIndex)
                  .reverse()
                  // eslint-disable-next-line no-null/no-null
                  .findIndex(hf => hf.block !== null || hf.ttd !== undefined);
              hfIndex -= stepBack;
          }
          // Move hfIndex one back to arrive at candidate hardfork
          hfIndex -= 1;
          // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number
          // hardforks. so it will now be needed to rollback
          // eslint-disable-next-line no-null/no-null
          if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {
              // We're on the merge hardfork.  Let's check the TTD
              // eslint-disable-next-line no-null/no-null
              if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {
                  // Merge ttd greater than current td so we're on hardfork before merge
                  hfIndex -= 1;
              }
              // eslint-disable-next-line no-null/no-null
          }
          else if (mergeIndex >= 0 && td !== undefined && td !== null) {
              if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {
                  throw Error('Maximum HF determined by total difficulty is lower than the block number HF');
              }
              else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {
                  throw Error('HF determined by block number is lower than the minimum total difficulty HF');
              }
          }
          const hfStartIndex = hfIndex;
          // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp
          // This won't anyway be the case with Merge hfs
          for (; hfIndex < hfs.length - 1; hfIndex += 1) {
              // break out if hfIndex + 1 is not scheduled at hfIndex
              if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||
                  hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {
                  break;
              }
          }
          if (timestamp) {
              const minTimeStamp = hfs
                  .slice(0, hfStartIndex)
                  .reduce((acc, hf) => { var _a; return Math.max(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : '0'), acc); }, 0);
              if (minTimeStamp > timestamp) {
                  throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);
              }
              const maxTimeStamp = hfs
                  .slice(hfIndex + 1)
                  .reduce((acc, hf) => { var _a; return Math.min(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : timestamp), acc); }, timestamp);
              if (maxTimeStamp < timestamp) {
                  throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);
              }
          }
          const hardfork = hfs[hfIndex];
          return hardfork.name;
      }
      /**
       * Sets a new hardfork based on the block number or an optional
       * total difficulty (Merge HF) provided.
       *
       * An optional TD takes precedence in case the corresponding HF block
       * is set to `null` or otherwise needs to match (if not an error
       * will be thrown).
       *
       * @param blockNumber
       * @param td
       * @param timestamp
       * @returns The name of the HF set
       */
      setHardforkByBlockNumber(blockNumber, td, timestamp) {
          const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
          this.setHardfork(hardfork);
          return hardfork;
      }
      /**
       * Internal helper function, returns the params for the given hardfork for the chain set
       * @param hardfork Hardfork name
       * @returns Dictionary with hardfork params or null if hardfork not on chain
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      _getHardfork(hardfork) {
          const hfs = this.hardforks();
          for (const hf of hfs) {
              if (hf.name === hardfork)
                  return hf;
          }
          // eslint-disable-next-line no-null/no-null
          return null;
      }
      /**
       * Sets the active EIPs
       * @param eips
       */
      setEIPs(eips = []) {
          for (const eip of eips) {
              if (!(eip in EIPs)) {
                  throw new Error(`${eip} not supported`);
              }
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument
              const minHF = this.gteHardfork(EIPs[eip].minimumHardfork);
              if (!minHF) {
                  throw new Error(
                  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                  `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);
              }
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
              if (EIPs[eip].requiredEIPs !== undefined) {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  for (const elem of EIPs[eip].requiredEIPs) {
                      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                      if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {
                          throw new Error(
                          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                          `${eip} requires EIP ${elem}, but is not included in the EIP list`);
                      }
                  }
              }
          }
          this._eips = eips;
      }
      /**
       * Returns a parameter for the current chain setup
       *
       * If the parameter is present in an EIP, the EIP always takes precedence.
       * Otherwise the parameter if taken from the latest applied HF with
       * a change on the respective parameter.
       *
       * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
       * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
       * @returns The value requested or `BigInt(0)` if not found
       */
      param(topic, name) {
          // TODO: consider the case that different active EIPs
          // can change the same parameter
          let value;
          for (const eip of this._eips) {
              value = this.paramByEIP(topic, name, eip);
              if (value !== undefined)
                  return value;
          }
          return this.paramByHardfork(topic, name, this._hardfork);
      }
      /**
       * Returns the parameter corresponding to a hardfork
       * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
       * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
       * @param hardfork Hardfork name
       * @returns The value requested or `BigInt(0)` if not found
       */
      paramByHardfork(topic, name, hardfork) {
          // eslint-disable-next-line no-null/no-null
          let value = null;
          for (const hfChanges of this.HARDFORK_CHANGES) {
              // EIP-referencing HF file (e.g. berlin.json)
              if ('eips' in hfChanges[1]) {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                  const hfEIPs = hfChanges[1].eips;
                  for (const eip of hfEIPs) {
                      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                      const valueEIP = this.paramByEIP(topic, name, eip);
                      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                      value = typeof valueEIP === 'bigint' ? valueEIP : value;
                  }
                  // Parameter-inlining HF file (e.g. istanbul.json)
              }
              else {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  if (hfChanges[1][topic] === undefined) {
                      throw new Error(`Topic ${topic} not defined`);
                  }
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  if (hfChanges[1][topic][name] !== undefined) {
                      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                      value = hfChanges[1][topic][name].v;
                  }
              }
              if (hfChanges[0] === hardfork)
                  break;
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          return BigInt(value !== null && value !== void 0 ? value : 0);
      }
      /**
       * Returns a parameter corresponding to an EIP
       * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
       * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
       * @param eip Number of the EIP
       * @returns The value requested or `undefined` if not found
       */
      // eslint-disable-next-line class-methods-use-this
      paramByEIP(topic, name, eip) {
          if (!(eip in EIPs)) {
              throw new Error(`${eip} not supported`);
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          const eipParams = EIPs[eip];
          if (!(topic in eipParams)) {
              throw new Error(`Topic ${topic} not defined`);
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          if (eipParams[topic][name] === undefined) {
              return undefined;
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
          const value = eipParams[topic][name].v;
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          return BigInt(value);
      }
      /**
       * Returns a parameter for the hardfork active on block number or
       * optional provided total difficulty (Merge HF)
       * @param topic Parameter topic
       * @param name Parameter name
       * @param blockNumber Block number
       * @param td Total difficulty
       *    * @returns The value requested or `BigInt(0)` if not found
       */
      paramByBlock(topic, name, blockNumber, td, timestamp) {
          const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
          return this.paramByHardfork(topic, name, hardfork);
      }
      /**
       * Checks if an EIP is activated by either being included in the EIPs
       * manually passed in with the {@link CommonOpts.eips} or in a
       * hardfork currently being active
       *
       * Note: this method only works for EIPs being supported
       * by the {@link CommonOpts.eips} constructor option
       * @param eip
       */
      isActivatedEIP(eip) {
          if (this.eips().includes(eip)) {
              return true;
          }
          for (const hfChanges of this.HARDFORK_CHANGES) {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
              const hf = hfChanges[1];
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument
              if (this.gteHardfork(hf.name) && 'eips' in hf) {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  if (hf.eips.includes(eip)) {
                      return true;
                  }
              }
          }
          return false;
      }
      /**
       * Checks if set or provided hardfork is active on block number
       * @param hardfork Hardfork name or null (for HF set)
       * @param blockNumber
       * @returns True if HF is active on block number
       */
      hardforkIsActiveOnBlock(
      // eslint-disable-next-line @typescript-eslint/ban-types
      _hardfork, _blockNumber) {
          const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
          const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
          const hfBlock = this.hardforkBlock(hardfork);
          if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {
              return true;
          }
          return false;
      }
      /**
       * Alias to hardforkIsActiveOnBlock when hardfork is set
       * @param blockNumber
       * @returns True if HF is active on block number
       */
      activeOnBlock(blockNumber) {
          // eslint-disable-next-line no-null/no-null
          return this.hardforkIsActiveOnBlock(null, blockNumber);
      }
      /**
       * Sequence based check if given or set HF1 is greater than or equal HF2
       * @param hardfork1 Hardfork name or null (if set)
       * @param hardfork2 Hardfork name
       * @param opts Hardfork options
       * @returns True if HF1 gte HF2
       */
      hardforkGteHardfork(
      // eslint-disable-next-line @typescript-eslint/ban-types
      _hardfork1, hardfork2) {
          const hardfork1 = _hardfork1 !== null && _hardfork1 !== void 0 ? _hardfork1 : this._hardfork;
          const hardforks = this.hardforks();
          let posHf1 = -1;
          let posHf2 = -1;
          let index = 0;
          for (const hf of hardforks) {
              if (hf.name === hardfork1)
                  posHf1 = index;
              if (hf.name === hardfork2)
                  posHf2 = index;
              index += 1;
          }
          return posHf1 >= posHf2 && posHf2 !== -1;
      }
      /**
       * Alias to hardforkGteHardfork when hardfork is set
       * @param hardfork Hardfork name
       * @returns True if hardfork set is greater than hardfork provided
       */
      gteHardfork(hardfork) {
          // eslint-disable-next-line no-null/no-null
          return this.hardforkGteHardfork(null, hardfork);
      }
      /**
       * Returns the hardfork change block for hardfork provided or set
       * @param hardfork Hardfork name, optional if HF set
       * @returns Block number or null if unscheduled
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      hardforkBlock(_hardfork) {
          var _a;
          const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
          const block = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.block;
          // eslint-disable-next-line no-null/no-null
          if (block === undefined || block === null) {
              // eslint-disable-next-line no-null/no-null
              return null;
          }
          return BigInt(block);
      }
      // eslint-disable-next-line @typescript-eslint/ban-types
      hardforkTimestamp(_hardfork) {
          var _a;
          const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
          const timestamp = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.timestamp;
          // eslint-disable-next-line no-null/no-null
          if (timestamp === undefined || timestamp === null) {
              // eslint-disable-next-line no-null/no-null
              return null;
          }
          return BigInt(timestamp);
      }
      /**
       * Returns the hardfork change block for eip
       * @param eip EIP number
       * @returns Block number or null if unscheduled
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      eipBlock(eip) {
          for (const hfChanges of this.HARDFORK_CHANGES) {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
              const hf = hfChanges[1];
              if ('eips' in hf) {
                  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
                  if (hf.eips.includes(eip)) {
                      return this.hardforkBlock(typeof hfChanges[0] === 'number' ? String(hfChanges[0]) : hfChanges[0]);
                  }
              }
          }
          // eslint-disable-next-line no-null/no-null
          return null;
      }
      /**
       * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
       * @param hardfork Hardfork name, optional if HF set
       * @returns Total difficulty or null if no set
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      hardforkTTD(_hardfork) {
          var _a;
          const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
          const ttd = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.ttd;
          // eslint-disable-next-line no-null/no-null
          if (ttd === undefined || ttd === null) {
              // eslint-disable-next-line no-null/no-null
              return null;
          }
          return BigInt(ttd);
      }
      /**
       * True if block number provided is the hardfork (given or set) change block
       * @param blockNumber Number of the block to check
       * @param hardfork Hardfork name, optional if HF set
       * @returns True if blockNumber is HF block
       * @deprecated
       */
      isHardforkBlock(_blockNumber, _hardfork) {
          const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
          const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
          const block = this.hardforkBlock(hardfork);
          return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;
      }
      /**
       * Returns the change block for the next hardfork after the hardfork provided or set
       * @param hardfork Hardfork name, optional if HF set
       * @returns Block timestamp, number or null if not available
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      nextHardforkBlockOrTimestamp(_hardfork) {
          var _a, _b, _c;
          const hardfork = (_a = _hardfork) !== null && _a !== void 0 ? _a : this._hardfork;
          const hfs = this.hardforks();
          let hfIndex = hfs.findIndex(hf => hf.name === hardfork);
          // If the current hardfork is merge, go one behind as merge hf is not part of these
          // calcs even if the merge hf block is set
          if (hardfork === Hardfork.Merge) {
              hfIndex -= 1;
          }
          // Hardfork not found
          if (hfIndex < 0) {
              // eslint-disable-next-line no-null/no-null
              return null;
          }
          let currHfTimeOrBlock = (_b = hfs[hfIndex].timestamp) !== null && _b !== void 0 ? _b : hfs[hfIndex].block;
          currHfTimeOrBlock =
              // eslint-disable-next-line no-null/no-null
              currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined
                  ? Number(currHfTimeOrBlock)
                  : // eslint-disable-next-line no-null/no-null
                      null;
          const nextHf = hfs.slice(hfIndex + 1).find(hf => {
              var _a;
              let hfTimeOrBlock = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;
              hfTimeOrBlock =
                  // eslint-disable-next-line no-null/no-null
                  hfTimeOrBlock !== null && hfTimeOrBlock !== undefined
                      ? Number(hfTimeOrBlock)
                      : // eslint-disable-next-line no-null/no-null
                          null;
              return (hf.name !== Hardfork.Merge &&
                  // eslint-disable-next-line no-null/no-null
                  hfTimeOrBlock !== null &&
                  hfTimeOrBlock !== undefined &&
                  hfTimeOrBlock !== currHfTimeOrBlock);
          });
          // If no next hf found with valid block or timestamp return null
          if (nextHf === undefined) {
              // eslint-disable-next-line no-null/no-null
              return null;
          }
          const nextHfBlock = (_c = nextHf.timestamp) !== null && _c !== void 0 ? _c : nextHf.block;
          // eslint-disable-next-line no-null/no-null
          if (nextHfBlock === null || nextHfBlock === undefined) {
              // eslint-disable-next-line no-null/no-null
              return null;
          }
          return BigInt(nextHfBlock);
      }
      /**
       * Returns the change block for the next hardfork after the hardfork provided or set
       * @param hardfork Hardfork name, optional if HF set
       * @returns Block number or null if not available
       * @deprecated
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      nextHardforkBlock(_hardfork) {
          var _a;
          const hardfork = (_a = _hardfork) !== null && _a !== void 0 ? _a : this._hardfork;
          let hfBlock = this.hardforkBlock(hardfork);
          // If this is a merge hardfork with block not set, then we fallback to previous hardfork
          // to find the nextHardforkBlock
          // eslint-disable-next-line no-null/no-null
          if (hfBlock === null && hardfork === Hardfork.Merge) {
              const hfs = this.hardforks();
              // eslint-disable-next-line no-null/no-null
              const mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);
              if (mergeIndex < 0) {
                  throw Error(`Merge hardfork should have been found`);
              }
              hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);
          }
          // eslint-disable-next-line no-null/no-null
          if (hfBlock === null) {
              // eslint-disable-next-line no-null/no-null
              return null;
          }
          // Next fork block number or null if none available
          // Logic: if accumulator is still null and on the first occurrence of
          // a block greater than the current hfBlock set the accumulator,
          // pass on the accumulator as the final result from this time on
          // eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types
          const nextHfBlock = this.hardforks().reduce((acc, hf) => {
              // We need to ignore the merge block in our next hardfork calc
              const block = BigInt(
              // eslint-disable-next-line no-null/no-null
              hf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block);
              // TypeScript can't seem to follow that the hfBlock is not null at this point
              // eslint-disable-next-line no-null/no-null
              return block > hfBlock && acc === null ? block : acc;
              // eslint-disable-next-line no-null/no-null
          }, null);
          return nextHfBlock;
      }
      /**
       * True if block number provided is the hardfork change block following the hardfork given or set
       * @param blockNumber Number of the block to check
       * @param hardfork Hardfork name, optional if HF set
       * @returns True if blockNumber is HF block
       * @deprecated
       */
      isNextHardforkBlock(_blockNumber, _hardfork) {
          const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
          const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
          // eslint-disable-next-line deprecation/deprecation
          const nextHardforkBlock = this.nextHardforkBlock(hardfork);
          // eslint-disable-next-line no-null/no-null
          return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;
      }
      /**
       * Internal helper function to calculate a fork hash
       * @param hardfork Hardfork name
       * @param genesisHash Genesis block hash of the chain
       * @returns Fork hash as hex string
       */
      _calcForkHash(hardfork, genesisHash) {
          let hfUint8Array = new Uint8Array();
          let prevBlockOrTime = 0;
          for (const hf of this.hardforks()) {
              const { block, timestamp, name } = hf;
              // Timestamp to be used for timestamp based hfs even if we may bundle
              // block number with them retrospectively
              let blockOrTime = timestamp !== null && timestamp !== void 0 ? timestamp : block;
              // eslint-disable-next-line no-null/no-null
              blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
              // Skip for chainstart (0), not applied HFs (null) and
              // when already applied on same blockOrTime HFs
              // and on the merge since forkhash doesn't change on merge hf
              if (typeof blockOrTime === 'number' &&
                  blockOrTime !== 0 &&
                  blockOrTime !== prevBlockOrTime &&
                  name !== Hardfork.Merge) {
                  const hfBlockUint8Array = hexToBytes$1(blockOrTime.toString(16).padStart(16, '0'));
                  hfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);
                  prevBlockOrTime = blockOrTime;
              }
              if (hf.name === hardfork)
                  break;
          }
          const inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);
          // CRC32 delivers result as signed (negative) 32-bit integer,
          // convert to hex string
          // eslint-disable-next-line no-bitwise
          const forkhash = bytesToHex$1(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));
          return forkhash;
      }
      /**
       * Returns an eth/64 compliant fork hash (EIP-2124)
       * @param hardfork Hardfork name, optional if HF set
       * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
       */
      forkHash(_hardfork, genesisHash) {
          const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
          const data = this._getHardfork(hardfork);
          if (
          // eslint-disable-next-line no-null/no-null
          data === null ||
              // eslint-disable-next-line no-null/no-null
              ((data === null || data === void 0 ? void 0 : data.block) === null && (data === null || data === void 0 ? void 0 : data.timestamp) === undefined && (data === null || data === void 0 ? void 0 : data.ttd) === undefined)) {
              const msg = 'No fork hash calculation possible for future hardfork';
              throw new Error(msg);
          }
          // eslint-disable-next-line no-null/no-null
          if ((data === null || data === void 0 ? void 0 : data.forkHash) !== null && (data === null || data === void 0 ? void 0 : data.forkHash) !== undefined) {
              return data.forkHash;
          }
          if (!genesisHash)
              throw new Error('genesisHash required for forkHash calculation');
          return this._calcForkHash(hardfork, genesisHash);
      }
      /**
       *
       * @param forkHash Fork hash as a hex string
       * @returns Array with hardfork data (name, block, forkHash)
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      hardforkForForkHash(forkHash) {
          const resArray = this.hardforks().filter((hf) => hf.forkHash === forkHash);
          // eslint-disable-next-line no-null/no-null
          return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
      }
      /**
       * Sets any missing forkHashes on the passed-in {@link Common} instance
       * @param common The {@link Common} to set the forkHashes for
       * @param genesisHash The genesis block hash
       */
      setForkHashes(genesisHash) {
          var _a;
          for (const hf of this.hardforks()) {
              const blockOrTime = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;
              if (
              // eslint-disable-next-line no-null/no-null
              (hf.forkHash === null || hf.forkHash === undefined) &&
                  // eslint-disable-next-line no-null/no-null
                  ((blockOrTime !== null && blockOrTime !== undefined) ||
                      typeof hf.ttd !== 'undefined')) {
                  hf.forkHash = this.forkHash(hf.name, genesisHash);
              }
          }
      }
      /**
       * Returns the Genesis parameters of the current chain
       * @returns Genesis dictionary
       */
      genesis() {
          return this._chainParams.genesis;
      }
      /**
       * Returns the hardforks for current chain
       * @returns {Array} Array with arrays of hardforks
       */
      hardforks() {
          return this._chainParams.hardforks;
      }
      /**
       * Returns bootstrap nodes for the current chain
       * @returns {Dictionary} Dict with bootstrap nodes
       */
      bootstrapNodes() {
          return this._chainParams.bootstrapNodes;
      }
      /**
       * Returns DNS networks for the current chain
       * @returns {String[]} Array of DNS ENR urls
       */
      dnsNetworks() {
          return this._chainParams.dnsNetworks;
      }
      /**
       * Returns the hardfork set
       * @returns Hardfork name
       */
      hardfork() {
          return this._hardfork;
      }
      /**
       * Returns the Id of current chain
       * @returns chain Id
       */
      chainId() {
          return BigInt(this._chainParams.chainId);
      }
      /**
       * Returns the name of current chain
       * @returns chain name (lower case)
       */
      chainName() {
          return this._chainParams.name;
      }
      /**
       * Returns the Id of current network
       * @returns network Id
       */
      networkId() {
          return BigInt(this._chainParams.networkId);
      }
      /**
       * Returns the active EIPs
       * @returns List of EIPs
       */
      eips() {
          return this._eips;
      }
      /**
       * Returns the consensus type of the network
       * Possible values: "pow"|"poa"|"pos"
       *
       * Note: This value can update along a Hardfork.
       */
      consensusType() {
          const hardfork = this.hardfork();
          let value;
          for (const hfChanges of this.HARDFORK_CHANGES) {
              if ('consensus' in hfChanges[1]) {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                  value = hfChanges[1].consensus.type;
              }
              if (hfChanges[0] === hardfork)
                  break;
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return
          return value !== null && value !== void 0 ? value : this._chainParams.consensus.type;
      }
      /**
       * Returns the concrete consensus implementation
       * algorithm or protocol for the network
       * e.g. "ethash" for "pow" consensus type,
       * "clique" for "poa" consensus type or
       * "casper" for "pos" consensus type.
       *
       * Note: This value can update along a Hardfork.
       */
      consensusAlgorithm() {
          const hardfork = this.hardfork();
          let value;
          for (const hfChanges of this.HARDFORK_CHANGES) {
              if ('consensus' in hfChanges[1]) {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                  value = hfChanges[1].consensus.algorithm;
              }
              if (hfChanges[0] === hardfork)
                  break;
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return
          return value !== null && value !== void 0 ? value : this._chainParams.consensus.algorithm;
      }
      /**
       * Returns a dictionary with consensus configuration
       * parameters based on the consensus algorithm
       *
       * Expected returns (parameters must be present in
       * the respective chain json files):
       *
       * ethash: empty object
       * clique: period, epoch
       * casper: empty object
       *
       * Note: This value can update along a Hardfork.
       */
      consensusConfig() {
          var _a;
          const hardfork = this.hardfork();
          let value;
          for (const hfChanges of this.HARDFORK_CHANGES) {
              if ('consensus' in hfChanges[1]) {
                  // The config parameter is named after the respective consensus algorithm
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                  value = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];
              }
              if (hfChanges[0] === hardfork)
                  break;
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return
          return ((_a = value !== null && value !== void 0 ? value : this._chainParams.consensus[this.consensusAlgorithm()]) !== null && _a !== void 0 ? _a : {});
      }
      /**
       * Returns a deep copy of this {@link Common} instance.
       */
      copy() {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment
          const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
          copy.removeAllListeners();
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return
          return copy;
      }
      static _getInitializedChains(customChains) {
          const names = {};
          for (const [name, id] of Object.entries(Chain)) {
              names[id] = name.toLowerCase();
          }
          const chains = { mainnet: mainnet$1, goerli, sepolia };
          if (customChains) {
              for (const chain of customChains) {
                  const { name } = chain;
                  names[chain.chainId.toString()] = name;
                  chains[name] = chain;
              }
          }
          chains.names = names;
          return chains;
      }
  }

  /**
   * Can be used in conjunction with {@link Transaction.supports}
   * to query on tx capabilities
   */
  var Capability;
  (function (Capability) {
      /**
       * Tx supports EIP-155 replay protection
       * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP
       */
      Capability[Capability["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
      /**
       * Tx supports EIP-1559 gas fee market mechanism
       * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP
       */
      Capability[Capability["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
      /**
       * Tx is a typed transaction as defined in EIP-2718
       * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP
       */
      Capability[Capability["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
      /**
       * Tx supports access list generation as defined in EIP-2930
       * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP
       */
      Capability[Capability["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
  })(Capability || (Capability = {}));
  function isAccessListUint8Array(input) {
      if (input.length === 0) {
          return true;
      }
      const firstItem = input[0];
      if (Array.isArray(firstItem)) {
          return true;
      }
      return false;
  }
  function isAccessList(input) {
      return !isAccessListUint8Array(input); // This is exactly the same method, except the output is negated.
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  class Address {
      constructor(buf) {
          if (buf.length !== 20) {
              throw new Error('Invalid address length');
          }
          this.buf = buf;
      }
      /**
       * Returns the zero address.
       */
      static zero() {
          return new Address(zeros(20));
      }
      /**
       * Is address equal to another.
       */
      equals(address) {
          return uint8ArrayEquals(this.buf, address.buf);
      }
      /**
       * Is address zero.
       */
      isZero() {
          return this.equals(Address.zero());
      }
      /**
       * Returns hex encoding of address.
       */
      toString() {
          return bytesToHex$1(this.buf);
      }
      /**
       * Returns Uint8Array representation of address.
       */
      toArray() {
          return this.buf;
      }
      /**
       * Returns the ethereum address of a given public key.
       * Accepts "Ethereum public keys" and SEC1 encoded keys.
       * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
       * @param sanitize Accept public keys in other formats
       */
      static publicToAddress(_pubKey, sanitize = false) {
          let pubKey = _pubKey;
          assertIsUint8Array(pubKey);
          if (sanitize && pubKey.length !== 64) {
              pubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);
          }
          if (pubKey.length !== 64) {
              throw new Error('Expected pubKey to be of length 64');
          }
          // Only take the lower 160bits of the hash
          return keccak256(pubKey).slice(-20);
      }
  }

  const checkMaxInitCodeSize = (common, length) => {
      const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');
      if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {
          throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);
      }
  };
  const getAccessListData = (accessList) => {
      let AccessListJSON;
      let uint8arrayAccessList;
      if (isAccessList(accessList)) {
          AccessListJSON = accessList;
          const newAccessList = [];
          // eslint-disable-next-line @typescript-eslint/prefer-for-of
          for (let i = 0; i < accessList.length; i += 1) {
              const item = accessList[i];
              const addressBytes = toUint8Array(item.address);
              const storageItems = [];
              // eslint-disable-next-line @typescript-eslint/prefer-for-of
              for (let index = 0; index < item.storageKeys.length; index += 1) {
                  storageItems.push(toUint8Array(item.storageKeys[index]));
              }
              newAccessList.push([addressBytes, storageItems]);
          }
          uint8arrayAccessList = newAccessList;
      }
      else {
          uint8arrayAccessList = accessList !== null && accessList !== void 0 ? accessList : [];
          // build the JSON
          const json = [];
          // eslint-disable-next-line @typescript-eslint/prefer-for-of
          for (let i = 0; i < uint8arrayAccessList.length; i += 1) {
              const data = uint8arrayAccessList[i];
              const address = bytesToHex$1(data[0]);
              const storageKeys = [];
              // eslint-disable-next-line @typescript-eslint/prefer-for-of
              for (let item = 0; item < data[1].length; item += 1) {
                  storageKeys.push(bytesToHex$1(data[1][item]));
              }
              const jsonItem = {
                  address,
                  storageKeys,
              };
              json.push(jsonItem);
          }
          AccessListJSON = json;
      }
      return {
          AccessListJSON,
          accessList: uint8arrayAccessList,
      };
  };
  const verifyAccessList = (accessList) => {
      // eslint-disable-next-line @typescript-eslint/prefer-for-of
      for (let key = 0; key < accessList.length; key += 1) {
          const accessListItem = accessList[key];
          const address = accessListItem[0];
          const storageSlots = accessListItem[1];
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions
          if (accessListItem[2] !== undefined) {
              throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');
          }
          if (address.length !== 20) {
              throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');
          }
          // eslint-disable-next-line @typescript-eslint/prefer-for-of
          for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1) {
              if (storageSlots[storageSlot].length !== 32) {
                  throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');
              }
          }
      }
  };
  const getAccessListJSON = (accessList) => {
      const accessListJSON = [];
      // eslint-disable-next-line @typescript-eslint/prefer-for-of
      for (let index = 0; index < accessList.length; index += 1) {
          const item = accessList[index];
          const JSONItem = {
              address: bytesToHex$1(setLengthLeft(item[0], 20)),
              storageKeys: [],
          };
          // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
          const storageSlots = item && item[1];
          // eslint-disable-next-line @typescript-eslint/prefer-for-of
          for (let slot = 0; slot < storageSlots.length; slot += 1) {
              const storageSlot = storageSlots[slot];
              JSONItem.storageKeys.push(bytesToHex$1(setLengthLeft(storageSlot, 32)));
          }
          accessListJSON.push(JSONItem);
      }
      return accessListJSON;
  };
  const getDataFeeEIP2930 = (accessList, common) => {
      const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');
      const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');
      let slots = 0;
      // eslint-disable-next-line @typescript-eslint/prefer-for-of
      for (let index = 0; index < accessList.length; index += 1) {
          const item = accessList[index];
          const storageSlots = item[1];
          slots += storageSlots.length;
      }
      const addresses = accessList.length;
      return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * This base class will likely be subject to further
   * refactoring along the introduction of additional tx types
   * on the Ethereum network.
   *
   * It is therefore not recommended to use directly.
   */
  class BaseTransaction {
      constructor(txData, opts) {
          var _a, _b;
          this.cache = {
              hash: undefined,
              dataFee: undefined,
          };
          /**
           * List of tx type defining EIPs,
           * e.g. 1559 (fee market) and 2930 (access lists)
           * for FeeMarketEIP1559Transaction objects
           */
          this.activeCapabilities = [];
          /**
           * The default chain the tx falls back to if no Common
           * is provided and if the chain can't be derived from
           * a passed in chainId (only EIP-2718 typed txs) or
           * EIP-155 signature (legacy txs).
           *
           * @hidden
           */
          this.DEFAULT_CHAIN = Chain.Mainnet;
          /**
           * The default HF if the tx type is active on that HF
           * or the first greater HF where the tx is active.
           *
           * @hidden
           */
          this.DEFAULT_HARDFORK = Hardfork.Merge;
          const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;
          this._type = Number(uint8ArrayToBigInt$2(toUint8Array(type)));
          this.txOptions = opts;
          const toB = toUint8Array(to === '' ? '0x' : to);
          const vB = toUint8Array(v === '' ? '0x' : v);
          const rB = toUint8Array(r === '' ? '0x' : r);
          const sB = toUint8Array(s === '' ? '0x' : s);
          this.nonce = uint8ArrayToBigInt$2(toUint8Array(nonce === '' ? '0x' : nonce));
          this.gasLimit = uint8ArrayToBigInt$2(toUint8Array(gasLimit === '' ? '0x' : gasLimit));
          this.to = toB.length > 0 ? new Address(toB) : undefined;
          this.value = uint8ArrayToBigInt$2(toUint8Array(value === '' ? '0x' : value));
          this.data = toUint8Array(data === '' ? '0x' : data);
          this.v = vB.length > 0 ? uint8ArrayToBigInt$2(vB) : undefined;
          this.r = rB.length > 0 ? uint8ArrayToBigInt$2(rB) : undefined;
          this.s = sB.length > 0 ? uint8ArrayToBigInt$2(sB) : undefined;
          this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });
          // geth limits gasLimit to 2^64-1
          this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);
          // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)
          this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);
          // eslint-disable-next-line no-null/no-null
          const createContract = this.to === undefined || this.to === null;
          const allowUnlimitedInitCodeSize = (_a = opts.allowUnlimitedInitCodeSize) !== null && _a !== void 0 ? _a : false;
          const common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();
          if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {
              checkMaxInitCodeSize(common, this.data.length);
          }
      }
      /**
       * Returns the transaction type.
       *
       * Note: legacy txs will return tx type `0`.
       */
      get type() {
          return this._type;
      }
      /**
       * Checks if a tx type defining capability is active
       * on a tx, for example the EIP-1559 fee market mechanism
       * or the EIP-2930 access list feature.
       *
       * Note that this is different from the tx type itself,
       * so EIP-2930 access lists can very well be active
       * on an EIP-1559 tx for example.
       *
       * This method can be useful for feature checks if the
       * tx type is unknown (e.g. when instantiated with
       * the tx factory).
       *
       * See `Capabilites` in the `types` module for a reference
       * on all supported capabilities.
       */
      supports(capability) {
          return this.activeCapabilities.includes(capability);
      }
      validate(stringError = false) {
          const errors = [];
          if (this.getBaseFee() > this.gasLimit) {
              errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);
          }
          if (this.isSigned() && !this.verifySignature()) {
              errors.push('Invalid Signature');
          }
          return stringError ? errors : errors.length === 0;
      }
      _validateYParity() {
          const { v } = this;
          if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {
              const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');
              throw new Error(msg);
          }
      }
      /**
       * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.
       * Reasoning: https://ethereum.stackexchange.com/a/55728
       */
      _validateHighS() {
          const { s } = this;
          if (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {
              const msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');
              throw new Error(msg);
          }
      }
      /**
       * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
       */
      getBaseFee() {
          const txFee = this.common.param('gasPrices', 'tx');
          let fee = this.getDataFee();
          if (txFee)
              fee += txFee;
          if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {
              const txCreationFee = this.common.param('gasPrices', 'txCreation');
              if (txCreationFee)
                  fee += txCreationFee;
          }
          return fee;
      }
      /**
       * The amount of gas paid for the data in this tx
       */
      getDataFee() {
          const txDataZero = this.common.param('gasPrices', 'txDataZero');
          const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');
          let cost = BigInt(0);
          // eslint-disable-next-line @typescript-eslint/prefer-for-of
          for (let i = 0; i < this.data.length; i += 1) {
              // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions
              this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);
          }
          // eslint-disable-next-line no-null/no-null
          if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {
              const dataLength = BigInt(Math.ceil(this.data.length / 32));
              const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;
              cost += initCodeCost;
          }
          return cost;
      }
      /**
       * If the tx's `to` is to the creation address
       */
      toCreationAddress() {
          return this.to === undefined || this.to.buf.length === 0;
      }
      isSigned() {
          const { v, r, s } = this;
          if (v === undefined || r === undefined || s === undefined) {
              return false;
          }
          return true;
      }
      /**
       * Determines if the signature is valid
       */
      verifySignature() {
          try {
              // Main signature verification is done in `getSenderPublicKey()`
              const publicKey = this.getSenderPublicKey();
              return unpadUint8Array(publicKey).length !== 0;
          }
          catch (e) {
              return false;
          }
      }
      /**
       * Returns the sender's address
       */
      getSenderAddress() {
          return new Address(Address.publicToAddress(this.getSenderPublicKey()));
      }
      /**
       * Signs a transaction.
       *
       * Note that the signed tx is returned as a new object,
       * use as follows:
       * ```javascript
       * const signedTx = tx.sign(privateKey)
       * ```
       */
      sign(privateKey) {
          if (privateKey.length !== 32) {
              const msg = this._errorMsg('Private key must be 32 bytes in length.');
              throw new Error(msg);
          }
          // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature
          // and want to recreate a signature (where EIP155 should be applied)
          // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail
          // 2021-06-23
          let hackApplied = false;
          if (this.type === 0 &&
              this.common.gteHardfork('spuriousDragon') &&
              !this.supports(Capability.EIP155ReplayProtection)) {
              this.activeCapabilities.push(Capability.EIP155ReplayProtection);
              hackApplied = true;
          }
          const msgHash = this.getMessageToSign(true);
          const { v, r, s } = this._ecsign(msgHash, privateKey);
          const tx = this._processSignature(v, r, s);
          // Hack part 2
          if (hackApplied) {
              const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);
              if (index > -1) {
                  this.activeCapabilities.splice(index, 1);
              }
          }
          return tx;
      }
      /**
       * Does chain ID checks on common and returns a common
       * to be used on instantiation
       * @hidden
       *
       * @param common - {@link Common} instance from tx options
       * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)
       */
      _getCommon(common, chainId) {
          var _a, _b, _c, _d;
          // TODO: this function needs to be reviewed and the code to be more clean
          // check issue https://github.com/web3/web3.js/issues/6666
          // Chain ID provided
          if (chainId !== undefined) {
              const chainIdBigInt = uint8ArrayToBigInt$2(toUint8Array(chainId));
              if (common) {
                  if (common.chainId() !== chainIdBigInt) {
                      const msg = this._errorMsg('The chain ID does not match the chain ID of Common');
                      throw new Error(msg);
                  }
                  // Common provided, chain ID does match
                  // -> Return provided Common
                  return common.copy();
              }
              if (Common.isSupportedChainId(chainIdBigInt)) {
                  // No Common, chain ID supported by Common
                  // -> Instantiate Common with chain ID
                  return new Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });
              }
              // No Common, chain ID not supported by Common
              // -> Instantiate custom Common derived from DEFAULT_CHAIN
              return Common.custom({
                  name: 'custom-chain',
                  networkId: chainIdBigInt,
                  chainId: chainIdBigInt,
              }, { baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });
          }
          // No chain ID provided
          // -> return Common provided or create new default Common
          if ((common === null || common === void 0 ? void 0 : common.copy) && typeof (common === null || common === void 0 ? void 0 : common.copy) === 'function') {
              return common.copy();
          }
          // TODO: Recheck this next block when working on https://github.com/web3/web3.js/issues/6666
          // This block is to handle when `chainId` was not passed and the `common` object does not have `copy()`
          // If it was meant to be unsupported to process `common` in this case, an exception should be thrown instead of the following block
          if (common) {
              const hardfork = typeof common.hardfork === 'function'
                  ? common.hardfork()
                  : // eslint-disable-next-line @typescript-eslint/unbound-method
                      common.hardfork;
              return Common.custom({
                  name: 'custom-chain',
                  networkId: common.networkId
                      ? common.networkId()
                      : (_b = BigInt((_a = common.customChain) === null || _a === void 0 ? void 0 : _a.networkId)) !== null && _b !== void 0 ? _b : undefined,
                  chainId: common.chainId
                      ? common.chainId()
                      : (_d = BigInt((_c = common.customChain) === null || _c === void 0 ? void 0 : _c.chainId)) !== null && _d !== void 0 ? _d : undefined,
              }, {
                  baseChain: this.DEFAULT_CHAIN,
                  hardfork: hardfork || this.DEFAULT_HARDFORK,
              });
          }
          return new Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });
      }
      /**
       * Validates that an object with BigInt values cannot exceed the specified bit limit.
       * @param values Object containing string keys and BigInt values
       * @param bits Number of bits to check (64 or 256)
       * @param cannotEqual Pass true if the number also cannot equal one less the maximum value
       */
      _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {
          for (const [key, value] of Object.entries(values)) {
              switch (bits) {
                  case 64:
                      if (cannotEqual) {
                          if (value !== undefined && value >= MAX_UINT64) {
                              const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);
                              throw new Error(msg);
                          }
                      }
                      else if (value !== undefined && value > MAX_UINT64) {
                          const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);
                          throw new Error(msg);
                      }
                      break;
                  case 256:
                      if (cannotEqual) {
                          if (value !== undefined && value >= MAX_INTEGER) {
                              const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);
                              throw new Error(msg);
                          }
                      }
                      else if (value !== undefined && value > MAX_INTEGER) {
                          const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);
                          throw new Error(msg);
                      }
                      break;
                  default: {
                      const msg = this._errorMsg('unimplemented bits value');
                      throw new Error(msg);
                  }
              }
          }
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static _validateNotArray(values) {
          const txDataKeys = [
              'nonce',
              'gasPrice',
              'gasLimit',
              'to',
              'value',
              'data',
              'v',
              'r',
              's',
              'type',
              'baseFee',
              'maxFeePerGas',
              'chainId',
          ];
          for (const [key, value] of Object.entries(values)) {
              if (txDataKeys.includes(key)) {
                  if (Array.isArray(value)) {
                      throw new Error(`${key} cannot be an array`);
                  }
              }
          }
      }
      /**
       * Returns the shared error postfix part for _error() method
       * tx type implementations.
       */
      _getSharedErrorPostfix() {
          let hash = '';
          try {
              hash = this.isSigned() ? bytesToHex$1(this.hash()) : 'not available (unsigned)';
          }
          catch (e) {
              hash = 'error';
          }
          let isSigned = '';
          try {
              isSigned = this.isSigned().toString();
          }
          catch (e) {
              hash = 'error';
          }
          let hf = '';
          try {
              hf = this.common.hardfork();
          }
          catch (e) {
              hf = 'error';
          }
          let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;
          postfix += `signed=${isSigned} hf=${hf}`;
          return postfix;
      }
      // eslint-disable-next-line class-methods-use-this
      _ecsign(msgHash, privateKey, chainId) {
          const signature = secp256k1.sign(msgHash, privateKey);
          const signatureBytes = signature.toCompactRawBytes();
          const r = signatureBytes.subarray(0, 32);
          const s = signatureBytes.subarray(32, 64);
          const v = chainId === undefined
              ? BigInt(signature.recovery + 27)
              : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);
          return { r, s, v };
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static fromSerializedTx(
      // @ts-expect-error unused variable
      serialized, 
      // @ts-expect-error unused variable
      opts = {}) { }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static fromTxData(
      // @ts-expect-error unused variable
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      txData, 
      // @ts-expect-error unused variable
      opts = {}) { }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const TRANSACTION_TYPE$2 = 2;
  const TRANSACTION_TYPE_UINT8ARRAY$1 = hexToBytes$1(TRANSACTION_TYPE$2.toString(16).padStart(2, '0'));
  /**
   * Typed transaction with a new gas fee market mechanism
   *
   * - TransactionType: 2
   * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)
   */
  // eslint-disable-next-line no-use-before-define
  class FeeMarketEIP1559Transaction extends BaseTransaction {
      /**
       * Instantiate a transaction from a data dictionary.
       *
       * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, v, r, s }
       *
       * Notes:
       * - `chainId` will be set automatically if not provided
       * - All parameters are optional and have some basic default values
       */
      static fromTxData(txData, opts = {}) {
          return new FeeMarketEIP1559Transaction(txData, opts);
      }
      /**
       * Instantiate a transaction from the serialized tx.
       *
       * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, signatureYParity, signatureR, signatureS])`
       */
      static fromSerializedTx(serialized, opts = {}) {
          if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY$1)) {
              throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE$2}, received: ${bytesToHex$1(serialized.subarray(0, 1))}`);
          }
          const values = distExports.RLP.decode(serialized.subarray(1));
          if (!Array.isArray(values)) {
              throw new Error('Invalid serialized tx input: must be array');
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);
      }
      /**
       * Create a transaction from a values array.
       *
       * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, signatureYParity, signatureR, signatureS]`
       */
      static fromValuesArray(values, opts = {}) {
          if (values.length !== 9 && values.length !== 12) {
              throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');
          }
          const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s,] = values;
          this._validateNotArray({ chainId, v });
          validateNoLeadingZeroes({
              nonce,
              maxPriorityFeePerGas,
              maxFeePerGas,
              gasLimit,
              value,
              v,
              r,
              s,
          });
          return new FeeMarketEIP1559Transaction({
              chainId: uint8ArrayToBigInt$2(chainId),
              nonce,
              maxPriorityFeePerGas,
              maxFeePerGas,
              gasLimit,
              to,
              value,
              data,
              accessList: accessList !== null && accessList !== void 0 ? accessList : [],
              v: v !== undefined ? uint8ArrayToBigInt$2(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)
              r,
              s,
          }, opts);
      }
      /**
       * This constructor takes the values, validates them, assigns them and freezes the object.
       *
       * It is not recommended to use this constructor directly. Instead use
       * the static factory methods to assist in creating a Transaction object from
       * varying data types.
       */
      constructor(txData, opts = {}) {
          var _a;
          super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE$2 }), opts);
          /**
           * The default HF if the tx type is active on that HF
           * or the first greater HF where the tx is active.
           *
           * @hidden
           */
          this.DEFAULT_HARDFORK = 'london';
          const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;
          this.common = this._getCommon(opts.common, chainId);
          this.chainId = this.common.chainId();
          if (!this.common.isActivatedEIP(1559)) {
              throw new Error('EIP-1559 not enabled on Common');
          }
          this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);
          // Populate the access list fields
          const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
          this.accessList = accessListData.accessList;
          this.AccessListJSON = accessListData.AccessListJSON;
          // Verify the access list format.
          verifyAccessList(this.accessList);
          this.maxFeePerGas = uint8ArrayToBigInt$2(toUint8Array(maxFeePerGas === '' ? '0x' : maxFeePerGas));
          this.maxPriorityFeePerGas = uint8ArrayToBigInt$2(toUint8Array(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));
          this._validateCannotExceedMaxInteger({
              maxFeePerGas: this.maxFeePerGas,
              maxPriorityFeePerGas: this.maxPriorityFeePerGas,
          });
          BaseTransaction._validateNotArray(txData);
          if (this.gasLimit * this.maxFeePerGas > MAX_INTEGER) {
              const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');
              throw new Error(msg);
          }
          if (this.maxFeePerGas < this.maxPriorityFeePerGas) {
              const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');
              throw new Error(msg);
          }
          this._validateYParity();
          this._validateHighS();
          const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
          if (freeze) {
              Object.freeze(this);
          }
      }
      /**
       * The amount of gas paid for the data in this tx
       */
      getDataFee() {
          if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
              return this.cache.dataFee.value;
          }
          let cost = super.getDataFee();
          cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));
          if (Object.isFrozen(this)) {
              this.cache.dataFee = {
                  value: cost,
                  hardfork: this.common.hardfork(),
              };
          }
          return cost;
      }
      /**
       * The up front amount that an account must have for this transaction to be valid
       * @param baseFee The base fee of the block (will be set to 0 if not provided)
       */
      getUpfrontCost(baseFee = BigInt(0)) {
          const prio = this.maxPriorityFeePerGas;
          const maxBase = this.maxFeePerGas - baseFee;
          const inclusionFeePerGas = prio < maxBase ? prio : maxBase;
          const gasPrice = inclusionFeePerGas + baseFee;
          return this.gasLimit * gasPrice + this.value;
      }
      /**
       * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.
       *
       * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, signatureYParity, signatureR, signatureS]`
       *
       * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block
       * with {@link Block.fromValuesArray}.
       *
       * For an unsigned tx this method uses the empty Uint8Array values for the
       * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
       * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.
       */
      raw() {
          return [
              bigIntToUnpaddedUint8Array(this.chainId),
              bigIntToUnpaddedUint8Array(this.nonce),
              bigIntToUnpaddedUint8Array(this.maxPriorityFeePerGas),
              bigIntToUnpaddedUint8Array(this.maxFeePerGas),
              bigIntToUnpaddedUint8Array(this.gasLimit),
              this.to !== undefined ? this.to.buf : Uint8Array.from([]),
              bigIntToUnpaddedUint8Array(this.value),
              this.data,
              this.accessList,
              this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
              this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
              this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),
          ];
      }
      /**
       * Returns the serialized encoding of the EIP-1559 transaction.
       *
       * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, signatureYParity, signatureR, signatureS])`
       *
       * Note that in contrast to the legacy tx serialization format this is not
       * valid RLP any more due to the raw tx type preceding and concatenated to
       * the RLP encoding of the values.
       */
      serialize() {
          const base = this.raw();
          return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY$1, distExports.RLP.encode(base));
      }
      /**
       * Returns the serialized unsigned tx (hashed or raw), which can be used
       * to sign the transaction (e.g. for sending to a hardware wallet).
       *
       * Note: in contrast to the legacy tx the raw message format is already
       * serialized and doesn't need to be RLP encoded any more.
       *
       * ```javascript
       * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
       * ```
       *
       * @param hashMessage - Return hashed message if set to true (default: true)
       */
      getMessageToSign(hashMessage = true) {
          const base = this.raw().slice(0, 9);
          const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY$1, distExports.RLP.encode(base));
          if (hashMessage) {
              return keccak256(message);
          }
          return message;
      }
      /**
       * Computes a sha3-256 hash of the serialized tx.
       *
       * This method can only be used for signed txs (it throws otherwise).
       * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
       */
      hash() {
          if (!this.isSigned()) {
              const msg = this._errorMsg('Cannot call hash method if transaction is not signed');
              throw new Error(msg);
          }
          if (Object.isFrozen(this)) {
              if (!this.cache.hash) {
                  this.cache.hash = keccak256(this.serialize());
              }
              return this.cache.hash;
          }
          return keccak256(this.serialize());
      }
      /**
       * Computes a sha3-256 hash which can be used to verify the signature
       */
      getMessageToVerifySignature() {
          return this.getMessageToSign();
      }
      /**
       * Returns the public key of the sender
       */
      getSenderPublicKey() {
          if (!this.isSigned()) {
              const msg = this._errorMsg('Cannot call this method if transaction is not signed');
              throw new Error(msg);
          }
          const msgHash = this.getMessageToVerifySignature();
          const { v, r, s } = this;
          this._validateHighS();
          try {
              return ecrecover(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign
              bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));
          }
          catch (e) {
              const msg = this._errorMsg('Invalid Signature');
              throw new Error(msg);
          }
      }
      _processSignature(v, r, s) {
          const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
          return FeeMarketEIP1559Transaction.fromTxData({
              chainId: this.chainId,
              nonce: this.nonce,
              maxPriorityFeePerGas: this.maxPriorityFeePerGas,
              maxFeePerGas: this.maxFeePerGas,
              gasLimit: this.gasLimit,
              to: this.to,
              value: this.value,
              data: this.data,
              accessList: this.accessList,
              v: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.
              r: uint8ArrayToBigInt$2(r),
              s: uint8ArrayToBigInt$2(s),
          }, opts);
      }
      /**
       * Returns an object with the JSON representation of the transaction
       */
      toJSON() {
          const accessListJSON = getAccessListJSON(this.accessList);
          return {
              chainId: bigIntToHex(this.chainId),
              nonce: bigIntToHex(this.nonce),
              maxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),
              maxFeePerGas: bigIntToHex(this.maxFeePerGas),
              gasLimit: bigIntToHex(this.gasLimit),
              to: this.to !== undefined ? this.to.toString() : undefined,
              value: bigIntToHex(this.value),
              data: bytesToHex$1(this.data),
              accessList: accessListJSON,
              v: this.v !== undefined ? bigIntToHex(this.v) : undefined,
              r: this.r !== undefined ? bigIntToHex(this.r) : undefined,
              s: this.s !== undefined ? bigIntToHex(this.s) : undefined,
          };
      }
      /**
       * Return a compact error string representation of the object
       */
      errorStr() {
          let errorStr = this._getSharedErrorPostfix();
          errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;
          return errorStr;
      }
      /**
       * Internal helper function to create an annotated error message
       *
       * @param msg Base error message
       * @hidden
       */
      _errorMsg(msg) {
          return `${msg} (${this.errorStr()})`;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const TRANSACTION_TYPE$1 = 1;
  const TRANSACTION_TYPE_UINT8ARRAY = hexToBytes$1(TRANSACTION_TYPE$1.toString(16).padStart(2, '0'));
  /**
   * Typed transaction with optional access lists
   *
   * - TransactionType: 1
   * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)
   */
  // eslint-disable-next-line no-use-before-define
  class AccessListEIP2930Transaction extends BaseTransaction {
      /**
       * Instantiate a transaction from a data dictionary.
       *
       * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * v, r, s }
       *
       * Notes:
       * - `chainId` will be set automatically if not provided
       * - All parameters are optional and have some basic default values
       */
      static fromTxData(txData, opts = {}) {
          return new AccessListEIP2930Transaction(txData, opts);
      }
      /**
       * Instantiate a transaction from the serialized tx.
       *
       * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * signatureYParity (v), signatureR (r), signatureS (s)])`
       */
      static fromSerializedTx(serialized, opts = {}) {
          if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {
              throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE$1}, received: ${bytesToHex$1(serialized.subarray(0, 1))}`);
          }
          const values = distExports.RLP.decode(Uint8Array.from(serialized.subarray(1)));
          if (!Array.isArray(values)) {
              throw new Error('Invalid serialized tx input: must be array');
          }
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          return AccessListEIP2930Transaction.fromValuesArray(values, opts);
      }
      /**
       * Create a transaction from a values array.
       *
       * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * signatureYParity (v), signatureR (r), signatureS (s)]`
       */
      static fromValuesArray(values, opts = {}) {
          if (values.length !== 8 && values.length !== 11) {
              throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');
          }
          const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;
          this._validateNotArray({ chainId, v });
          validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });
          const emptyAccessList = [];
          return new AccessListEIP2930Transaction({
              chainId: uint8ArrayToBigInt$2(chainId),
              nonce,
              gasPrice,
              gasLimit,
              to,
              value,
              data,
              accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,
              v: v !== undefined ? uint8ArrayToBigInt$2(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)
              r,
              s,
          }, opts);
      }
      /**
       * This constructor takes the values, validates them, assigns them and freezes the object.
       *
       * It is not recommended to use this constructor directly. Instead use
       * the static factory methods to assist in creating a Transaction object from
       * varying data types.
       */
      constructor(txData, opts = {}) {
          var _a;
          super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE$1 }), opts);
          /**
           * The default HF if the tx type is active on that HF
           * or the first greater HF where the tx is active.
           *
           * @hidden
           */
          this.DEFAULT_HARDFORK = 'berlin';
          const { chainId, accessList, gasPrice } = txData;
          this.common = this._getCommon(opts.common, chainId);
          this.chainId = this.common.chainId();
          // EIP-2718 check is done in Common
          if (!this.common.isActivatedEIP(2930)) {
              throw new Error('EIP-2930 not enabled on Common');
          }
          this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);
          // Populate the access list fields
          const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
          this.accessList = accessListData.accessList;
          this.AccessListJSON = accessListData.AccessListJSON;
          // Verify the access list format.
          verifyAccessList(this.accessList);
          this.gasPrice = uint8ArrayToBigInt$2(toUint8Array(gasPrice === '' ? '0x' : gasPrice));
          this._validateCannotExceedMaxInteger({
              gasPrice: this.gasPrice,
          });
          BaseTransaction._validateNotArray(txData);
          if (this.gasPrice * this.gasLimit > MAX_INTEGER) {
              const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');
              throw new Error(msg);
          }
          this._validateYParity();
          this._validateHighS();
          const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
          if (freeze) {
              Object.freeze(this);
          }
      }
      /**
       * The amount of gas paid for the data in this tx
       */
      getDataFee() {
          if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
              return this.cache.dataFee.value;
          }
          let cost = super.getDataFee();
          cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));
          if (Object.isFrozen(this)) {
              this.cache.dataFee = {
                  value: cost,
                  hardfork: this.common.hardfork(),
              };
          }
          return cost;
      }
      /**
       * The up front amount that an account must have for this transaction to be valid
       */
      getUpfrontCost() {
          return this.gasLimit * this.gasPrice + this.value;
      }
      /**
       * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.
       *
       * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * signatureYParity (v), signatureR (r), signatureS (s)]`
       *
       * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block
       * with {@link Block.fromValuesArray}.
       *
       * For an unsigned tx this method uses the empty UINT8ARRAY values for the
       * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
       * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.
       */
      raw() {
          return [
              bigIntToUnpaddedUint8Array(this.chainId),
              bigIntToUnpaddedUint8Array(this.nonce),
              bigIntToUnpaddedUint8Array(this.gasPrice),
              bigIntToUnpaddedUint8Array(this.gasLimit),
              this.to !== undefined ? this.to.buf : Uint8Array.from([]),
              bigIntToUnpaddedUint8Array(this.value),
              this.data,
              this.accessList,
              this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
              this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
              this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),
          ];
      }
      /**
       * Returns the serialized encoding of the EIP-2930 transaction.
       *
       * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * signatureYParity (v), signatureR (r), signatureS (s)])`
       *
       * Note that in contrast to the legacy tx serialization format this is not
       * valid RLP any more due to the raw tx type preceding and concatenated to
       * the RLP encoding of the values.
       */
      serialize() {
          const base = this.raw();
          return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, distExports.RLP.encode(base));
      }
      /**
       * Returns the serialized unsigned tx (hashed or raw), which can be used
       * to sign the transaction (e.g. for sending to a hardware wallet).
       *
       * Note: in contrast to the legacy tx the raw message format is already
       * serialized and doesn't need to be RLP encoded any more.
       *
       * ```javascript
       * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
       * ```
       *
       * @param hashMessage - Return hashed message if set to true (default: true)
       */
      getMessageToSign(hashMessage = true) {
          const base = this.raw().slice(0, 8);
          const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, distExports.RLP.encode(base));
          if (hashMessage) {
              return keccak256(message);
          }
          return message;
      }
      /**
       * Computes a sha3-256 hash of the serialized tx.
       *
       * This method can only be used for signed txs (it throws otherwise).
       * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
       */
      hash() {
          if (!this.isSigned()) {
              const msg = this._errorMsg('Cannot call hash method if transaction is not signed');
              throw new Error(msg);
          }
          if (Object.isFrozen(this)) {
              if (!this.cache.hash) {
                  this.cache.hash = keccak256(this.serialize());
              }
              return this.cache.hash;
          }
          return keccak256(this.serialize());
      }
      /**
       * Computes a sha3-256 hash which can be used to verify the signature
       */
      getMessageToVerifySignature() {
          return this.getMessageToSign();
      }
      /**
       * Returns the public key of the sender
       */
      getSenderPublicKey() {
          if (!this.isSigned()) {
              const msg = this._errorMsg('Cannot call this method if transaction is not signed');
              throw new Error(msg);
          }
          const msgHash = this.getMessageToVerifySignature();
          const { v, r, s } = this;
          this._validateHighS();
          try {
              return ecrecover(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign
              bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));
          }
          catch (e) {
              const msg = this._errorMsg('Invalid Signature');
              throw new Error(msg);
          }
      }
      _processSignature(v, r, s) {
          const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
          return AccessListEIP2930Transaction.fromTxData({
              chainId: this.chainId,
              nonce: this.nonce,
              gasPrice: this.gasPrice,
              gasLimit: this.gasLimit,
              to: this.to,
              value: this.value,
              data: this.data,
              accessList: this.accessList,
              v: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.
              r: uint8ArrayToBigInt$2(r),
              s: uint8ArrayToBigInt$2(s),
          }, opts);
      }
      /**
       * Returns an object with the JSON representation of the transaction
       */
      toJSON() {
          const accessListJSON = getAccessListJSON(this.accessList);
          return {
              chainId: bigIntToHex(this.chainId),
              nonce: bigIntToHex(this.nonce),
              gasPrice: bigIntToHex(this.gasPrice),
              gasLimit: bigIntToHex(this.gasLimit),
              to: this.to !== undefined ? this.to.toString() : undefined,
              value: bigIntToHex(this.value),
              data: bytesToHex$1(this.data),
              accessList: accessListJSON,
              v: this.v !== undefined ? bigIntToHex(this.v) : undefined,
              r: this.r !== undefined ? bigIntToHex(this.r) : undefined,
              s: this.s !== undefined ? bigIntToHex(this.s) : undefined,
          };
      }
      /**
       * Return a compact error string representation of the object
       */
      errorStr() {
          var _a, _b;
          let errorStr = this._getSharedErrorPostfix();
          // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail
          errorStr += ` gasPrice=${this.gasPrice} accessListCount=${(_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0}`;
          return errorStr;
      }
      /**
       * Internal helper function to create an annotated error message
       *
       * @param msg Base error message
       * @hidden
       */
      _errorMsg(msg) {
          return `${msg} (${this.errorStr()})`;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const TRANSACTION_TYPE = 0;
  function meetsEIP155(_v, chainId) {
      const v = Number(_v);
      const chainIdDoubled = Number(chainId) * 2;
      return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;
  }
  /**
   * An Ethereum non-typed (legacy) transaction
   */
  // eslint-disable-next-line no-use-before-define
  class Transaction extends BaseTransaction {
      /**
       * Instantiate a transaction from a data dictionary.
       *
       * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }
       *
       * Notes:
       * - All parameters are optional and have some basic default values
       */
      static fromTxData(txData, opts = {}) {
          return new Transaction(txData, opts);
      }
      /**
       * Instantiate a transaction from the serialized tx.
       *
       * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
       */
      static fromSerializedTx(serialized, opts = {}) {
          const values = distExports.RLP.decode(serialized);
          if (!Array.isArray(values)) {
              throw new Error('Invalid serialized tx input. Must be array');
          }
          return this.fromValuesArray(values, opts);
      }
      /**
       * Create a transaction from a values array.
       *
       * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
       */
      static fromValuesArray(values, opts = {}) {
          // If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction
          // This happens if you get the RLP data from `raw()`
          if (values.length !== 6 && values.length !== 9) {
              throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');
          }
          const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;
          validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });
          return new Transaction({
              nonce,
              gasPrice,
              gasLimit,
              to,
              value,
              data,
              v,
              r,
              s,
          }, opts);
      }
      /**
       * This constructor takes the values, validates them, assigns them and freezes the object.
       *
       * It is not recommended to use this constructor directly. Instead use
       * the static factory methods to assist in creating a Transaction object from
       * varying data types.
       */
      constructor(txData, opts = {}) {
          var _a;
          super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE }), opts);
          this.common = this._validateTxV(this.v, opts.common);
          this.gasPrice = uint8ArrayToBigInt$2(toUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice));
          if (this.gasPrice * this.gasLimit > MAX_INTEGER) {
              const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');
              throw new Error(msg);
          }
          this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });
          BaseTransaction._validateNotArray(txData);
          if (this.common.gteHardfork('spuriousDragon')) {
              if (!this.isSigned()) {
                  this.activeCapabilities.push(Capability.EIP155ReplayProtection);
              }
              else {
                  // EIP155 spec:
                  // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36
                  // then when computing the hash of a transaction for purposes of signing or recovering
                  // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)
                  // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.
                  // v and chain ID meet EIP-155 conditions
                  // eslint-disable-next-line no-lonely-if
                  if (meetsEIP155(this.v, this.common.chainId())) {
                      this.activeCapabilities.push(Capability.EIP155ReplayProtection);
                  }
              }
          }
          const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
          if (freeze) {
              Object.freeze(this);
          }
      }
      /**
       * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.
       *
       * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
       *
       * For legacy txs this is also the correct format to add transactions
       * to a block with {@link Block.fromValuesArray} (use the `serialize()` method
       * for typed txs).
       *
       * For an unsigned tx this method returns the empty Uint8Array values
       * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant
       * representation have a look at {@link Transaction.getMessageToSign}.
       */
      raw() {
          return [
              bigIntToUnpaddedUint8Array(this.nonce),
              bigIntToUnpaddedUint8Array(this.gasPrice),
              bigIntToUnpaddedUint8Array(this.gasLimit),
              this.to !== undefined ? this.to.buf : Uint8Array.from([]),
              bigIntToUnpaddedUint8Array(this.value),
              this.data,
              this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
              this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
              this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),
          ];
      }
      /**
       * Returns the serialized encoding of the legacy transaction.
       *
       * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
       *
       * For an unsigned tx this method uses the empty Uint8Array values for the
       * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
       * representation for external signing use {@link Transaction.getMessageToSign}.
       */
      serialize() {
          return distExports.RLP.encode(this.raw());
      }
      _getMessageToSign() {
          const values = [
              bigIntToUnpaddedUint8Array(this.nonce),
              bigIntToUnpaddedUint8Array(this.gasPrice),
              bigIntToUnpaddedUint8Array(this.gasLimit),
              this.to !== undefined ? this.to.buf : Uint8Array.from([]),
              bigIntToUnpaddedUint8Array(this.value),
              this.data,
          ];
          if (this.supports(Capability.EIP155ReplayProtection)) {
              values.push(toUint8Array(this.common.chainId()));
              values.push(unpadUint8Array(toUint8Array(0)));
              values.push(unpadUint8Array(toUint8Array(0)));
          }
          return values;
      }
      getMessageToSign(hashMessage = true) {
          const message = this._getMessageToSign();
          if (hashMessage) {
              return keccak256(distExports.RLP.encode(message));
          }
          return message;
      }
      /**
       * The amount of gas paid for the data in this tx
       */
      getDataFee() {
          if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
              return this.cache.dataFee.value;
          }
          if (Object.isFrozen(this)) {
              this.cache.dataFee = {
                  value: super.getDataFee(),
                  hardfork: this.common.hardfork(),
              };
          }
          return super.getDataFee();
      }
      /**
       * The up front amount that an account must have for this transaction to be valid
       */
      getUpfrontCost() {
          return this.gasLimit * this.gasPrice + this.value;
      }
      /**
       * Computes a sha3-256 hash of the serialized tx.
       *
       * This method can only be used for signed txs (it throws otherwise).
       * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
       */
      hash() {
          if (!this.isSigned()) {
              const msg = this._errorMsg('Cannot call hash method if transaction is not signed');
              throw new Error(msg);
          }
          if (Object.isFrozen(this)) {
              if (!this.cache.hash) {
                  this.cache.hash = keccak256(distExports.RLP.encode(this.raw()));
              }
              return this.cache.hash;
          }
          return keccak256(distExports.RLP.encode(this.raw()));
      }
      /**
       * Computes a sha3-256 hash which can be used to verify the signature
       */
      getMessageToVerifySignature() {
          if (!this.isSigned()) {
              const msg = this._errorMsg('This transaction is not signed');
              throw new Error(msg);
          }
          const message = this._getMessageToSign();
          return keccak256(distExports.RLP.encode(message));
      }
      /**
       * Returns the public key of the sender
       */
      getSenderPublicKey() {
          const msgHash = this.getMessageToVerifySignature();
          const { v, r, s } = this;
          this._validateHighS();
          try {
              return ecrecover(msgHash, v, bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s), this.supports(Capability.EIP155ReplayProtection)
                  ? this.common.chainId()
                  : undefined);
          }
          catch (e) {
              const msg = this._errorMsg('Invalid Signature');
              throw new Error(msg);
          }
      }
      /**
       * Process the v, r, s values from the `sign` method of the base transaction.
       */
      _processSignature(_v, r, s) {
          let v = _v;
          if (this.supports(Capability.EIP155ReplayProtection)) {
              v += this.common.chainId() * BigInt(2) + BigInt(8);
          }
          const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
          return Transaction.fromTxData({
              nonce: this.nonce,
              gasPrice: this.gasPrice,
              gasLimit: this.gasLimit,
              to: this.to,
              value: this.value,
              data: this.data,
              v,
              r: uint8ArrayToBigInt$2(r),
              s: uint8ArrayToBigInt$2(s),
          }, opts);
      }
      /**
       * Returns an object with the JSON representation of the transaction.
       */
      toJSON() {
          return {
              nonce: bigIntToHex(this.nonce),
              gasPrice: bigIntToHex(this.gasPrice),
              gasLimit: bigIntToHex(this.gasLimit),
              to: this.to !== undefined ? this.to.toString() : undefined,
              value: bigIntToHex(this.value),
              data: bytesToHex$1(this.data),
              v: this.v !== undefined ? bigIntToHex(this.v) : undefined,
              r: this.r !== undefined ? bigIntToHex(this.r) : undefined,
              s: this.s !== undefined ? bigIntToHex(this.s) : undefined,
          };
      }
      /**
       * Validates tx's `v` value
       */
      _validateTxV(_v, common) {
          let chainIdBigInt;
          const v = _v !== undefined ? Number(_v) : undefined;
          // Check for valid v values in the scope of a signed legacy tx
          if (v !== undefined) {
              // v is 1. not matching the EIP-155 chainId included case and...
              // v is 2. not matching the classic v=27 or v=28 case
              if (v < 37 && v !== 27 && v !== 28) {
                  throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);
              }
          }
          // No unsigned tx and EIP-155 activated and chain ID included
          if (v !== undefined &&
              v !== 0 &&
              (!common || common.gteHardfork('spuriousDragon')) &&
              v !== 27 &&
              v !== 28) {
              if (common) {
                  if (!meetsEIP155(BigInt(v), common.chainId())) {
                      throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);
                  }
              }
              else {
                  // Derive the original chain ID
                  let numSub;
                  if ((v - 35) % 2 === 0) {
                      numSub = 35;
                  }
                  else {
                      numSub = 36;
                  }
                  // Use derived chain ID to create a proper Common
                  chainIdBigInt = BigInt(v - numSub) / BigInt(2);
              }
          }
          return this._getCommon(common, chainIdBigInt);
      }
      /**
       * Return a compact error string representation of the object
       */
      errorStr() {
          let errorStr = this._getSharedErrorPostfix();
          errorStr += ` gasPrice=${this.gasPrice}`;
          return errorStr;
      }
      /**
       * Internal helper function to create an annotated error message
       *
       * @param msg Base error message
       * @hidden
       */
      _errorMsg(msg) {
          return `${msg} (${this.errorStr()})`;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const extraTxTypes = new Map();
  // eslint-disable-next-line @typescript-eslint/no-extraneous-class
  class TransactionFactory {
      // It is not possible to instantiate a TransactionFactory object.
      // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function
      constructor() { }
      static typeToInt(txType) {
          return Number(uint8ArrayToBigInt$2(toUint8Array(txType)));
      }
      static registerTransactionType(type, txClass) {
          const txType = TransactionFactory.typeToInt(type);
          extraTxTypes.set(txType, txClass);
      }
      /**
       * Create a transaction from a `txData` object
       *
       * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)
       * @param txOptions - Options to pass on to the constructor of the transaction
       */
      static fromTxData(txData, txOptions = {}) {
          if (!('type' in txData) || txData.type === undefined) {
              // Assume legacy transaction
              return Transaction.fromTxData(txData, txOptions);
          }
          const txType = TransactionFactory.typeToInt(txData.type);
          if (txType === 0) {
              return Transaction.fromTxData(txData, txOptions);
          }
          if (txType === 1) {
              // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
              return AccessListEIP2930Transaction.fromTxData(
              // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
              txData, txOptions);
          }
          if (txType === 2) {
              return FeeMarketEIP1559Transaction.fromTxData(
              // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
              txData, txOptions);
          }
          const ExtraTransaction = extraTxTypes.get(txType);
          if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromTxData) {
              return ExtraTransaction.fromTxData(txData, txOptions);
          }
          throw new Error(`Tx instantiation with type ${txType} not supported`);
      }
      /**
       * This method tries to decode serialized data.
       *
       * @param data - The data Uint8Array
       * @param txOptions - The transaction options
       */
      static fromSerializedData(data, txOptions = {}) {
          if (data[0] <= 0x7f) {
              // Determine the type.
              switch (data[0]) {
                  case 1:
                      return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);
                  case 2:
                      return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);
                  default: {
                      const ExtraTransaction = extraTxTypes.get(Number(data[0]));
                      if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromSerializedTx) {
                          return ExtraTransaction.fromSerializedTx(data, txOptions);
                      }
                      throw new Error(`TypedTransaction with ID ${data[0]} unknown`);
                  }
              }
          }
          else {
              return Transaction.fromSerializedTx(data, txOptions);
          }
      }
      /**
       * When decoding a BlockBody, in the transactions field, a field is either:
       * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))
       * A Uint8Array[] (Legacy Transaction)
       * This method returns the right transaction.
       *
       * @param data - A Uint8Array or Uint8Array[]
       * @param txOptions - The transaction options
       */
      static fromBlockBodyData(data, txOptions = {}) {
          if (isUint8Array(data)) {
              return this.fromSerializedData(data, txOptions);
          }
          if (Array.isArray(data)) {
              // It is a legacy transaction
              return Transaction.fromValuesArray(data, txOptions);
          }
          throw new Error('Cannot decode transaction: unknown type input');
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$E = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * Get the private key Uint8Array after the validation.
   * Note: This function is not exported through main web3 package, so for using it directly import from accounts package.
   * @param data - Private key
   * @param ignoreLength - Optional, ignore length check during validation
   * @returns The Uint8Array private key
   *
   * ```ts
   * parseAndValidatePrivateKey("0x08c673022000ece7964ea4db2d9369c50442b2869cbd8fc21baaca59e18f642c")
   *
   * > Uint8Array(32) [
   * 186,  26, 143, 168, 235, 179,  90,  75,
   * 101,  63,  84, 221, 152, 150,  30, 203,
   *   8, 113,  94, 226,  53, 213, 216,   5,
   * 194, 159,  17,  53, 219,  97, 121, 248
   * ]
   *
   * ```
   */
  const parseAndValidatePrivateKey = (data, ignoreLength) => {
      let privateKeyUint8Array;
      // To avoid the case of 1 character less in a hex string which is prefixed with '0' by using 'bytesToUint8Array'
      if (!ignoreLength && typeof data === 'string' && isHexStrict$1(data) && data.length !== 66) {
          throw new PrivateKeyLengthError();
      }
      try {
          privateKeyUint8Array = isUint8Array(data) ? data : bytesToUint8Array(data);
      }
      catch (_a) {
          throw new InvalidPrivateKeyError();
      }
      if (!ignoreLength && privateKeyUint8Array.byteLength !== 32) {
          throw new PrivateKeyLengthError();
      }
      return privateKeyUint8Array;
  };
  /**
   *
   * Hashes the given message. The data will be `UTF-8 HEX` decoded and enveloped as follows:
   * `"\x19Ethereum Signed Message:\n" + message.length + message` and hashed using keccak256.
   *
   * @param message - A message to hash, if its HEX it will be UTF8 decoded.
   * @param skipPrefix - (default: false) If true, the message will be not prefixed with "\x19Ethereum Signed Message:\n" + message.length
   * @returns The hashed message
   *
   * ```ts
   * web3.eth.accounts.hashMessage("Hello world")
   *
   * > "0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede"
   *
   * web3.eth.accounts.hashMessage(web3.utils.utf8ToHex("Hello world")) // Will be hex decoded in hashMessage
   *
   * > "0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede"
   *
   * web3.eth.accounts.hashMessage("Hello world", true)
   *
   * > "0xed6c11b0b5b808960df26f5bfc471d04c1995b0ffd2055925ad1be28d6baadfd"
   * ```
   */
  const hashMessage = (message, skipPrefix = false) => {
      const messageHex = isHexStrict$1(message) ? message : utf8ToHex(message);
      const messageBytes = hexToBytes$1(messageHex);
      const preamble = hexToBytes$1(fromUtf8(`\x19Ethereum Signed Message:\n${messageBytes.byteLength}`));
      const ethMessage = skipPrefix ? messageBytes : uint8ArrayConcat(preamble, messageBytes);
      return sha3Raw(ethMessage); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different
  };
  /**
   * Takes a hash of a message and a private key, signs the message using the SECP256k1 elliptic curve algorithm, and returns the signature components.
   * @param hash - The hash of the message to be signed, represented as a hexadecimal string.
   * @param privateKey - The private key used to sign the message, represented as a byte array.
   * @returns - The signature Object containing the message, messageHash, signature r, s, v
   */
  const signMessageWithPrivateKey = (hash, privateKey) => {
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
      const signature = secp256k1.sign(hash.substring(2), privateKeyUint8Array);
      const signatureBytes = signature.toCompactRawBytes();
      const r = signature.r.toString(16).padStart(64, '0');
      const s = signature.s.toString(16).padStart(64, '0');
      const v = signature.recovery + 27;
      return {
          messageHash: hash,
          v: numberToHex(v),
          r: `0x${r}`,
          s: `0x${s}`,
          signature: `${bytesToHex$1(signatureBytes)}${v.toString(16)}`,
      };
  };
  /**
   * Signs arbitrary data with a given private key.
   * :::info
   * The value passed as the data parameter will be UTF-8 HEX decoded and wrapped as follows: "\\x19Ethereum Signed Message:\\n" + message.length + message
   * :::

   * @param data - The data to sign
   * @param privateKey - The 32 byte private key to sign with
   * @returns The signature Object containing the message, messageHash, signature r, s, v
   *
   * ```ts
   * web3.eth.accounts.sign('Some data', '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')
   * > {
   * message: 'Some data',
   * messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',
   * v: '0x1c',
   * r: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd',
   * s: '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029',
   * signature: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a0291c'
   * }
   * ```
   */
  const sign$4 = (data, privateKey) => {
      const hash = hashMessage(data);
      const { messageHash, v, r, s, signature } = signMessageWithPrivateKey(hash, privateKey);
      return {
          message: data,
          messageHash,
          v,
          r,
          s,
          signature,
      };
  };
  /**
   * Signs an Ethereum transaction with a given private key.
   *
   * @param transaction - The transaction, must be a legacy, EIP2930 or EIP 1559 transaction type
   * @param privateKey -  The private key to import. This is 32 bytes of random data.
   * @returns A signTransactionResult object that contains message hash, r, s, v, transaction hash and raw transaction.
   *
   * This function is not stateful here. We need network access to get the account `nonce` and `chainId` to sign the transaction.
   * This function will rely on user to provide the full transaction to be signed. If you want to sign a partial transaction object
   * Use {@link Web3.eth.accounts.sign} instead.
   *
   * Signing a legacy transaction
   * ```ts
   * import {signTransaction, Transaction} from 'web3-eth-accounts';
   *
   * signTransaction(new Transaction({
   *	to: '0x118C2E5F57FD62C2B5b46a5ae9216F4FF4011a07',
   *	value: '0x186A0',
   *	gasLimit: '0x520812',
   *	gasPrice: '0x09184e72a000',
   *	data: '',
   *	chainId: 1,
   *	nonce: 0 }),
   * '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')
   *
   * > {
   * messageHash: '0x28b7b75f7ba48d588a902c1ff4d5d13cc0ca9ac0aaa39562368146923fb853bf',
   * v: '0x25',
   * r: '0x601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5',
   * s: '0x690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',
   * rawTransaction: '0xf869808609184e72a0008352081294118c2e5f57fd62c2b5b46a5ae9216f4ff4011a07830186a08025a00601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5a0690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',
   * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
   * ```
   *
   * Signing an eip 1559 transaction
   * ```ts
   * import {signTransaction, Transaction} from 'web3-eth-accounts';
   *
   * signTransaction(new Transaction({
   *	to: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',
   *	maxPriorityFeePerGas: '0x3B9ACA00',
   *	maxFeePerGas: '0xB2D05E00',
   *	gasLimit: '0x6A4012',
   *	value: '0x186A0',
   *	data: '',
   *	chainId: 1,
   *	nonce: 0}),
   * "0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318")
   * > {
   *  messageHash: '0x5744f24d5f0aff6c70487c8e85adf07d8564e50b08558788f00479611d7bae5f',
   * v: '0x25',
   * r: '0x78a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347',
   * s: '0x9cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',
   * rawTransaction: '0xf8638080836a401294f0109fc8df283027b6285cc889f5aa624eac1f55830186a08025a078a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347a009cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',
   * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
   * }
   * ```
   *
   * Signing an eip 2930 transaction
   * ```ts
   * import {signTransaction, Transaction} from 'web3-eth-accounts';
   *
   * signTransaction(new Transaction ({
   *	chainId: 1,
   *	nonce: 0,
   *	gasPrice: '0x09184e72a000',
   *	gasLimit: '0x2710321',
   *	to: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',
   *	value: '0x186A0',
   *	data: '',
   *	accessList: [
   *		{
   *			address: '0x0000000000000000000000000000000000000101',
   *			storageKeys: [
   *				'0x0000000000000000000000000000000000000000000000000000000000000000',
   *				'0x00000000000000000000000000000000000000000000000000000000000060a7',
   *			],
   *		},
   *	],
   * }),"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318")
   *
   * > {
   * messageHash: '0xc55ea24bdb4c379550a7c9a6818ac39ca33e75bc78ddb862bd82c31cc1c7a073',
   * v: '0x26',
   * r: '0x27344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098e',
   * s: '0x519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',
   * rawTransaction: '0xf86a808609184e72a000840271032194f0109fc8df283027b6285cc889f5aa624eac1f55830186a08026a027344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098ea0519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',
   * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
   * }
   * ```
   */
  const signTransaction$4 = (transaction, privateKey) => __awaiter$E(void 0, void 0, void 0, function* () {
      const signedTx = transaction.sign(hexToBytes$1(privateKey));
      if (isNullish$1(signedTx.v) || isNullish$1(signedTx.r) || isNullish$1(signedTx.s))
          throw new TransactionSigningError('Signer Error');
      const validationErrors = signedTx.validate(true);
      if (validationErrors.length > 0) {
          let errorString = 'Signer Error ';
          for (const validationError of validationErrors) {
              errorString += `${errorString} ${validationError}.`;
          }
          throw new TransactionSigningError(errorString);
      }
      const rawTx = bytesToHex$1(signedTx.serialize());
      const txHash = sha3Raw(rawTx); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different
      return {
          messageHash: bytesToHex$1(signedTx.getMessageToSign(true)),
          v: `0x${signedTx.v.toString(16)}`,
          r: `0x${signedTx.r.toString(16).padStart(64, '0')}`,
          s: `0x${signedTx.s.toString(16).padStart(64, '0')}`,
          rawTransaction: rawTx,
          transactionHash: bytesToHex$1(txHash),
      };
  });
  /**
   * Recovers the Ethereum address which was used to sign the given RLP encoded transaction.
   *
   * @param rawTransaction - The hex string having RLP encoded transaction
   * @returns The Ethereum address used to sign this transaction
   * ```ts
   * web3.eth.accounts.recoverTransaction('0xf869808504e3b29200831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008025a0c9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895a0727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68');
   * > "0x2c7536E3605D9C16a7a3D7b1898e529396a65c23"
   * ```
   */
  const recoverTransaction = (rawTransaction) => {
      if (isNullish$1(rawTransaction))
          throw new UndefinedRawTransactionError();
      const tx = TransactionFactory.fromSerializedData(hexToBytes$1(rawTransaction));
      return toChecksumAddress(tx.getSenderAddress().toString());
  };
  /**
   * Recovers the Ethereum address which was used to sign the given data
   *
   * @param data - Either a signed message, hash, or the {@link signatureObject}
   * @param signature - The raw RLP encoded signature
   * @param signatureOrV - signature or V
   * @param prefixedOrR - prefixed or R
   * @param s - S value in signature
   * @param prefixed - (default: false) If the last parameter is true, the given message will NOT automatically be prefixed with `"\\x19Ethereum Signed Message:\\n" + message.length + message`, and assumed to be already prefixed and hashed.
   * @returns The Ethereum address used to sign this data
   *
   * ```ts
   * const data = 'Some data';
   * const sigObj = web3.eth.accounts.sign(data, '0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728')
   *
   * > {
   *   message: 'Some data',
   *   messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',
   *   v: '0x1b',
   *   r: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f9',
   *   s: '0x53e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb150',
   *   signature: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b'
   * }
   *
   * // now recover
   * web3.eth.accounts.recover(data, sigObj.v, sigObj.r, sigObj.s)
   *
   * > 0xEB014f8c8B418Db6b45774c326A0E64C78914dC0
   * ```
   */
  const recover = (data, signatureOrV, prefixedOrR, s, prefixed) => {
      if (typeof data === 'object') {
          const signatureStr = `${data.r}${data.s.slice(2)}${data.v.slice(2)}`;
          return recover(data.messageHash, signatureStr, prefixedOrR);
      }
      if (typeof signatureOrV === 'string' && typeof prefixedOrR === 'string' && !isNullish$1(s)) {
          const signatureStr = `${prefixedOrR}${s.slice(2)}${signatureOrV.slice(2)}`;
          return recover(data, signatureStr, prefixed);
      }
      if (isNullish$1(signatureOrV))
          throw new InvalidSignatureError('signature string undefined');
      const V_INDEX = 130; // r = first 32 bytes, s = second 32 bytes, v = last byte of signature
      const hashedMessage = prefixedOrR ? data : hashMessage(data);
      let v = parseInt(signatureOrV.substring(V_INDEX), 16); // 0x + r + s + v
      if (v > 26) {
          v -= 27;
      }
      const ecPublicKey = secp256k1.Signature.fromCompact(signatureOrV.slice(2, V_INDEX))
          .addRecoveryBit(v)
          .recoverPublicKey(hashedMessage.replace('0x', ''))
          .toRawBytes(false);
      const publicHash = sha3Raw(ecPublicKey.subarray(1));
      const address = toChecksumAddress(`0x${publicHash.slice(-40)}`);
      return address;
  };
  /**
   * Get the ethereum Address from a private key
   *
   * @param privateKey - String or Uint8Array of 32 bytes
   * @param ignoreLength - if true, will not error check length
   * @returns The Ethereum address
   * @example
   * ```ts
   * web3.eth.accounts.privateKeyToAddress("0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728")
   *
   * > "0xEB014f8c8B418Db6b45774c326A0E64C78914dC0"
   * ```
   */
  const privateKeyToAddress = (privateKey) => {
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
      // Get public key from private key in compressed format
      const publicKey = secp256k1.getPublicKey(privateKeyUint8Array, false);
      // Uncompressed ECDSA public key contains the prefix `0x04` which is not used in the Ethereum public key
      const publicKeyHash = sha3Raw(publicKey.slice(1));
      // The hash is returned as 256 bits (32 bytes) or 64 hex characters
      // To get the address, take the last 20 bytes of the public hash
      const address = publicKeyHash.slice(-40);
      return toChecksumAddress(`0x${address}`);
  };
  /**
   * Get the public key from a private key
   *
   * @param privateKey - String or Uint8Array of 32 bytes
   * @param isCompressed - if true, will generate a 33 byte compressed public key instead of a 65 byte public key
   * @returns The public key
   * @example
   * ```ts
   * web3.eth.accounts.privateKeyToPublicKey("0x1e046a882bb38236b646c9f135cf90ad90a140810f439875f2a6dd8e50fa261f", true)
   *
   * > "0x42beb65f179720abaa3ec9a70a539629cbbc5ec65bb57e7fc78977796837e537662dd17042e6449dc843c281067a4d6d8d1a1775a13c41901670d5de7ee6503a" // uncompressed public key
   * ```
   */
  const privateKeyToPublicKey = (privateKey, isCompressed) => {
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
      // Get public key from private key in compressed format
      return `0x${bytesToHex$1(secp256k1.getPublicKey(privateKeyUint8Array, isCompressed)).slice(4)}`; // 0x and removing compression byte
  };
  /**
   * encrypt a private key with a password, returns a V3 JSON Keystore
   *
   * Read more: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
   *
   * @param privateKey - The private key to encrypt, 32 bytes.
   * @param password - The password used for encryption.
   * @param options - Options to configure to encrypt the keystore either scrypt or pbkdf2
   * @returns Returns a V3 JSON Keystore
   *
   * Encrypt using scrypt options:
   * ```ts
   *
   * web3.eth.accounts.encrypt(
   *    '0x67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',
   *    '123',
   *    {
   *        n: 8192,
   *	    iv: web3.utils.hexToBytes('0xbfb43120ae00e9de110f8325143a2709'),
   *	    salt: web3.utils.hexToBytes('0x210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'),
   *	}).then(console.log)
   *
   * > {
   * version: 3,
   * id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',
   * address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',
   * crypto: {
   *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',
   *   cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },
   *   cipher: 'aes-128-ctr',
   *   kdf: 'scrypt',
   *   kdfparams: {
   *     n: 8192,
   *     r: 8,
   *     p: 1,
   *     dklen: 32,
   *     salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'
   *   },
   *   mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'
   * }
   *}
   *```
   *
   * Encrypting using pbkdf2 options:
   * ```ts
   * web3.eth.accounts.encrypt('0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',
   *'123',
   *{
   *	iv: 'bfb43120ae00e9de110f8325143a2709',
   *	salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',
   *	c: 262144,
   *	kdf: 'pbkdf2',
   *}).then(console.log)
   *
   * >
   * {
   *   version: 3,
   *   id: '77381417-0973-4e4b-b590-8eb3ace0fe2d',
   *   address: 'b8ce9ab6943e0eced004cde8e3bbed6568b2fa01',
   *   crypto: {
   *     ciphertext: '76512156a34105fa6473ad040c666ae7b917d14c06543accc0d2dc28e6073b12',
   *     cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },
   *     cipher: 'aes-128-ctr',
   *     kdf: 'pbkdf2',
   *     kdfparams: {
   *       dklen: 32,
   *       salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',
   *       c: 262144,
   *       prf: 'hmac-sha256'
   *     },
   *   mac: '46eb4884e82dc43b5aa415faba53cc653b7038e9d61cc32fd643cf8c396189b7'
   *   }
   * }
   *```
   */
  const encrypt = (privateKey, password, options) => __awaiter$E(void 0, void 0, void 0, function* () {
      var _a, _b, _c, _d, _e, _f, _g;
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
      // if given salt or iv is a string, convert it to a Uint8Array
      let salt;
      if (options === null || options === void 0 ? void 0 : options.salt) {
          salt = typeof options.salt === 'string' ? hexToBytes$1(options.salt) : options.salt;
      }
      else {
          salt = randomBytes(32);
      }
      if (!(isString(password) || isUint8Array(password))) {
          throw new InvalidPasswordError();
      }
      const uint8ArrayPassword = typeof password === 'string' ? hexToBytes$1(utf8ToHex(password)) : password;
      let initializationVector;
      if (options === null || options === void 0 ? void 0 : options.iv) {
          initializationVector = typeof options.iv === 'string' ? hexToBytes$1(options.iv) : options.iv;
          if (initializationVector.length !== 16) {
              throw new IVLengthError();
          }
      }
      else {
          initializationVector = randomBytes(16);
      }
      const kdf = (_a = options === null || options === void 0 ? void 0 : options.kdf) !== null && _a !== void 0 ? _a : 'scrypt';
      let derivedKey;
      let kdfparams;
      // derive key from key derivation function
      if (kdf === 'pbkdf2') {
          kdfparams = {
              dklen: (_b = options === null || options === void 0 ? void 0 : options.dklen) !== null && _b !== void 0 ? _b : 32,
              salt: bytesToHex$1(salt).replace('0x', ''),
              c: (_c = options === null || options === void 0 ? void 0 : options.c) !== null && _c !== void 0 ? _c : 262144,
              prf: 'hmac-sha256',
          };
          if (kdfparams.c < 1000) {
              // error when c < 1000, pbkdf2 is less secure with less iterations
              throw new PBKDF2IterationsError();
          }
          derivedKey = pbkdf2Sync(uint8ArrayPassword, salt, kdfparams.c, kdfparams.dklen, 'sha256');
      }
      else if (kdf === 'scrypt') {
          kdfparams = {
              n: (_d = options === null || options === void 0 ? void 0 : options.n) !== null && _d !== void 0 ? _d : 8192,
              r: (_e = options === null || options === void 0 ? void 0 : options.r) !== null && _e !== void 0 ? _e : 8,
              p: (_f = options === null || options === void 0 ? void 0 : options.p) !== null && _f !== void 0 ? _f : 1,
              dklen: (_g = options === null || options === void 0 ? void 0 : options.dklen) !== null && _g !== void 0 ? _g : 32,
              salt: bytesToHex$1(salt).replace('0x', ''),
          };
          derivedKey = scryptSync(uint8ArrayPassword, salt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);
      }
      else {
          throw new InvalidKdfError();
      }
      const cipher = yield encrypt$1(privateKeyUint8Array, derivedKey.slice(0, 16), initializationVector, 'aes-128-ctr');
      const ciphertext = bytesToHex$1(cipher).slice(2);
      const mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), cipher)).replace('0x', '');
      return {
          version: 3,
          id: uuidV4(),
          address: privateKeyToAddress(privateKeyUint8Array).toLowerCase().replace('0x', ''),
          crypto: {
              ciphertext,
              cipherparams: {
                  iv: bytesToHex$1(initializationVector).replace('0x', ''),
              },
              cipher: 'aes-128-ctr',
              kdf,
              kdfparams,
              mac,
          },
      };
  });
  /**
   * Get an Account object from the privateKey
   *
   * @param privateKey - String or Uint8Array of 32 bytes
   * @param ignoreLength - if true, will not error check length
   * @returns A Web3Account object
   *
   * :::info
   * The `Web3Account.signTransaction` is not stateful if directly imported from accounts package and used. Network access is required to get the account `nonce` and `chainId` to sign the transaction, so use {@link Web3.eth.accounts.signTransaction} for signing transactions.
   * ::::
   *
   * ```ts
   * web3.eth.accounts.privateKeyToAccount("0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709");
   *
   * >    {
   * 			address: '0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01',
   * 			privateKey: '0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',
   * 			sign,
   * 			signTransaction,
   * 			encrypt,
   * 	}
   * ```
   */
  const privateKeyToAccount = (privateKey, ignoreLength) => {
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey, ignoreLength);
      return {
          address: privateKeyToAddress(privateKeyUint8Array),
          privateKey: bytesToHex$1(privateKeyUint8Array),
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          signTransaction: (_tx) => {
              throw new TransactionSigningError('Do not have network access to sign the transaction');
          },
          sign: (data) => sign$4(typeof data === 'string' ? data : JSON.stringify(data), privateKeyUint8Array),
          encrypt: (password, options) => __awaiter$E(void 0, void 0, void 0, function* () { return encrypt(privateKeyUint8Array, password, options); }),
      };
  };
  /**
   *
   * Generates and returns a Web3Account object that includes the private and public key
   * For creation of private key, it uses an audited package ethereum-cryptography/secp256k1
   * that is cryptographically secure random number with certain characteristics.
   * Read more: https://www.npmjs.com/package/ethereum-cryptography#secp256k1-curve
   *
   * @returns A Web3Account object
   * ```ts
   * web3.eth.accounts.create();
   * {
   * address: '0xbD504f977021b5E5DdccD8741A368b147B3B38bB',
   * privateKey: '0x964ced1c69ad27a311c432fdc0d8211e987595f7eb34ab405a5f16bdc9563ec5',
   * signTransaction: [Function: signTransaction],
   * sign: [Function: sign],
   * encrypt: [AsyncFunction: encrypt]
   * }
   * ```
   */
  const create = () => {
      const privateKey = secp256k1.utils.randomPrivateKey();
      return privateKeyToAccount(`${bytesToHex$1(privateKey)}`);
  };
  /**
   * Decrypts a v3 keystore JSON, and creates the account.
   *
   * @param keystore - the encrypted Keystore object or string to decrypt
   * @param password - The password that was used for encryption
   * @param nonStrict - if true and given a json string, the keystore will be parsed as lowercase.
   * @returns Returns the decrypted Web3Account object
   * Decrypting scrypt
   *
   * ```ts
   * web3.eth.accounts.decrypt({
   *   version: 3,
   *   id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',
   *   address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',
   *   crypto: {
   *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',
   *      cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },
   *      cipher: 'aes-128-ctr',
   *      kdf: 'scrypt',
   *      kdfparams: {
   *        n: 8192,
   *        r: 8,
   *        p: 1,
   *        dklen: 32,
   *        salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'
   *      },
   *      mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'
   *    }
   *   }, '123').then(console.log);
   *
   *
   * > {
   * address: '0xcdA9A91875fc35c8Ac1320E098e584495d66e47c',
   * privateKey: '67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',
   * signTransaction: [Function: signTransaction],
   * sign: [Function: sign],
   * encrypt: [AsyncFunction: encrypt]
   * }
   * ```
   */
  const decrypt = (keystore, password, nonStrict) => __awaiter$E(void 0, void 0, void 0, function* () {
      const json = typeof keystore === 'object'
          ? keystore
          : JSON.parse(nonStrict ? keystore.toLowerCase() : keystore);
      validator.validateJSONSchema(keyStoreSchema, json);
      if (json.version !== 3)
          throw new KeyStoreVersionError();
      const uint8ArrayPassword = typeof password === 'string' ? hexToBytes$1(utf8ToHex(password)) : password;
      validator.validate(['bytes'], [uint8ArrayPassword]);
      let derivedKey;
      if (json.crypto.kdf === 'scrypt') {
          const kdfparams = json.crypto.kdfparams;
          const uint8ArraySalt = typeof kdfparams.salt === 'string' ? hexToBytes$1(kdfparams.salt) : kdfparams.salt;
          derivedKey = scryptSync(uint8ArrayPassword, uint8ArraySalt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);
      }
      else if (json.crypto.kdf === 'pbkdf2') {
          const kdfparams = json.crypto.kdfparams;
          const uint8ArraySalt = typeof kdfparams.salt === 'string' ? hexToBytes$1(kdfparams.salt) : kdfparams.salt;
          derivedKey = pbkdf2Sync(uint8ArrayPassword, uint8ArraySalt, kdfparams.c, kdfparams.dklen, 'sha256');
      }
      else {
          throw new InvalidKdfError();
      }
      const ciphertext = hexToBytes$1(json.crypto.ciphertext);
      const mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), ciphertext)).replace('0x', '');
      if (mac !== json.crypto.mac) {
          throw new KeyDerivationError();
      }
      const seed = yield decrypt$1(hexToBytes$1(json.crypto.ciphertext), derivedKey.slice(0, 16), hexToBytes$1(json.crypto.cipherparams.iv));
      return privateKeyToAccount(seed);
  });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$D = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const DEFAULT_BATCH_REQUEST_TIMEOUT$1 = 1000;
  let Web3BatchRequest$1 = class Web3BatchRequest {
      constructor(requestManager) {
          this._requestManager = requestManager;
          this._requests = new Map();
      }
      get requests() {
          return [...this._requests.values()].map(r => r.payload);
      }
      add(request) {
          const payload = toPayload(request);
          const promise = new Web3DeferredPromise();
          this._requests.set(payload.id, { payload, promise });
          return promise;
      }
      // eslint-disable-next-line class-methods-use-this
      execute(options) {
          return __awaiter$D(this, void 0, void 0, function* () {
              var _a;
              if (this.requests.length === 0) {
                  return Promise.resolve([]);
              }
              const request = new Web3DeferredPromise({
                  timeout: (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : DEFAULT_BATCH_REQUEST_TIMEOUT$1,
                  eagerStart: true,
                  timeoutMessage: 'Batch request timeout',
              });
              this._processBatchRequest(request).catch(err => request.reject(err));
              request.catch((err) => {
                  if (err instanceof OperationTimeoutError) {
                      this._abortAllRequests('Batch request timeout');
                  }
                  request.reject(err);
              });
              return request;
          });
      }
      _processBatchRequest(promise) {
          return __awaiter$D(this, void 0, void 0, function* () {
              var _a, _b;
              const response = yield this._requestManager.sendBatch([...this._requests.values()].map(r => r.payload));
              if (response.length !== this._requests.size) {
                  this._abortAllRequests('Invalid batch response');
                  throw new ResponseError(response, `Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`);
              }
              const requestIds = this.requests
                  .map(r => r.id)
                  .map(Number)
                  .sort((a, b) => a - b);
              const responseIds = response
                  .map(r => r.id)
                  .map(Number)
                  .sort((a, b) => a - b);
              if (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {
                  this._abortAllRequests('Invalid batch response');
                  throw new ResponseError(response, `Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`);
              }
              for (const res of response) {
                  if (isResponseWithResult(res)) {
                      (_a = this._requests.get(res.id)) === null || _a === void 0 ? void 0 : _a.promise.resolve(res.result);
                  }
                  else if (isResponseWithError(res)) {
                      (_b = this._requests.get(res.id)) === null || _b === void 0 ? void 0 : _b.promise.reject(res.error);
                  }
              }
              promise.resolve(response);
          });
      }
      _abortAllRequests(msg) {
          for (const { promise } of this._requests.values()) {
              promise.reject(new OperationAbortError(msg));
          }
      }
  };

  var __awaiter$C = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  let Web3Context$1 = class Web3Context extends Web3Config$1 {
      constructor(providerOrContext) {
          var _a;
          super();
          this.providers = Web3RequestManager$1.providers;
          // If "providerOrContext" is provided as "string" or an objects matching "SupportedProviders" interface
          if (isNullish(providerOrContext) ||
              (typeof providerOrContext === 'string' && providerOrContext.trim() !== '') ||
              isSupportedProvider$1(providerOrContext)) {
              this._requestManager = new Web3RequestManager$1(providerOrContext);
              this._subscriptionManager = new Web3SubscriptionManager$1(this._requestManager, {});
              return;
          }
          const { config, provider, requestManager, subscriptionManager, registeredSubscriptions, accountProvider, wallet, requestManagerMiddleware, } = providerOrContext;
          this.setConfig(config !== null && config !== void 0 ? config : {});
          this._requestManager =
              requestManager !== null && requestManager !== void 0 ? requestManager : new Web3RequestManager$1(provider, (_a = config === null || config === void 0 ? void 0 : config.enableExperimentalFeatures) === null || _a === void 0 ? void 0 : _a.useSubscriptionWhenCheckingBlockTimeout, requestManagerMiddleware);
          if (subscriptionManager) {
              this._subscriptionManager = subscriptionManager;
          }
          else {
              this._subscriptionManager = new Web3SubscriptionManager$1(this.requestManager, registeredSubscriptions !== null && registeredSubscriptions !== void 0 ? registeredSubscriptions : {});
          }
          if (accountProvider) {
              this._accountProvider = accountProvider;
          }
          if (wallet) {
              this._wallet = wallet;
          }
      }
      get requestManager() {
          return this._requestManager;
      }
      /**
       * Will return the current subscriptionManager ({@link Web3SubscriptionManager})
       */
      get subscriptionManager() {
          return this._subscriptionManager;
      }
      get wallet() {
          return this._wallet;
      }
      get accountProvider() {
          return this._accountProvider;
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static fromContextObject(...args) {
          return new this(...args.reverse());
      }
      getContextObject() {
          var _a;
          return {
              config: this.config,
              provider: this.provider,
              requestManager: this.requestManager,
              subscriptionManager: this.subscriptionManager,
              registeredSubscriptions: (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.registeredSubscriptions,
              providers: this.providers,
              wallet: this.wallet,
              accountProvider: this.accountProvider,
          };
      }
      /**
       * Use to create new object of any type extended by `Web3Context`
       * and link it to current context. This can be used to initiate a global context object
       * and then use it to create new objects of any type extended by `Web3Context`.
       */
      use(ContextRef, ...args) {
          const newContextChild = new ContextRef(...[...args, this.getContextObject()]);
          this.on(Web3ConfigEvent$1.CONFIG_CHANGE, event => {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
              newContextChild.setConfig({ [event.name]: event.newValue });
          });
          // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
          this[ContextRef.name] = newContextChild;
          return newContextChild;
      }
      /**
       * Link current context to another context.
       */
      link(parentContext) {
          this.setConfig(parentContext.config);
          this._requestManager = parentContext.requestManager;
          this.provider = parentContext.provider;
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          this._subscriptionManager = parentContext.subscriptionManager;
          this._wallet = parentContext.wallet;
          this._accountProvider = parentContext._accountProvider;
          parentContext.on(Web3ConfigEvent$1.CONFIG_CHANGE, event => {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
              this.setConfig({ [event.name]: event.newValue });
          });
      }
      // eslint-disable-next-line no-use-before-define
      registerPlugin(plugin) {
          // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
          if (this[plugin.pluginNamespace] !== undefined)
              throw new ExistingPluginNamespaceError(plugin.pluginNamespace);
          const _pluginObject = {
              [plugin.pluginNamespace]: plugin,
          };
          _pluginObject[plugin.pluginNamespace].link(this);
          Object.assign(this, _pluginObject);
      }
      /**
       * Will return the current provider.
       *
       * @returns Returns the current provider
       * @example
       * ```ts
       * const web3 = new Web3Context("http://localhost:8545");
       * console.log(web3.provider);
       * > HttpProvider {
       * 	clientUrl: 'http://localhost:8545',
       * 	httpProviderOptions: undefined
       *  }
       * ```
       */
      get provider() {
          return this.currentProvider;
      }
      /**
       * Will set the current provider.
       *
       * @param provider - The provider to set
       *
       * Accepted providers are of type {@link SupportedProviders}
       * @example
       * ```ts
       *  const web3Context = new web3ContextContext("http://localhost:8545");
       * web3Context.provider = "ws://localhost:8545";
       * console.log(web3Context.provider);
       * > WebSocketProvider {
       * _eventEmitter: EventEmitter {
       * _events: [Object: null prototype] {},
       * _eventsCount: 0,
       * ...
       * }
       * ```
       */
      set provider(provider) {
          this.requestManager.setProvider(provider);
      }
      /**
       * Will return the current provider. (The same as `provider`)
       *
       * @returns Returns the current provider
       * @example
       * ```ts
       * const web3Context = new Web3Context("http://localhost:8545");
       * console.log(web3Context.provider);
       * > HttpProvider {
       * 	clientUrl: 'http://localhost:8545',
       * 	httpProviderOptions: undefined
       *  }
       * ```
       */
      get currentProvider() {
          return this.requestManager.provider;
      }
      /**
       * Will set the current provider. (The same as `provider`)
       *
       * @param provider - {@link SupportedProviders} The provider to set
       *
       * @example
       * ```ts
       *  const web3Context = new Web3Context("http://localhost:8545");
       * web3Context.currentProvider = "ws://localhost:8545";
       * console.log(web3Context.provider);
       * > WebSocketProvider {
       * _eventEmitter: EventEmitter {
       * _events: [Object: null prototype] {},
       * _eventsCount: 0,
       * ...
       * }
       * ```
       */
      set currentProvider(provider) {
          this.requestManager.setProvider(provider);
      }
      /**
       * Will return the givenProvider if available.
       *
       * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.
       */
      // eslint-disable-next-line class-methods-use-this
      get givenProvider() {
          return Web3Context.givenProvider;
      }
      /**
       * Will set the provider.
       *
       * @param provider - {@link SupportedProviders} The provider to set
       * @returns Returns true if the provider was set
       */
      setProvider(provider) {
          this.provider = provider;
          return true;
      }
      setRequestManagerMiddleware(requestManagerMiddleware) {
          this.requestManager.setMiddleware(requestManagerMiddleware);
      }
      /**
       * Will return the {@link Web3BatchRequest} constructor.
       */
      get BatchRequest() {
          return Web3BatchRequest$1.bind(undefined, this._requestManager);
      }
      /**
       * This method allows extending the web3 modules.
       * Note: This method is only for backward compatibility, and It is recommended to use Web3 v4 Plugin feature for extending web3.js functionality if you are developing something new.
       */
      extend(extendObj) {
          var _a;
          // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
          if (extendObj.property && !this[extendObj.property])
              // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
              this[extendObj.property] = {};
          (_a = extendObj.methods) === null || _a === void 0 ? void 0 : _a.forEach(element => {
              const method = (...givenParams) => __awaiter$C(this, void 0, void 0, function* () {
                  return this.requestManager.send({
                      method: element.call,
                      params: givenParams,
                  });
              });
              if (extendObj.property)
                  // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  this[extendObj.property][element.name] = method;
              // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
              else
                  this[element.name] = method;
          });
          return this;
      }
  };
  Web3Context$1.providers = Web3RequestManager$1.providers;

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * Converts Ethereum addresses to IBAN or BBAN addresses and vice versa.
   */
  class Iban {
      /**
       * Construct a direct or indirect IBAN that has conversion methods and validity checks.
       * If the provided string was not of either the length of a direct IBAN (34 or 35),
       * nor the length of an indirect IBAN (20), an Error will be thrown ('Invalid IBAN was provided').
       *
       * @param iban - a Direct or an Indirect IBAN
       * @returns - Iban instance
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
       * > Iban { _iban: 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS' }
       * ```
       */
      constructor(iban) {
          /**
           * This method should be used to create the equivalent ethereum address for the early provided Direct IBAN address.
           * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:
           * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').
           * Note: this is also available as a static method.
           *
           * @return the equivalent ethereum address
           *
           * @example
           * ```ts
           * const iban = new web3.eth.Iban("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
           * iban.toAddress();
           * > "0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8"
           * ```
           */
          this.toAddress = () => {
              if (this.isDirect()) {
                  // check if Iban can be converted to an address
                  const base36 = this._iban.slice(4);
                  const parsedBigInt = Iban._parseInt(base36, 36); // convert the base36 string to a bigint
                  const paddedBigInt = leftPad(parsedBigInt, 40);
                  return toChecksumAddress(paddedBigInt);
              }
              throw new Error('Iban is indirect and cannot be converted. Must be length of 34 or 35');
          };
          if (Iban.isIndirect(iban) || Iban.isDirect(iban)) {
              this._iban = iban;
          }
          else {
              throw new Error('Invalid IBAN was provided');
          }
      }
      /**
       * A static method that checks if an IBAN is Direct.
       * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.
       * Note: this is also available as a method at an Iban instance.
       * @param iban - an IBAN to be checked
       * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.
       *
       * @example
       * ```ts
       * web3.eth.Iban.isDirect("XE81ETHXREGGAVOFYORK");
       * > false
       * ```
       */
      static isDirect(iban) {
          return iban.length === 34 || iban.length === 35;
      }
      /**
       * An instance method that checks if iban number is Direct.
       * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.
       * Note: this is also available as a static method.
       * @param iban - an IBAN to be checked
       * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.isDirect();
       * > false
       * ```
       */
      isDirect() {
          return Iban.isDirect(this._iban);
      }
      /**
       * A static method that checks if an IBAN is Indirect.
       * It actually check the length of the provided variable and, only if it is 20, it returns true.
       * Note: this is also available as a method at an Iban instance.
       * @param iban - an IBAN to be checked
       * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.
       *
       * @example
       * ```ts
       * web3.eth.Iban.isIndirect("XE81ETHXREGGAVOFYORK");
       * > true
       * ```
       */
      static isIndirect(iban) {
          return iban.length === 20;
      }
      /**
       * check if iban number if indirect
       * It actually check the length of the provided variable and, only if it is 20, it returns true.
       * Note: this is also available as a static method.
       * @param iban - an IBAN to be checked
       * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.isIndirect();
       * > true
       * ```
       */
      isIndirect() {
          return Iban.isIndirect(this._iban);
      }
      /**
       * This method could be used to check if a given string is valid IBAN object.
       * Note: this is also available as a method at an Iban instance.
       *
       * @param iban - a string to be checked if it is in IBAN
       * @returns - true if it is valid IBAN
       *
       * @example
       * ```ts
       * web3.eth.Iban.isValid("XE81ETHXREGGAVOFYORK");
       * > true
       *
       * web3.eth.Iban.isValid("XE82ETHXREGGAVOFYORK");
       * > false // because the checksum is incorrect
       * ```
       */
      static isValid(iban) {
          return (/^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(iban) &&
              Iban._mod9710(Iban._iso13616Prepare(iban)) === 1);
      }
      /**
       * Should be called to check if the early provided IBAN is correct.
       * Note: this is also available as a static method.
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.isValid();
       * > true
       *
       * const iban = new web3.eth.Iban("XE82ETHXREGGAVOFYORK");
       * iban.isValid();
       * > false // because the checksum is incorrect
       * ```
       */
      isValid() {
          return Iban.isValid(this._iban);
      }
      /**
       * Convert the passed BBAN to an IBAN for this country specification.
       * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
       * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
       *
       * @param bban - the BBAN to convert to IBAN
       * @returns an Iban class instance that holds the equivalent IBAN
       *
       * @example
       * ```ts
       * web3.eth.Iban.fromBban('ETHXREGGAVOFYORK');
       * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
       * ```
       */
      static fromBban(bban) {
          const countryCode = 'XE';
          const remainder = this._mod9710(this._iso13616Prepare(`${countryCode}00${bban}`));
          const checkDigit = `0${(98 - remainder).toString()}`.slice(-2);
          return new Iban(`${countryCode}${checkDigit}${bban}`);
      }
      /**
       * Should be used to create IBAN object for given institution and identifier
       *
       * @param options - an object holds the `institution` and the `identifier` which will be composed to create an `Iban` object from.
       * @returns an Iban class instance that holds the equivalent IBAN
       *
       * @example
       * ```ts
       * web3.eth.Iban.createIndirect({
       *     institution: "XREG",
       *     identifier: "GAVOFYORK"
       * });
       * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
       * ```
       */
      static createIndirect(options) {
          return Iban.fromBban(`ETH${options.institution}${options.identifier}`);
      }
      /**
       * This method should be used to create iban object from an Ethereum address.
       *
       * @param address - an Ethereum address
       * @returns an Iban class instance that holds the equivalent IBAN
       *
       * @example
       * ```ts
       * web3.eth.Iban.fromAddress("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");
       * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
       * ```
       */
      static fromAddress(address) {
          if (!isAddress$1(address)) {
              throw new InvalidAddressError(address);
          }
          const num = BigInt(hexToNumber$1(address));
          const base36 = num.toString(36);
          const padded = leftPad(base36, 15);
          return Iban.fromBban(padded.toUpperCase());
      }
      /**
       * This method should be used to create IBAN address from an Ethereum address
       *
       * @param address - an Ethereum address
       * @return the equivalent IBAN address
       *
       * @example
       * ```ts
       * web3.eth.Iban.toIban("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");
       * > "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"
       * ```
       */
      static toIban(address) {
          return Iban.fromAddress(address).toString();
      }
      /**
       * Should be called to get client identifier within institution
       *
       * @return the client of the IBAN instance.
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.client();
       * > 'GAVOFYORK'
       * ```
       */
      client() {
          return this.isIndirect() ? this._iban.slice(11) : '';
      }
      /**
       * Returns the IBAN checksum of the early provided IBAN
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.checksum();
       * > "81"
       * ```
       *
       */
      checksum() {
          return this._iban.slice(2, 4);
      }
      /**
       * Returns institution identifier from the early provided  IBAN
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.institution();
       * > 'XREG'
       * ```
       */
      institution() {
          return this.isIndirect() ? this._iban.slice(7, 11) : '';
      }
      /**
       * Simply returns the early provided IBAN
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban('XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS');
       * iban.toString();
       * > 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'
       * ```
       */
      toString() {
          return this._iban;
      }
  }
  /**
   * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
   * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
   */
  Iban._iso13616Prepare = (iban) => {
      const A = 'A'.charCodeAt(0);
      const Z = 'Z'.charCodeAt(0);
      const upperIban = iban.toUpperCase();
      const modifiedIban = `${upperIban.slice(4)}${upperIban.slice(0, 4)}`;
      return modifiedIban
          .split('')
          .map(n => {
          const code = n.charCodeAt(0);
          if (code >= A && code <= Z) {
              // A = 10, B = 11, ... Z = 35
              return code - A + 10;
          }
          return n;
      })
          .join('');
  };
  /**
   * return the bigint of the given string with the specified base
   */
  Iban._parseInt = (str, base) => [...str].reduce((acc, curr) => BigInt(parseInt(curr, base)) + BigInt(base) * acc, BigInt(0));
  /**
   * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
   */
  Iban._mod9710 = (iban) => {
      let remainder = iban;
      let block;
      while (remainder.length > 2) {
          block = remainder.slice(0, 9);
          remainder = `${(parseInt(block, 10) % 97).toString()}${remainder.slice(block.length)}`;
      }
      return parseInt(remainder, 10) % 97;
  };
  /**
   * This method should be used to create an ethereum address from a Direct IBAN address.
   * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:
   * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').
   * Note: this is also available as a method at an Iban instance.
   *
   * @param iban - a Direct IBAN address
   * @return the equivalent ethereum address
   *
   * @example
   * ```ts
   * web3.eth.Iban.toAddress("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
   * > "0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8"
   * ```
   */
  Iban.toAddress = (iban) => {
      const ibanObject = new Iban(iban);
      return ibanObject.toAddress();
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };

  var setImmediate$1 = {};

  var hasRequiredSetImmediate;

  function requireSetImmediate () {
  	if (hasRequiredSetImmediate) return setImmediate$1;
  	hasRequiredSetImmediate = 1;
  	(function (global, undefined$1) {

  	    if (global.setImmediate) {
  	        return;
  	    }

  	    var nextHandle = 1; // Spec says greater than zero
  	    var tasksByHandle = {};
  	    var currentlyRunningATask = false;
  	    var doc = global.document;
  	    var registerImmediate;

  	    function setImmediate(callback) {
  	      // Callback can either be a function or a string
  	      if (typeof callback !== "function") {
  	        callback = new Function("" + callback);
  	      }
  	      // Copy function arguments
  	      var args = new Array(arguments.length - 1);
  	      for (var i = 0; i < args.length; i++) {
  	          args[i] = arguments[i + 1];
  	      }
  	      // Store and register the task
  	      var task = { callback: callback, args: args };
  	      tasksByHandle[nextHandle] = task;
  	      registerImmediate(nextHandle);
  	      return nextHandle++;
  	    }

  	    function clearImmediate(handle) {
  	        delete tasksByHandle[handle];
  	    }

  	    function run(task) {
  	        var callback = task.callback;
  	        var args = task.args;
  	        switch (args.length) {
  	        case 0:
  	            callback();
  	            break;
  	        case 1:
  	            callback(args[0]);
  	            break;
  	        case 2:
  	            callback(args[0], args[1]);
  	            break;
  	        case 3:
  	            callback(args[0], args[1], args[2]);
  	            break;
  	        default:
  	            callback.apply(undefined$1, args);
  	            break;
  	        }
  	    }

  	    function runIfPresent(handle) {
  	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
  	        // So if we're currently running a task, we'll need to delay this invocation.
  	        if (currentlyRunningATask) {
  	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
  	            // "too much recursion" error.
  	            setTimeout(runIfPresent, 0, handle);
  	        } else {
  	            var task = tasksByHandle[handle];
  	            if (task) {
  	                currentlyRunningATask = true;
  	                try {
  	                    run(task);
  	                } finally {
  	                    clearImmediate(handle);
  	                    currentlyRunningATask = false;
  	                }
  	            }
  	        }
  	    }

  	    function installNextTickImplementation() {
  	        registerImmediate = function(handle) {
  	            process.nextTick(function () { runIfPresent(handle); });
  	        };
  	    }

  	    function canUsePostMessage() {
  	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
  	        // where `global.postMessage` means something completely different and can't be used for this purpose.
  	        if (global.postMessage && !global.importScripts) {
  	            var postMessageIsAsynchronous = true;
  	            var oldOnMessage = global.onmessage;
  	            global.onmessage = function() {
  	                postMessageIsAsynchronous = false;
  	            };
  	            global.postMessage("", "*");
  	            global.onmessage = oldOnMessage;
  	            return postMessageIsAsynchronous;
  	        }
  	    }

  	    function installPostMessageImplementation() {
  	        // Installs an event handler on `global` for the `message` event: see
  	        // * https://developer.mozilla.org/en/DOM/window.postMessage
  	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

  	        var messagePrefix = "setImmediate$" + Math.random() + "$";
  	        var onGlobalMessage = function(event) {
  	            if (event.source === global &&
  	                typeof event.data === "string" &&
  	                event.data.indexOf(messagePrefix) === 0) {
  	                runIfPresent(+event.data.slice(messagePrefix.length));
  	            }
  	        };

  	        if (global.addEventListener) {
  	            global.addEventListener("message", onGlobalMessage, false);
  	        } else {
  	            global.attachEvent("onmessage", onGlobalMessage);
  	        }

  	        registerImmediate = function(handle) {
  	            global.postMessage(messagePrefix + handle, "*");
  	        };
  	    }

  	    function installMessageChannelImplementation() {
  	        var channel = new MessageChannel();
  	        channel.port1.onmessage = function(event) {
  	            var handle = event.data;
  	            runIfPresent(handle);
  	        };

  	        registerImmediate = function(handle) {
  	            channel.port2.postMessage(handle);
  	        };
  	    }

  	    function installReadyStateChangeImplementation() {
  	        var html = doc.documentElement;
  	        registerImmediate = function(handle) {
  	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
  	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
  	            var script = doc.createElement("script");
  	            script.onreadystatechange = function () {
  	                runIfPresent(handle);
  	                script.onreadystatechange = null;
  	                html.removeChild(script);
  	                script = null;
  	            };
  	            html.appendChild(script);
  	        };
  	    }

  	    function installSetTimeoutImplementation() {
  	        registerImmediate = function(handle) {
  	            setTimeout(runIfPresent, 0, handle);
  	        };
  	    }

  	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
  	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

  	    // Don't get fooled by e.g. browserify environments.
  	    if ({}.toString.call(global.process) === "[object process]") {
  	        // For Node.js before 0.9
  	        installNextTickImplementation();

  	    } else if (canUsePostMessage()) {
  	        // For non-IE10 modern browsers
  	        installPostMessageImplementation();

  	    } else if (global.MessageChannel) {
  	        // For web workers, where supported
  	        installMessageChannelImplementation();

  	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
  	        // For IE 6–8
  	        installReadyStateChangeImplementation();

  	    } else {
  	        // For older browsers
  	        installSetTimeoutImplementation();
  	    }

  	    attachTo.setImmediate = setImmediate;
  	    attachTo.clearImmediate = clearImmediate;
  	}(typeof self === "undefined" ? typeof commonjsGlobal === "undefined" ? setImmediate$1 : commonjsGlobal : self));
  	return setImmediate$1;
  }

  requireSetImmediate();

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  class Web3EventEmitter {
      constructor() {
          this._emitter = new EventEmitter();
      }
      on(eventName, fn) {
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          this._emitter.on(eventName, fn);
      }
      once(eventName, fn) {
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          this._emitter.once(eventName, fn);
      }
      off(eventName, fn) {
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          this._emitter.off(eventName, fn);
      }
      emit(eventName, params) {
          this._emitter.emit(eventName, params);
      }
      listenerCount(eventName) {
          return this._emitter.listenerCount(eventName);
      }
      listeners(eventName) {
          return this._emitter.listeners(eventName);
      }
      eventNames() {
          return this._emitter.eventNames();
      }
      removeAllListeners() {
          return this._emitter.removeAllListeners();
      }
      setMaxListenerWarningThreshold(maxListenersWarningThreshold) {
          this._emitter.setMaxListeners(maxListenersWarningThreshold);
      }
      getMaxListeners() {
          return this._emitter.getMaxListeners();
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var Web3ConfigEvent;
  (function (Web3ConfigEvent) {
      Web3ConfigEvent["CONFIG_CHANGE"] = "CONFIG_CHANGE";
  })(Web3ConfigEvent || (Web3ConfigEvent = {}));
  class Web3Config extends Web3EventEmitter {
      constructor(options) {
          super();
          this.config = {
              handleRevert: false,
              defaultAccount: undefined,
              defaultBlock: 'latest',
              transactionBlockTimeout: 50,
              transactionConfirmationBlocks: 24,
              transactionPollingInterval: 1000,
              transactionPollingTimeout: 750 * 1000,
              transactionReceiptPollingInterval: undefined,
              transactionSendTimeout: 750 * 1000,
              transactionConfirmationPollingInterval: undefined,
              blockHeaderTimeout: 10,
              maxListenersWarningThreshold: 100,
              contractDataInputFill: 'data',
              defaultNetworkId: undefined,
              defaultChain: 'mainnet',
              defaultHardfork: 'london',
              // TODO - Check if there is a default Common
              defaultCommon: undefined,
              defaultTransactionType: '0x2',
              defaultMaxPriorityFeePerGas: toHex(2500000000),
              enableExperimentalFeatures: {
                  useSubscriptionWhenCheckingBlockTimeout: false,
                  useRpcCallSpecification: false,
              },
              transactionBuilder: undefined,
              transactionTypeParser: undefined,
              customTransactionSchema: undefined,
              defaultReturnFormat: DEFAULT_RETURN_FORMAT,
              ignoreGasPricing: false,
          };
          this.setConfig(options !== null && options !== void 0 ? options : {});
      }
      setConfig(options) {
          // TODO: Improve and add key check
          const keys = Object.keys(options);
          for (const key of keys) {
              this._triggerConfigChange(key, options[key]);
              if (!isNullish(options[key]) &&
                  typeof options[key] === 'number' &&
                  key === 'maxListenersWarningThreshold') {
                  // additionally set in event emitter
                  this.setMaxListenerWarningThreshold(Number(options[key]));
              }
          }
          Object.assign(this.config, options);
      }
      /**
       * The `handleRevert` options property returns the revert reason string if enabled for the following methods:
       * - web3.eth.sendTransaction()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       * - myContract.methods.myMethod().send()
       * Default is `false`.
       *
       * `Note`: At the moment `handleRevert` is only supported for `sendTransaction` and not for `sendSignedTransaction`
       */
      get handleRevert() {
          return this.config.handleRevert;
      }
      /**
       * Will set the handleRevert
       */
      set handleRevert(val) {
          this._triggerConfigChange('handleRevert', val);
          this.config.handleRevert = val;
      }
      /**
       * The `contractDataInputFill` options property will allow you to set the hash of the method signature and encoded parameters to the property
       * either `data`, `input` or both within your contract.
       * This will affect the contracts send, call and estimateGas methods
       * Default is `data`.
       */
      get contractDataInputFill() {
          return this.config.contractDataInputFill;
      }
      /**
       * Will set the contractDataInputFill
       */
      set contractDataInputFill(val) {
          this._triggerConfigChange('contractDataInputFill', val);
          this.config.contractDataInputFill = val;
      }
      /**
       * This default address is used as the default `from` property, if no `from` property is specified in for the following methods:
       * - web3.eth.sendTransaction()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       * - myContract.methods.myMethod().send()
       */
      get defaultAccount() {
          return this.config.defaultAccount;
      }
      /**
       * Will set the default account.
       */
      set defaultAccount(val) {
          this._triggerConfigChange('defaultAccount', val);
          this.config.defaultAccount = val;
      }
      /**
       * The default block is used for certain methods. You can override it by passing in the defaultBlock as last parameter. The default value is `"latest"`.
       * - web3.eth.getBalance()
       * - web3.eth.getCode()
       * - web3.eth.getTransactionCount()
       * - web3.eth.getStorageAt()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       */
      get defaultBlock() {
          return this.config.defaultBlock;
      }
      /**
       * Will set the default block.
       *
       * - A block number
       * - `"earliest"` - String: The genesis block
       * - `"latest"` - String: The latest block (current head of the blockchain)
       * - `"pending"` - String: The currently mined block (including pending transactions)
       * - `"finalized"` - String: (For POS networks) The finalized block is one which has been accepted as canonical by greater than 2/3 of validators
       * - `"safe"` - String: (For POS networks) The safe head block is one which under normal network conditions, is expected to be included in the canonical chain. Under normal network conditions the safe head and the actual tip of the chain will be equivalent (with safe head trailing only by a few seconds). Safe heads will be less likely to be reorged than the proof of work network's latest blocks.
       */
      set defaultBlock(val) {
          this._triggerConfigChange('defaultBlock', val);
          this.config.defaultBlock = val;
      }
      /**
       * The time used to wait for Ethereum Node to return the sent transaction result.
       * Note: If the RPC call stuck at the Node and therefor timed-out, the transaction may still be pending or even mined by the Network. We recommend checking the pending transactions in such a case.
       * Default is `750` seconds (12.5 minutes).
       */
      get transactionSendTimeout() {
          return this.config.transactionSendTimeout;
      }
      /**
       * Will set the transactionSendTimeout.
       */
      set transactionSendTimeout(val) {
          this._triggerConfigChange('transactionSendTimeout', val);
          this.config.transactionSendTimeout = val;
      }
      /**
       * The `transactionBlockTimeout` is used over socket-based connections. This option defines the amount of new blocks it should wait until the first confirmation happens, otherwise the PromiEvent rejects with a timeout error.
       * Default is `50`.
       */
      get transactionBlockTimeout() {
          return this.config.transactionBlockTimeout;
      }
      /**
       * Will set the transactionBlockTimeout.
       */
      set transactionBlockTimeout(val) {
          this._triggerConfigChange('transactionBlockTimeout', val);
          this.config.transactionBlockTimeout = val;
      }
      /**
       * This defines the number of blocks it requires until a transaction is considered confirmed.
       * Default is `24`.
       */
      get transactionConfirmationBlocks() {
          return this.config.transactionConfirmationBlocks;
      }
      /**
       * Will set the transactionConfirmationBlocks.
       */
      set transactionConfirmationBlocks(val) {
          this._triggerConfigChange('transactionConfirmationBlocks', val);
          this.config.transactionConfirmationBlocks = val;
      }
      /**
       * Used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
       * Default is `1000` ms.
       */
      get transactionPollingInterval() {
          return this.config.transactionPollingInterval;
      }
      /**
       * Will set the transactionPollingInterval.
       */
      set transactionPollingInterval(val) {
          this._triggerConfigChange('transactionPollingInterval', val);
          this.config.transactionPollingInterval = val;
          this.transactionReceiptPollingInterval = val;
          this.transactionConfirmationPollingInterval = val;
      }
      /**
       * Used over HTTP connections. This option defines the number of seconds Web3 will wait for a receipt which confirms that a transaction was mined by the network. Note: If this method times out, the transaction may still be pending.
       * Default is `750` seconds (12.5 minutes).
       */
      get transactionPollingTimeout() {
          return this.config.transactionPollingTimeout;
      }
      /**
       * Will set the transactionPollingTimeout.
       */
      set transactionPollingTimeout(val) {
          this._triggerConfigChange('transactionPollingTimeout', val);
          this.config.transactionPollingTimeout = val;
      }
      /**
       * The `transactionPollingInterval` is used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
       * Default is `undefined`
       */
      get transactionReceiptPollingInterval() {
          return this.config.transactionReceiptPollingInterval;
      }
      /**
       * Will set the transactionReceiptPollingInterval
       */
      set transactionReceiptPollingInterval(val) {
          this._triggerConfigChange('transactionReceiptPollingInterval', val);
          this.config.transactionReceiptPollingInterval = val;
      }
      get transactionConfirmationPollingInterval() {
          return this.config.transactionConfirmationPollingInterval;
      }
      set transactionConfirmationPollingInterval(val) {
          this._triggerConfigChange('transactionConfirmationPollingInterval', val);
          this.config.transactionConfirmationPollingInterval = val;
      }
      /**
       * The blockHeaderTimeout is used over socket-based connections. This option defines the amount seconds it should wait for `'newBlockHeaders'` event before falling back to polling to fetch transaction receipt.
       * Default is `10` seconds.
       */
      get blockHeaderTimeout() {
          return this.config.blockHeaderTimeout;
      }
      /**
       * Will set the blockHeaderTimeout
       */
      set blockHeaderTimeout(val) {
          this._triggerConfigChange('blockHeaderTimeout', val);
          this.config.blockHeaderTimeout = val;
      }
      /**
       * The enableExperimentalFeatures is used to enable trying new experimental features that are still not fully implemented or not fully tested or still have some related issues.
       * Default is `false` for every feature.
       */
      get enableExperimentalFeatures() {
          return this.config.enableExperimentalFeatures;
      }
      /**
       * Will set the enableExperimentalFeatures
       */
      set enableExperimentalFeatures(val) {
          this._triggerConfigChange('enableExperimentalFeatures', val);
          this.config.enableExperimentalFeatures = val;
      }
      get maxListenersWarningThreshold() {
          return this.config.maxListenersWarningThreshold;
      }
      set maxListenersWarningThreshold(val) {
          this._triggerConfigChange('maxListenersWarningThreshold', val);
          this.setMaxListenerWarningThreshold(val);
          this.config.maxListenersWarningThreshold = val;
      }
      get defaultReturnFormat() {
          return this.config.defaultReturnFormat;
      }
      set defaultReturnFormat(val) {
          this._triggerConfigChange('defaultReturnFormat', val);
          this.config.defaultReturnFormat = val;
      }
      get defaultNetworkId() {
          return this.config.defaultNetworkId;
      }
      set defaultNetworkId(val) {
          this._triggerConfigChange('defaultNetworkId', val);
          this.config.defaultNetworkId = val;
      }
      get defaultChain() {
          return this.config.defaultChain;
      }
      set defaultChain(val) {
          if (!isNullish(this.config.defaultCommon) &&
              !isNullish(this.config.defaultCommon.baseChain) &&
              val !== this.config.defaultCommon.baseChain)
              throw new ConfigChainMismatchError(this.config.defaultChain, val);
          this._triggerConfigChange('defaultChain', val);
          this.config.defaultChain = val;
      }
      /**
       * Will return the default hardfork. Default is `london`
       * The default hardfork property can be one of the following:
       * - `chainstart`
       * - `homestead`
       * - `dao`
       * - `tangerineWhistle`
       * - `spuriousDragon`
       * - `byzantium`
       * - `constantinople`
       * - `petersburg`
       * - `istanbul`
       * - `berlin`
       * - `london`
       * - 'arrowGlacier',
       * - 'tangerineWhistle',
       * - 'muirGlacier'
       *
       */
      get defaultHardfork() {
          return this.config.defaultHardfork;
      }
      /**
       * Will set the default hardfork.
       *
       */
      set defaultHardfork(val) {
          if (!isNullish(this.config.defaultCommon) &&
              !isNullish(this.config.defaultCommon.hardfork) &&
              val !== this.config.defaultCommon.hardfork)
              throw new ConfigHardforkMismatchError(this.config.defaultCommon.hardfork, val);
          this._triggerConfigChange('defaultHardfork', val);
          this.config.defaultHardfork = val;
      }
      /**
       *
       * Will get the default common property
       * The default common property does contain the following Common object:
       * - `customChain` - `Object`: The custom chain properties
       * 	- `name` - `string`: (optional) The name of the chain
       * 	- `networkId` - `number`: Network ID of the custom chain
       * 	- `chainId` - `number`: Chain ID of the custom chain
       * - `baseChain` - `string`: (optional) mainnet, goerli, kovan, rinkeby, or ropsten
       * - `hardfork` - `string`: (optional) chainstart, homestead, dao, tangerineWhistle, spuriousDragon, byzantium, constantinople, petersburg, istanbul, berlin, or london
       * Default is `undefined`.
       *
       */
      get defaultCommon() {
          return this.config.defaultCommon;
      }
      /**
       * Will set the default common property
       *
       */
      set defaultCommon(val) {
          // validation check if default hardfork is set and matches defaultCommon hardfork
          if (!isNullish(this.config.defaultHardfork) &&
              !isNullish(val) &&
              !isNullish(val.hardfork) &&
              this.config.defaultHardfork !== val.hardfork)
              throw new ConfigHardforkMismatchError(this.config.defaultHardfork, val.hardfork);
          if (!isNullish(this.config.defaultChain) &&
              !isNullish(val) &&
              !isNullish(val.baseChain) &&
              this.config.defaultChain !== val.baseChain)
              throw new ConfigChainMismatchError(this.config.defaultChain, val.baseChain);
          this._triggerConfigChange('defaultCommon', val);
          this.config.defaultCommon = val;
      }
      /**
       *  Will get the ignoreGasPricing property. When true, the gasPrice, maxPriorityFeePerGas, and maxFeePerGas will not be autofilled in the transaction object.
       *  Useful when you want wallets to handle gas pricing.
       */
      get ignoreGasPricing() {
          return this.config.ignoreGasPricing;
      }
      set ignoreGasPricing(val) {
          this._triggerConfigChange('ignoreGasPricing', val);
          this.config.ignoreGasPricing = val;
      }
      get defaultTransactionType() {
          return this.config.defaultTransactionType;
      }
      set defaultTransactionType(val) {
          this._triggerConfigChange('defaultTransactionType', val);
          this.config.defaultTransactionType = val;
      }
      get defaultMaxPriorityFeePerGas() {
          return this.config.defaultMaxPriorityFeePerGas;
      }
      set defaultMaxPriorityFeePerGas(val) {
          this._triggerConfigChange('defaultMaxPriorityFeePerGas', val);
          this.config.defaultMaxPriorityFeePerGas = val;
      }
      get transactionBuilder() {
          return this.config.transactionBuilder;
      }
      set transactionBuilder(val) {
          this._triggerConfigChange('transactionBuilder', val);
          this.config.transactionBuilder = val;
      }
      get transactionTypeParser() {
          return this.config.transactionTypeParser;
      }
      set transactionTypeParser(val) {
          this._triggerConfigChange('transactionTypeParser', val);
          this.config.transactionTypeParser = val;
      }
      get customTransactionSchema() {
          return this.config.customTransactionSchema;
      }
      set customTransactionSchema(schema) {
          this._triggerConfigChange('customTransactionSchema', schema);
          this.config.customTransactionSchema = schema;
      }
      _triggerConfigChange(config, newValue) {
          this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
              name: config,
              oldValue: this.config[config],
              newValue,
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isWeb3Provider = (provider) => Web3BaseProvider.isWeb3Provider(provider);
  const isLegacyRequestProvider = (provider) => typeof provider !== 'string' &&
      'request' in provider &&
      provider.request.constructor.name === 'Function';
  const isEIP1193Provider = (provider) => typeof provider !== 'string' &&
      'request' in provider &&
      provider.request.constructor.name === 'AsyncFunction';
  const isLegacySendProvider = (provider) => typeof provider !== 'string' && 'send' in provider;
  const isLegacySendAsyncProvider = (provider) => typeof provider !== 'string' && 'sendAsync' in provider;
  const isSupportedProvider = (provider) => provider &&
      (isWeb3Provider(provider) ||
          isEIP1193Provider(provider) ||
          isLegacyRequestProvider(provider) ||
          isLegacySendAsyncProvider(provider) ||
          isLegacySendProvider(provider));
  const isSupportSubscriptions = (provider) => {
      if (provider && 'supportsSubscriptions' in provider) {
          return provider.supportsSubscriptions();
      }
      if (provider && typeof provider !== 'string' && 'on' in provider) {
          return true;
      }
      return false;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$B = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var Web3RequestManagerEvent;
  (function (Web3RequestManagerEvent) {
      Web3RequestManagerEvent["PROVIDER_CHANGED"] = "PROVIDER_CHANGED";
      Web3RequestManagerEvent["BEFORE_PROVIDER_CHANGE"] = "BEFORE_PROVIDER_CHANGE";
  })(Web3RequestManagerEvent || (Web3RequestManagerEvent = {}));
  const availableProviders = {
      HttpProvider: HttpProvider,
      WebsocketProvider: WebSocketProvider,
  };
  class Web3RequestManager extends Web3EventEmitter {
      constructor(provider, useRpcCallSpecification, requestManagerMiddleware) {
          super();
          if (!isNullish(provider)) {
              this.setProvider(provider);
          }
          this.useRpcCallSpecification = useRpcCallSpecification;
          if (!isNullish(requestManagerMiddleware))
              this.middleware = requestManagerMiddleware;
      }
      /**
       * Will return all available providers
       */
      static get providers() {
          return availableProviders;
      }
      /**
       * Will return the current provider.
       *
       * @returns Returns the current provider
       */
      get provider() {
          return this._provider;
      }
      /**
       * Will return all available providers
       */
      // eslint-disable-next-line class-methods-use-this
      get providers() {
          return availableProviders;
      }
      /**
       * Use to set provider. Provider can be a provider instance or a string.
       *
       * @param provider - The provider to set
       */
      setProvider(provider) {
          let newProvider;
          // autodetect provider
          if (provider && typeof provider === 'string' && this.providers) {
              // HTTP
              if (/^http(s)?:\/\//i.test(provider)) {
                  newProvider = new this.providers.HttpProvider(provider);
                  // WS
              }
              else if (/^ws(s)?:\/\//i.test(provider)) {
                  newProvider = new this.providers.WebsocketProvider(provider);
              }
              else {
                  throw new ProviderError(`Can't autodetect provider for "${provider}"`);
              }
          }
          else if (isNullish(provider)) {
              // In case want to unset the provider
              newProvider = undefined;
          }
          else {
              newProvider = provider;
          }
          this.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);
          this._provider = newProvider;
          this.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);
          return true;
      }
      setMiddleware(requestManagerMiddleware) {
          this.middleware = requestManagerMiddleware;
      }
      /**
       *
       * Will execute a request
       *
       * @param request - {@link Web3APIRequest} The request to send
       *
       * @returns The response of the request {@link ResponseType}. If there is error
       * in the response, will throw an error
       */
      send(request) {
          return __awaiter$B(this, void 0, void 0, function* () {
              const requestObj = Object.assign({}, request);
              let response = yield this._sendRequest(requestObj);
              if (!isNullish(this.middleware))
                  response = yield this.middleware.processResponse(response);
              if (isResponseWithResult(response)) {
                  return response.result;
              }
              throw new ResponseError(response);
          });
      }
      /**
       * Same as send, but, will execute a batch of requests
       *
       * @param request {@link JsonRpcBatchRequest} The batch request to send
       */
      sendBatch(request) {
          return __awaiter$B(this, void 0, void 0, function* () {
              const response = yield this._sendRequest(request);
              return response;
          });
      }
      _sendRequest(request) {
          return __awaiter$B(this, void 0, void 0, function* () {
              const { provider } = this;
              if (isNullish(provider)) {
                  throw new ProviderError('Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.');
              }
              let payload = (isBatchRequest(request)
                  ? toBatchPayload(request)
                  : toPayload(request));
              if (!isNullish(this.middleware)) {
                  payload = yield this.middleware.processRequest(payload);
              }
              if (isWeb3Provider(provider)) {
                  let response;
                  try {
                      response = yield provider.request(payload);
                  }
                  catch (error) {
                      // Check if the provider throw an error instead of reject with error
                      response = error;
                  }
                  return this._processJsonRpcResponse(payload, response, { legacy: false, error: false });
              }
              if (isEIP1193Provider(provider)) {
                  return provider
                      .request(payload)
                      .then(res => this._processJsonRpcResponse(payload, res, {
                      legacy: true,
                      error: false,
                  }))
                      .catch(error => this._processJsonRpcResponse(payload, error, { legacy: true, error: true }));
              }
              // TODO: This could be deprecated and removed.
              if (isLegacyRequestProvider(provider)) {
                  return new Promise((resolve, reject) => {
                      const rejectWithError = (err) => {
                          reject(this._processJsonRpcResponse(payload, err, {
                              legacy: true,
                              error: true,
                          }));
                      };
                      const resolveWithResponse = (response) => resolve(this._processJsonRpcResponse(payload, response, {
                          legacy: true,
                          error: false,
                      }));
                      const result = provider.request(payload, 
                      // a callback that is expected to be called after getting the response:
                      (err, response) => {
                          if (err) {
                              return rejectWithError(err);
                          }
                          return resolveWithResponse(response);
                      });
                      // Some providers, that follow a previous drafted version of EIP1193, has a `request` function
                      //	that is not defined as `async`, but it returns a promise.
                      // Such providers would not be picked with if(isEIP1193Provider(provider)) above
                      //	because the `request` function was not defined with `async` and so the function definition is not `AsyncFunction`.
                      // Like this provider: https://github.dev/NomicFoundation/hardhat/blob/62bea2600785595ba36f2105564076cf5cdf0fd8/packages/hardhat-core/src/internal/core/providers/backwards-compatibility.ts#L19
                      // So check if the returned result is a Promise, and resolve with it accordingly.
                      // Note: in this case we expect the callback provided above to never be called.
                      if (isPromise(result)) {
                          const responsePromise = result;
                          responsePromise.then(resolveWithResponse).catch(error => {
                              try {
                                  // Attempt to process the error response
                                  const processedError = this._processJsonRpcResponse(payload, error, { legacy: true, error: true });
                                  reject(processedError);
                              }
                              catch (processingError) {
                                  // Catch any errors that occur during the error processing
                                  reject(processingError);
                              }
                          });
                      }
                  });
              }
              // TODO: This could be deprecated and removed.
              if (isLegacySendProvider(provider)) {
                  return new Promise((resolve, reject) => {
                      provider.send(payload, (err, response) => {
                          if (err) {
                              return reject(this._processJsonRpcResponse(payload, err, {
                                  legacy: true,
                                  error: true,
                              }));
                          }
                          if (isNullish(response)) {
                              throw new ResponseError({}, 'Got a "nullish" response from provider.');
                          }
                          return resolve(this._processJsonRpcResponse(payload, response, {
                              legacy: true,
                              error: false,
                          }));
                      });
                  });
              }
              // TODO: This could be deprecated and removed.
              if (isLegacySendAsyncProvider(provider)) {
                  return provider
                      .sendAsync(payload)
                      .then(response => this._processJsonRpcResponse(payload, response, { legacy: true, error: false }))
                      .catch(error => this._processJsonRpcResponse(payload, error, {
                      legacy: true,
                      error: true,
                  }));
              }
              throw new ProviderError('Provider does not have a request or send method to use.');
          });
      }
      // eslint-disable-next-line class-methods-use-this
      _processJsonRpcResponse(payload, response, { legacy, error }) {
          if (isNullish(response)) {
              return this._buildResponse(payload, 
              // Some providers uses "null" as valid empty response
              // eslint-disable-next-line no-null/no-null
              null, error);
          }
          // This is the majority of the cases so check these first
          // A valid JSON-RPC response with error object
          if (isResponseWithError(response)) {
              // check if its an rpc error
              if (this.useRpcCallSpecification &&
                  isResponseRpcError(response)) {
                  const rpcErrorResponse = response;
                  // check if rpc error flag is on and response error code match an EIP-1474 or a standard rpc error code
                  if (rpcErrorsMap.get(rpcErrorResponse.error.code)) {
                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                      const Err = rpcErrorsMap.get(rpcErrorResponse.error.code).error;
                      throw new Err(rpcErrorResponse);
                  }
                  else {
                      throw new RpcError(rpcErrorResponse);
                  }
              }
              else if (!Web3RequestManager._isReverted(response)) {
                  throw new InvalidResponseError(response, payload);
              }
          }
          // This is the majority of the cases so check these first
          // A valid JSON-RPC response with result object
          if (isResponseWithResult(response)) {
              return response;
          }
          if (response instanceof Error) {
              Web3RequestManager._isReverted(response);
              throw response;
          }
          if (!legacy && isBatchRequest(payload) && isBatchResponse(response)) {
              return response;
          }
          if (legacy && !error && isBatchRequest(payload)) {
              return response;
          }
          if (legacy && error && isBatchRequest(payload)) {
              // In case of error batch response we don't want to throw Invalid response
              throw response;
          }
          if (legacy &&
              !isResponseWithError(response) &&
              !isResponseWithResult(response)) {
              return this._buildResponse(payload, response, error);
          }
          if (isBatchRequest(payload) && !Array.isArray(response)) {
              throw new ResponseError(response, 'Got normal response for a batch request.');
          }
          if (!isBatchRequest(payload) && Array.isArray(response)) {
              throw new ResponseError(response, 'Got batch response for a normal request.');
          }
          throw new ResponseError(response, 'Invalid response');
      }
      static _isReverted(response) {
          let error;
          if (isResponseWithError(response)) {
              error = response.error;
          }
          else if (response instanceof Error) {
              error = response;
          }
          // This message means that there was an error while executing the code of the smart contract
          // However, more processing will happen at a higher level to decode the error data,
          //	according to the Error ABI, if it was available as of EIP-838.
          if (error === null || error === void 0 ? void 0 : error.message.includes('revert'))
              throw new ContractExecutionError(error);
          return false;
      }
      // Need to use same types as _processJsonRpcResponse so have to declare as instance method
      // eslint-disable-next-line class-methods-use-this
      _buildResponse(payload, response, error) {
          const res = {
              jsonrpc: '2.0',
              // eslint-disable-next-line no-nested-ternary
              id: isBatchRequest(payload)
                  ? payload[0].id
                  : 'id' in payload
                      ? payload.id
                      : // Have to use the null here explicitly
                          // eslint-disable-next-line no-null/no-null
                          null,
          };
          if (error) {
              return Object.assign(Object.assign({}, res), { error: response });
          }
          return Object.assign(Object.assign({}, res), { result: response });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$A = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class Web3SubscriptionManager {
      constructor(requestManager, registeredSubscriptions, tolerateUnlinkedSubscription = false) {
          this.requestManager = requestManager;
          this.registeredSubscriptions = registeredSubscriptions;
          this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;
          this._subscriptions = new Map();
          this.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, () => __awaiter$A(this, void 0, void 0, function* () {
              yield this.unsubscribe();
          }));
          this.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {
              this.clear();
              this.listenToProviderEvents();
          });
          this.listenToProviderEvents();
      }
      listenToProviderEvents() {
          const providerAsWebProvider = this.requestManager.provider;
          if (!this.requestManager.provider ||
              (typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === 'function' &&
                  !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions()))) {
              return;
          }
          if (typeof this.requestManager.provider.on === 'function') {
              if (typeof this.requestManager.provider.request === 'function') {
                  // Listen to provider messages and data
                  this.requestManager.provider.on('message', 
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument
                  (message) => this.messageListener(message));
              }
              else {
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument
                  providerAsWebProvider.on('data', (data) => this.messageListener(data));
              }
          }
      }
      messageListener(data) {
          var _a, _b, _c;
          if (!data) {
              throw new SubscriptionError('Should not call messageListener with no data. Type was');
          }
          const subscriptionId = ((_a = data.params) === null || _a === void 0 ? void 0 : _a.subscription) ||
              ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) ||
              ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16));
          // Process if the received data is related to a subscription
          if (subscriptionId) {
              const sub = this._subscriptions.get(subscriptionId);
              sub === null || sub === void 0 ? void 0 : sub.processSubscriptionData(data);
          }
      }
      /**
       * Will create a new subscription
       *
       * @param name - The subscription you want to subscribe to
       * @param args - Optional additional parameters, depending on the subscription type
       * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       *
       * Will subscribe to a specific topic (note: name)
       * @returns The subscription object
       */
      subscribe(name_1, args_1) {
          return __awaiter$A(this, arguments, void 0, function* (name, args, returnFormat = DEFAULT_RETURN_FORMAT) {
              const Klass = this.registeredSubscriptions[name];
              if (!Klass) {
                  throw new SubscriptionError('Invalid subscription type');
              }
              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
              const subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {
                  subscriptionManager: this,
                  returnFormat,
                  // eslint.disable-next-line @typescript-eslint/no-unsafe-any
              });
              yield this.addSubscription(subscription);
              return subscription;
          });
      }
      /**
       * Will returns all subscriptions.
       */
      get subscriptions() {
          return this._subscriptions;
      }
      /**
       *
       * Adds an instance of {@link Web3Subscription} and subscribes to it
       *
       * @param sub - A {@link Web3Subscription} object
       */
      addSubscription(sub) {
          return __awaiter$A(this, void 0, void 0, function* () {
              if (!this.requestManager.provider) {
                  throw new ProviderError('Provider not available');
              }
              if (!this.supportsSubscriptions()) {
                  throw new SubscriptionError('The current provider does not support subscriptions');
              }
              if (sub.id && this._subscriptions.has(sub.id)) {
                  throw new SubscriptionError(`Subscription with id "${sub.id}" already exists`);
              }
              yield sub.sendSubscriptionRequest();
              if (isNullish(sub.id)) {
                  throw new SubscriptionError('Subscription is not subscribed yet.');
              }
              this._subscriptions.set(sub.id, sub);
              return sub.id;
          });
      }
      /**
       * Will clear a subscription
       *
       * @param id - The subscription of type {@link Web3Subscription}  to remove
       */
      removeSubscription(sub) {
          return __awaiter$A(this, void 0, void 0, function* () {
              const { id } = sub;
              if (isNullish(id)) {
                  throw new SubscriptionError('Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.');
              }
              if (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {
                  throw new SubscriptionError(`Subscription with id "${id.toString()}" does not exists`);
              }
              yield sub.sendUnsubscribeRequest();
              this._subscriptions.delete(id);
              return id;
          });
      }
      /**
       * Will unsubscribe all subscriptions that fulfill the condition
       *
       * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`
       * @returns An array of all the un-subscribed subscriptions
       */
      unsubscribe(condition) {
          return __awaiter$A(this, void 0, void 0, function* () {
              const result = [];
              for (const [id, sub] of this.subscriptions.entries()) {
                  if (!condition || (typeof condition === 'function' && condition({ id, sub }))) {
                      result.push(this.removeSubscription(sub));
                  }
              }
              return Promise.all(result);
          });
      }
      /**
       * Clears all subscriptions
       */
      clear() {
          this._subscriptions.clear();
      }
      /**
       * Check whether the current provider supports subscriptions.
       *
       * @returns `true` or `false` depending on if the current provider supports subscriptions
       */
      supportsSubscriptions() {
          return isNullish(this.requestManager.provider)
              ? false
              : isSupportSubscriptions(this.requestManager.provider);
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$z = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class Web3Subscription extends Web3EventEmitter {
      constructor(args, options) {
          var _a;
          super();
          this.args = args;
          const { requestManager } = options;
          const { subscriptionManager } = options;
          if (requestManager) {
              // eslint-disable-next-line deprecation/deprecation
              this._subscriptionManager = new Web3SubscriptionManager(requestManager, {}, true);
          }
          else {
              this._subscriptionManager = subscriptionManager;
          }
          this._returnFormat = (_a = options === null || options === void 0 ? void 0 : options.returnFormat) !== null && _a !== void 0 ? _a : DEFAULT_RETURN_FORMAT;
      }
      get id() {
          return this._id;
      }
      get lastBlock() {
          return this._lastBlock;
      }
      subscribe() {
          return __awaiter$z(this, void 0, void 0, function* () {
              return this._subscriptionManager.addSubscription(this);
          });
      }
      processSubscriptionData(data) {
          var _a, _b;
          if (data === null || data === void 0 ? void 0 : data.data) {
              // for EIP-1193 provider
              this._processSubscriptionResult((_b = (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.result) !== null && _b !== void 0 ? _b : data === null || data === void 0 ? void 0 : data.data);
          }
          else if (data &&
              isResponseWithNotification(data)) {
              this._processSubscriptionResult(data === null || data === void 0 ? void 0 : data.params.result);
          }
      }
      sendSubscriptionRequest() {
          return __awaiter$z(this, void 0, void 0, function* () {
              this._id = yield this._subscriptionManager.requestManager.send({
                  method: 'eth_subscribe',
                  params: this._buildSubscriptionParams(),
              });
              this.emit('connected', this._id);
              return this._id;
          });
      }
      get returnFormat() {
          return this._returnFormat;
      }
      get subscriptionManager() {
          return this._subscriptionManager;
      }
      resubscribe() {
          return __awaiter$z(this, void 0, void 0, function* () {
              yield this.unsubscribe();
              yield this.subscribe();
          });
      }
      unsubscribe() {
          return __awaiter$z(this, void 0, void 0, function* () {
              if (!this.id) {
                  return;
              }
              yield this._subscriptionManager.removeSubscription(this);
          });
      }
      sendUnsubscribeRequest() {
          return __awaiter$z(this, void 0, void 0, function* () {
              yield this._subscriptionManager.requestManager.send({
                  method: 'eth_unsubscribe',
                  params: [this.id],
              });
              this._id = undefined;
          });
      }
      // eslint-disable-next-line class-methods-use-this
      formatSubscriptionResult(data) {
          return data;
      }
      _processSubscriptionResult(data) {
          this.emit('data', this.formatSubscriptionResult(data));
      }
      _processSubscriptionError(error) {
          this.emit('error', error);
      }
      // eslint-disable-next-line class-methods-use-this
      _buildSubscriptionParams() {
          // This should be overridden in the subclass
          throw new Error('Implement in the child class');
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$y = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const DEFAULT_BATCH_REQUEST_TIMEOUT = 1000;
  class Web3BatchRequest {
      constructor(requestManager) {
          this._requestManager = requestManager;
          this._requests = new Map();
      }
      get requests() {
          return [...this._requests.values()].map(r => r.payload);
      }
      add(request) {
          const payload = toPayload(request);
          const promise = new Web3DeferredPromise();
          this._requests.set(payload.id, { payload, promise });
          return promise;
      }
      // eslint-disable-next-line class-methods-use-this
      execute(options) {
          return __awaiter$y(this, void 0, void 0, function* () {
              var _a;
              if (this.requests.length === 0) {
                  return Promise.resolve([]);
              }
              const request = new Web3DeferredPromise({
                  timeout: (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : DEFAULT_BATCH_REQUEST_TIMEOUT,
                  eagerStart: true,
                  timeoutMessage: 'Batch request timeout',
              });
              this._processBatchRequest(request).catch(err => request.reject(err));
              request.catch((err) => {
                  if (err instanceof OperationTimeoutError) {
                      this._abortAllRequests('Batch request timeout');
                  }
                  request.reject(err);
              });
              return request;
          });
      }
      _processBatchRequest(promise) {
          return __awaiter$y(this, void 0, void 0, function* () {
              var _a, _b;
              const response = yield this._requestManager.sendBatch([...this._requests.values()].map(r => r.payload));
              if (response.length !== this._requests.size) {
                  this._abortAllRequests('Invalid batch response');
                  throw new ResponseError(response, `Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`);
              }
              const requestIds = this.requests
                  .map(r => r.id)
                  .map(Number)
                  .sort((a, b) => a - b);
              const responseIds = response
                  .map(r => r.id)
                  .map(Number)
                  .sort((a, b) => a - b);
              if (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {
                  this._abortAllRequests('Invalid batch response');
                  throw new ResponseError(response, `Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`);
              }
              for (const res of response) {
                  if (isResponseWithResult(res)) {
                      (_a = this._requests.get(res.id)) === null || _a === void 0 ? void 0 : _a.promise.resolve(res.result);
                  }
                  else if (isResponseWithError(res)) {
                      (_b = this._requests.get(res.id)) === null || _b === void 0 ? void 0 : _b.promise.reject(res.error);
                  }
              }
              promise.resolve(response);
          });
      }
      _abortAllRequests(msg) {
          for (const { promise } of this._requests.values()) {
              promise.reject(new OperationAbortError(msg));
          }
      }
  }

  var __awaiter$x = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class Web3Context extends Web3Config {
      constructor(providerOrContext) {
          var _a;
          super();
          this.providers = Web3RequestManager.providers;
          // If "providerOrContext" is provided as "string" or an objects matching "SupportedProviders" interface
          if (isNullish(providerOrContext) ||
              (typeof providerOrContext === 'string' && providerOrContext.trim() !== '') ||
              isSupportedProvider(providerOrContext)) {
              this._requestManager = new Web3RequestManager(providerOrContext);
              this._subscriptionManager = new Web3SubscriptionManager(this._requestManager, {});
              return;
          }
          const { config, provider, requestManager, subscriptionManager, registeredSubscriptions, accountProvider, wallet, requestManagerMiddleware, } = providerOrContext;
          this.setConfig(config !== null && config !== void 0 ? config : {});
          this._requestManager =
              requestManager !== null && requestManager !== void 0 ? requestManager : new Web3RequestManager(provider, (_a = config === null || config === void 0 ? void 0 : config.enableExperimentalFeatures) === null || _a === void 0 ? void 0 : _a.useSubscriptionWhenCheckingBlockTimeout, requestManagerMiddleware);
          if (subscriptionManager) {
              this._subscriptionManager = subscriptionManager;
          }
          else {
              this._subscriptionManager = new Web3SubscriptionManager(this.requestManager, registeredSubscriptions !== null && registeredSubscriptions !== void 0 ? registeredSubscriptions : {});
          }
          if (accountProvider) {
              this._accountProvider = accountProvider;
          }
          if (wallet) {
              this._wallet = wallet;
          }
      }
      get requestManager() {
          return this._requestManager;
      }
      /**
       * Will return the current subscriptionManager ({@link Web3SubscriptionManager})
       */
      get subscriptionManager() {
          return this._subscriptionManager;
      }
      get wallet() {
          return this._wallet;
      }
      get accountProvider() {
          return this._accountProvider;
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static fromContextObject(...args) {
          return new this(...args.reverse());
      }
      getContextObject() {
          var _a;
          return {
              config: this.config,
              provider: this.provider,
              requestManager: this.requestManager,
              subscriptionManager: this.subscriptionManager,
              registeredSubscriptions: (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.registeredSubscriptions,
              providers: this.providers,
              wallet: this.wallet,
              accountProvider: this.accountProvider,
          };
      }
      /**
       * Use to create new object of any type extended by `Web3Context`
       * and link it to current context. This can be used to initiate a global context object
       * and then use it to create new objects of any type extended by `Web3Context`.
       */
      use(ContextRef, ...args) {
          const newContextChild = new ContextRef(...[...args, this.getContextObject()]);
          this.on(Web3ConfigEvent.CONFIG_CHANGE, event => {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
              newContextChild.setConfig({ [event.name]: event.newValue });
          });
          // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
          this[ContextRef.name] = newContextChild;
          return newContextChild;
      }
      /**
       * Link current context to another context.
       */
      link(parentContext) {
          this.setConfig(parentContext.config);
          this._requestManager = parentContext.requestManager;
          this.provider = parentContext.provider;
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          this._subscriptionManager = parentContext.subscriptionManager;
          this._wallet = parentContext.wallet;
          this._accountProvider = parentContext._accountProvider;
          parentContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
              this.setConfig({ [event.name]: event.newValue });
          });
      }
      // eslint-disable-next-line no-use-before-define
      registerPlugin(plugin) {
          // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
          if (this[plugin.pluginNamespace] !== undefined)
              throw new ExistingPluginNamespaceError(plugin.pluginNamespace);
          const _pluginObject = {
              [plugin.pluginNamespace]: plugin,
          };
          _pluginObject[plugin.pluginNamespace].link(this);
          Object.assign(this, _pluginObject);
      }
      /**
       * Will return the current provider.
       *
       * @returns Returns the current provider
       * @example
       * ```ts
       * const web3 = new Web3Context("http://localhost:8545");
       * console.log(web3.provider);
       * > HttpProvider {
       * 	clientUrl: 'http://localhost:8545',
       * 	httpProviderOptions: undefined
       *  }
       * ```
       */
      get provider() {
          return this.currentProvider;
      }
      /**
       * Will set the current provider.
       *
       * @param provider - The provider to set
       *
       * Accepted providers are of type {@link SupportedProviders}
       * @example
       * ```ts
       *  const web3Context = new web3ContextContext("http://localhost:8545");
       * web3Context.provider = "ws://localhost:8545";
       * console.log(web3Context.provider);
       * > WebSocketProvider {
       * _eventEmitter: EventEmitter {
       * _events: [Object: null prototype] {},
       * _eventsCount: 0,
       * ...
       * }
       * ```
       */
      set provider(provider) {
          this.requestManager.setProvider(provider);
      }
      /**
       * Will return the current provider. (The same as `provider`)
       *
       * @returns Returns the current provider
       * @example
       * ```ts
       * const web3Context = new Web3Context("http://localhost:8545");
       * console.log(web3Context.provider);
       * > HttpProvider {
       * 	clientUrl: 'http://localhost:8545',
       * 	httpProviderOptions: undefined
       *  }
       * ```
       */
      get currentProvider() {
          return this.requestManager.provider;
      }
      /**
       * Will set the current provider. (The same as `provider`)
       *
       * @param provider - {@link SupportedProviders} The provider to set
       *
       * @example
       * ```ts
       *  const web3Context = new Web3Context("http://localhost:8545");
       * web3Context.currentProvider = "ws://localhost:8545";
       * console.log(web3Context.provider);
       * > WebSocketProvider {
       * _eventEmitter: EventEmitter {
       * _events: [Object: null prototype] {},
       * _eventsCount: 0,
       * ...
       * }
       * ```
       */
      set currentProvider(provider) {
          this.requestManager.setProvider(provider);
      }
      /**
       * Will return the givenProvider if available.
       *
       * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.
       */
      // eslint-disable-next-line class-methods-use-this
      get givenProvider() {
          return Web3Context.givenProvider;
      }
      /**
       * Will set the provider.
       *
       * @param provider - {@link SupportedProviders} The provider to set
       * @returns Returns true if the provider was set
       */
      setProvider(provider) {
          this.provider = provider;
          return true;
      }
      setRequestManagerMiddleware(requestManagerMiddleware) {
          this.requestManager.setMiddleware(requestManagerMiddleware);
      }
      /**
       * Will return the {@link Web3BatchRequest} constructor.
       */
      get BatchRequest() {
          return Web3BatchRequest.bind(undefined, this._requestManager);
      }
      /**
       * This method allows extending the web3 modules.
       * Note: This method is only for backward compatibility, and It is recommended to use Web3 v4 Plugin feature for extending web3.js functionality if you are developing something new.
       */
      extend(extendObj) {
          var _a;
          // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
          if (extendObj.property && !this[extendObj.property])
              // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
              this[extendObj.property] = {};
          (_a = extendObj.methods) === null || _a === void 0 ? void 0 : _a.forEach(element => {
              const method = (...givenParams) => __awaiter$x(this, void 0, void 0, function* () {
                  return this.requestManager.send({
                      method: element.call,
                      params: givenParams,
                  });
              });
              if (extendObj.property)
                  // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  this[extendObj.property][element.name] = method;
              // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
              else
                  this[element.name] = method;
          });
          return this;
      }
  }
  Web3Context.providers = Web3RequestManager.providers;

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$w = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var _a;
  class Web3PromiEvent extends Web3EventEmitter {
      constructor(executor) {
          super();
          // public tag to treat object as promise by different libs
          // eslint-disable-next-line @typescript-eslint/prefer-as-const
          this[_a] = 'Promise';
          this._promise = new Promise(executor);
      }
      then(onfulfilled, onrejected) {
          return __awaiter$w(this, void 0, void 0, function* () {
              return this._promise.then(onfulfilled, onrejected);
          });
      }
      catch(onrejected) {
          return __awaiter$w(this, void 0, void 0, function* () {
              return this._promise.catch(onrejected);
          });
      }
      finally(onfinally) {
          return __awaiter$w(this, void 0, void 0, function* () {
              return this._promise.finally(onfinally);
          });
      }
      on(eventName, fn) {
          super.on(eventName, fn);
          return this;
      }
      once(eventName, fn) {
          super.once(eventName, fn);
          return this;
      }
  }
  _a = Symbol.toStringTag;

  var __awaiter$v = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function getProtocolVersion(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_protocolVersion',
              params: [],
          });
      });
  }
  function getSyncing(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_syncing',
              params: [],
          });
      });
  }
  function getCoinbase(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_coinbase',
              params: [],
          });
      });
  }
  function getMining(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_mining',
              params: [],
          });
      });
  }
  function getHashRate$1(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_hashrate',
              params: [],
          });
      });
  }
  function getGasPrice$1(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_gasPrice',
              params: [],
          });
      });
  }
  function getMaxPriorityFeePerGas$1(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_maxPriorityFeePerGas',
              params: [],
          });
      });
  }
  function getAccounts$2(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_accounts',
              params: [],
          });
      });
  }
  function getBlockNumber$1(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_blockNumber',
              params: [],
          });
      });
  }
  function getBalance$1(requestManager, address, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);
          return requestManager.send({
              method: 'eth_getBalance',
              params: [address, blockNumber],
          });
      });
  }
  function getStorageAt$1(requestManager, address, storageSlot, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['address', 'hex', 'blockNumberOrTag'], [address, storageSlot, blockNumber]);
          return requestManager.send({
              method: 'eth_getStorageAt',
              params: [address, storageSlot, blockNumber],
          });
      });
  }
  function getTransactionCount$1(requestManager, address, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);
          return requestManager.send({
              method: 'eth_getTransactionCount',
              params: [address, blockNumber],
          });
      });
  }
  function getBlockTransactionCountByHash(requestManager, blockHash) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['bytes32'], [blockHash]);
          return requestManager.send({
              method: 'eth_getBlockTransactionCountByHash',
              params: [blockHash],
          });
      });
  }
  function getBlockTransactionCountByNumber(requestManager, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['blockNumberOrTag'], [blockNumber]);
          return requestManager.send({
              method: 'eth_getBlockTransactionCountByNumber',
              params: [blockNumber],
          });
      });
  }
  function getUncleCountByBlockHash(requestManager, blockHash) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['bytes32'], [blockHash]);
          return requestManager.send({
              method: 'eth_getUncleCountByBlockHash',
              params: [blockHash],
          });
      });
  }
  function getUncleCountByBlockNumber(requestManager, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['blockNumberOrTag'], [blockNumber]);
          return requestManager.send({
              method: 'eth_getUncleCountByBlockNumber',
              params: [blockNumber],
          });
      });
  }
  function getCode$1(requestManager, address, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);
          return requestManager.send({
              method: 'eth_getCode',
              params: [address, blockNumber],
          });
      });
  }
  function sign$3(requestManager, address, message) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['address', 'hex'], [address, message]);
          return requestManager.send({
              method: 'eth_sign',
              params: [address, message],
          });
      });
  }
  // TODO - Validation should be:
  // isTransactionWithSender(transaction)
  // ? validateTransactionWithSender(transaction)
  // : validateTransactionWithSender(transaction, true) with true being a isPartial flag
  function signTransaction$3(requestManager, transaction) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_signTransaction',
              params: [transaction],
          });
      });
  }
  // TODO - Validation should be:
  // isTransactionWithSender(transaction)
  // ? validateTransactionWithSender(transaction)
  // : validateTransactionWithSender(transaction, true) with true being a isPartial flag
  function sendTransaction$3(requestManager, transaction) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_sendTransaction',
              params: [transaction],
          });
      });
  }
  function sendRawTransaction(requestManager, transaction) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['hex'], [transaction]);
          return requestManager.send({
              method: 'eth_sendRawTransaction',
              params: [transaction],
          });
      });
  }
  // TODO - validate transaction
  function call$1(requestManager, transaction, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          // validateTransactionCall(transaction);
          validator.validate(['blockNumberOrTag'], [blockNumber]);
          return requestManager.send({
              method: 'eth_call',
              params: [transaction, blockNumber],
          });
      });
  }
  // TODO Not sure how to best validate Partial<TransactionWithSender>
  function estimateGas$1(requestManager, transaction, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['blockNumberOrTag'], [blockNumber]);
          return requestManager.send({
              method: 'eth_estimateGas',
              params: [transaction, blockNumber],
          });
      });
  }
  function getBlockByHash(requestManager, blockHash, hydrated) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['bytes32', 'bool'], [blockHash, hydrated]);
          return requestManager.send({
              method: 'eth_getBlockByHash',
              params: [blockHash, hydrated],
          });
      });
  }
  function getBlockByNumber(requestManager, blockNumber, hydrated) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['blockNumberOrTag', 'bool'], [blockNumber, hydrated]);
          return requestManager.send({
              method: 'eth_getBlockByNumber',
              params: [blockNumber, hydrated],
          });
      });
  }
  function getTransactionByHash(requestManager, transactionHash) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['bytes32'], [transactionHash]);
          return requestManager.send({
              method: 'eth_getTransactionByHash',
              params: [transactionHash],
          });
      });
  }
  function getTransactionByBlockHashAndIndex(requestManager, blockHash, transactionIndex) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['bytes32', 'hex'], [blockHash, transactionIndex]);
          return requestManager.send({
              method: 'eth_getTransactionByBlockHashAndIndex',
              params: [blockHash, transactionIndex],
          });
      });
  }
  function getTransactionByBlockNumberAndIndex(requestManager, blockNumber, transactionIndex) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, transactionIndex]);
          return requestManager.send({
              method: 'eth_getTransactionByBlockNumberAndIndex',
              params: [blockNumber, transactionIndex],
          });
      });
  }
  function getTransactionReceipt$1(requestManager, transactionHash) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['bytes32'], [transactionHash]);
          return requestManager.send({
              method: 'eth_getTransactionReceipt',
              params: [transactionHash],
          });
      });
  }
  function getUncleByBlockHashAndIndex(requestManager, blockHash, uncleIndex) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['bytes32', 'hex'], [blockHash, uncleIndex]);
          return requestManager.send({
              method: 'eth_getUncleByBlockHashAndIndex',
              params: [blockHash, uncleIndex],
          });
      });
  }
  function getUncleByBlockNumberAndIndex(requestManager, blockNumber, uncleIndex) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, uncleIndex]);
          return requestManager.send({
              method: 'eth_getUncleByBlockNumberAndIndex',
              params: [blockNumber, uncleIndex],
          });
      });
  }
  function newFilter(requestManager, filter) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['filter'], [filter]);
          return requestManager.send({
              method: 'eth_newFilter',
              params: [filter],
          });
      });
  }
  function newBlockFilter(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_newBlockFilter',
              params: [],
          });
      });
  }
  function newPendingTransactionFilter(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_newPendingTransactionFilter',
              params: [],
          });
      });
  }
  function uninstallFilter$1(requestManager, filterIdentifier) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['hex'], [filterIdentifier]);
          return requestManager.send({
              method: 'eth_uninstallFilter',
              params: [filterIdentifier],
          });
      });
  }
  function getFilterChanges$1(requestManager, filterIdentifier) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['hex'], [filterIdentifier]);
          return requestManager.send({
              method: 'eth_getFilterChanges',
              params: [filterIdentifier],
          });
      });
  }
  function getFilterLogs$1(requestManager, filterIdentifier) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['hex'], [filterIdentifier]);
          return requestManager.send({
              method: 'eth_getFilterLogs',
              params: [filterIdentifier],
          });
      });
  }
  function getLogs$1(requestManager, filter) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['filter'], [filter]);
          return requestManager.send({
              method: 'eth_getLogs',
              params: [filter],
          });
      });
  }
  function getWork(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_getWork',
              params: [],
          });
      });
  }
  function submitWork(requestManager, nonce, hash, digest) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['bytes8', 'bytes32', 'bytes32'], [nonce, hash, digest]);
          return requestManager.send({
              method: 'eth_submitWork',
              params: [nonce, hash, digest],
          });
      });
  }
  function getFeeHistory$1(requestManager, blockCount, newestBlock, rewardPercentiles) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['hex', 'blockNumberOrTag'], [blockCount, newestBlock]);
          for (const rewardPercentile of rewardPercentiles) {
              validator.validate(['number'], [rewardPercentile]);
          }
          return requestManager.send({
              method: 'eth_feeHistory',
              params: [blockCount, newestBlock, rewardPercentiles],
          });
      });
  }
  function getPendingTransactions$1(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_pendingTransactions',
              params: [],
          });
      });
  }
  function requestAccounts(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_requestAccounts',
              params: [],
          });
      });
  }
  function getChainId$1(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'eth_chainId',
              params: [],
          });
      });
  }
  function getProof$1(requestManager, address, storageKeys, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['address', 'bytes32[]', 'blockNumberOrTag'], [address, storageKeys, blockNumber]);
          return requestManager.send({
              method: 'eth_getProof',
              params: [address, storageKeys, blockNumber],
          });
      });
  }
  function getNodeInfo(requestManager) {
      return __awaiter$v(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'web3_clientVersion',
              params: [],
          });
      });
  }
  function createAccessList$1(requestManager, transaction, blockNumber) {
      return __awaiter$v(this, void 0, void 0, function* () {
          validator.validate(['blockNumberOrTag'], [blockNumber]);
          return requestManager.send({
              method: 'eth_createAccessList',
              params: [transaction, blockNumber],
          });
      });
  }
  function signTypedData$1(requestManager, address, typedData, useLegacy = false) {
      return __awaiter$v(this, void 0, void 0, function* () {
          // TODO Add validation for typedData
          validator.validate(['address'], [address]);
          return requestManager.send({
              method: `eth_signTypedData${useLegacy ? '' : '_v4'}`,
              params: [address, typedData],
          });
      });
  }

  var __awaiter$u = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function getId$2(requestManager) {
      return __awaiter$u(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'net_version',
              params: [],
          });
      });
  }
  function getPeerCount$1(requestManager) {
      return __awaiter$u(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'net_peerCount',
              params: [],
          });
      });
  }
  function isListening$1(requestManager) {
      return __awaiter$u(this, void 0, void 0, function* () {
          return requestManager.send({
              method: 'net_listening',
              params: [],
          });
      });
  }

  var __awaiter$t = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const getAccounts$1 = (requestManager) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_listAccounts',
          params: [],
      });
  });
  const newAccount$1 = (requestManager, password) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_newAccount',
          params: [password],
      });
  });
  const unlockAccount$1 = (requestManager, address, password, unlockDuration) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_unlockAccount',
          params: [address, password, unlockDuration],
      });
  });
  const lockAccount$1 = (requestManager, address) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_lockAccount',
          params: [address],
      });
  });
  const importRawKey$1 = (requestManager, keyData, passphrase) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_importRawKey',
          params: [keyData, passphrase],
      });
  });
  const sendTransaction$2 = (requestManager, tx, passphrase) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_sendTransaction',
          params: [tx, passphrase],
      });
  });
  const signTransaction$2 = (requestManager, tx, passphrase) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_signTransaction',
          params: [tx, passphrase],
      });
  });
  const sign$2 = (requestManager, data, address, passphrase) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_sign',
          params: [data, address, passphrase],
      });
  });
  const ecRecover$1 = (requestManager, signedData, signature) => __awaiter$t(void 0, void 0, void 0, function* () {
      return requestManager.send({
          method: 'personal_ecRecover',
          params: [signedData, signature],
      });
  });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // undefined is treated as null for JSON schema validator
  const transactionType0x0Schema = {
      type: 'object',
      properties: {
          accessList: {
              type: 'null',
          },
          maxFeePerGas: {
              type: 'null',
          },
          maxPriorityFeePerGas: {
              type: 'null',
          },
      },
  };
  const transactionType0x1Schema = {
      type: 'object',
      properties: {
          maxFeePerGas: {
              type: 'null',
          },
          maxPriorityFeePerGas: {
              type: 'null',
          },
      },
  };
  const transactionType0x2Schema = {
      type: 'object',
      properties: {
          gasPrice: {
              type: 'null',
          },
      },
  };
  const validateTxTypeAndHandleErrors = (txSchema, tx, txType) => {
      try {
          validator.validateJSONSchema(txSchema, tx);
      }
      catch (error) {
          if (error instanceof Web3ValidatorError)
              // Erroneously reported error
              // eslint-disable-next-line @typescript-eslint/no-unsafe-call
              throw new InvalidPropertiesForTransactionTypeError(error.errors, txType);
          throw error;
      }
  };
  const defaultTransactionTypeParser = transaction => {
      var _a, _b;
      const tx = transaction;
      if (!isNullish$1(tx.type)) {
          let txSchema;
          switch (tx.type) {
              case '0x0':
                  txSchema = transactionType0x0Schema;
                  break;
              case '0x1':
                  txSchema = transactionType0x1Schema;
                  break;
              case '0x2':
                  txSchema = transactionType0x2Schema;
                  break;
              default:
                  return format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);
          }
          validateTxTypeAndHandleErrors(txSchema, tx, tx.type);
          return format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);
      }
      if (!isNullish$1(tx.maxFeePerGas) || !isNullish$1(tx.maxPriorityFeePerGas)) {
          validateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');
          return '0x2';
      }
      if (!isNullish$1(tx.accessList)) {
          validateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');
          return '0x1';
      }
      const givenHardfork = (_a = tx.hardfork) !== null && _a !== void 0 ? _a : (_b = tx.common) === null || _b === void 0 ? void 0 : _b.hardfork;
      if (!isNullish$1(givenHardfork)) {
          const hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork);
          // givenHardfork is London or later, so EIP-2718 is supported
          if (hardforkIndex >= Object.keys(HardforksOrdered).indexOf('london'))
              return !isNullish$1(tx.gasPrice) ? '0x0' : '0x2';
          // givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0
          if (hardforkIndex === Object.keys(HardforksOrdered).indexOf('berlin'))
              return '0x0';
      }
      // gasprice is defined
      if (!isNullish$1(tx.gasPrice)) {
          validateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');
          return '0x0';
      }
      // no transaction type can be inferred from properties, use default transaction type
      return undefined;
  };
  const detectTransactionType = (transaction, web3Context) => {
      var _a;
      return ((_a = web3Context === null || web3Context === void 0 ? void 0 : web3Context.transactionTypeParser) !== null && _a !== void 0 ? _a : defaultTransactionTypeParser)(transaction);
  };
  const detectRawTransactionType = (transaction) => transaction[0] > 0x7f ? '0x0' : toHex(transaction[0]);

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const accessListItemSchema = {
      type: 'object',
      properties: {
          address: {
              format: 'address',
          },
          storageKeys: {
              type: 'array',
              items: {
                  format: 'bytes32',
              },
          },
      },
  };
  const accessListSchema = {
      type: 'array',
      items: Object.assign({}, accessListItemSchema),
  };
  const accessListResultSchema = {
      type: 'object',
      properties: {
          accessList: Object.assign({}, accessListSchema),
          gasUsed: {
              type: 'string',
          },
      },
  };
  const chainSchema = {
      type: 'string',
      enum: ['goerli', 'kovan', 'mainnet', 'rinkeby', 'ropsten', 'sepolia'],
  };
  const hardforkSchema = {
      type: 'string',
      enum: [
          'arrowGlacier',
          'berlin',
          'byzantium',
          'chainstart',
          'constantinople',
          'dao',
          'homestead',
          'istanbul',
          'london',
          'merge',
          'muirGlacier',
          'petersburg',
          'shanghai',
          'spuriousDragon',
          'tangerineWhistle',
      ],
  };
  const customChainSchema = {
      type: 'object',
      properties: {
          name: {
              format: 'string',
          },
          networkId: {
              format: 'uint',
          },
          chainId: {
              format: 'uint',
          },
      },
  };
  const transactionSchema = {
      type: 'object',
      properties: {
          from: {
              format: 'address',
          },
          to: {
              oneOf: [{ format: 'address' }, { type: 'null' }],
          },
          value: {
              format: 'uint',
          },
          gas: {
              format: 'uint',
          },
          gasPrice: {
              format: 'uint',
          },
          effectiveGasPrice: {
              format: 'uint',
          },
          type: {
              format: 'uint',
          },
          maxFeePerGas: {
              format: 'uint',
          },
          maxPriorityFeePerGas: {
              format: 'uint',
          },
          accessList: Object.assign({}, accessListSchema),
          data: {
              format: 'bytes',
          },
          input: {
              format: 'bytes',
          },
          nonce: {
              format: 'uint',
          },
          chain: Object.assign({}, chainSchema),
          hardfork: Object.assign({}, hardforkSchema),
          chainId: {
              format: 'uint',
          },
          networkId: {
              format: 'uint',
          },
          common: {
              type: 'object',
              properties: {
                  customChain: Object.assign({}, customChainSchema),
                  baseChain: Object.assign({}, chainSchema),
                  hardfork: Object.assign({}, hardforkSchema),
              },
          },
          gasLimit: {
              format: 'uint',
          },
          v: {
              format: 'uint',
          },
          r: {
              format: 'bytes32',
          },
          s: {
              format: 'bytes32',
          },
      },
  };
  const transactionInfoSchema = {
      type: 'object',
      properties: Object.assign(Object.assign({}, transactionSchema.properties), { blockHash: {
              format: 'bytes32',
          }, blockNumber: {
              format: 'uint',
          }, hash: {
              format: 'bytes32',
          }, transactionIndex: {
              format: 'uint',
          }, from: {
              format: 'address',
          }, to: {
              oneOf: [{ format: 'address' }, { type: 'null' }],
          }, value: {
              format: 'uint',
          }, gas: {
              format: 'uint',
          }, gasPrice: {
              format: 'uint',
          }, effectiveGasPrice: {
              format: 'uint',
          }, type: {
              format: 'uint',
          }, maxFeePerGas: {
              format: 'uint',
          }, maxPriorityFeePerGas: {
              format: 'uint',
          }, accessList: Object.assign({}, accessListSchema), data: {
              format: 'bytes',
          }, input: {
              format: 'bytes',
          }, nonce: {
              format: 'uint',
          }, gasLimit: {
              format: 'uint',
          }, v: {
              format: 'uint',
          }, r: {
              format: 'bytes32',
          }, s: {
              format: 'bytes32',
          } }),
  };
  const withdrawalsSchema = {
      type: 'object',
      properties: {
          index: {
              format: 'uint',
          },
          validatorIndex: {
              format: 'uint',
          },
          address: {
              format: 'address',
          },
          amount: {
              format: 'uint',
          },
      },
  };
  const blockSchema = {
      type: 'object',
      properties: {
          baseFeePerGas: {
              format: 'uint',
          },
          blobGasUsed: {
              format: 'uint',
          },
          difficulty: {
              format: 'uint',
          },
          excessBlobGas: {
              format: 'uint',
          },
          extraData: {
              format: 'bytes',
          },
          gasLimit: {
              format: 'uint',
          },
          gasUsed: {
              format: 'uint',
          },
          hash: {
              format: 'bytes32',
          },
          logsBloom: {
              format: 'bytes256',
          },
          miner: {
              format: 'bytes',
          },
          mixHash: {
              format: 'bytes32',
          },
          nonce: {
              format: 'uint',
          },
          number: {
              format: 'uint',
          },
          parentBeaconBlockRoot: {
              format: 'bytes32',
          },
          parentHash: {
              format: 'bytes32',
          },
          receiptsRoot: {
              format: 'bytes32',
          },
          sha3Uncles: {
              format: 'bytes32',
          },
          size: {
              format: 'uint',
          },
          stateRoot: {
              format: 'bytes32',
          },
          timestamp: {
              format: 'uint',
          },
          totalDifficulty: {
              format: 'uint',
          },
          transactions: {
              oneOf: [
                  {
                      type: 'array',
                      items: Object.assign({}, transactionInfoSchema),
                  },
                  {
                      type: 'array',
                      items: {
                          format: 'bytes32',
                      },
                  },
              ],
          },
          transactionsRoot: {
              format: 'bytes32',
          },
          uncles: {
              type: 'array',
              items: {
                  format: 'bytes32',
              },
          },
          withdrawals: {
              type: 'array',
              items: Object.assign({}, withdrawalsSchema),
          },
          withdrawalsRoot: {
              format: 'bytes32',
          },
      },
  };
  const blockHeaderSchema = {
      type: 'object',
      properties: {
          author: {
              format: 'bytes32',
          },
          excessDataGas: {
              format: 'uint',
          },
          baseFeePerGas: {
              format: 'uint',
          },
          blobGasUsed: {
              format: 'uint',
          },
          difficulty: {
              format: 'uint',
          },
          excessBlobGas: {
              format: 'uint',
          },
          extraData: {
              format: 'bytes',
          },
          gasLimit: {
              format: 'uint',
          },
          gasUsed: {
              format: 'uint',
          },
          hash: {
              format: 'bytes32',
          },
          logsBloom: {
              format: 'bytes256',
          },
          miner: {
              format: 'bytes',
          },
          mixHash: {
              format: 'bytes32',
          },
          nonce: {
              format: 'uint',
          },
          number: {
              format: 'uint',
          },
          parentBeaconBlockRoot: {
              format: 'bytes32',
          },
          parentHash: {
              format: 'bytes32',
          },
          receiptsRoot: {
              format: 'bytes32',
          },
          sha3Uncles: {
              format: 'bytes32',
          },
          size: {
              format: 'uint',
          },
          stateRoot: {
              format: 'bytes32',
          },
          timestamp: {
              format: 'uint',
          },
          totalDifficulty: {
              format: 'uint',
          },
          transactions: {
              type: 'array',
              items: {
                  format: 'bytes32',
              },
          },
          transactionsRoot: {
              format: 'bytes32',
          },
          uncles: {
              type: 'array',
              items: {
                  format: 'bytes32',
              },
          },
          withdrawals: {
              type: 'array',
              items: Object.assign({}, withdrawalsSchema),
          },
          withdrawalsRoot: {
              format: 'bytes32',
          },
      },
  };
  const logSchema = {
      type: 'object',
      properties: {
          removed: {
              format: 'bool',
          },
          logIndex: {
              format: 'uint',
          },
          transactionIndex: {
              format: 'uint',
          },
          transactionHash: {
              format: 'bytes32',
          },
          blockHash: {
              format: 'bytes32',
          },
          blockNumber: {
              format: 'uint',
          },
          address: {
              format: 'address',
          },
          data: {
              format: 'bytes',
          },
          topics: {
              type: 'array',
              items: {
                  format: 'bytes32',
              },
          },
      },
  };
  const syncSchema = {
      type: 'object',
      properties: {
          startingBlock: {
              format: 'string',
          },
          currentBlock: {
              format: 'string',
          },
          highestBlock: {
              format: 'string',
          },
          knownStates: {
              format: 'string',
          },
          pulledStates: {
              format: 'string',
          },
      },
  };
  const transactionReceiptSchema = {
      type: 'object',
      properties: {
          transactionHash: {
              format: 'bytes32',
          },
          transactionIndex: {
              format: 'uint',
          },
          blockHash: {
              format: 'bytes32',
          },
          blockNumber: {
              format: 'uint',
          },
          from: {
              format: 'address',
          },
          to: {
              format: 'address',
          },
          cumulativeGasUsed: {
              format: 'uint',
          },
          gasUsed: {
              format: 'uint',
          },
          effectiveGasPrice: {
              format: 'uint',
          },
          contractAddress: {
              format: 'address',
          },
          logs: {
              type: 'array',
              items: Object.assign({}, logSchema),
          },
          logsBloom: {
              format: 'bytes',
          },
          root: {
              format: 'bytes',
          },
          status: {
              format: 'uint',
          },
          type: {
              format: 'uint',
          },
      },
  };
  const SignatureObjectSchema = {
      type: 'object',
      properties: {
          messageHash: {
              format: 'bytes',
          },
          r: {
              format: 'bytes32',
          },
          s: {
              format: 'bytes32',
          },
          v: {
              format: 'bytes',
          },
          message: {
              format: 'bytes',
          },
          signature: {
              format: 'bytes',
          },
      },
  };
  const feeHistorySchema = {
      type: 'object',
      properties: {
          oldestBlock: {
              format: 'uint',
          },
          baseFeePerGas: {
              type: 'array',
              items: {
                  format: 'uint',
              },
          },
          reward: {
              type: 'array',
              items: {
                  type: 'array',
                  items: {
                      format: 'uint',
                  },
              },
          },
          gasUsedRatio: {
              type: 'array',
              items: {
                  type: 'number',
              },
          },
      },
  };
  const storageProofSchema = {
      type: 'object',
      properties: {
          key: {
              format: 'bytes32',
          },
          value: {
              format: 'uint',
          },
          proof: {
              type: 'array',
              items: {
                  format: 'bytes32',
              },
          },
      },
  };
  const accountSchema = {
      type: 'object',
      properties: {
          balance: {
              format: 'uint',
          },
          codeHash: {
              format: 'bytes32',
          },
          nonce: {
              format: 'uint',
          },
          storageHash: {
              format: 'bytes32',
          },
          accountProof: {
              type: 'array',
              items: {
                  format: 'bytes32',
              },
          },
          storageProof: {
              type: 'array',
              items: Object.assign({}, storageProofSchema),
          },
      },
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function formatTransaction(transaction, returnFormat = DEFAULT_RETURN_FORMAT, options = {
      transactionSchema: transactionInfoSchema,
      fillInputAndData: false,
  }) {
      var _a, _b;
      let formattedTransaction = mergeDeep({}, transaction);
      if (!isNullish$1(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {
          formattedTransaction.common = Object.assign({}, transaction.common);
          if (!isNullish$1((_a = transaction.common) === null || _a === void 0 ? void 0 : _a.customChain))
              formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);
      }
      formattedTransaction = format((_b = options.transactionSchema) !== null && _b !== void 0 ? _b : transactionInfoSchema, formattedTransaction, returnFormat);
      if (!isNullish$1(formattedTransaction.data) &&
          !isNullish$1(formattedTransaction.input) &&
          // Converting toHex is accounting for data and input being Uint8Arrays
          // since comparing Uint8Array is not as straightforward as comparing strings
          toHex(formattedTransaction.data) !== toHex(formattedTransaction.input))
          throw new TransactionDataAndInputError({
              data: bytesToHex$1(formattedTransaction.data),
              input: bytesToHex$1(formattedTransaction.input),
          });
      if (options.fillInputAndData) {
          if (!isNullish$1(formattedTransaction.data)) {
              formattedTransaction.input = formattedTransaction.data;
          }
          else if (!isNullish$1(formattedTransaction.input)) {
              formattedTransaction.data = formattedTransaction.input;
          }
      }
      if (!isNullish$1(formattedTransaction.gasLimit)) {
          formattedTransaction.gas = formattedTransaction.gasLimit;
          delete formattedTransaction.gasLimit;
      }
      return formattedTransaction;
  }

  /**
   * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.
   *
   * @param encodedSignedTransaction The RLP encoded transaction.
   * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.
   * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).
   */
  function decodeSignedTransaction(encodedSignedTransaction, returnFormat, options = {
      fillInputAndData: false,
  }) {
      return {
          raw: format({ format: 'bytes' }, encodedSignedTransaction, returnFormat),
          tx: formatTransaction(Object.assign(Object.assign({}, TransactionFactory.fromSerializedData(hexToBytes$1(encodedSignedTransaction)).toJSON()), { hash: bytesToHex$1(keccak256Wrapper(hexToBytes$1(encodedSignedTransaction))), type: detectRawTransactionType(hexToBytes$1(encodedSignedTransaction)) }), returnFormat, {
              fillInputAndData: options.fillInputAndData,
              transactionSchema: options.transactionSchema,
          }),
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$s = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function getId$1(web3Context, returnFormat) {
      return __awaiter$s(this, void 0, void 0, function* () {
          const response = yield getId$2(web3Context.requestManager);
          return format({ format: 'uint' }, response, returnFormat);
      });
  }

  (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const ALL_EVENTS = 'ALLEVENTS';
  const ALL_EVENTS_ABI = {
      name: ALL_EVENTS,
      signature: '',
      type: 'event',
      inputs: [],
  };
  const NUMBER_DATA_FORMAT = { bytes: FMT_BYTES.HEX, number: FMT_NUMBER.NUMBER };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$r = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function getEip1559GasPricing(transaction, web3Context, returnFormat) {
      return __awaiter$r(this, void 0, void 0, function* () {
          var _a, _b, _c, _d;
          const block = yield getBlock(web3Context, web3Context.defaultBlock, false, ETH_DATA_FORMAT);
          if (isNullish$1(block.baseFeePerGas))
              throw new Eip1559NotSupportedError();
          let gasPrice;
          if (isNullish$1(transaction.gasPrice) && BigInt(block.baseFeePerGas) === BigInt(0)) {
              gasPrice = yield getGasPrice(web3Context, returnFormat);
          }
          if (!isNullish$1(transaction.gasPrice) || !isNullish$1(gasPrice)) {
              const convertedTransactionGasPrice = format({ format: 'uint' }, (_a = transaction.gasPrice) !== null && _a !== void 0 ? _a : gasPrice, returnFormat);
              return {
                  maxPriorityFeePerGas: convertedTransactionGasPrice,
                  maxFeePerGas: convertedTransactionGasPrice,
              };
          }
          return {
              maxPriorityFeePerGas: format({ format: 'uint' }, (_b = transaction.maxPriorityFeePerGas) !== null && _b !== void 0 ? _b : web3Context.defaultMaxPriorityFeePerGas, returnFormat),
              maxFeePerGas: format({ format: 'uint' }, ((_c = transaction.maxFeePerGas) !== null && _c !== void 0 ? _c : BigInt(block.baseFeePerGas) * BigInt(2) +
                  BigInt((_d = transaction.maxPriorityFeePerGas) !== null && _d !== void 0 ? _d : web3Context.defaultMaxPriorityFeePerGas)), returnFormat),
          };
      });
  }
  function getTransactionGasPricing(transaction, web3Context, returnFormat) {
      return __awaiter$r(this, void 0, void 0, function* () {
          const transactionType = getTransactionType(transaction, web3Context);
          if (!isNullish$1(transactionType)) {
              if (transactionType.startsWith('-'))
                  throw new UnsupportedTransactionTypeError(transactionType);
              // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions
              if (Number(transactionType) < 0 || Number(transactionType) > 127)
                  throw new UnsupportedTransactionTypeError(transactionType);
              if (isNullish$1(transaction.gasPrice) &&
                  (transactionType === '0x0' || transactionType === '0x1'))
                  return {
                      gasPrice: yield getGasPrice(web3Context, returnFormat),
                      maxPriorityFeePerGas: undefined,
                      maxFeePerGas: undefined,
                  };
              if (transactionType === '0x2') {
                  return Object.assign({ gasPrice: undefined }, (yield getEip1559GasPricing(transaction, web3Context, returnFormat)));
              }
          }
          return undefined;
      });
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$q = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {
      if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {
          if (typeof transaction[attr] === 'string' && isAddress$1(transaction[attr])) {
              // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
              return transaction[attr];
          }
          if (!isHexStrict$1(transaction[attr]) && isNumber(transaction[attr])) {
              if (web3Context.wallet) {
                  const account = web3Context.wallet.get(format({ format: 'uint' }, transaction[attr], NUMBER_DATA_FORMAT));
                  if (!isNullish$1(account)) {
                      return account.address;
                  }
                  throw new LocalWalletNotAvailableError();
              }
              throw new LocalWalletNotAvailableError();
          }
          else {
              throw attr === 'from'
                  ? new InvalidTransactionWithSender(transaction.from)
                  : // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                      new InvalidTransactionWithReceiver(transaction.to);
          }
      }
      if (attr === 'from') {
          if (!isNullish$1(privateKey))
              return privateKeyToAddress(privateKey);
          if (!isNullish$1(web3Context.defaultAccount))
              return web3Context.defaultAccount;
      }
      return undefined;
  };
  const getTransactionNonce = (web3Context_1, address_1, ...args_1) => __awaiter$q(void 0, [web3Context_1, address_1, ...args_1], void 0, function* (web3Context, address, returnFormat = web3Context.defaultReturnFormat) {
      if (isNullish$1(address)) {
          // TODO if (web3.eth.accounts.wallet) use address from local wallet
          throw new UnableToPopulateNonceError();
      }
      return getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);
  });
  const getTransactionType = (transaction, web3Context) => {
      const inferredType = detectTransactionType(transaction, web3Context);
      if (!isNullish$1(inferredType))
          return inferredType;
      if (!isNullish$1(web3Context.defaultTransactionType))
          return format({ format: 'uint' }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);
      return undefined;
  };
  // Keep in mind that the order the properties of populateTransaction get populated matters
  // as some of the properties are dependent on others
  function defaultTransactionBuilder(options) {
      return __awaiter$q(this, void 0, void 0, function* () {
          var _a, _b;
          let populatedTransaction = format(transactionSchema, options.transaction, options.web3Context.defaultReturnFormat);
          if (isNullish$1(populatedTransaction.from)) {
              populatedTransaction.from = getTransactionFromOrToAttr('from', options.web3Context, undefined, options.privateKey);
          }
          // TODO: Debug why need to typecase getTransactionNonce
          if (isNullish$1(populatedTransaction.nonce)) {
              populatedTransaction.nonce = yield getTransactionNonce(options.web3Context, populatedTransaction.from, ETH_DATA_FORMAT);
          }
          if (isNullish$1(populatedTransaction.value)) {
              populatedTransaction.value = '0x0';
          }
          if (!isNullish$1(populatedTransaction.data)) {
              if (!isNullish$1(populatedTransaction.input) &&
                  populatedTransaction.data !== populatedTransaction.input)
                  throw new TransactionDataAndInputError({
                      data: bytesToHex$1(populatedTransaction.data),
                      input: bytesToHex$1(populatedTransaction.input),
                  });
              if (!populatedTransaction.data.startsWith('0x'))
                  populatedTransaction.data = `0x${populatedTransaction.data}`;
          }
          else if (!isNullish$1(populatedTransaction.input)) {
              if (!populatedTransaction.input.startsWith('0x'))
                  populatedTransaction.input = `0x${populatedTransaction.input}`;
          }
          else {
              populatedTransaction.input = '0x';
          }
          if (isNullish$1(populatedTransaction.common)) {
              if (options.web3Context.defaultCommon) {
                  const common = options.web3Context.defaultCommon;
                  const chainId = common.customChain.chainId;
                  const networkId = common.customChain.networkId;
                  const name = common.customChain.name;
                  populatedTransaction.common = Object.assign(Object.assign({}, common), { customChain: { chainId, networkId, name } });
              }
              if (isNullish$1(populatedTransaction.chain)) {
                  populatedTransaction.chain = options.web3Context.defaultChain;
              }
              if (isNullish$1(populatedTransaction.hardfork)) {
                  populatedTransaction.hardfork = options.web3Context.defaultHardfork;
              }
          }
          if (isNullish$1(populatedTransaction.chainId) &&
              isNullish$1((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId)) {
              populatedTransaction.chainId = yield getChainId(options.web3Context, ETH_DATA_FORMAT);
          }
          if (isNullish$1(populatedTransaction.networkId)) {
              populatedTransaction.networkId =
                  (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : (yield getId$1(options.web3Context, ETH_DATA_FORMAT));
          }
          if (isNullish$1(populatedTransaction.gasLimit) && !isNullish$1(populatedTransaction.gas)) {
              populatedTransaction.gasLimit = populatedTransaction.gas;
          }
          populatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);
          if (isNullish$1(populatedTransaction.accessList) &&
              (populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')) {
              populatedTransaction.accessList = [];
          }
          if (options.fillGasPrice)
              populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), (yield getTransactionGasPricing(populatedTransaction, options.web3Context, ETH_DATA_FORMAT)));
          if (isNullish$1(populatedTransaction.gas) &&
              isNullish$1(populatedTransaction.gasLimit) &&
              options.fillGasLimit) {
              const fillGasLimit = yield estimateGas(options.web3Context, populatedTransaction, 'latest', ETH_DATA_FORMAT);
              populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), { gas: format({ format: 'uint' }, fillGasLimit, ETH_DATA_FORMAT) });
          }
          return populatedTransaction;
      });
  }
  const transactionBuilder = (options) => __awaiter$q(void 0, void 0, void 0, function* () {
      var _a;
      return ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), { transaction: options.transaction }));
  });

  var __awaiter$p = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function resolveByPolling(web3Context, starterBlockNumber, transactionHash) {
      const pollingInterval = web3Context.transactionPollingInterval;
      const [intervalId, promiseToError] = rejectIfConditionAtInterval(() => __awaiter$p(this, void 0, void 0, function* () {
          let lastBlockNumber;
          try {
              lastBlockNumber = yield getBlockNumber(web3Context, NUMBER_DATA_FORMAT);
          }
          catch (error) {
              console.warn('An error happen while trying to get the block number', error);
              return undefined;
          }
          const numberOfBlocks = lastBlockNumber - starterBlockNumber;
          if (numberOfBlocks >= web3Context.transactionBlockTimeout) {
              return new TransactionBlockTimeoutError({
                  starterBlockNumber,
                  numberOfBlocks,
                  transactionHash,
              });
          }
          return undefined;
      }), pollingInterval);
      const clean = () => {
          clearInterval(intervalId);
      };
      return [promiseToError, { clean }];
  }
  function resolveBySubscription(web3Context, starterBlockNumber, transactionHash) {
      return __awaiter$p(this, void 0, void 0, function* () {
          var _a;
          // The following variable will stay true except if the data arrived,
          //	or if watching started after an error had occurred.
          let needToWatchLater = true;
          let subscription;
          let resourceCleaner;
          // internal helper function
          function revertToPolling(reject, previousError) {
              if (previousError) {
                  console.warn('error happened at subscription. So revert to polling...', previousError);
              }
              resourceCleaner.clean();
              needToWatchLater = false;
              const [promiseToError, newResourceCleaner] = resolveByPolling(web3Context, starterBlockNumber, transactionHash);
              resourceCleaner.clean = newResourceCleaner.clean;
              promiseToError.catch(error => reject(error));
          }
          try {
              subscription = (yield ((_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads')));
              resourceCleaner = {
                  clean: () => {
                      var _a;
                      // Remove the subscription, if it was not removed somewhere
                      // 	else by calling, for example, subscriptionManager.clear()
                      if (subscription.id) {
                          (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription).then(() => {
                              // Subscription ended successfully
                          }).catch(() => {
                              // An error happened while ending subscription. But no need to take any action.
                          });
                      }
                  },
              };
          }
          catch (error) {
              return resolveByPolling(web3Context, starterBlockNumber, transactionHash);
          }
          const promiseToError = new Promise((_, reject) => {
              try {
                  subscription.on('data', (lastBlockHeader) => {
                      needToWatchLater = false;
                      if (!(lastBlockHeader === null || lastBlockHeader === void 0 ? void 0 : lastBlockHeader.number)) {
                          return;
                      }
                      const numberOfBlocks = Number(BigInt(lastBlockHeader.number) - BigInt(starterBlockNumber));
                      if (numberOfBlocks >= web3Context.transactionBlockTimeout) {
                          // Transaction Block Timeout is known to be reached by subscribing to new heads
                          reject(new TransactionBlockTimeoutError({
                              starterBlockNumber,
                              numberOfBlocks,
                              transactionHash,
                          }));
                      }
                  });
                  subscription.on('error', error => {
                      revertToPolling(reject, error);
                  });
              }
              catch (error) {
                  revertToPolling(reject, error);
              }
              // Fallback to polling if tx receipt didn't arrived in "blockHeaderTimeout" [10 seconds]
              setTimeout(() => {
                  if (needToWatchLater) {
                      revertToPolling(reject);
                  }
              }, web3Context.blockHeaderTimeout * 1000);
          });
          return [promiseToError, resourceCleaner];
      });
  }
  /* TODO: After merge, there will be constant block mining time (exactly 12 second each block, except slot missed that currently happens in <1% of slots. ) so we can optimize following function
  for POS NWs, we can skip checking getBlockNumber(); after interval and calculate only based on time  that certain num of blocked are mined after that for internal double check, can do one getBlockNumber() call and timeout.
  */
  function rejectIfBlockTimeout(web3Context, transactionHash) {
      return __awaiter$p(this, void 0, void 0, function* () {
          var _a, _b;
          const { provider } = web3Context.requestManager;
          let callingRes;
          const starterBlockNumber = yield getBlockNumber(web3Context, NUMBER_DATA_FORMAT);
          // TODO: once https://github.com/web3/web3.js/issues/5521 is implemented, remove checking for `enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout`
          if (((_b = (_a = provider).supportsSubscriptions) === null || _b === void 0 ? void 0 : _b.call(_a)) &&
              web3Context.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout) {
              // eslint-disable-next-line @typescript-eslint/no-floating-promises
              callingRes = yield resolveBySubscription(web3Context, starterBlockNumber, transactionHash);
          }
          else {
              // eslint-disable-next-line @typescript-eslint/no-floating-promises
              callingRes = resolveByPolling(web3Context, starterBlockNumber, transactionHash);
          }
          return callingRes;
      });
  }

  var __awaiter$o = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.
   * @param web3Context - the context to read the configurations from
   * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)
   * @param transactionHash - to be used inside the exception message if there will be any exceptions.
   * @returns the Promise<string> returned by the `sendTransactionFunc`.
   */
  function trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {
      return __awaiter$o(this, void 0, void 0, function* () {
          const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionSendTimeout, new TransactionSendTimeoutError({
              numberOfSeconds: web3Context.transactionSendTimeout / 1000,
              transactionHash,
          }));
          const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);
          try {
              // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.
              return yield Promise.race([
                  sendTransactionFunc(), // this is the function that will send the transaction
                  rejectOnTimeout, // this will throw an error on Transaction Send Timeout
                  rejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout
              ]);
          }
          finally {
              clearTimeout(timeoutId);
              blockTimeoutResourceCleaner.clean();
          }
      });
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$n = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function waitForTransactionReceipt(web3Context, transactionHash, returnFormat, customGetTransactionReceipt) {
      return __awaiter$n(this, void 0, void 0, function* () {
          var _a;
          const pollingInterval = (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval;
          const [awaitableTransactionReceipt, IntervalId] = pollTillDefinedAndReturnIntervalId(() => __awaiter$n(this, void 0, void 0, function* () {
              try {
                  return (customGetTransactionReceipt !== null && customGetTransactionReceipt !== void 0 ? customGetTransactionReceipt : getTransactionReceipt)(web3Context, transactionHash, returnFormat);
              }
              catch (error) {
                  console.warn('An error happen while trying to get the transaction receipt', error);
                  return undefined;
              }
          }), pollingInterval);
          const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionPollingTimeout, new TransactionPollingTimeoutError({
              numberOfSeconds: web3Context.transactionPollingTimeout / 1000,
              transactionHash,
          }));
          const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);
          try {
              // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.
              return yield Promise.race([
                  awaitableTransactionReceipt,
                  rejectOnTimeout, // this will throw an error on Transaction Polling Timeout
                  rejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout
              ]);
          }
          finally {
              if (timeoutId)
                  clearTimeout(timeoutId);
              if (IntervalId)
                  clearInterval(IntervalId);
              blockTimeoutResourceCleaner.clean();
          }
      });
  }

  var __awaiter$m = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * This function watches a Transaction by subscribing to new heads.
   * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.
   * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.
   */
  const watchTransactionByPolling = ({ web3Context, transactionReceipt, transactionPromiEvent, customTransactionReceiptSchema, returnFormat, }) => {
      var _a;
      // Having a transactionReceipt means that the transaction has already been included
      // in at least one block, so we start with 1
      let confirmations = 1;
      const intervalId = setInterval(() => {
          (() => __awaiter$m(void 0, void 0, void 0, function* () {
              if (confirmations >= web3Context.transactionConfirmationBlocks) {
                  clearInterval(intervalId);
                  return;
              }
              const nextBlock = yield getBlockByNumber(web3Context.requestManager, numberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);
              if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {
                  confirmations += 1;
                  transactionPromiEvent.emit('confirmation', {
                      confirmations: format({ format: 'uint' }, confirmations, returnFormat),
                      receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
                      latestBlockHash: format({ format: 'bytes32' }, nextBlock.hash, returnFormat),
                  });
              }
          }))();
      }, (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval);
  };

  var __awaiter$l = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * This function watches a Transaction by subscribing to new heads.
   * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.
   */
  const watchTransactionBySubscription = ({ web3Context, transactionReceipt, transactionPromiEvent, customTransactionReceiptSchema, returnFormat, }) => {
      // The following variable will stay true except if the data arrived,
      //	or if watching started after an error had occurred.
      let needToWatchLater = true;
      let lastCaughtBlockHash;
      setImmediate(() => {
          var _a;
          (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads').then((subscription) => {
              subscription.on('data', (newBlockHeader) => __awaiter$l(void 0, void 0, void 0, function* () {
                  var _a;
                  needToWatchLater = false;
                  if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) ||
                      // For some cases, the on-data event is fired couple times for the same block!
                      // This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.
                      lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) {
                      return;
                  }
                  lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;
                  const confirmations = BigInt(newBlockHeader.number) -
                      BigInt(transactionReceipt.blockNumber) +
                      BigInt(1);
                  transactionPromiEvent.emit('confirmation', {
                      confirmations: format({ format: 'uint' }, confirmations, returnFormat),
                      receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
                      latestBlockHash: format({ format: 'bytes32' }, newBlockHeader.parentHash, returnFormat),
                  });
                  if (confirmations >= web3Context.transactionConfirmationBlocks) {
                      yield ((_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription));
                  }
              }));
              subscription.on('error', () => __awaiter$l(void 0, void 0, void 0, function* () {
                  var _a;
                  yield ((_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription));
                  needToWatchLater = false;
                  watchTransactionByPolling({
                      web3Context,
                      transactionReceipt,
                      transactionPromiEvent,
                      customTransactionReceiptSchema,
                      returnFormat,
                  });
              }));
          }).catch(() => {
              needToWatchLater = false;
              watchTransactionByPolling({
                  web3Context,
                  transactionReceipt,
                  customTransactionReceiptSchema,
                  transactionPromiEvent,
                  returnFormat,
              });
          });
      });
      // Fallback to polling if tx receipt didn't arrived in "blockHeaderTimeout" [10 seconds]
      setTimeout(() => {
          if (needToWatchLater) {
              watchTransactionByPolling({
                  web3Context,
                  transactionReceipt,
                  transactionPromiEvent,
                  returnFormat,
              });
          }
      }, web3Context.blockHeaderTimeout * 1000);
  };

  function watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat, customTransactionReceiptSchema) {
      if (isNullish$1(transactionReceipt) || isNullish$1(transactionReceipt.blockHash))
          throw new TransactionMissingReceiptOrBlockHashError({
              receipt: transactionReceipt,
              blockHash: format({ format: 'bytes32' }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),
              transactionHash: format({ format: 'bytes32' }, transactionHash, returnFormat),
          });
      if (!transactionReceipt.blockNumber)
          throw new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });
      // As we have the receipt, it's the first confirmation that tx is accepted.
      transactionPromiEvent.emit('confirmation', {
          confirmations: format({ format: 'uint' }, 1, returnFormat),
          receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
          latestBlockHash: format({ format: 'bytes32' }, transactionReceipt.blockHash, returnFormat),
      });
      // so a subscription for newBlockHeaders can be made instead of polling
      const provider = web3Context.requestManager.provider;
      if (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {
          watchTransactionBySubscription({
              web3Context,
              transactionReceipt,
              transactionPromiEvent,
              customTransactionReceiptSchema,
              returnFormat,
          });
      }
      else {
          watchTransactionByPolling({
              web3Context,
              transactionReceipt,
              transactionPromiEvent,
              customTransactionReceiptSchema,
              returnFormat,
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isAbiErrorFragment$1 = (item) => !isNullish(item) &&
      typeof item === 'object' &&
      !isNullish(item.type) &&
      item.type === 'error';
  const isAbiEventFragment$1 = (item) => !isNullish(item) &&
      typeof item === 'object' &&
      !isNullish(item.type) &&
      item.type === 'event';
  const isAbiFunctionFragment$1 = (item) => !isNullish(item) &&
      typeof item === 'object' &&
      !isNullish(item.type) &&
      item.type === 'function';
  /**
   * Check if type is simplified struct format
   */
  const isSimplifiedStructFormat$1 = (type) => typeof type === 'object' &&
      typeof type.components === 'undefined' &&
      typeof type.name === 'undefined';
  /**
   * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
   */
  const mapStructNameAndType$1 = (structName) => structName.includes('[]')
      ? { type: 'tuple[]', name: structName.slice(0, -2) }
      : { type: 'tuple', name: structName };
  /**
   * Maps the simplified format in to the expected format of the ABICoder
   */
  const mapStructToCoderFormat$1 = (struct) => {
      const components = [];
      for (const key of Object.keys(struct)) {
          const item = struct[key];
          if (typeof item === 'object') {
              components.push(Object.assign(Object.assign({}, mapStructNameAndType$1(key)), { components: mapStructToCoderFormat$1(item) }));
          }
          else {
              components.push({
                  name: key,
                  type: struct[key],
              });
          }
      }
      return components;
  };
  /**
   *  used to flatten json abi inputs/outputs into an array of type-representing-strings
   */
  const flattenTypes$1 = (includeTuple, puts) => {
      const types = [];
      puts.forEach(param => {
          if (typeof param.components === 'object') {
              if (!param.type.startsWith('tuple')) {
                  throw new AbiError(`Invalid value given "${param.type}". Error: components found but type is not tuple.`);
              }
              const arrayBracket = param.type.indexOf('[');
              const suffix = arrayBracket >= 0 ? param.type.substring(arrayBracket) : '';
              const result = flattenTypes$1(includeTuple, param.components);
              {
                  types.push(`(${result.join(',')})${suffix}`);
              }
          }
          else {
              types.push(param.type);
          }
      });
      return types;
  };
  /**
   * Should be used to create full function/event name from json abi
   * returns a string
   */
  const jsonInterfaceMethodToString$1 = (json) => {
      var _a, _b, _c, _d;
      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
      if (isAbiErrorFragment$1(json) || isAbiEventFragment$1(json) || isAbiFunctionFragment$1(json)) {
          if ((_a = json.name) === null || _a === void 0 ? void 0 : _a.includes('(')) {
              return json.name;
          }
          return `${(_b = json.name) !== null && _b !== void 0 ? _b : ''}(${flattenTypes$1(false, (_c = json.inputs) !== null && _c !== void 0 ? _c : []).join(',')})`;
      }
      // Constructor fragment
      return `(${flattenTypes$1(false, (_d = json.inputs) !== null && _d !== void 0 ? _d : []).join(',')})`;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   *
   *  @module ABI
   */
  /**
   * Encodes the error name to its ABI signature, which are the sha3 hash of the error name including input types.
   */
  const encodeErrorSignature$1 = (functionName) => {
      if (typeof functionName !== 'string' && !isAbiErrorFragment$1(functionName)) {
          throw new AbiError('Invalid parameter value in encodeErrorSignature');
      }
      let name;
      if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {
          name = jsonInterfaceMethodToString$1(functionName);
      }
      else {
          name = functionName;
      }
      return sha3Raw(name);
  };

  // src/regex.ts
  function execTyped$1(regex, string) {
    const match = regex.exec(string);
    return match?.groups;
  }
  var bytesRegex$1 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
  var integerRegex$1 = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
  var isTupleRegex$1 = /^\(.+?\).*?$/;

  var __defProp$1 = Object.defineProperty;
  var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$1 = (obj, key, value) => {
    __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // package.json
  var name$1 = "abitype";
  var version$1 = "0.7.1";

  // src/errors.ts
  var BaseError$1 = class BaseError extends Error {
    constructor(shortMessage, args = {}) {
      const details = args.cause instanceof BaseError$1 ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
      const docsPath = args.cause instanceof BaseError$1 ? args.cause.docsPath || args.docsPath : args.docsPath;
      const message = [
        shortMessage || "An error occurred.",
        "",
        ...args.metaMessages ? [...args.metaMessages, ""] : [],
        ...docsPath ? [`Docs: https://abitype.dev${docsPath}`] : [],
        ...details ? [`Details: ${details}`] : [],
        `Version: ${name$1}@${version$1}`
      ].join("\n");
      super(message);
      __publicField$1(this, "details");
      __publicField$1(this, "docsPath");
      __publicField$1(this, "metaMessages");
      __publicField$1(this, "shortMessage");
      __publicField$1(this, "name", "AbiTypeError");
      if (args.cause)
        this.cause = args.cause;
      this.details = details;
      this.docsPath = docsPath;
      this.metaMessages = args.metaMessages;
      this.shortMessage = shortMessage;
    }
  };
  var structSignatureRegex$1 = /^struct (?<name>[a-zA-Z0-9_]+) \{(?<properties>.*?)\}$/;
  function isStructSignature$1(signature) {
    return structSignatureRegex$1.test(signature);
  }
  function execStructSignature$1(signature) {
    return execTyped$1(
      structSignatureRegex$1,
      signature
    );
  }
  var modifiers$1 = /* @__PURE__ */ new Set([
    "memory",
    "indexed",
    "storage",
    "calldata"
  ]);
  var functionModifiers$1 = /* @__PURE__ */ new Set([
    "calldata",
    "memory",
    "storage"
  ]);

  // src/human-readable/runtime/cache.ts
  function getParameterCacheKey$1(param, type) {
    if (type)
      return `${type}:${param}`;
    return param;
  }
  var parameterCache$1 = /* @__PURE__ */ new Map([
    // Unnamed
    ["address", { type: "address" }],
    ["bool", { type: "bool" }],
    ["bytes", { type: "bytes" }],
    ["bytes32", { type: "bytes32" }],
    ["int", { type: "int256" }],
    ["int256", { type: "int256" }],
    ["string", { type: "string" }],
    ["uint", { type: "uint256" }],
    ["uint8", { type: "uint8" }],
    ["uint16", { type: "uint16" }],
    ["uint24", { type: "uint24" }],
    ["uint32", { type: "uint32" }],
    ["uint64", { type: "uint64" }],
    ["uint96", { type: "uint96" }],
    ["uint112", { type: "uint112" }],
    ["uint160", { type: "uint160" }],
    ["uint192", { type: "uint192" }],
    ["uint256", { type: "uint256" }],
    // Named
    ["address owner", { type: "address", name: "owner" }],
    ["address to", { type: "address", name: "to" }],
    ["bool approved", { type: "bool", name: "approved" }],
    ["bytes _data", { type: "bytes", name: "_data" }],
    ["bytes data", { type: "bytes", name: "data" }],
    ["bytes signature", { type: "bytes", name: "signature" }],
    ["bytes32 hash", { type: "bytes32", name: "hash" }],
    ["bytes32 r", { type: "bytes32", name: "r" }],
    ["bytes32 root", { type: "bytes32", name: "root" }],
    ["bytes32 s", { type: "bytes32", name: "s" }],
    ["string name", { type: "string", name: "name" }],
    ["string symbol", { type: "string", name: "symbol" }],
    ["string tokenURI", { type: "string", name: "tokenURI" }],
    ["uint tokenId", { type: "uint256", name: "tokenId" }],
    ["uint8 v", { type: "uint8", name: "v" }],
    ["uint256 balance", { type: "uint256", name: "balance" }],
    ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
    ["uint256 value", { type: "uint256", name: "value" }],
    // Indexed
    [
      "event:address indexed from",
      { type: "address", name: "from", indexed: true }
    ],
    ["event:address indexed to", { type: "address", name: "to", indexed: true }],
    [
      "event:uint indexed tokenId",
      { type: "uint256", name: "tokenId", indexed: true }
    ],
    [
      "event:uint256 indexed tokenId",
      { type: "uint256", name: "tokenId", indexed: true }
    ]
  ]);
  var abiParameterWithoutTupleRegex$1 = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
  var abiParameterWithTupleRegex$1 = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
  var dynamicIntegerRegex$1 = /^u?int$/;
  function parseAbiParameter$1(param, options) {
    const parameterCacheKey = getParameterCacheKey$1(param, options?.type);
    if (parameterCache$1.has(parameterCacheKey))
      return parameterCache$1.get(parameterCacheKey);
    const isTuple = isTupleRegex$1.test(param);
    const match = execTyped$1(
      isTuple ? abiParameterWithTupleRegex$1 : abiParameterWithoutTupleRegex$1,
      param
    );
    if (!match)
      throw new BaseError$1("Invalid ABI parameter.", {
        details: param
      });
    if (match.name && isSolidityKeyword$1(match.name))
      throw new BaseError$1("Invalid ABI parameter.", {
        details: param,
        metaMessages: [
          `"${match.name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
        ]
      });
    const name2 = match.name ? { name: match.name } : {};
    const indexed = match.modifier === "indexed" ? { indexed: true } : {};
    const structs = options?.structs ?? {};
    let type;
    let components = {};
    if (isTuple) {
      type = "tuple";
      const params = splitParameters$1(match.type);
      const components_ = [];
      const length = params.length;
      for (let i = 0; i < length; i++) {
        components_.push(parseAbiParameter$1(params[i], { structs }));
      }
      components = { components: components_ };
    } else if (match.type in structs) {
      type = "tuple";
      components = { components: structs[match.type] };
    } else if (dynamicIntegerRegex$1.test(match.type)) {
      type = `${match.type}256`;
    } else {
      type = match.type;
      if (!(options?.type === "struct") && !isSolidityType$1(type))
        throw new BaseError$1("Unknown type.", {
          metaMessages: [`Type "${type}" is not a valid ABI type.`]
        });
    }
    if (match.modifier) {
      if (!options?.modifiers?.has?.(match.modifier))
        throw new BaseError$1("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`
          ]
        });
      if (functionModifiers$1.has(match.modifier) && !isValidDataLocation$1(type, !!match.array))
        throw new BaseError$1("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`,
            `Data location can only be specified for array, struct, or mapping types, but "${match.modifier}" was given.`
          ]
        });
    }
    const abiParameter = {
      type: `${type}${match.array ?? ""}`,
      ...name2,
      ...indexed,
      ...components
    };
    parameterCache$1.set(parameterCacheKey, abiParameter);
    return abiParameter;
  }
  function splitParameters$1(params, result = [], current = "", depth = 0) {
    if (params === "") {
      if (current === "")
        return result;
      if (depth !== 0)
        throw new BaseError$1("Unbalanced parentheses.", {
          metaMessages: [
            `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
          ],
          details: `Depth "${depth}"`
        });
      return [...result, current.trim()];
    }
    const length = params.length;
    for (let i = 0; i < length; i++) {
      const char = params[i];
      const tail = params.slice(i + 1);
      switch (char) {
        case ",":
          return depth === 0 ? splitParameters$1(tail, [...result, current.trim()]) : splitParameters$1(tail, result, `${current}${char}`, depth);
        case "(":
          return splitParameters$1(tail, result, `${current}${char}`, depth + 1);
        case ")":
          return splitParameters$1(tail, result, `${current}${char}`, depth - 1);
        default:
          return splitParameters$1(tail, result, `${current}${char}`, depth);
      }
    }
    return [];
  }
  function isSolidityType$1(type) {
    return type === "address" || type === "bool" || type === "function" || type === "string" || bytesRegex$1.test(type) || integerRegex$1.test(type);
  }
  var protectedKeywordsRegex$1 = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
  function isSolidityKeyword$1(name2) {
    return name2 === "address" || name2 === "bool" || name2 === "function" || name2 === "string" || name2 === "tuple" || bytesRegex$1.test(name2) || integerRegex$1.test(name2) || protectedKeywordsRegex$1.test(name2);
  }
  function isValidDataLocation$1(type, isArray) {
    return isArray || type === "bytes" || type === "string" || type === "tuple";
  }

  // src/human-readable/runtime/structs.ts
  function parseStructs$1(signatures) {
    const shallowStructs = {};
    const signaturesLength = signatures.length;
    for (let i = 0; i < signaturesLength; i++) {
      const signature = signatures[i];
      if (!isStructSignature$1(signature))
        continue;
      const match = execStructSignature$1(signature);
      if (!match)
        throw new BaseError$1("Invalid struct signature.", {
          details: signature
        });
      const properties = match.properties.split(";");
      const components = [];
      const propertiesLength = properties.length;
      for (let k = 0; k < propertiesLength; k++) {
        const property = properties[k];
        const trimmed = property.trim();
        if (!trimmed)
          continue;
        const abiParameter = parseAbiParameter$1(trimmed, {
          type: "struct"
        });
        components.push(abiParameter);
      }
      if (!components.length)
        throw new BaseError$1("Invalid struct signature.", {
          details: signature,
          metaMessages: ["No properties exist."]
        });
      shallowStructs[match.name] = components;
    }
    const resolvedStructs = {};
    const entries = Object.entries(shallowStructs);
    const entriesLength = entries.length;
    for (let i = 0; i < entriesLength; i++) {
      const [name2, parameters] = entries[i];
      resolvedStructs[name2] = resolveStructs$1(parameters, shallowStructs);
    }
    return resolvedStructs;
  }
  var typeWithoutTupleRegex$1 = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?$/;
  function resolveStructs$1(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
    const components = [];
    const length = abiParameters.length;
    for (let i = 0; i < length; i++) {
      const abiParameter = abiParameters[i];
      const isTuple = isTupleRegex$1.test(abiParameter.type);
      if (isTuple)
        components.push(abiParameter);
      else {
        const match = execTyped$1(
          typeWithoutTupleRegex$1,
          abiParameter.type
        );
        if (!match?.type)
          throw new BaseError$1("Invalid ABI parameter.", {
            details: JSON.stringify(abiParameter, null, 2),
            metaMessages: ["ABI parameter type is invalid."]
          });
        const { array, type } = match;
        if (type in structs) {
          if (ancestors.has(type))
            throw new BaseError$1("Circular reference detected.", {
              metaMessages: [`Struct "${type}" is a circular reference.`]
            });
          components.push({
            ...abiParameter,
            type: `tuple${array ?? ""}`,
            components: resolveStructs$1(
              structs[type] ?? [],
              structs,
              /* @__PURE__ */ new Set([...ancestors, type])
            )
          });
        } else {
          if (isSolidityType$1(type))
            components.push(abiParameter);
          else
            throw new BaseError$1("Unknown type.", {
              metaMessages: [
                `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
              ]
            });
        }
      }
    }
    return components;
  }

  // src/human-readable/parseAbiParameter.ts
  function parseAbiParameter2$1(param) {
    let abiParameter;
    if (typeof param === "string")
      abiParameter = parseAbiParameter$1(param, {
        modifiers: modifiers$1
      });
    else {
      const structs = parseStructs$1(param);
      const length = param.length;
      for (let i = 0; i < length; i++) {
        const signature = param[i];
        if (isStructSignature$1(signature))
          continue;
        abiParameter = parseAbiParameter$1(signature, { modifiers: modifiers$1, structs });
        break;
      }
    }
    if (!abiParameter)
      throw new BaseError$1("Failed to parse ABI parameter.", {
        details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,
        docsPath: "/api/human.html#parseabiparameter-1"
      });
    return abiParameter;
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const WORD_SIZE$1 = 32;
  function convertExternalAbiParameter$1(abiParam) {
      var _a, _b;
      return Object.assign(Object.assign({}, abiParam), { name: (_a = abiParam.name) !== null && _a !== void 0 ? _a : '', components: (_b = abiParam.components) === null || _b === void 0 ? void 0 : _b.map(c => convertExternalAbiParameter$1(c)) });
  }
  function isAbiParameter$1(param) {
      return (!isNullish(param) &&
          typeof param === 'object' &&
          !isNullish(param.type) &&
          typeof param.type === 'string');
  }
  function toAbiParams$1(abi) {
      return abi.map(input => {
          var _a;
          if (isAbiParameter$1(input)) {
              return input;
          }
          if (typeof input === 'string') {
              return convertExternalAbiParameter$1(parseAbiParameter2$1(input.replace(/tuple/, '')));
          }
          if (isSimplifiedStructFormat$1(input)) {
              const structName = Object.keys(input)[0];
              const structInfo = mapStructNameAndType$1(structName);
              structInfo.name = (_a = structInfo.name) !== null && _a !== void 0 ? _a : '';
              return Object.assign(Object.assign({}, structInfo), { components: mapStructToCoderFormat$1(input[structName]) });
          }
          throw new AbiError('Invalid abi');
      });
  }
  function extractArrayType$1(param) {
      const arrayParenthesisStart = param.type.lastIndexOf('[');
      const arrayParamType = param.type.substring(0, arrayParenthesisStart);
      const sizeString = param.type.substring(arrayParenthesisStart);
      let size = -1;
      if (sizeString !== '[]') {
          size = Number(sizeString.slice(1, -1));
          // eslint-disable-next-line no-restricted-globals
          if (isNaN(size)) {
              throw new AbiError('Invalid fixed array size', { size: sizeString });
          }
      }
      return {
          param: { type: arrayParamType, name: '', components: param.components },
          size,
      };
  }
  /**
   * Param is dynamic if it's dynamic base type or if some of his children (components, array items)
   * is of dynamic type
   * @param param
   */
  function isDynamic$1(param) {
      var _a, _b;
      if (param.type === 'string' || param.type === 'bytes' || param.type.endsWith('[]'))
          return true;
      if (param.type === 'tuple') {
          return (_b = (_a = param.components) === null || _a === void 0 ? void 0 : _a.some(isDynamic$1)) !== null && _b !== void 0 ? _b : false;
      }
      if (param.type.endsWith(']')) {
          return isDynamic$1(extractArrayType$1(param).param);
      }
      return false;
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const ADDRESS_BYTES_COUNT$1 = 20;
  const ADDRESS_OFFSET$1 = WORD_SIZE$1 - ADDRESS_BYTES_COUNT$1;
  function decodeAddress$1(_param, bytes) {
      const addressBytes = bytes.subarray(ADDRESS_OFFSET$1, WORD_SIZE$1);
      if (addressBytes.length !== ADDRESS_BYTES_COUNT$1) {
          throw new AbiError('Invalid decoding input, not enough bytes to decode address', { bytes });
      }
      const result = uint8ArrayToHexString$1(addressBytes);
      // should we check is decoded value is valid address?
      // if(!isAddress(result)) {
      //     throw new AbiError("encoded data is not valid address", {
      //         address: result,
      //     });
      // }
      return {
          result: toChecksumAddress(result),
          encoded: bytes.subarray(WORD_SIZE$1),
          consumed: WORD_SIZE$1,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /*
   * this variable contains the precalculated limits for all the numbers for uint and int types
   */
  const numberLimits$1 = new Map();
  let base$1 = BigInt(256); // 2 ^ 8 = 256
  for (let i = 8; i <= 256; i += 8) {
      numberLimits$1.set(`uint${i}`, {
          min: BigInt(0),
          max: base$1 - BigInt(1),
      });
      numberLimits$1.set(`int${i}`, {
          min: -base$1 / BigInt(2),
          max: base$1 / BigInt(2) - BigInt(1),
      });
      base$1 *= BigInt(256);
  }
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  numberLimits$1.set(`int`, numberLimits$1.get('int256'));
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  numberLimits$1.set(`uint`, numberLimits$1.get('uint256'));

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // eslint-disable-next-line no-bitwise
  const mask$1 = BigInt(1) << BigInt(256);
  function uint8ArrayToBigInt$1(value, max) {
      const hexValue = uint8ArrayToHexString$1(value);
      const result = BigInt(hexValue);
      if (result <= max)
          return result;
      return result - mask$1;
  }
  function decodeNumber$1(param, bytes) {
      if (bytes.length < WORD_SIZE$1) {
          throw new AbiError('Not enough bytes left to decode', { param, bytesLeft: bytes.length });
      }
      const boolBytes = bytes.subarray(0, WORD_SIZE$1);
      const limit = numberLimits$1.get(param.type);
      if (!limit) {
          throw new AbiError('provided abi contains invalid number datatype', { type: param.type });
      }
      const numberResult = uint8ArrayToBigInt$1(boolBytes, limit.max);
      if (numberResult < limit.min) {
          throw new AbiError('decoded value is less then minimum for given type', {
              type: param.type,
              value: numberResult,
              name: param.name,
              minimum: limit.min.toString(),
          });
      }
      if (numberResult > limit.max) {
          throw new AbiError('decoded value is greater then maximum for given type', {
              type: param.type,
              value: numberResult,
              name: param.name,
              maximum: limit.max.toString(),
          });
      }
      return {
          result: numberResult,
          encoded: bytes.subarray(WORD_SIZE$1),
          consumed: WORD_SIZE$1,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function decodeBool$1(_param, bytes) {
      const numberResult = decodeNumber$1({ type: 'uint8', name: '' }, bytes);
      if (numberResult.result > 1 || numberResult.result < 0) {
          throw new AbiError('Invalid boolean value encoded', {
              boolBytes: bytes.subarray(0, WORD_SIZE$1),
              numberResult,
          });
      }
      return {
          result: numberResult.result === BigInt(1),
          encoded: numberResult.encoded,
          consumed: WORD_SIZE$1,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function decodeBytes$1(param, bytes) {
      const [, sizeString] = param.type.split('bytes');
      let size = Number(sizeString);
      let remainingBytes = bytes;
      let partsCount = 1;
      let consumed = 0;
      if (!size) {
          // dynamic bytes
          const result = decodeNumber$1({ type: 'uint32', name: '' }, remainingBytes);
          size = Number(result.result);
          consumed += result.consumed;
          remainingBytes = result.encoded;
          partsCount = Math.ceil(size / WORD_SIZE$1);
      }
      if (size > bytes.length) {
          throw new AbiError('there is not enough data to decode', {
              type: param.type,
              encoded: bytes,
              size,
          });
      }
      return {
          result: bytesToHex$1(remainingBytes.subarray(0, size)),
          encoded: remainingBytes.subarray(partsCount * WORD_SIZE$1),
          consumed: consumed + partsCount * WORD_SIZE$1,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function decodeString$1(_param, bytes) {
      const r = decodeBytes$1({ type: 'bytes'}, bytes);
      return {
          result: hexToUtf8(r.result),
          encoded: r.encoded,
          consumed: r.consumed,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function decodeArray$1(param, bytes) {
      // eslint-disable-next-line prefer-const
      let { size, param: arrayItemParam } = extractArrayType$1(param);
      const dynamic = size === -1;
      let consumed = 0;
      const result = [];
      let remaining = bytes;
      // dynamic array, we need to decode length
      if (dynamic) {
          const lengthResult = decodeNumber$1({ type: 'uint32', name: '' }, bytes);
          size = Number(lengthResult.result);
          consumed = lengthResult.consumed;
          remaining = lengthResult.encoded;
      }
      const hasDynamicChild = isDynamic$1(arrayItemParam);
      if (hasDynamicChild) {
          // known length but dynamic child, each child is actually head element with encoded offset
          for (let i = 0; i < size; i += 1) {
              const offsetResult = decodeNumber$1({ type: 'uint32', name: '' }, remaining.subarray(i * WORD_SIZE$1));
              consumed += offsetResult.consumed;
              const decodedChildResult = decodeParamFromAbiParameter$1(arrayItemParam, remaining.subarray(Number(offsetResult.result)));
              consumed += decodedChildResult.consumed;
              result.push(decodedChildResult.result);
          }
          return {
              result,
              encoded: remaining.subarray(consumed),
              consumed,
          };
      }
      for (let i = 0; i < size; i += 1) {
          // decode static params
          const decodedChildResult = decodeParamFromAbiParameter$1(arrayItemParam, bytes.subarray(consumed));
          consumed += decodedChildResult.consumed;
          result.push(decodedChildResult.result);
      }
      return {
          result,
          encoded: bytes.subarray(consumed),
          consumed,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function decodeParamFromAbiParameter$1(param, bytes) {
      if (param.type === 'string') {
          return decodeString$1(param, bytes);
      }
      if (param.type === 'bool') {
          return decodeBool$1(param, bytes);
      }
      if (param.type === 'address') {
          return decodeAddress$1(param, bytes);
      }
      if (param.type === 'tuple') {
          return decodeTuple$1(param, bytes);
      }
      if (param.type.endsWith(']')) {
          return decodeArray$1(param, bytes);
      }
      if (param.type.startsWith('bytes')) {
          return decodeBytes$1(param, bytes);
      }
      if (param.type.startsWith('uint') || param.type.startsWith('int')) {
          return decodeNumber$1(param, bytes);
      }
      throw new AbiError('Unsupported', {
          param,
          bytes,
      });
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function decodeTuple$1(param, bytes) {
      const result = {
          __length__: 0,
      };
      // tracks how much static params consumed bytes
      let consumed = 0;
      if (!param.components) {
          return {
              result,
              encoded: bytes,
              consumed,
          };
      }
      // track how much dynamic params consumed bytes
      let dynamicConsumed = 0;
      for (const [index, childParam] of param.components.entries()) {
          let decodedResult;
          if (isDynamic$1(childParam)) {
              // if dynamic, we will have offset encoded
              const offsetResult = decodeNumber$1({ type: 'uint32', name: '' }, bytes.subarray(consumed));
              // offset counts from start of original byte sequence
              decodedResult = decodeParamFromAbiParameter$1(childParam, bytes.subarray(Number(offsetResult.result)));
              consumed += offsetResult.consumed;
              dynamicConsumed += decodedResult.consumed;
          }
          else {
              // static param, just decode
              decodedResult = decodeParamFromAbiParameter$1(childParam, bytes.subarray(consumed));
              consumed += decodedResult.consumed;
          }
          result.__length__ += 1;
          result[index] = decodedResult.result;
          if (childParam.name && childParam.name !== '') {
              result[childParam.name] = decodedResult.result;
          }
      }
      return {
          encoded: bytes.subarray(consumed + dynamicConsumed),
          result,
          consumed: consumed + dynamicConsumed,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function decodeParameters$3(abis, bytes, _loose) {
      const abiParams = toAbiParams$1(abis);
      const bytesArray = hexToUint8Array$1(bytes);
      return decodeTuple$1({ components: abiParams }, bytesArray).result;
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   *
   *  @module ABI
   */
  /**
   * Should be used to decode list of params
   */
  const decodeParametersWith$1 = (abis, bytes, loose) => {
      try {
          if (abis.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {
              throw new AbiError("Returned values aren't valid, did it run Out of Gas? " +
                  'You might also see this error if you are not using the ' +
                  'correct ABI for the contract you are retrieving data from, ' +
                  'requesting data from a block number that does not exist, ' +
                  'or querying a node which is not fully synced.');
          }
          return decodeParameters$3(abis, `0x${bytes.replace(/0x/i, '')}`, loose);
      }
      catch (err) {
          throw new AbiError(`Parameter decoding error: ${err.message}`, {
              internalErr: err,
          });
      }
  };
  /**
   * Should be used to decode list of params
   */
  /**
   * Decodes ABI encoded parameters to its JavaScript types.
   * @param abi -  An array of {@link AbiInput}. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
   * @param bytes - The ABI byte code to decode
   * @returns - The result object containing the decoded parameters.
   * @example
   * ```ts
   * let res = web3.eth.abi.decodeParameters(
   *    ["string", "uint256"],
   *    "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
   *  );
   *  console.log(res);
   *  > { '0': 'Hello!%!', '1': 234n, __length__: 2 }
   *
   * let res = web3.eth.abi.decodeParameters(
   *    [
   *      {
   *        type: "string",
   *        name: "myString",
   *      },
   *      {
   *        type: "uint256",
   *        name: "myNumber",
   *      },
   *    ],
   *    "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
   *  );
   * console.log(res);
   *  > {
   *  '0': 'Hello!%!',
   *  '1': 234n,
   *  __length__: 2,
   *  myString: 'Hello!%!',
   *  myNumber: 234n
   * }
   *
   * const res = web3.eth.abi.decodeParameters(
   *    [
   *      "uint8[]",
   *      {
   *        ParentStruct: {
   *          propertyOne: "uint256",
   *          propertyTwo: "uint256",
   *          childStruct: {
   *            propertyOne: "uint256",
   *            propertyTwo: "uint256",
   *          },
   *        },
   *      },
   *    ],
   *    "0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000018"
   *  );
   *  console.log(res);
   *  >
   *  '0': [ 42n, 24n ],
   *  '1': {
   *    '0': 42n,
   *    '1': 56n,
   *    '2': {
   *      '0': 45n,
   *      '1': 78n,
   *      __length__: 2,
   *      propertyOne: 45n,
   *      propertyTwo: 78n
   *    },
   *    __length__: 3,
   *    propertyOne: 42n,
   *    propertyTwo: 56n,
   *    childStruct: {
   *      '0': 45n,
   *      '1': 78n,
   *      __length__: 2,
   *      propertyOne: 45n,
   *      propertyTwo: 78n
   *    }
   *  },
   *  __length__: 2,
   *  ParentStruct: {
   *    '0': 42n,
   *    '1': 56n,
   *    '2': {
   *      '0': 45n,
   *      '1': 78n,
   *      __length__: 2,
   *      propertyOne: 45n,
   *      propertyTwo: 78n
   *    },
   *    __length__: 3,
   *    propertyOne: 42n,
   *    propertyTwo: 56n,
   *    childStruct: {
   *      '0': 45n,
   *      '1': 78n,
   *      __length__: 2,
   *      propertyOne: 45n,
   *      propertyTwo: 78n
   *    }
   *  }
   *}
   * ```
   */
  const decodeParameters$2 = (abi, bytes) => decodeParametersWith$1(abi, bytes, false);
  /**
   * Should be used to decode bytes to plain param
   */
  /**
   * Decodes an ABI encoded parameter to its JavaScript type.
   * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
   * @param bytes - The ABI byte code to decode
   * @returns - The decoded parameter
   * @example
   * ```ts
   *   const res = web3.eth.abi.decodeParameter(
   *    "uint256",
   *    "0x0000000000000000000000000000000000000000000000000000000000000010"
   *  );
   *  console.log(res);
   * > 16n
   *
   *  const res = web3.eth.abi.decodeParameter(
   *    "string",
   *    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
   *  );
   *
   *  console.log(res);
   *  > Hello!%!
   *
   *  const res = web3.eth.abi.decodeParameter(
   *    {
   *      ParentStruct: {
   *        propertyOne: "uint256",
   *        propertyTwo: "uint256",
   *        childStruct: {
   *          propertyOne: "uint256",
   *          propertyTwo: "uint256",
   *        },
   *      },
   *    },
   *    "0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e"
   *  );
   *
   *  console.log(res);
   *   {
   *  '0': 42n,
   *  '1': 56n,
   *  '2': {
   *    '0': 45n,
   *    '1': 78n,
   *    __length__: 2,
   *    propertyOne: 45n,
   *    propertyTwo: 78n
   *  },
   *  __length__: 3,
   *  propertyOne: 42n,
   *  propertyTwo: 56n,
   *  childStruct: {
   *    '0': 45n,
   *    '1': 78n,
   *    __length__: 2,
   *    propertyOne: 45n,
   *    propertyTwo: 78n
   *  }
   *}
   * ```
   */
  const decodeParameter$1 = (abi, bytes) => decodeParameters$2([abi], bytes)['0'];

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const STATIC_TYPES$1 = ['bool', 'string', 'int', 'uint', 'address', 'fixed', 'ufixed'];
  const _decodeParameter$1 = (inputType, clonedTopic) => inputType === 'string' ? clonedTopic : decodeParameter$1(inputType, clonedTopic);
  /**
   * Decodes ABI-encoded log data and indexed topic data.
   * @param inputs - A {@link AbiParameter} input array. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
   * @param data - The ABI byte code in the `data` field of a log.
   * @param topics - An array with the index parameter topics of the log, without the topic[0] if its a non-anonymous event, otherwise with topic[0]
   * @returns - The result object containing the decoded parameters.
   *
   * @example
   * ```ts
   * let res = web3.eth.abi.decodeLog(
   *    [
   *      {
   *        type: "string",
   *        name: "myString",
   *      },
   *      {
   *        type: "uint256",
   *        name: "myNumber",
   *        indexed: true,
   *      },
   *      {
   *        type: "uint8",
   *        name: "mySmallNumber",
   *        indexed: true,
   *      },
   *    ],
   *    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000",
   *    [
   *      "0x000000000000000000000000000000000000000000000000000000000000f310",
   *      "0x0000000000000000000000000000000000000000000000000000000000000010",
   *    ]
   *  );
   * > {
   *  '0': 'Hello%!',
   *  '1': 62224n,
   *  '2': 16n,
   *  __length__: 3,
   *  myString: 'Hello%!',
   *  myNumber: 62224n,
   *  mySmallNumber: 16n
   * }
   * ```
   */
  const decodeLog$1 = (inputs, data, topics) => {
      const clonedTopics = Array.isArray(topics) ? topics : [topics];
      const indexedInputs = {};
      const nonIndexedInputs = {};
      for (const [i, input] of inputs.entries()) {
          if (input.indexed) {
              indexedInputs[i] = input;
          }
          else {
              nonIndexedInputs[i] = input;
          }
      }
      const decodedNonIndexedInputs = data
          ? decodeParametersWith$1(Object.values(nonIndexedInputs), data, true)
          : { __length__: 0 };
      // If topics are more than indexed inputs, that means first topic is the event signature
      const offset = clonedTopics.length - Object.keys(indexedInputs).length;
      const decodedIndexedInputs = Object.values(indexedInputs).map((input, index) => STATIC_TYPES$1.some(s => input.type.startsWith(s))
          ? _decodeParameter$1(input.type, clonedTopics[index + offset])
          : clonedTopics[index + offset]);
      const returnValues = { __length__: 0 };
      let indexedCounter = 0;
      let nonIndexedCounter = 0;
      for (const [i, res] of inputs.entries()) {
          returnValues[i] = res.type === 'string' ? '' : undefined;
          if (indexedInputs[i]) {
              returnValues[i] = decodedIndexedInputs[indexedCounter];
              indexedCounter += 1;
          }
          if (nonIndexedInputs[i]) {
              returnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];
              nonIndexedCounter += 1;
          }
          if (res.name) {
              returnValues[res.name] = returnValues[i];
          }
          returnValues.__length__ += 1;
      }
      return returnValues;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const decodeContractErrorData$1 = (errorsAbi, error) => {
      if (error === null || error === void 0 ? void 0 : error.data) {
          let errorName;
          let errorSignature;
          let errorArgs;
          try {
              const errorSha = error.data.slice(0, 10);
              const errorAbi = errorsAbi.find(abi => encodeErrorSignature$1(abi).startsWith(errorSha));
              if (errorAbi === null || errorAbi === void 0 ? void 0 : errorAbi.inputs) {
                  errorName = errorAbi.name;
                  errorSignature = jsonInterfaceMethodToString$1(errorAbi);
                  // decode abi.inputs according to EIP-838
                  errorArgs = decodeParameters$2([...errorAbi.inputs], error.data.substring(10));
              }
              else if (error.data.startsWith('0x08c379a0')) {
                  // If ABI was not provided, check for the 2 famous errors: 'Error(string)' or 'Panic(uint256)'
                  errorName = 'Error';
                  errorSignature = 'Error(string)';
                  // decode abi.inputs according to EIP-838
                  errorArgs = decodeParameters$2([
                      {
                          name: 'message',
                          type: 'string',
                      },
                  ], error.data.substring(10));
              }
              else if (error.data.startsWith('0x4e487b71')) {
                  errorName = 'Panic';
                  errorSignature = 'Panic(uint256)';
                  // decode abi.inputs according to EIP-838
                  errorArgs = decodeParameters$2([
                      {
                          name: 'code',
                          type: 'uint256',
                      },
                  ], error.data.substring(10));
              }
              else {
                  console.error('No matching error abi found for error data', error.data);
              }
          }
          catch (err) {
              console.error(err);
          }
          if (errorName) {
              error.setDecodedProperties(errorName, errorSignature, errorArgs);
          }
      }
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$k = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const parseTransactionError = (error, contractAbi) => {
      var _a, _b, _c, _d, _e;
      if (error instanceof ContractExecutionError && error.cause instanceof Eip838ExecutionError) {
          if (contractAbi !== undefined) {
              const errorsAbi = contractAbi.filter(abi => isAbiErrorFragment$1(abi));
              decodeContractErrorData$1(errorsAbi, error.cause);
              return {
                  reason: error.cause.message,
                  signature: (_a = error.cause.data) === null || _a === void 0 ? void 0 : _a.slice(0, 10),
                  data: (_b = error.cause.data) === null || _b === void 0 ? void 0 : _b.substring(10),
                  customErrorName: error.cause.errorName,
                  customErrorDecodedSignature: error.cause.errorSignature,
                  customErrorArguments: error.cause.errorArgs,
              };
          }
          return {
              reason: error.cause.message,
              signature: (_c = error.cause.data) === null || _c === void 0 ? void 0 : _c.slice(0, 10),
              data: (_d = error.cause.data) === null || _d === void 0 ? void 0 : _d.substring(10),
          };
      }
      if (error instanceof InvalidResponseError &&
          !Array.isArray((_e = error.cause) === null || _e === void 0 ? void 0 : _e.errors) &&
          error.cause !== undefined) {
          return error.cause.message;
      }
      throw error;
  };
  /**
   *	Returns the revert reason generated by the EVM if the transaction were to be executed.
   *
   * @param web3Context - ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.
   * @returns `undefined` if no revert reason was given, a revert reason object, a revert reason string, or an `unknown` error
   */
  function getRevertReason(web3Context_1, transaction_1, contractAbi_1) {
      return __awaiter$k(this, arguments, void 0, function* (web3Context, transaction, contractAbi, returnFormat = web3Context.defaultReturnFormat) {
          try {
              yield call(web3Context, transaction, web3Context.defaultBlock, returnFormat);
              return undefined;
          }
          catch (error) {
              return parseTransactionError(error, contractAbi);
          }
      });
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$j = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function getTransactionError(web3Context, transactionFormatted, transactionReceiptFormatted, receivedError, contractAbi, knownReason) {
      return __awaiter$j(this, void 0, void 0, function* () {
          let _reason = knownReason;
          if (_reason === undefined) {
              if (web3Context.handleRevert && transactionFormatted !== undefined) {
                  _reason = yield getRevertReason(web3Context, transactionFormatted, contractAbi);
              }
          }
          let error;
          if (_reason === undefined) {
              error = new TransactionRevertedWithoutReasonError(transactionReceiptFormatted);
          }
          else if (typeof _reason === 'string') {
              error = new TransactionRevertInstructionError(_reason, undefined, transactionReceiptFormatted);
          }
          else if (_reason.customErrorName !== undefined &&
              _reason.customErrorDecodedSignature !== undefined &&
              _reason.customErrorArguments !== undefined) {
              const reasonWithCustomError = _reason;
              error = new TransactionRevertWithCustomError(reasonWithCustomError.reason, reasonWithCustomError.customErrorName, reasonWithCustomError.customErrorDecodedSignature, reasonWithCustomError.customErrorArguments, reasonWithCustomError.signature, transactionReceiptFormatted, reasonWithCustomError.data);
          }
          else {
              error = new TransactionRevertInstructionError(_reason.reason, _reason.signature, transactionReceiptFormatted, _reason.data);
          }
          return error;
      });
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const decodeEventABI = (event, data, jsonInterface, returnFormat = DEFAULT_RETURN_FORMAT) => {
      var _a, _b, _c, _d, _e, _f;
      let modifiedEvent = Object.assign({}, event);
      const result = format(logSchema, data, returnFormat);
      // if allEvents get the right event
      if ([ALL_EVENTS, 'allEvents'].includes(modifiedEvent.name)) {
          const matchedEvent = jsonInterface.find(j => j.signature === data.topics[0]);
          if (matchedEvent) {
              modifiedEvent = matchedEvent;
          }
          else {
              modifiedEvent = { anonymous: true };
          }
      }
      // create empty inputs if none are present (e.g. anonymous events on allEvents)
      modifiedEvent.inputs = (_b = (_a = modifiedEvent.inputs) !== null && _a !== void 0 ? _a : event.inputs) !== null && _b !== void 0 ? _b : [];
      // Handle case where an event signature shadows the current ABI with non-identical
      // arg indexing. If # of topics doesn't match, event is anon.
      if (!modifiedEvent.anonymous) {
          let indexedInputs = 0;
          ((_c = modifiedEvent.inputs) !== null && _c !== void 0 ? _c : []).forEach(input => {
              if (input.indexed) {
                  indexedInputs += 1;
              }
          });
          if (indexedInputs > 0 && (data === null || data === void 0 ? void 0 : data.topics) && (data === null || data === void 0 ? void 0 : data.topics.length) !== indexedInputs + 1) {
              // checks if event is anonymous
              modifiedEvent = Object.assign(Object.assign({}, modifiedEvent), { anonymous: true, inputs: [] });
          }
      }
      const argTopics = modifiedEvent.anonymous ? data.topics : ((_d = data.topics) !== null && _d !== void 0 ? _d : []).slice(1);
      return Object.assign(Object.assign({}, result), { returnValues: decodeLog$1([...((_e = modifiedEvent.inputs) !== null && _e !== void 0 ? _e : [])], data.data, argTopics), event: modifiedEvent.name, signature: !modifiedEvent.anonymous && ((_f = data.topics) === null || _f === void 0 ? void 0 : _f.length) > 0 && data.topics[0]
              ? data.topics[0]
              : undefined, raw: {
              data: data.data,
              topics: data.topics,
          } });
  };

  var __awaiter$i = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class SendTxHelper {
      constructor({ options, web3Context, promiEvent, returnFormat, }) {
          this.options = {
              checkRevertBeforeSending: true,
          };
          this.options = options;
          this.web3Context = web3Context;
          this.promiEvent = promiEvent;
          this.returnFormat = returnFormat;
      }
      getReceiptWithEvents(data) {
          var _a, _b;
          const result = Object.assign({}, (data !== null && data !== void 0 ? data : {}));
          if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi) && result.logs && result.logs.length > 0) {
              result.events = {};
              for (const log of result.logs) {
                  const event = decodeEventABI(ALL_EVENTS_ABI, log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);
                  if (event.event) {
                      result.events[event.event] = event;
                  }
              }
          }
          return result;
      }
      checkRevertBeforeSending(tx) {
          return __awaiter$i(this, void 0, void 0, function* () {
              if (this.options.checkRevertBeforeSending !== false) {
                  let formatTx = tx;
                  if (isNullish$1(tx.data) && isNullish$1(tx.input) && isNullish$1(tx.gas)) {
                      // eth.call runs into error if data isnt filled and gas is not defined, its a simple transaction so we fill it with 21000
                      formatTx = Object.assign(Object.assign({}, tx), { gas: 21000 });
                  }
                  const reason = yield getRevertReason(this.web3Context, formatTx, this.options.contractAbi);
                  if (reason !== undefined) {
                      throw yield getTransactionError(this.web3Context, tx, undefined, undefined, this.options.contractAbi, reason);
                  }
              }
          });
      }
      emitSending(tx) {
          if (this.promiEvent.listenerCount('sending') > 0) {
              this.promiEvent.emit('sending', tx);
          }
      }
      populateGasPrice(_a) {
          return __awaiter$i(this, arguments, void 0, function* ({ transactionFormatted, transaction, }) {
              var _b;
              let result = transactionFormatted;
              if (!this.web3Context.config.ignoreGasPricing &&
                  !((_b = this.options) === null || _b === void 0 ? void 0 : _b.ignoreGasPricing) &&
                  isNullish$1(transactionFormatted.gasPrice) &&
                  (isNullish$1(transaction.maxPriorityFeePerGas) ||
                      isNullish$1(transaction.maxFeePerGas))) {
                  result = Object.assign(Object.assign({}, transactionFormatted), (yield getTransactionGasPricing(transactionFormatted, this.web3Context, ETH_DATA_FORMAT)));
              }
              return result;
          });
      }
      signAndSend(_a) {
          return __awaiter$i(this, arguments, void 0, function* ({ wallet, tx, }) {
              if (wallet) {
                  const signedTransaction = yield wallet.signTransaction(tx);
                  return trySendTransaction(this.web3Context, () => __awaiter$i(this, void 0, void 0, function* () {
                      return sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);
                  }), signedTransaction.transactionHash);
              }
              return trySendTransaction(this.web3Context, () => __awaiter$i(this, void 0, void 0, function* () {
                  return sendTransaction$3(this.web3Context.requestManager, tx);
              }));
          });
      }
      emitSent(tx) {
          if (this.promiEvent.listenerCount('sent') > 0) {
              this.promiEvent.emit('sent', tx);
          }
      }
      emitTransactionHash(hash) {
          if (this.promiEvent.listenerCount('transactionHash') > 0) {
              this.promiEvent.emit('transactionHash', hash);
          }
      }
      emitReceipt(receipt) {
          if (this.promiEvent.listenerCount('receipt') > 0) {
              this.promiEvent.emit('receipt', 
              // @ts-expect-error unknown type fix
              receipt);
          }
      }
      handleError(_a) {
          return __awaiter$i(this, arguments, void 0, function* ({ error, tx }) {
              var _b;
              let _error = error;
              if (_error instanceof ContractExecutionError && this.web3Context.handleRevert) {
                  _error = yield getTransactionError(this.web3Context, tx, undefined, undefined, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi);
              }
              if ((_error instanceof InvalidResponseError ||
                  _error instanceof ContractExecutionError ||
                  _error instanceof TransactionRevertWithCustomError ||
                  _error instanceof TransactionRevertedWithoutReasonError ||
                  _error instanceof TransactionRevertInstructionError ||
                  _error instanceof TransactionPollingTimeoutError) &&
                  this.promiEvent.listenerCount('error') > 0) {
                  this.promiEvent.emit('error', _error);
              }
              return _error;
          });
      }
      emitConfirmation({ receipt, transactionHash, customTransactionReceiptSchema, }) {
          if (this.promiEvent.listenerCount('confirmation') > 0) {
              watchTransactionForConfirmations(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat, customTransactionReceiptSchema);
          }
      }
      handleResolve(_a) {
          return __awaiter$i(this, arguments, void 0, function* ({ receipt, tx }) {
              var _b, _c, _d;
              if ((_b = this.options) === null || _b === void 0 ? void 0 : _b.transactionResolver) {
                  return (_c = this.options) === null || _c === void 0 ? void 0 : _c.transactionResolver(receipt);
              }
              if (receipt.status === BigInt(0)) {
                  const error = yield getTransactionError(this.web3Context, tx, 
                  // @ts-expect-error unknown type fix
                  receipt, undefined, (_d = this.options) === null || _d === void 0 ? void 0 : _d.contractAbi);
                  if (this.promiEvent.listenerCount('error') > 0) {
                      this.promiEvent.emit('error', error);
                  }
                  throw error;
              }
              else {
                  return receipt;
              }
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$h = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var __rest = (undefined && undefined.__rest) || function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  };
  // TODO Add returnFormat parameter
  /**
   * View additional documentations here: {@link Web3Eth.isSyncing}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  const isSyncing = (web3Context) => __awaiter$h(void 0, void 0, void 0, function* () { return getSyncing(web3Context.requestManager); });
  /**
   * View additional documentations here: {@link Web3Eth.getHashRate}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getHashRate(web3Context, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          const response = yield getHashRate$1(web3Context.requestManager);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getGasPrice}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getGasPrice(web3Context, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          const response = yield getGasPrice$1(web3Context.requestManager);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getMaxPriorityFeePerGas(web3Context, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          const response = yield getMaxPriorityFeePerGas$1(web3Context.requestManager);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getBlockNumber}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getBlockNumber(web3Context, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          const response = yield getBlockNumber$1(web3Context.requestManager);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getBalance}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getBalance(web3Context_1, address_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
          const blockNumberFormatted = isBlockTag(blockNumber)
              ? blockNumber
              : format({ format: 'uint' }, blockNumber, ETH_DATA_FORMAT);
          const response = yield getBalance$1(web3Context.requestManager, address, blockNumberFormatted);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getStorageAt}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getStorageAt(web3Context_1, address_1, storageSlot_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {
          const storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);
          const blockNumberFormatted = isBlockTag(blockNumber)
              ? blockNumber
              : format({ format: 'uint' }, blockNumber, ETH_DATA_FORMAT);
          const response = yield getStorageAt$1(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);
          return format({ format: 'bytes' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getCode}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getCode(web3Context_1, address_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
          const blockNumberFormatted = isBlockTag(blockNumber)
              ? blockNumber
              : format({ format: 'uint' }, blockNumber, ETH_DATA_FORMAT);
          const response = yield getCode$1(web3Context.requestManager, address, blockNumberFormatted);
          return format({ format: 'bytes' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getBlock}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getBlock(web3Context_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {
          var _a;
          let response;
          if (isBytes$1(block)) {
              const blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);
              response = yield getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);
          }
          else {
              const blockNumberFormatted = isBlockTag(block)
                  ? block
                  : format({ format: 'uint' }, block, ETH_DATA_FORMAT);
              response = yield getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);
          }
          const res = format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
          if (!isNullish$1(res)) {
              const result = Object.assign(Object.assign({}, res), { transactions: (_a = res.transactions) !== null && _a !== void 0 ? _a : [] });
              return result;
          }
          return res;
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getBlockTransactionCount(web3Context_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, returnFormat) {
          let response;
          if (isBytes$1(block)) {
              const blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);
              response = yield getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);
          }
          else {
              const blockNumberFormatted = isBlockTag(block)
                  ? block
                  : format({ format: 'uint' }, block, ETH_DATA_FORMAT);
              response = yield getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);
          }
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getBlockUncleCount}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getBlockUncleCount(web3Context_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, returnFormat) {
          let response;
          if (isBytes$1(block)) {
              const blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);
              response = yield getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);
          }
          else {
              const blockNumberFormatted = isBlockTag(block)
                  ? block
                  : format({ format: 'uint' }, block, ETH_DATA_FORMAT);
              response = yield getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);
          }
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getUncle}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getUncle(web3Context_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {
          const uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);
          let response;
          if (isBytes$1(block)) {
              const blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);
              response = yield getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);
          }
          else {
              const blockNumberFormatted = isBlockTag(block)
                  ? block
                  : format({ format: 'uint' }, block, ETH_DATA_FORMAT);
              response = yield getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);
          }
          return format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getTransaction}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getTransaction(web3Context_1, transactionHash_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, transactionHash, returnFormat = web3Context.defaultReturnFormat) {
          const transactionHashFormatted = format({ format: 'bytes32' }, transactionHash, DEFAULT_RETURN_FORMAT);
          const response = yield getTransactionByHash(web3Context.requestManager, transactionHashFormatted);
          return isNullish$1(response)
              ? response
              : formatTransaction(response, returnFormat, {
                  transactionSchema: web3Context.config.customTransactionSchema,
                  fillInputAndData: true,
              });
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getPendingTransactions}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getPendingTransactions(web3Context, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          const response = yield getPendingTransactions$1(web3Context.requestManager);
          return response.map(transaction => formatTransaction(transaction, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {
              transactionSchema: web3Context.config.customTransactionSchema,
              fillInputAndData: true,
          }));
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getTransactionFromBlock(web3Context_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {
          const transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);
          let response;
          if (isBytes$1(block)) {
              const blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);
              response = yield getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);
          }
          else {
              const blockNumberFormatted = isBlockTag(block)
                  ? block
                  : format({ format: 'uint' }, block, ETH_DATA_FORMAT);
              response = yield getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);
          }
          return isNullish$1(response)
              ? response
              : formatTransaction(response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {
                  transactionSchema: web3Context.config.customTransactionSchema,
                  fillInputAndData: true,
              });
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getTransactionReceipt}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getTransactionReceipt(web3Context, transactionHash, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          const transactionHashFormatted = format({ format: 'bytes32' }, transactionHash, DEFAULT_RETURN_FORMAT);
          let response;
          try {
              response = yield getTransactionReceipt$1(web3Context.requestManager, transactionHashFormatted);
          }
          catch (error) {
              // geth indexing error, we poll until transactions stopped indexing
              if (typeof error === 'object' &&
                  !isNullish$1(error) &&
                  'message' in error &&
                  error.message === 'transaction indexing is in progress') {
                  console.warn('Transaction indexing is in progress.');
              }
              else {
                  throw error;
              }
          }
          return isNullish$1(response)
              ? response
              : format(transactionReceiptSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getTransactionCount}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getTransactionCount(web3Context_1, address_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
          const blockNumberFormatted = isBlockTag(blockNumber)
              ? blockNumber
              : format({ format: 'uint' }, blockNumber, ETH_DATA_FORMAT);
          const response = yield getTransactionCount$1(web3Context.requestManager, address, blockNumberFormatted);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.sendTransaction}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function sendTransaction$1(web3Context, transactionObj, returnFormat, options = { checkRevertBeforeSending: true }, transactionMiddleware) {
      const promiEvent = new Web3PromiEvent((resolve, reject) => {
          setImmediate(() => {
              (() => __awaiter$h(this, void 0, void 0, function* () {
                  const sendTxHelper = new SendTxHelper({
                      web3Context,
                      promiEvent,
                      options,
                      returnFormat,
                  });
                  let transaction = Object.assign({}, transactionObj);
                  if (!isNullish$1(transactionMiddleware)) {
                      transaction = yield transactionMiddleware.processTransaction(transaction);
                  }
                  let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), { from: getTransactionFromOrToAttr('from', web3Context, transaction), to: getTransactionFromOrToAttr('to', web3Context, transaction) }), ETH_DATA_FORMAT, {
                      transactionSchema: web3Context.config.customTransactionSchema,
                  });
                  try {
                      transactionFormatted = (yield sendTxHelper.populateGasPrice({
                          transaction,
                          transactionFormatted,
                      }));
                      yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);
                      sendTxHelper.emitSending(transactionFormatted);
                      let wallet;
                      if (web3Context.wallet && !isNullish$1(transactionFormatted.from)) {
                          wallet = web3Context.wallet.get(transactionFormatted.from);
                      }
                      const transactionHash = yield sendTxHelper.signAndSend({
                          wallet,
                          tx: transactionFormatted,
                      });
                      const transactionHashFormatted = format({ format: 'bytes32' }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
                      sendTxHelper.emitSent(transactionFormatted);
                      sendTxHelper.emitTransactionHash(transactionHashFormatted);
                      const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
                      const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));
                      sendTxHelper.emitReceipt(transactionReceiptFormatted);
                      resolve(yield sendTxHelper.handleResolve({
                          receipt: transactionReceiptFormatted,
                          tx: transactionFormatted,
                      }));
                      sendTxHelper.emitConfirmation({
                          receipt: transactionReceiptFormatted,
                          transactionHash,
                      });
                  }
                  catch (error) {
                      reject(yield sendTxHelper.handleError({
                          error,
                          tx: transactionFormatted,
                      }));
                  }
              }))();
          });
      });
      return promiEvent;
  }
  /**
   * View additional documentations here: {@link Web3Eth.sendSignedTransaction}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = { checkRevertBeforeSending: true }) {
      // TODO - Promise returned in function argument where a void return was expected
      // eslint-disable-next-line @typescript-eslint/no-misused-promises
      const promiEvent = new Web3PromiEvent((resolve, reject) => {
          setImmediate(() => {
              (() => __awaiter$h(this, void 0, void 0, function* () {
                  const sendTxHelper = new SendTxHelper({
                      web3Context,
                      promiEvent,
                      options,
                      returnFormat,
                  });
                  // Formatting signedTransaction to be send to RPC endpoint
                  const signedTransactionFormattedHex = format({ format: 'bytes' }, signedTransaction, ETH_DATA_FORMAT);
                  const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes$1(signedTransactionFormattedHex)));
                  const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), { 
                      // Some providers will default `from` to address(0) causing the error
                      // reported from `eth_call` to not be the reason the user's tx failed
                      // e.g. `eth_call` will return an Out of Gas error for a failed
                      // smart contract execution contract, because the sender, address(0),
                      // has no balance to pay for the gas of the transaction execution
                      from: unSerializedTransaction.getSenderAddress().toString() });
                  try {
                      const { v, r, s } = unSerializedTransactionWithFrom, txWithoutSigParams = __rest(unSerializedTransactionWithFrom, ["v", "r", "s"]);
                      yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);
                      sendTxHelper.emitSending(signedTransactionFormattedHex);
                      const transactionHash = yield trySendTransaction(web3Context, () => __awaiter$h(this, void 0, void 0, function* () {
                          return sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);
                      }));
                      sendTxHelper.emitSent(signedTransactionFormattedHex);
                      const transactionHashFormatted = format({ format: 'bytes32' }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
                      sendTxHelper.emitTransactionHash(transactionHashFormatted);
                      const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
                      const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));
                      sendTxHelper.emitReceipt(transactionReceiptFormatted);
                      resolve(yield sendTxHelper.handleResolve({
                          receipt: transactionReceiptFormatted,
                          tx: unSerializedTransactionWithFrom,
                      }));
                      sendTxHelper.emitConfirmation({
                          receipt: transactionReceiptFormatted,
                          transactionHash,
                      });
                  }
                  catch (error) {
                      reject(yield sendTxHelper.handleError({
                          error,
                          tx: unSerializedTransactionWithFrom,
                      }));
                  }
              }))();
          });
      });
      return promiEvent;
  }
  /**
   * View additional documentations here: {@link Web3Eth.sign}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function sign$1(web3Context_1, message_1, addressOrIndex_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, message, addressOrIndex, returnFormat = web3Context.defaultReturnFormat) {
          var _a;
          const messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);
          if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {
              const wallet = web3Context.wallet.get(addressOrIndex);
              const signed = wallet.sign(messageFormatted);
              return format(SignatureObjectSchema, signed, returnFormat);
          }
          if (typeof addressOrIndex === 'number') {
              throw new SignatureError(message, 'RPC method "eth_sign" does not support index signatures');
          }
          const response = yield sign$3(web3Context.requestManager, addressOrIndex, messageFormatted);
          return format({ format: 'bytes' }, response, returnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.signTransaction}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function signTransaction$1(web3Context_1, transaction_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, transaction, returnFormat = web3Context.defaultReturnFormat) {
          const response = yield signTransaction$3(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {
              transactionSchema: web3Context.config.customTransactionSchema,
          }));
          // Some clients only return the encoded signed transaction (e.g. Ganache)
          // while clients such as Geth return the desired SignedTransactionInfoAPI object
          return isString(response)
              ? decodeSignedTransaction(response, returnFormat, {
                  fillInputAndData: true,
              })
              : {
                  raw: format({ format: 'bytes' }, response.raw, returnFormat),
                  tx: formatTransaction(response.tx, returnFormat, {
                      transactionSchema: web3Context.config.customTransactionSchema,
                      fillInputAndData: true,
                  }),
              };
      });
  }
  // TODO Decide what to do with transaction.to
  // https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076
  /**
   * View additional documentations here: {@link Web3Eth.call}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function call(web3Context_1, transaction_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat = web3Context.defaultReturnFormat) {
          const blockNumberFormatted = isBlockTag(blockNumber)
              ? blockNumber
              : format({ format: 'uint' }, blockNumber, ETH_DATA_FORMAT);
          const response = yield call$1(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {
              transactionSchema: web3Context.config.customTransactionSchema,
          }), blockNumberFormatted);
          return format({ format: 'bytes' }, response, returnFormat);
      });
  }
  // TODO - Investigate whether response is padded as 1.x docs suggest
  /**
   * View additional documentations here: {@link Web3Eth.estimateGas}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function estimateGas(web3Context_1, transaction_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
          const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, {
              transactionSchema: web3Context.config.customTransactionSchema,
          });
          const blockNumberFormatted = isBlockTag(blockNumber)
              ? blockNumber
              : format({ format: 'uint' }, blockNumber, ETH_DATA_FORMAT);
          const response = yield estimateGas$1(web3Context.requestManager, transactionFormatted, blockNumberFormatted);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  // TODO - Add input formatting to filter
  /**
   * View additional documentations here: {@link Web3Eth.getPastLogs}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getLogs(web3Context, filter, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          // format type bigint or number toBlock and fromBlock to hexstring.
          let { toBlock, fromBlock } = filter;
          if (!isNullish$1(toBlock)) {
              if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {
                  toBlock = numberToHex(toBlock);
              }
          }
          if (!isNullish$1(fromBlock)) {
              if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {
                  fromBlock = numberToHex(fromBlock);
              }
          }
          const formattedFilter = Object.assign(Object.assign({}, filter), { fromBlock, toBlock });
          const response = yield getLogs$1(web3Context.requestManager, formattedFilter);
          const result = response.map(res => {
              if (typeof res === 'string') {
                  return res;
              }
              return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
          });
          return result;
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getChainId}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getChainId(web3Context, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          const response = yield getChainId$1(web3Context.requestManager);
          return format({ format: 'uint' }, 
          // Response is number in hex formatted string
          response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getProof}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getProof(web3Context_1, address_1, storageKeys_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {
          const storageKeysFormatted = storageKeys.map(storageKey => format({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT));
          const blockNumberFormatted = isBlockTag(blockNumber)
              ? blockNumber
              : format({ format: 'uint' }, blockNumber, ETH_DATA_FORMAT);
          const response = yield getProof$1(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);
          return format(accountSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  // TODO Throwing an error with Geth, but not Infura
  // TODO gasUsedRatio and reward not formatting
  /**
   * View additional documentations here: {@link Web3Eth.getFeeHistory}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function getFeeHistory(web3Context_1, blockCount_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {
          const blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);
          const newestBlockFormatted = isBlockTag(newestBlock)
              ? newestBlock
              : format({ format: 'uint' }, newestBlock, ETH_DATA_FORMAT);
          const rewardPercentilesFormatted = format({
              type: 'array',
              items: {
                  format: 'uint',
              },
          }, rewardPercentiles, NUMBER_DATA_FORMAT);
          const response = yield getFeeHistory$1(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);
          return format(feeHistorySchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.createAccessList}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function createAccessList(web3Context_1, transaction_1) {
      return __awaiter$h(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
          const blockNumberFormatted = isBlockTag(blockNumber)
              ? blockNumber
              : format({ format: 'uint' }, blockNumber, ETH_DATA_FORMAT);
          const response = (yield createAccessList$1(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {
              transactionSchema: web3Context.config.customTransactionSchema,
          }), blockNumberFormatted));
          return format(accessListResultSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.signTypedData}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   */
  function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {
      return __awaiter$h(this, void 0, void 0, function* () {
          const response = yield signTypedData$1(web3Context.requestManager, address, typedData, useLegacy);
          return format({ format: 'bytes' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$g = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * View additional documentations here: {@link Web3Eth.createNewPendingTransactionFilter}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   * @param returnFormat ({@link DataFormat}) Return format
   */
  function createNewPendingTransactionFilter(web3Context, returnFormat) {
      return __awaiter$g(this, void 0, void 0, function* () {
          const response = yield newPendingTransactionFilter(web3Context.requestManager);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.createNewFilter}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   * @param filter ({@link FilterParam}) Filter param optional having from-block to-block address or params
   * @param returnFormat ({@link DataFormat}) Return format
   */
  function createNewFilter(web3Context, filter, returnFormat) {
      return __awaiter$g(this, void 0, void 0, function* () {
          // format type bigint or number toBlock and fromBlock to hexstring.
          let { toBlock, fromBlock } = filter;
          if (!isNullish$1(toBlock)) {
              if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {
                  toBlock = numberToHex(toBlock);
              }
          }
          if (!isNullish$1(fromBlock)) {
              if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {
                  fromBlock = numberToHex(fromBlock);
              }
          }
          const formattedFilter = Object.assign(Object.assign({}, filter), { fromBlock, toBlock });
          const response = yield newFilter(web3Context.requestManager, formattedFilter);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.createNewBlockFilter}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   * @param returnFormat ({@link DataFormat}) Return format
   */
  function createNewBlockFilter(web3Context, returnFormat) {
      return __awaiter$g(this, void 0, void 0, function* () {
          const response = yield newBlockFilter(web3Context.requestManager);
          return format({ format: 'uint' }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.uninstallFilter}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   * @param filterIdentifier ({@link Numbers}) filter id
   */
  function uninstallFilter(web3Context, filterIdentifier) {
      return __awaiter$g(this, void 0, void 0, function* () {
          const response = yield uninstallFilter$1(web3Context.requestManager, numberToHex(filterIdentifier));
          return response;
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getFilterChanges}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   * @param filterIdentifier ({@link Numbers}) filter id
   */
  function getFilterChanges(web3Context, filterIdentifier, returnFormat) {
      return __awaiter$g(this, void 0, void 0, function* () {
          const response = yield getFilterChanges$1(web3Context.requestManager, numberToHex(filterIdentifier));
          const result = response.map(res => {
              if (typeof res === 'string') {
                  return res;
              }
              return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
          });
          return result;
      });
  }
  /**
   * View additional documentations here: {@link Web3Eth.getFilterLogs}
   * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
   * @param filterIdentifier ({@link Numbers}) filter id
   */
  function getFilterLogs(web3Context, filterIdentifier, returnFormat) {
      return __awaiter$g(this, void 0, void 0, function* () {
          const response = yield getFilterLogs$1(web3Context.requestManager, numberToHex(filterIdentifier));
          const result = response.map(res => {
              if (typeof res === 'string') {
                  return res;
              }
              return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
          });
          return result;
      });
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable-next-line max-classes-per-file */
  /**
   * ## subscribe('logs')
   * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.
   *
   * You can subscribe to logs matching a given filter object, which can take the following parameters:
   * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.
   * - `address`: (optional) Contract address or a list of addresses from which logs should originate.
   * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.
   *
   */
  class LogsSubscription extends Web3Subscription {
      _buildSubscriptionParams() {
          return ['logs', this.args];
      }
      formatSubscriptionResult(data) {
          return format(logSchema, data, super.returnFormat);
      }
  }
  /**
   * ## subscribe('pendingTransactions')
   * Subscribes to incoming pending transactions.
   *
   * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').
   * @example
   * ```ts
   * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);
   * ```
   */
  class NewPendingTransactionsSubscription extends Web3Subscription {
      // eslint-disable-next-line
      _buildSubscriptionParams() {
          return ['newPendingTransactions'];
      }
      formatSubscriptionResult(data) {
          return format({ format: 'string' }, data, super.returnFormat);
      }
  }
  /**
   * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))
   *
   * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.
   *
   * The structure of a returned block header is {@link BlockHeaderOutput}:
   * @example
   * ```ts
   * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well
   *  'data',
   * console.log
   * );
   * >{
   * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',
   * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
   * miner: '0x0000000000000000000000000000000000000000',
   * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',
   * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',
   * logsBloom: '0x
   * difficulty: 2n,
   * number: 21n,
   * gasLimit: 11738125n,
   * gasUsed: 830006n,
   * timestamp: 1678797237n,
   * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',
   * nonce: 0n
   * }
   * ```
   */
  class NewHeadsSubscription extends Web3Subscription {
      // eslint-disable-next-line
      _buildSubscriptionParams() {
          return ['newHeads'];
      }
      formatSubscriptionResult(data) {
          return format(blockHeaderSchema, data, super.returnFormat);
      }
  }
  /**
   * ## subscribe('syncing')
   *
   * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.
   * @example
   * ```ts
   * (await web3.eth.subscribe('syncing')).on('changed', console.log);
   * > `true` // when syncing
   *
   * (await web3.eth.subscribe('syncing')).on('data', console.log);
   * > {
   *      startingBlock: 0,
   *      currentBlock: 0,
   *      highestBlock: 0,
   *      pulledStates: 0,
   *      knownStates: 0
   *   }
   * ```
   */
  class SyncingSubscription extends Web3Subscription {
      // eslint-disable-next-line
      _buildSubscriptionParams() {
          return ['syncing'];
      }
      _processSubscriptionResult(data) {
          if (typeof data === 'boolean') {
              this.emit('changed', data);
          }
          else {
              const mappedData = Object.fromEntries(Object.entries((data === null || data === void 0 ? void 0 : data.status) || data).map(([key, value]) => [
                  key.charAt(0).toLowerCase() + key.substring(1),
                  value,
              ]));
              this.emit('changed', data.syncing);
              this.emit('data', format(syncSchema, mappedData, super.returnFormat));
          }
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$f = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const registeredSubscriptions = {
      logs: LogsSubscription,
      newPendingTransactions: NewPendingTransactionsSubscription,
      newHeads: NewHeadsSubscription,
      syncing: SyncingSubscription,
      pendingTransactions: NewPendingTransactionsSubscription, // the same as newPendingTransactions. just for support API like in version 1.x
      newBlockHeaders: NewHeadsSubscription, // the same as newHeads. just for support API like in version 1.x
  };
  /**
   *
   * The Web3Eth allows you to interact with an Ethereum blockchain.
   *
   * For using Web3 Eth functions, first install Web3 package using `npm i web3` or `yarn add web3` based on your package manager usage.
   * After that, Web3 Eth functions will be available as mentioned in following snippet.
   * ```ts
   * import { Web3 } from 'web3';
   * const web3 = new Web3('https://mainnet.infura.io/v3/<YOURPROJID>');
   *
   * const block = await web3.eth.getBlock(0);
   *
   * ```
   *
   * For using individual package install `web3-eth` package using `npm i web3-eth` or `yarn add web3-eth` and only import required functions.
   * This is more efficient approach for building lightweight applications.
   * ```ts
   * import { Web3Eth } from 'web3-eth';
   *
   * const eth = new Web3Eth('https://mainnet.infura.io/v3/<YOURPROJID>');
   * const block = await eth.getBlock(0);
   *
   * ```
   */
  class Web3Eth extends Web3Context {
      constructor(
      // eslint-disable-next-line  @typescript-eslint/no-explicit-any
      providerOrContext) {
          if (typeof providerOrContext === 'string' ||
              // eslint-disable-next-line  @typescript-eslint/no-explicit-any
              isSupportedProvider(providerOrContext)) {
              // @ts-expect-error disable the error: "A 'super' call must be a root-level statement within a constructor of a derived class that contains initialized properties, parameter properties, or private identifiers."
              super({
                  // eslint-disable-next-line  @typescript-eslint/no-explicit-any
                  provider: providerOrContext,
                  registeredSubscriptions,
              });
              return;
          }
          if (providerOrContext.registeredSubscriptions) {
              super(providerOrContext);
              return;
          }
          super(Object.assign(Object.assign({}, providerOrContext), { registeredSubscriptions }));
          // an alias for calculateFeeData
          // eslint-disable-next-line
          this.getFeeData = this.calculateFeeData;
      }
      setTransactionMiddleware(transactionMiddleware) {
          this.transactionMiddleware = transactionMiddleware;
      }
      getTransactionMiddleware() {
          return this.transactionMiddleware;
      }
      /**
       * @returns Returns the ethereum protocol version of the node.
       *
       * ```ts
       * web3.eth.getProtocolVersion().then(console.log);
       * > "63"
       * ```
       */
      getProtocolVersion() {
          return __awaiter$f(this, void 0, void 0, function* () {
              return getProtocolVersion(this.requestManager);
          });
      }
      // TODO Add returnFormat parameter
      /**
       * Checks if the node is currently syncing.
       *
       * @returns Either a {@link SyncingStatusAPI}, or `false`.
       *
       * ```ts
       * web3.eth.isSyncing().then(console.log);
       * > {
       *     startingBlock: 100,
       *     currentBlock: 312,
       *     highestBlock: 512,
       *     knownStates: 234566,
       *     pulledStates: 123455
       * }
       * ```
       */
      isSyncing() {
          return __awaiter$f(this, void 0, void 0, function* () {
              return getSyncing(this.requestManager);
          });
      }
      // TODO consider adding returnFormat parameter (to format address as bytes)
      /**
       * @returns Returns the coinbase address to which mining rewards will go.
       *
       * ```ts
       * web3.eth.getCoinbase().then(console.log);
       * > "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe"
       * ```
       */
      getCoinbase() {
          return __awaiter$f(this, void 0, void 0, function* () {
              return getCoinbase(this.requestManager);
          });
      }
      /**
       * Checks whether the node is mining or not.
       *
       * @returns `true` if the node is mining, otherwise `false`.
       *
       * ```ts
       * web3.eth.isMining().then(console.log);
       * > true
       * ```
       */
      isMining() {
          return __awaiter$f(this, void 0, void 0, function* () {
              return getMining(this.requestManager);
          });
      }
      /**
       * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.
       *
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of hashes per second that the node is mining with.
       *
       * ```ts
       * web3.eth.getHashrate().then(console.log);
       * > 493736n
       *
       * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x788a8"
       * ```
       */
      getHashrate(returnFormat) {
          return __awaiter$f(this, void 0, void 0, function* () {
              var _a;
              if (returnFormat === void 0) { returnFormat = ((_a = this.defaultReturnFormat) !== null && _a !== void 0 ? _a : DEFAULT_RETURN_FORMAT); }
              return this.getHashRate(returnFormat);
          });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of hashes per second that the node is mining with.
       *
       * ```ts
       * web3.eth.getHashRate().then(console.log);
       * > 493736n
       *
       * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x788a8"
       * ```
       */
      getHashRate() {
          return __awaiter$f(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
              return getHashRate(this, returnFormat);
          });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The gas price determined by the last few blocks median gas price.
       *
       * ```ts
       * web3.eth.getGasPrice().then(console.log);
       * > 20000000000n
       *
       * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x4a817c800"
       * ```
       */
      getGasPrice() {
          return __awaiter$f(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
              return getGasPrice(this, returnFormat);
          });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns the current maxPriorityFeePerGas per gas in wei.
       *
       * ```ts
       * web3.eth.getMaxPriorityFeePerGas().then(console.log);
       * > 20000000000n
       *
       * web3.eth.getMaxPriorityFeePerGas({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x4a817c800"
       * ```
       */
      getMaxPriorityFeePerGas() {
          return __awaiter$f(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
              return getMaxPriorityFeePerGas(this, returnFormat);
          });
      }
      /**
       * Calculates the current Fee Data.
       * If the node supports EIP-1559, then `baseFeePerGas` and `maxPriorityFeePerGas` will be returned along with the calculated `maxFeePerGas` value.
       * `maxFeePerGas` is calculated as `baseFeePerGas` * `baseFeePerGasFactor` + `maxPriorityFeePerGas`.
       * If the node does not support EIP-1559, then the `gasPrice` will be returned and the other values will be undefined.
       *
       * @param baseFeePerGasFactor (optional) The factor to multiply the `baseFeePerGas` with when calculating `maxFeePerGas`, if the node supports EIP-1559. This can be a `bigint` for precise calculation or a `number` to support decimals. The default value is 2 (BigInt).
       * If a `number` is provided, it will be converted to `bigint` with three decimal precision.
       * @param alternativeMaxPriorityFeePerGas (optional) The alternative `maxPriorityFeePerGas` to use when calculating `maxFeePerGas`, if the node supports EIP-1559 but does not support the method `eth_maxPriorityFeePerGas`. The default value is 1 gwei.
       * @returns The current fee data.
       *
       * @example
       * web3.eth.calculateFeeData().then(console.log);
       * > {
       *     gasPrice: 20000000000n,
       *     maxFeePerGas: 60000000000n,
       *     maxPriorityFeePerGas: 20000000000n,
       *     baseFeePerGas: 20000000000n
       * }
       *
       * @example
       * // Using a `bigint` for baseFeePerGasFactor
       * web3.eth.calculateFeeData(1n).then(console.log);
       * > {
       *     gasPrice: 20000000000n,
       *     maxFeePerGas: 40000000000n,
       *     maxPriorityFeePerGas: 20000000000n,
       *     baseFeePerGas: 20000000000n
       * }
       *
       * @example
       * // Using a `number` for baseFeePerGasFactor (with decimals)
       * web3.eth.calculateFeeData(1.5).then(console.log);
       * > {
       *     gasPrice: 20000000000n,
       *     maxFeePerGas: 50000000000n,  // baseFeePerGasFactor is converted to BigInt(1.500)
       *     maxPriorityFeePerGas: 20000000000n,
       *     baseFeePerGas: 20000000000n
       * }
       *
       * @example
       * web3.eth.calculateFeeData(3n).then(console.log);
       * > {
       *     gasPrice: 20000000000n,
       *     maxFeePerGas: 80000000000n,
       *     maxPriorityFeePerGas: 20000000000n,
       *     baseFeePerGas: 20000000000n
       * }
       */
      calculateFeeData() {
          return __awaiter$f(this, arguments, void 0, function* (baseFeePerGasFactor = BigInt(2), alternativeMaxPriorityFeePerGas = ethUnitMap.Gwei) {
              var _a;
              const block = yield this.getBlock(undefined, false);
              const baseFeePerGas = (_a = block === null || block === void 0 ? void 0 : block.baseFeePerGas) !== null && _a !== void 0 ? _a : undefined; // use undefined if it was null
              let gasPrice;
              try {
                  gasPrice = yield this.getGasPrice();
              }
              catch (error) {
                  // do nothing
              }
              let maxPriorityFeePerGas;
              try {
                  maxPriorityFeePerGas = yield this.getMaxPriorityFeePerGas();
              }
              catch (error) {
                  // do nothing
              }
              let maxFeePerGas;
              // if the `block.baseFeePerGas` is available, then EIP-1559 is supported
              // and we can calculate the `maxFeePerGas` from the `block.baseFeePerGas`
              if (baseFeePerGas) {
                  // tip the miner with alternativeMaxPriorityFeePerGas, if no value available from getMaxPriorityFeePerGas
                  maxPriorityFeePerGas = maxPriorityFeePerGas !== null && maxPriorityFeePerGas !== void 0 ? maxPriorityFeePerGas : alternativeMaxPriorityFeePerGas;
                  // basically maxFeePerGas = (baseFeePerGas +- 12.5%) + maxPriorityFeePerGas
                  // and we multiply the `baseFeePerGas` by `baseFeePerGasFactor`, to allow
                  // trying to include the transaction in the next few blocks even if the
                  // baseFeePerGas is increasing fast
                  let baseFeeMultiplier;
                  if (typeof baseFeePerGasFactor === 'number') {
                      // Convert number to bigint with three decimal places
                      baseFeeMultiplier = BigInt(Math.floor(baseFeePerGasFactor * 1000)) / BigInt(1000);
                  }
                  else {
                      // It's already a BigInt, so just use it as-is
                      baseFeeMultiplier = baseFeePerGasFactor;
                  }
                  maxFeePerGas = baseFeePerGas * baseFeeMultiplier + maxPriorityFeePerGas;
              }
              return { gasPrice, maxFeePerGas, maxPriorityFeePerGas, baseFeePerGas };
          });
      }
      /**
       * @returns A list of accounts the node controls (addresses are checksummed).
       *
       * ```ts
       * web3.eth.getAccounts().then(console.log);
       * > ["0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", "0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf"]
       * ```
       */
      getAccounts() {
          return __awaiter$f(this, void 0, void 0, function* () {
              var _a;
              const hexAddresses = (_a = (yield getAccounts$2(this.requestManager))) !== null && _a !== void 0 ? _a : [];
              return hexAddresses.map(address => toChecksumAddress(address));
          });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The current block number.
       *
       * ```ts
       * web3.eth.getBlockNumber().then(console.log);
       * > 2744n
       *
       * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0xab8"
       * ```
       */
      getBlockNumber() {
          return __awaiter$f(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
              return getBlockNumber(this, returnFormat);
          });
      }
      /**
       * Get the balance of an address at a given block.
       *
       * @param address The address to get the balance of.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The current balance for the given address in `wei`.
       *
       * ```ts
       * web3.eth.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > 1000000000000n
       *
       * web3.eth.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > "0xe8d4a51000"
       * ```
       */
      getBalance(address_1) {
          return __awaiter$f(this, arguments, void 0, function* (address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return getBalance(this, address, blockNumber, returnFormat);
          });
      }
      /**
       * Get the storage at a specific position of an address.
       *
       * @param address The address to get the storage from.
       * @param storageSlot The index position of the storage.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The value in storage at the given position.
       *
       * ```ts
       * web3.eth.getStorageAt("0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234", 0).then(console.log);
       * > "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"
       *
       * web3.eth.getStorageAt(
       *      "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234",
       *      0,
       *      undefined,
       *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }
       * ).then(console.log);
       * > Uint8Array(31) [
       *       3, 52,  86, 115,  33,  35, 255, 255,
       *       35, 66,  52,  45, 209,  35,  66,  67,
       *       67, 36,  35,  66,  52, 253,  35,  79,
       *       210, 63, 212, 242,  61,  66,  52
       *    ]
       * ```
       */
      getStorageAt(address_1, storageSlot_1) {
          return __awaiter$f(this, arguments, void 0, function* (address, storageSlot, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return getStorageAt(this, address, storageSlot, blockNumber, returnFormat);
          });
      }
      /**
       * Get the code at a specific address.
       *
       * @param address The address to get the code from.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.
       *
       * ```ts
       * web3.eth.getCode("0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234").then(console.log);
       * > "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
       *
       * web3.eth.getCode(
       *      "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
       *      undefined,
       *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }
       * ).then(console.log);
       * > Uint8Array(50) [
       *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,
       *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,
       *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,
       *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,
       *   144, 80, 145, 144,  80, 86
       * ]
       * ```
       */
      getCode(address_1) {
          return __awaiter$f(this, arguments, void 0, function* (address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return getCode(this, address, blockNumber, returnFormat);
          });
      }
      /**
       * Retrieves a {@link Block} matching the provided block number, block hash or block tag.
       *
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).
       * @returns A {@link Block} object matching the provided block number or block hash.
       *
       * ```ts
       * web3.eth.getBlock(0).then(console.log);
       * > {
       *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
       *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       *    miner: '0x0000000000000000000000000000000000000000',
       *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
       *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    logsBloom: '0x
       *    difficulty: 1n,
       *    number: 0n,
       *    gasLimit: 30000000n,
       *    gasUsed: 0n,
       *    timestamp: 1658281638n,
       *    extraData: '0x',
       *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    nonce: 0n,
       *    totalDifficulty: 1n,
       *    baseFeePerGas: 1000000000n,
       *    size: 514n,
       *    transactions: [],
       *    uncles: []
       *  }
       *
       * web3.eth.getBlock(
       *      "0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d",
       *      false,
       *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > {
       *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
       *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       *    miner: '0x0000000000000000000000000000000000000000',
       *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
       *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    logsBloom: '0x
       *    difficulty: 1,
       *    number: 0,
       *    gasLimit: 30000000,
       *    gasUsed: 0,
       *    timestamp: 1658281638,
       *    extraData: '0x',
       *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    nonce: 0,
       *    totalDifficulty: 1,
       *    baseFeePerGas: 1000000000,
       *    size: 514,
       *    transactions: [],
       *    uncles: []
       *  }
       * ```
       */
      getBlock() {
          return __awaiter$f(this, arguments, void 0, function* (block = this.defaultBlock, hydrated = false, returnFormat = this.defaultReturnFormat) {
              return getBlock(this, block, hydrated, returnFormat);
          });
      }
      /**
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of transactions in the provided block.
       *
       * ```ts
       * web3.eth.getBlockTransactionCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > 1n
       *
       * web3.eth.getBlockTransactionCount(
       *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > 1
       * ```
       */
      getBlockTransactionCount() {
          return __awaiter$f(this, arguments, void 0, function* (block = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return getBlockTransactionCount(this, block, returnFormat);
          });
      }
      /**
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.
       *
       * ```ts
       * web3.eth.getBlockUncleCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > 1n
       *
       * web3.eth.getBlockUncleCount(
       *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > 1
       * ```
       */
      getBlockUncleCount() {
          return __awaiter$f(this, arguments, void 0, function* (block = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return getBlockUncleCount(this, block, returnFormat);
          });
      }
      /**
       *
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param uncleIndex The index position of the uncle.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.
       *
       * ```ts
       * web3.eth.getUncle(0, 1).then(console.log);
       * > {
       *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
       *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       *    miner: '0x0000000000000000000000000000000000000000',
       *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
       *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    logsBloom: '0x
       *    difficulty: 1n,
       *    number: 0n,
       *    gasLimit: 30000000n,
       *    gasUsed: 0n,
       *    timestamp: 1658281638n,
       *    extraData: '0x',
       *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    nonce: 0n,
       *    totalDifficulty: 1n,
       *    baseFeePerGas: 1000000000n,
       *    size: 514n,
       *    transactions: [],
       *    uncles: []
       *  }
       *
       * web3.eth.getUncle(
       *      "0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d",
       *      1,
       *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > {
       *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
       *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       *    miner: '0x0000000000000000000000000000000000000000',
       *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
       *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    logsBloom: '0x
       *    difficulty: 1,
       *    number: 0,
       *    gasLimit: 30000000,
       *    gasUsed: 0,
       *    timestamp: 1658281638,
       *    extraData: '0x',
       *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    nonce: 0,
       *    totalDifficulty: 1,
       *    baseFeePerGas: 1000000000,
       *    size: 514,
       *    transactions: [],
       *    uncles: []
       *  }
       * ```
       */
      getUncle() {
          return __awaiter$f(this, arguments, void 0, function* (block = this.defaultBlock, uncleIndex, returnFormat = this.defaultReturnFormat) {
              return getUncle(this, block, uncleIndex, returnFormat);
          });
      }
      /**
       * @param transactionHash The hash of the desired transaction.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The desired transaction object.
       *
       * ```ts
       * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);
       * {
       *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *    type: 0n,
       *    nonce: 0n,
       *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
       *    blockNumber: 1n,
       *    transactionIndex: 0n,
       *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *    value: 1n,
       *    gas: 90000n,
       *    gasPrice: 2000000000n,
       *    input: '0x',
       *    v: 2709n,
       *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *  }
       *
       * web3.eth.getTransaction(
       *     web3.utils.hexToBytes("0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"),
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * {
       *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *    type: 0,
       *    nonce: 0,
       *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
       *    blockNumber: 1,
       *    transactionIndex: 0,
       *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *    value: 1,
       *    gas: 90000,
       *    gasPrice: 2000000000,
       *    input: '0x',
       *    v: 2709,
       *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *  }
       * ```
       */
      getTransaction(transactionHash_1) {
          return __awaiter$f(this, arguments, void 0, function* (transactionHash, returnFormat = this.defaultReturnFormat) {
              const response = yield getTransaction(this, transactionHash, returnFormat);
              if (!response)
                  throw new TransactionNotFound();
              return response;
          });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns A list of pending transactions.
       *
       * ```ts
       * web3.eth.getPendingTransactions().then(console.log);
       * > [
       *      {
       *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *          type: 0n,
       *          nonce: 0n,
       *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *          blockNumber: null,
       *          transactionIndex: 0n,
       *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *          value: 1n,
       *          gas: 90000n,
       *          gasPrice: 2000000000n,
       *          input: '0x',
       *          v: 2709n,
       *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *      },
       *      {
       *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *          type: 0n,
       *          nonce: 1n,
       *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *          blockNumber: null,
       *          transactionIndex: 0n,
       *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *          value: 1n,
       *          gas: 90000n,
       *          gasPrice: 2000000000n,
       *          input: '0x',
       *          v: 2710n,
       *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',
       *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'
       *      }
       *   ]
       *
       * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > [
       *      {
       *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *          type: 0,
       *          nonce: 0,
       *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *          blockNumber: null,
       *          transactionIndex: 0,
       *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *          value: 1,
       *          gas: 90000,
       *          gasPrice: 2000000000,
       *          input: '0x',
       *          v: 2709,
       *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *      },
       *      {
       *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *          type: 0,
       *          nonce: 1,
       *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *          blockNumber: null,
       *          transactionIndex: 0,
       *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *          value: 1,
       *          gas: 90000,
       *          gasPrice: 2000000000,
       *          input: '0x',
       *          v: 2710,
       *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',
       *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'
       *      }
       *   ]
       * ```
       */
      getPendingTransactions() {
          return __awaiter$f(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
              return getPendingTransactions(this, returnFormat);
          });
      }
      /**
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param transactionIndex The index position of the transaction.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The desired transaction object.
       *
       * ```ts
       * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);
       * {
       *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *    type: 0n,
       *    nonce: 0n,
       *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
       *    blockNumber: 1n,
       *    transactionIndex: 0n,
       *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *    value: 1n,
       *    gas: 90000n,
       *    gasPrice: 2000000000n,
       *    input: '0x',
       *    v: 2709n,
       *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *  }
       *
       * web3.eth.getTransactionFromBlock(
       *     hexToBytes("0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"),
       *     0,
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * {
       *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *    type: 0,
       *    nonce: 0,
       *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
       *    blockNumber: 1,
       *    transactionIndex: 0,
       *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *    value: 1,
       *    gas: 90000,
       *    gasPrice: 2000000000,
       *    input: '0x',
       *    v: 2709,
       *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *  }
       * ```
       */
      getTransactionFromBlock() {
          return __awaiter$f(this, arguments, void 0, function* (block = this.defaultBlock, transactionIndex, returnFormat = this.defaultReturnFormat) {
              return getTransactionFromBlock(this, block, transactionIndex, returnFormat);
          });
      }
      /**
       * @param transactionHash Hash of the transaction to retrieve the receipt for.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The desired {@link TransactionReceipt} object.
       *
       * ```ts
       * web3.eth.getTransactionReceipt("0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f").then(console.log);
       * > {
       *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *      transactionIndex: 0n,
       *      blockNumber: 2n,
       *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
       *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      cumulativeGasUsed: 21000n,
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1n,
       *      effectiveGasPrice: 2000000000n,
       *      type: 0n
       *  }
       *
       * web3.eth.getTransactionReceipt(
       *      "0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f",
       *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > {
       *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *      transactionIndex: 0,
       *      blockNumber: 2,
       *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
       *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      cumulativeGasUsed: 21000,
       *      gasUsed: 21000,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1,
       *      effectiveGasPrice: 2000000000,
       *      type: 0n
       *  }
       * ```
       */
      getTransactionReceipt(transactionHash_1) {
          return __awaiter$f(this, arguments, void 0, function* (transactionHash, returnFormat = this.defaultReturnFormat) {
              const response = yield getTransactionReceipt(this, transactionHash, returnFormat);
              if (!response)
                  throw new TransactionNotFound();
              return response;
          });
      }
      /**
       * @param address The address to get the number of transactions for.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of transactions sent from the provided address.
       *
       * ```ts
       * web3.eth.getTransactionCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > 1n
       *
       * web3.eth.getTransactionCount(
       *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
       *     undefined,
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > 1
       * ```
       */
      getTransactionCount(address_1) {
          return __awaiter$f(this, arguments, void 0, function* (address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return getTransactionCount(this, address, blockNumber, returnFormat);
          });
      }
      /**
       * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @param options A configuration object used to change the behavior of the `sendTransaction` method.
       * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.
       * ```ts
       * const transaction = {
       *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
       *   value: '0x1'
       * }
       *
       * const transactionReceipt = await web3.eth.sendTransaction(transaction);
       * console.log(transactionReceipt);
       * > {
       *      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',
       *      blockNumber: 6659547n,
       *      cumulativeGasUsed: 1029036n,
       *      effectiveGasPrice: 6765796845n,
       *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1n,
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',
       *      transactionIndex: 16n,
       *      type: 2n
       *}
       *
       * web3.eth.sendTransaction(transaction).then(console.log);
       * > {
       *      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',
       *      blockNumber: 6659547n,
       *      cumulativeGasUsed: 1029036n,
       *      effectiveGasPrice: 6765796845n,
       *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
       *      status: 1n,
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',
       *      transactionIndex: 16n,
       *      type: 2n
       *}
       *
       * web3.eth.sendTransaction(transaction).catch(console.log);
       * > <Some TransactionError>
       *
       * // Example using options.ignoreGasPricing = true
       * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);
       * > {
       *      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',
       *      blockNumber: 6659547n,
       *      cumulativeGasUsed: 1029036n,
       *      effectiveGasPrice: 6765796845n,
       *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1n,
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',
       *      transactionIndex: 16n,
       *      type: 2n
       *}
       * ```
       *
       *
       * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:
       * - `sending`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));
       * > {
       *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *      to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
       *      value: '0x1',
       *      gasPrice: '0x77359400',
       *      maxPriorityFeePerGas: undefined,
       *      maxFeePerGas: undefined
       * }
       * ```
       * - `sent`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));
       * > {
       *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *      to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
       *      value: '0x1',
       *      gasPrice: '0x77359400',
       *      maxPriorityFeePerGas: undefined,
       *      maxFeePerGas: undefined
       * }
       * ```
       * - `transactionHash`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));
       * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
       * ```
       * - `receipt`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));
       * > {
       *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *      transactionIndex: 0n,
       *      blockNumber: 2n,
       *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
       *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      cumulativeGasUsed: 21000n,
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1n,
       *      effectiveGasPrice: 2000000000n,
       *      type: 0n
       * }
       * ```
       * - `confirmation`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));
       * > {
       *      confirmations: 1n,
       *      receipt: {
       *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',
       *         transactionIndex: 0n,
       *         blockNumber: 5n,
       *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',
       *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *         cumulativeGasUsed: 21000n,
       *         gasUsed: 21000n,
       *         logs: [],
       *         logsBloom: '0x
       *         status: 1n,
       *         effectiveGasPrice: 2000000000n,
       *         type: 0n
       *      },
       *      latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'
       * }
       * ```
       * - `error`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('error', error => console.log);
       * > <Some TransactionError>
       * ```
       */
      sendTransaction(transaction, returnFormat = this.defaultReturnFormat, options) {
          return sendTransaction$1(this, transaction, returnFormat, options, this.transactionMiddleware);
      }
      /**
       * @param transaction Signed transaction in one of the valid {@link Bytes} format.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @param options A configuration object used to change the behavior of the method
       * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.
       * ```ts
       * const signedTransaction = "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
       *
       * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);
       * console.log(transactionHash);
       * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
       *
       * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);
       * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
       *
       * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);
       * > <Some TransactionError>
       * ```
       *
       *
       * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:
       * - `sending`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));
       * > "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
       * ```
       * - `sent`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));
       * > "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
       * ```
       * - `transactionHash`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));
       * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
       * ```
       * - `receipt`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));
       * > {
       *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',
       *      blockNumber: 1n,
       *      cumulativeGasUsed: 21000n,
       *      effectiveGasPrice: 1000000001n,
       *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1n,
       *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',
       *      transactionIndex: 0n,
       *      type: 0n
       * }
       * ```
       * - `confirmation`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));
       * > {
       *     confirmations: 1n,
       *     receipt: {
       *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',
       *          blockNumber: 1n,
       *          cumulativeGasUsed: 21000n,
       *          effectiveGasPrice: 1000000001n,
       *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *          gasUsed: 21000n,
       *          logs: [],
       *          logsBloom: '0x
       *          status: 1n,
       *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',
       *          transactionIndex: 0n,
       *          type: 0n
       *     },
       *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'
       * }
       * ```
       * - `error`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));
       * > <Some TransactionError>
       * ```
       */
      sendSignedTransaction(transaction, returnFormat = this.defaultReturnFormat, options) {
          return sendSignedTransaction(this, transaction, returnFormat, options);
      }
      /**
       * @param message Data to sign in one of the valid {@link Bytes} format.
       * @param address Address to sign data with, can be an address or the index of a local wallet.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The signed `message`.
       *
       * ```ts
       * // Using an unlocked account managed by connected RPC client
       * web3.eth.sign("0x48656c6c6f20776f726c64", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe").then(console.log);
       * > "0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"
       *
       * // Using an unlocked account managed by connected RPC client
       * web3.eth.sign("0x48656c6c6f20776f726c64", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);
       * > Uint8Array(65) [
       *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,
       *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,
       *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,
       *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,
       *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,
       *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0
       * ]
       * ```
       *
       * // Using an indexed account managed by local Web3 wallet
       * web3.eth.sign("0x48656c6c6f20776f726c64", 0).then(console.log);
       * > "0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"
       */
      sign(message_1, addressOrIndex_1) {
          return __awaiter$f(this, arguments, void 0, function* (message, addressOrIndex, returnFormat = this.defaultReturnFormat) {
              return sign$1(this, message, addressOrIndex, returnFormat);
          });
      }
      /**
       * @param transaction The transaction object to sign.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).
       *
       * ```ts
       * const transaction = {
       *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
       *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
       *      value: '0x1',
       *      gas: '21000',
       *      gasPrice: await web3Eth.getGasPrice(),
       *      nonce: '0x1',
       *      type: '0x0'
       * }
       *
       * web3.eth.signTransaction(transaction).then(console.log);
       * > {
       *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
       *   tx: {
       *      type: 0n,
       *      nonce: 1n,
       *      gasPrice: 1000000001n,
       *      gas: 21000n,
       *      value: 1n,
       *      v: 2710n,
       *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',
       *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
       *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *      data: '0x'
       *   }
       * }
       *
       * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > {
       *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
       *   tx: {
       *      type: 0,
       *      nonce: 1,
       *      gasPrice: 1000000001,
       *      gas: 21000,
       *      value: 1,
       *      v: 2710,
       *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',
       *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
       *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *      data: '0x'
       *   }
       * }
       * ```
       */
      signTransaction(transaction_1) {
          return __awaiter$f(this, arguments, void 0, function* (transaction, returnFormat = this.defaultReturnFormat) {
              return signTransaction$1(this, transaction, returnFormat);
          });
      }
      // TODO Decide what to do with transaction.to
      // https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076
      /**
       * Executes a message call within the EVM without creating a transaction.
       * It does not publish anything to the blockchain and does not consume any gas.
       *
       * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns The returned data of the call, e.g. a smart contract function's return value.
       */
      call(transaction_1) {
          return __awaiter$f(this, arguments, void 0, function* (transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return call(this, transaction, blockNumber, returnFormat);
          });
      }
      /**
       * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.
       * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting
       * with a contract as a result of updating the contract's state.
       *
       * @param transaction The {@link Transaction} object to estimate the gas for.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns The used gas for the simulated transaction execution.
       *
       * ```ts
       * const transaction = {
       *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
       *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
       *       value: '0x1',
       *       nonce: '0x1',
       *       type: '0x0'
       * }
       *
       * web3.eth.estimateGas(transaction).then(console.log);
       * > 21000n
       *
       * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > 21000
       * ```
       */
      estimateGas(transaction_1) {
          return __awaiter$f(this, arguments, void 0, function* (transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return estimateGas(this, transaction, blockNumber, returnFormat);
          });
      }
      /**
       * Gets past logs, matching the provided `filter`.
       *
       * @param filter A {@link Filter} object containing the properties for the desired logs.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.
       *
       * ```ts
       * web3.eth.getPastLogs({
       *      address: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",
       *      topics: ["0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"]
       *  }).then(console.log);
       * > [{
       *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
       *       logIndex: 0n,
       *       transactionIndex: 0n,
       *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
       *       blockNumber: 1234n,
       *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
       *   },
       *   {...}]
       *
       * web3.eth.getPastLogs(
       *     {
       *       address: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",
       *       topics: ["0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"]
       *     },
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > [{
       *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
       *       logIndex: 0,
       *       transactionIndex: 0,
       *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
       *       blockNumber: 1234,
       *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
       *   },
       *   {...}]
       * ```
       */
      getPastLogs(filter_1) {
          return __awaiter$f(this, arguments, void 0, function* (filter, returnFormat = this.defaultReturnFormat) {
              return getLogs(this, filter, returnFormat);
          });
      }
      /**
       * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').
       *
       * @returns The mining work as an array of strings with the following structure:
       *
       * String 32 Bytes - at index 0: current block header pow-hash
       * String 32 Bytes - at index 1: the seed hash used for the DAG.
       * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.
       *
       * ```ts
       * web3.eth.getWork().then(console.log);
       * > [
       *     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
       *     "0x5EED00000000000000000000000000005EED0000000000000000000000000000",
       *     "0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000"
       * ]
       * ```
       */
      getWork() {
          return __awaiter$f(this, void 0, void 0, function* () {
              return getWork(this.requestManager);
          });
      }
      /**
       * Used for submitting a proof-of-work solution.
       *
       * @param nonce The nonce found (8 bytes).
       * @param hash  The header’s pow-hash (32 bytes).
       * @param digest The mix digest (32 bytes).
       * @returns Returns `true` if the provided solution is valid, otherwise `false`.
       *
       * ```ts
       * web3.eth.submitWork([
       *     "0x0000000000000001",
       *     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
       *     "0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000"
       * ]).then(console.log);
       * > true
       * ```
       */
      submitWork(nonce, hash, digest) {
          return __awaiter$f(this, void 0, void 0, function* () {
              return submitWork(this.requestManager, nonce, hash, digest);
          });
      }
      // TODO - Format addresses
      /**
       * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)
       * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.
       * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).
       * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.
       *
       * @returns An array of enabled accounts.
       *
       * ```ts
       * web3.eth.requestAccounts().then(console.log);
       * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']
       * ```
       */
      requestAccounts() {
          return __awaiter$f(this, void 0, void 0, function* () {
              return requestAccounts(this.requestManager);
          });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).
       *
       * ```ts
       * web3.eth.getChainId().then(console.log);
       * > 61n
       *
       * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > 61
       * ```
       */
      getChainId() {
          return __awaiter$f(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
              return getChainId(this, returnFormat);
          });
      }
      /**
       * @returns The current client version.
       *
       * ```ts
       * web3.eth.getNodeInfo().then(console.log);
       * > "Mist/v0.9.3/darwin/go1.4.1"
       * ```
       */
      getNodeInfo() {
          return __awaiter$f(this, void 0, void 0, function* () {
              return getNodeInfo(this.requestManager);
          });
      }
      /**
       * @param address The Address of the account or contract.
       * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).
       *
       * ```ts
       * web3.eth.getProof(
       *     "0x1234567890123456789012345678901234567890",
       *     ["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001"],
       *     "latest"
       * ).then(console.log);
       * > {
       *     "address": "0x1234567890123456789012345678901234567890",
       *     "accountProof": [
       *         "0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80",
       *         "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80",
       *         "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080",
       *         "0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080"
       *     ],
       *     "balance": 0n,
       *     "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
       *     "nonce": 0n,
       *     "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
       *     "storageProof": [
       *         {
       *             "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
       *             "value": 0n,
       *             "proof": []
       *         },
       *         {
       *             "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
       *             "value": 0n,
       *             "proof": []
       *         }
       *     ]
       * }
       *
       * web3.eth.getProof(
       *     "0x1234567890123456789012345678901234567890",
       *     ["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001"],
       *     undefined,
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > {
       *     "address": "0x1234567890123456789012345678901234567890",
       *     "accountProof": [
       *         "0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80",
       *         "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80",
       *         "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080",
       *         "0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080"
       *     ],
       *     "balance": 0,
       *     "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
       *     "nonce": 0,
       *     "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
       *     "storageProof": [
       *         {
       *             "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
       *             "value": 0,
       *             "proof": []
       *         },
       *         {
       *             "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
       *             "value": 0,
       *             "proof": []
       *         }
       *     ]
       * }
       * ```
       */
      getProof(address_1, storageKeys_1) {
          return __awaiter$f(this, arguments, void 0, function* (address, storageKeys, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return getProof(this, address, storageKeys, blockNumber, returnFormat);
          });
      }
      // TODO Throwing an error with Geth, but not Infura
      // TODO gasUsedRatio and reward not formatting
      /**
       * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
       * @param newestBlock Highest number block of the requested range.
       * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.
       * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.
       * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.
       *
       * ```ts
       * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);
       * > {
       *     baseFeePerGas: [
       *         22983878621n,
       *         21417903463n,
       *         19989260230n,
       *         17770954829n,
       *         18850641304n
       *     ],
       *     gasUsedRatio: [
       *         0.22746546666666667,
       *         0.2331871,
       *         0.05610054885262125,
       *         0.7430227268212117
       *     ],
       *     oldestBlock: 15216343n,
       *     reward: [
       *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],
       *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],
       *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],
       *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]
       *     ]
       * }
       *
       * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > {
       *     baseFeePerGas: [
       *         22983878621,
       *         21417903463,
       *         19989260230,
       *         17770954829,
       *         18850641304
       *     ],
       *     gasUsedRatio: [
       *         0.22746546666666667,
       *         0.2331871,
       *         0.05610054885262125,
       *         0.7430227268212117
       *     ],
       *     oldestBlock: 15216343,
       *     reward: [
       *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],
       *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],
       *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],
       *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]
       *     ]
       * }
       * ```
       */
      getFeeHistory(blockCount_1) {
          return __awaiter$f(this, arguments, void 0, function* (blockCount, newestBlock = this.defaultBlock, rewardPercentiles, returnFormat = this.defaultReturnFormat) {
              return getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);
          });
      }
      /**
       * This method generates an access list for a transaction.
       *
       * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.
       * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.
       * @example
       * ```ts
       * web3.eth.createAccessList({
       * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',
       * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',
       * gasPrice: '0x3b9aca00',
       * gas: '0x3d0900',
       * to: '0x940b25304947ae863568B3804434EC77E2160b87'
       * })
       * .then(console.log);
       *
       * > {
       *  "accessList": [
       *     {
       *       "address": "0x15859bdf5aff2080a9968f6a410361e9598df62f",
       *       "storageKeys": [
       *         "0x0000000000000000000000000000000000000000000000000000000000000000"
       *       ]
       *     }
       *   ],
       *   "gasUsed": "0x7671"
       * }
       * ```
       */
      createAccessList(transaction_1) {
          return __awaiter$f(this, arguments, void 0, function* (transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
              return createAccessList(this, transaction, blockNumber, returnFormat);
          });
      }
      /**
       * This method sends EIP-712 typed data to the RPC provider to be signed.
       *
       * @param address The address that corresponds with the private key used to sign the typed data.
       * @param typedData The EIP-712 typed data object.
       * @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.
       * @returns The signed typed data.
       */
      signTypedData(address, typedData, useLegacy, returnFormat) {
          return __awaiter$f(this, void 0, void 0, function* () {
              var _a;
              if (useLegacy === void 0) { useLegacy = false; }
              if (returnFormat === void 0) { returnFormat = ((_a = this.defaultReturnFormat) !== null && _a !== void 0 ? _a : DEFAULT_RETURN_FORMAT); }
              return signTypedData(this, address, typedData, useLegacy, returnFormat);
          });
      }
      /**
       * Lets you subscribe to specific events in the blockchain.
       *
       * @param name - The subscription you want to subscribe to.
       * @param args - Optional additional parameters, depending on the subscription type.
       * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:
       *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.
       *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.
       *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.
       *  - subscription.args: The subscription arguments, used when re-subscribing.
       *
       *
       * You can use the subscription object to listen on:
       *
       * - on("data") - Fires on each incoming log with the log object as argument.
       * - on("changed") - Fires on each log which was removed from the blockchain. The log will have the additional property "removed: true".
       * - on("error") - Fires when an error in the subscription occurs.
       * - on("connected") - Fires once after the subscription successfully connected. Returns the subscription id.
       *
       * @example **Subscribe to Smart Contract events**
       * ```ts
       * // Subscribe to `logs`
       * const logSubscription = web3.eth.subscribe('logs', {
       *     address: '0x1234567890123456789012345678901234567890',
       *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']
       * });
       * logSubscription.on('data', (data: any) => console.log(data));
       * logSubscription.on('error', (error: any) => console.log(error));
       *
       * ```
       *
       * @example **Subscribe to new block headers**
       * ```ts
       * // Subscribe to `newBlockHeaders`
       * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');
       *
       * newBlocksSubscription.on('data', async blockhead => {
       * 	console.log('New block header: ', blockhead);
       *
       * 	// You do not need the next line, if you like to keep notified for every new block
       * 	await newBlocksSubscription.unsubscribe();
       * 	console.log('Unsubscribed from new block headers.');
       * });
       * newBlocksSubscription.on('error', error =>
       * 	console.log('Error when subscribing to New block header: ', error),
       * );
       * ```
       *
       * 	### subscribe('pendingTransactions')
       *
       * Subscribes to incoming pending transactions.
       * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').
       *
       * ```ts
       * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);
       * ```
       *
       * ### subscribe('newHeads')
       * ( same as subscribe('newBlockHeaders'))
       * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.
       *
       * The structure of a returned block header is {@link BlockHeaderOutput}:
       *
       * ```ts
       * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well
       *  'data',
       * console.log
       * );
       * >{
       * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',
       * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       * miner: '0x0000000000000000000000000000000000000000',
       * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',
       * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',
       * logsBloom: '0x
       * difficulty: 2n,
       * number: 21n,
       * gasLimit: 11738125n,
       * gasUsed: 830006n,
       * timestamp: 1678797237n,
       * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',
       * nonce: 0n
       * }
       * ```
       *
       * ### subscribe('syncing')
       * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.
       *
       * ```ts
       * (await web3.eth.subscribe('syncing')).on('changed', console.log);
       * > `true` // when syncing
       *
       * (await web3.eth.subscribe('syncing')).on('data', console.log);
       * > {
       *      startingBlock: 0,
       *      currentBlock: 0,
       *      highestBlock: 0,
       *      pulledStates: 0,
       *      knownStates: 0
       *   }
       * ```
       *
       * ### subscribe('logs', options)
       * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.
       *
       * options: You can subscribe to logs matching a given filter object, which can take the following parameters:
       * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.
       * - `address`: (optional) Contract address or a list of addresses from which logs should originate.
       * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.
       *
       * ```ts
       *  (await web3.eth.subscribe('logs', {
       *    address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
       *   })).on('data', console.log);
       *
       * > {
       * removed: false,
       * logIndex: 119n,
       * transactionIndex: 58n,
       * transactionHash: '0x61533efa77937360215069d5d6cb0be09a22af9721e6dc3df59d957833ed8870',
       * blockHash: '0xe32bb97084479d32247f66f8b46d00af2fbc3c2db2bc6e5843fe2e4d1ca9b099',
       * blockNumber: 18771966n,
       * address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
       * data: '0x00000000000000000000000000000000000000000000000000000000d88b2e40',
       * topics: [
       * '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
       * '0x0000000000000000000000002fb2457f6ec1865dc0d4e7300c696b69c2a1b989',
       * '0x00000000000000000000000027fd43babfbe83a81d14665b1a6fb8030a60c9b4'
       * ]
       * }
       *```
       */
      subscribe(name, args, returnFormat) {
          return __awaiter$f(this, void 0, void 0, function* () {
              var _a, _b;
              if (returnFormat === void 0) { returnFormat = ((_a = this.defaultReturnFormat) !== null && _a !== void 0 ? _a : DEFAULT_RETURN_FORMAT); }
              const subscription = yield ((_b = this.subscriptionManager) === null || _b === void 0 ? void 0 : _b.subscribe(name, args, returnFormat));
              if (subscription instanceof LogsSubscription &&
                  name === 'logs' &&
                  typeof args === 'object' &&
                  !isNullish(args.fromBlock) &&
                  Number.isFinite(Number(args.fromBlock))) {
                  setImmediate(() => {
                      this.getPastLogs(args)
                          .then(logs => {
                          for (const log of logs) {
                              subscription._processSubscriptionResult(log);
                          }
                      })
                          .catch(e => {
                          subscription._processSubscriptionError(e);
                      });
                  });
              }
              return subscription;
          });
      }
      static shouldClearSubscription({ sub }) {
          return !(sub instanceof SyncingSubscription);
      }
      /**
       * Resets subscriptions.
       *
       * @param notClearSyncing If `true` it keeps the `syncing` subscription.
       * @returns A promise to an array of subscription ids that were cleared.
       *
       * ```ts
       * web3.eth.clearSubscriptions().then(console.log);
       * > [...] An array of subscription ids that were cleared
       * ```
       */
      clearSubscriptions(notClearSyncing = false) {
          var _a;
          return (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.unsubscribe(
          // eslint-disable-next-line
          notClearSyncing ? Web3Eth.shouldClearSubscription : undefined);
      }
      /**
       * Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed.
       *
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns A filter id.
       *
       * ```ts
       * web3.eth.createNewPendingTransactionFilter().then(console.log);
       * > 1n
       *
       * web3.eth.createNewPendingTransactionFilter({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x1"
       * ```
       */
      createNewPendingTransactionFilter() {
          return __awaiter$f(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
              return createNewPendingTransactionFilter(this, returnFormat);
          });
      }
      /**
       * Creates a filter object, based on filter options, to notify when the state changes (logs)
       *
       * @param filter A {@link FilterParams} object containing the filter properties.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns A filter id.
       *
       * ```ts
       * web3.eth.createNewFilter(filterParams).then(console.log);
       * > 1n
       *
       * web3.eth.createNewFilter(filterParams, { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x1"
       * ```
       */
      createNewFilter(filter_1) {
          return __awaiter$f(this, arguments, void 0, function* (filter, returnFormat = this.defaultReturnFormat) {
              return createNewFilter(this, filter, returnFormat);
          });
      }
      /**
       * Creates a filter in the node, to notify when a new block arrives.
       *
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns A filter id.
       *
       * ```ts
       * web3.eth.createNewBlockFilter().then(console.log);
       * > 1n
       *
       * web3.eth.createNewBlockFilter({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x1"
       * ```
       */
      createNewBlockFilter() {
          return __awaiter$f(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
              return createNewBlockFilter(this, returnFormat);
          });
      }
      /**
       * Uninstalls a filter with given id. Should always be called when watch is no longer needed.
       *
       * @param filterIdentifier ({@link Numbers} filter id
       * @returns true if the filter was successfully uninstalled, otherwise false.
       *
       * ```ts
       * web3.eth.uninstallFilter(123).then(console.log);
       * > true
       *
       * web3.eth.uninstallFilter('0x123').then(console.log);
       * > true
       *
       * web3.eth.uninstallFilter(12n).then(console.log);
       * > true
       * ```
       */
      uninstallFilter(filterIdentifier) {
          return __awaiter$f(this, void 0, void 0, function* () {
              return uninstallFilter(this, filterIdentifier);
          });
      }
      /**
       *  Polling method for a filter, which returns an array of logs which occurred since last poll.
       *
       * @param filterIdentifier ({@link Numbers} filter id
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.
       *
       * ```ts
       * web3.eth.getFilterChanges(123).then(console.log);
       * > [{
       *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
       *       logIndex: 0n,
       *       transactionIndex: 0n,
       *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
       *       blockNumber: 1234n,
       *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
       *   },
       *   {...}]
       */
      getFilterChanges(filterIdentifier_1) {
          return __awaiter$f(this, arguments, void 0, function* (filterIdentifier, returnFormat = this.defaultReturnFormat) {
              return getFilterChanges(this, filterIdentifier, returnFormat);
          });
      }
      /**
       *  Returns an array of all logs matching filter with given id.
       *
       * @param filterIdentifier ({@link Numbers} filter id
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.
       *
       * ```ts
       * web3.eth.getFilterLogs(123).then(console.log);
       * > [{
       *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
       *       logIndex: 0n,
       *       transactionIndex: 0n,
       *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
       *       blockNumber: 1234n,
       *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
       *   },
       *   {...}]
       */
      getFilterLogs(filterIdentifier_1) {
          return __awaiter$f(this, arguments, void 0, function* (filterIdentifier, returnFormat = this.defaultReturnFormat) {
              return getFilterLogs(this, filterIdentifier, returnFormat);
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const validateCustomChainInfo = (transaction) => {
      if (!isNullish$1(transaction.common)) {
          if (isNullish$1(transaction.common.customChain))
              throw new MissingCustomChainError();
          if (isNullish$1(transaction.common.customChain.chainId))
              throw new MissingCustomChainIdError();
          if (!isNullish$1(transaction.chainId) &&
              transaction.chainId !== transaction.common.customChain.chainId)
              throw new ChainIdMismatchError({
                  txChainId: transaction.chainId,
                  customChainId: transaction.common.customChain.chainId,
              });
      }
  };
  const validateChainInfo = (transaction) => {
      if (!isNullish$1(transaction.common) &&
          !isNullish$1(transaction.chain) &&
          !isNullish$1(transaction.hardfork)) {
          throw new CommonOrChainAndHardforkError();
      }
      if ((!isNullish$1(transaction.chain) && isNullish$1(transaction.hardfork)) ||
          (!isNullish$1(transaction.hardfork) && isNullish$1(transaction.chain)))
          throw new MissingChainOrHardforkError({
              chain: transaction.chain,
              hardfork: transaction.hardfork,
          });
  };
  const validateBaseChain = (transaction) => {
      if (!isNullish$1(transaction.common))
          if (!isNullish$1(transaction.common.baseChain))
              if (!isNullish$1(transaction.chain) &&
                  transaction.chain !== transaction.common.baseChain) {
                  throw new ChainMismatchError({
                      txChain: transaction.chain,
                      baseChain: transaction.common.baseChain,
                  });
              }
  };
  const validateHardfork = (transaction) => {
      if (!isNullish$1(transaction.common))
          if (!isNullish$1(transaction.common.hardfork))
              if (!isNullish$1(transaction.hardfork) &&
                  transaction.hardfork !== transaction.common.hardfork) {
                  throw new HardforkMismatchError({
                      txHardfork: transaction.hardfork,
                      commonHardfork: transaction.common.hardfork,
                  });
              }
  };
  const validateLegacyGas = (transaction) => {
      if (
      // This check is verifying gas and gasPrice aren't less than 0.
      isNullish$1(transaction.gas) ||
          !isUInt(transaction.gas) ||
          isNullish$1(transaction.gasPrice) ||
          !isUInt(transaction.gasPrice))
          throw new InvalidGasOrGasPrice({
              gas: transaction.gas,
              gasPrice: transaction.gasPrice,
          });
      if (!isNullish$1(transaction.maxFeePerGas) || !isNullish$1(transaction.maxPriorityFeePerGas))
          throw new UnsupportedFeeMarketError({
              maxFeePerGas: transaction.maxFeePerGas,
              maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
          });
  };
  const validateFeeMarketGas = (transaction) => {
      // These errors come from 1.x, so they must be checked before
      // InvalidMaxPriorityFeePerGasOrMaxFeePerGas to throw the same error
      // for the same code executing in 1.x
      if (!isNullish$1(transaction.gasPrice) && transaction.type === '0x2')
          throw new Eip1559GasPriceError(transaction.gasPrice);
      if (transaction.type === '0x0' || transaction.type === '0x1')
          throw new UnsupportedFeeMarketError({
              maxFeePerGas: transaction.maxFeePerGas,
              maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
          });
      if (isNullish$1(transaction.maxFeePerGas) ||
          !isUInt(transaction.maxFeePerGas) ||
          isNullish$1(transaction.maxPriorityFeePerGas) ||
          !isUInt(transaction.maxPriorityFeePerGas))
          throw new InvalidMaxPriorityFeePerGasOrMaxFeePerGas({
              maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
              maxFeePerGas: transaction.maxFeePerGas,
          });
  };
  /**
   * This method checks if all required gas properties are present for either
   * legacy gas (type 0x0 and 0x1) OR fee market transactions (0x2)
   */
  const validateGas = (transaction) => {
      const gasPresent = !isNullish$1(transaction.gas) || !isNullish$1(transaction.gasLimit);
      const legacyGasPresent = gasPresent && !isNullish$1(transaction.gasPrice);
      const feeMarketGasPresent = gasPresent &&
          !isNullish$1(transaction.maxPriorityFeePerGas) &&
          !isNullish$1(transaction.maxFeePerGas);
      if (!legacyGasPresent && !feeMarketGasPresent)
          throw new MissingGasError({
              gas: transaction.gas,
              gasPrice: transaction.gasPrice,
              maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
              maxFeePerGas: transaction.maxFeePerGas,
          });
      if (legacyGasPresent && feeMarketGasPresent)
          throw new TransactionGasMismatchError({
              gas: transaction.gas,
              gasPrice: transaction.gasPrice,
              maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
              maxFeePerGas: transaction.maxFeePerGas,
          });
      (legacyGasPresent ? validateLegacyGas : validateFeeMarketGas)(transaction);
      (!isNullish$1(transaction.type) && transaction.type > '0x1'
          ? validateFeeMarketGas
          : validateLegacyGas)(transaction);
  };
  const validateTransactionForSigning = (transaction, overrideMethod, options = { transactionSchema: undefined }) => {
      if (!isNullish$1(overrideMethod)) {
          overrideMethod(transaction);
          return;
      }
      if (typeof transaction !== 'object' || isNullish$1(transaction))
          throw new InvalidTransactionObjectError(transaction);
      validateCustomChainInfo(transaction);
      validateChainInfo(transaction);
      validateBaseChain(transaction);
      validateHardfork(transaction);
      const formattedTransaction = formatTransaction(transaction, ETH_DATA_FORMAT, {
          transactionSchema: options.transactionSchema,
      });
      validateGas(formattedTransaction);
      if (isNullish$1(formattedTransaction.nonce) ||
          isNullish$1(formattedTransaction.chainId) ||
          formattedTransaction.nonce.startsWith('-') ||
          formattedTransaction.chainId.startsWith('-'))
          throw new InvalidNonceOrChainIdError({
              nonce: transaction.nonce,
              chainId: transaction.chainId,
          });
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$e = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const getEthereumjsTxDataFromTransaction = (transaction) => {
      var _a, _b;
      return (Object.assign(Object.assign({}, transaction), { nonce: transaction.nonce, gasPrice: transaction.gasPrice, gasLimit: (_a = transaction.gasLimit) !== null && _a !== void 0 ? _a : transaction.gas, to: transaction.to, value: transaction.value, data: (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.input, type: transaction.type, chainId: transaction.chainId, accessList: transaction.accessList, maxPriorityFeePerGas: transaction.maxPriorityFeePerGas, maxFeePerGas: transaction.maxFeePerGas }));
  };
  const getEthereumjsTransactionOptions = (transaction, web3Context) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
      const hasTransactionSigningOptions = (!isNullish$1(transaction.chain) && !isNullish$1(transaction.hardfork)) ||
          !isNullish$1(transaction.common);
      let common;
      if (!hasTransactionSigningOptions) {
          // if defaultcommon is specified, use that.
          if (web3Context.defaultCommon) {
              common = Object.assign({}, web3Context.defaultCommon);
              if (isNullish$1(common.hardfork))
                  common.hardfork = (_a = transaction.hardfork) !== null && _a !== void 0 ? _a : web3Context.defaultHardfork;
              if (isNullish$1(common.baseChain))
                  common.baseChain = web3Context.defaultChain;
          }
          else {
              common = Common.custom({
                  name: 'custom-network',
                  chainId: toNumber(transaction.chainId),
                  networkId: !isNullish$1(transaction.networkId)
                      ? toNumber(transaction.networkId)
                      : undefined,
                  defaultHardfork: (_b = transaction.hardfork) !== null && _b !== void 0 ? _b : web3Context.defaultHardfork,
              }, {
                  baseChain: web3Context.defaultChain,
              });
          }
      }
      else {
          const name = (_f = (_e = (_d = (_c = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _c === void 0 ? void 0 : _c.customChain) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : transaction.chain) !== null && _f !== void 0 ? _f : 'custom-network';
          const chainId = toNumber((_j = (_h = (_g = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _g === void 0 ? void 0 : _g.customChain) === null || _h === void 0 ? void 0 : _h.chainId) !== null && _j !== void 0 ? _j : transaction === null || transaction === void 0 ? void 0 : transaction.chainId);
          const networkId = toNumber((_m = (_l = (_k = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _k === void 0 ? void 0 : _k.customChain) === null || _l === void 0 ? void 0 : _l.networkId) !== null && _m !== void 0 ? _m : transaction === null || transaction === void 0 ? void 0 : transaction.networkId);
          const defaultHardfork = (_q = (_p = (_o = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _o === void 0 ? void 0 : _o.hardfork) !== null && _p !== void 0 ? _p : transaction === null || transaction === void 0 ? void 0 : transaction.hardfork) !== null && _q !== void 0 ? _q : web3Context.defaultHardfork;
          const baseChain = (_t = (_s = (_r = transaction.common) === null || _r === void 0 ? void 0 : _r.baseChain) !== null && _s !== void 0 ? _s : transaction.chain) !== null && _t !== void 0 ? _t : web3Context.defaultChain;
          if (chainId && networkId && name) {
              common = Common.custom({
                  name,
                  chainId,
                  networkId,
                  defaultHardfork,
              }, {
                  baseChain,
              });
          }
      }
      return { common };
  };
  const prepareTransactionForSigning = (transaction_1, web3Context_1, privateKey_1, ...args_1) => __awaiter$e(void 0, [transaction_1, web3Context_1, privateKey_1, ...args_1], void 0, function* (transaction, web3Context, privateKey, fillGasPrice = false, fillGasLimit = true) {
      const populatedTransaction = (yield transactionBuilder({
          transaction,
          web3Context,
          privateKey,
          fillGasPrice,
          fillGasLimit,
      }));
      const formattedTransaction = formatTransaction(populatedTransaction, ETH_DATA_FORMAT, {
          transactionSchema: web3Context.config.customTransactionSchema,
      });
      validateTransactionForSigning(formattedTransaction, undefined, {
          transactionSchema: web3Context.config.customTransactionSchema,
      });
      return TransactionFactory.fromTxData(getEthereumjsTxDataFromTransaction(formattedTransaction), getEthereumjsTransactionOptions(formattedTransaction, web3Context));
  });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isAbiErrorFragment = (item) => !isNullish(item) &&
      typeof item === 'object' &&
      !isNullish(item.type) &&
      item.type === 'error';
  const isAbiEventFragment = (item) => !isNullish(item) &&
      typeof item === 'object' &&
      !isNullish(item.type) &&
      item.type === 'event';
  const isAbiFunctionFragment = (item) => !isNullish(item) &&
      typeof item === 'object' &&
      !isNullish(item.type) &&
      item.type === 'function';
  const isAbiConstructorFragment = (item) => !isNullish(item) &&
      typeof item === 'object' &&
      !isNullish(item.type) &&
      item.type === 'constructor';
  /**
   * Check if type is simplified struct format
   */
  const isSimplifiedStructFormat = (type) => typeof type === 'object' &&
      typeof type.components === 'undefined' &&
      typeof type.name === 'undefined';
  /**
   * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
   */
  const mapStructNameAndType = (structName) => structName.includes('[]')
      ? { type: 'tuple[]', name: structName.slice(0, -2) }
      : { type: 'tuple', name: structName };
  /**
   * Maps the simplified format in to the expected format of the ABICoder
   */
  const mapStructToCoderFormat = (struct) => {
      const components = [];
      for (const key of Object.keys(struct)) {
          const item = struct[key];
          if (typeof item === 'object') {
              components.push(Object.assign(Object.assign({}, mapStructNameAndType(key)), { components: mapStructToCoderFormat(item) }));
          }
          else {
              components.push({
                  name: key,
                  type: struct[key],
              });
          }
      }
      return components;
  };
  /**
   *  used to flatten json abi inputs/outputs into an array of type-representing-strings
   */
  const flattenTypes = (includeTuple, puts) => {
      const types = [];
      puts.forEach(param => {
          if (typeof param.components === 'object') {
              if (!param.type.startsWith('tuple')) {
                  throw new AbiError(`Invalid value given "${param.type}". Error: components found but type is not tuple.`);
              }
              const arrayBracket = param.type.indexOf('[');
              const suffix = arrayBracket >= 0 ? param.type.substring(arrayBracket) : '';
              const result = flattenTypes(includeTuple, param.components);
              {
                  types.push(`(${result.join(',')})${suffix}`);
              }
          }
          else {
              types.push(param.type);
          }
      });
      return types;
  };
  /**
   * Should be used to create full function/event name from json abi
   * returns a string
   */
  const jsonInterfaceMethodToString = (json) => {
      var _a, _b, _c, _d;
      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
      if (isAbiErrorFragment(json) || isAbiEventFragment(json) || isAbiFunctionFragment(json)) {
          if ((_a = json.name) === null || _a === void 0 ? void 0 : _a.includes('(')) {
              return json.name;
          }
          return `${(_b = json.name) !== null && _b !== void 0 ? _b : ''}(${flattenTypes(false, (_c = json.inputs) !== null && _c !== void 0 ? _c : []).join(',')})`;
      }
      // Constructor fragment
      return `(${flattenTypes(false, (_d = json.inputs) !== null && _d !== void 0 ? _d : []).join(',')})`;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   *
   *  @module ABI
   */
  /**
   * Encodes the error name to its ABI signature, which are the sha3 hash of the error name including input types.
   */
  const encodeErrorSignature = (functionName) => {
      if (typeof functionName !== 'string' && !isAbiErrorFragment(functionName)) {
          throw new AbiError('Invalid parameter value in encodeErrorSignature');
      }
      let name;
      if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {
          name = jsonInterfaceMethodToString(functionName);
      }
      else {
          name = functionName;
      }
      return sha3Raw(name);
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   *
   *  @module ABI
   */
  /**
   * Encodes the event name to its ABI signature, which are the sha3 hash of the event name including input types.
   * @param functionName - The event name to encode, or the {@link AbiEventFragment} object of the event. If string, it has to be in the form of `eventName(param1Type,param2Type,...)`. eg: myEvent(uint256,bytes32).
   * @returns - The ABI signature of the event.
   *
   * @example
   * ```ts
   * const event = web3.eth.abi.encodeEventSignature({
   *   name: "myEvent",
   *   type: "event",
   *   inputs: [
   *     {
   *       type: "uint256",
   *       name: "myNumber",
   *     },
   *     {
   *       type: "bytes32",
   *       name: "myBytes",
   *     },
   *   ],
   * });
   * console.log(event);
   * > 0xf2eeb729e636a8cb783be044acf6b7b1e2c5863735b60d6daae84c366ee87d97
   *
   *  const event = web3.eth.abi.encodeEventSignature({
   *   inputs: [
   *     {
   *       indexed: true,
   *       name: "from",
   *       type: "address",
   *     },
   *     {
   *       indexed: true,
   *       name: "to",
   *       type: "address",
   *     },
   *     {
   *       indexed: false,
   *       name: "value",
   *       type: "uint256",
   *     },
   *   ],
   *   name: "Transfer",
   *   type: "event",
   * });
   * console.log(event);
   * > 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
   * ```
   */
  const encodeEventSignature = (functionName) => {
      if (typeof functionName !== 'string' && !isAbiEventFragment(functionName)) {
          throw new AbiError('Invalid parameter value in encodeEventSignature');
      }
      let name;
      if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {
          name = jsonInterfaceMethodToString(functionName);
      }
      else {
          name = functionName;
      }
      return sha3Raw(name);
  };

  // src/regex.ts
  function execTyped(regex, string) {
    const match = regex.exec(string);
    return match?.groups;
  }
  var bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
  var integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
  var isTupleRegex = /^\(.+?\).*?$/;

  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // package.json
  var name = "abitype";
  var version = "0.7.1";

  // src/errors.ts
  var BaseError = class extends Error {
    constructor(shortMessage, args = {}) {
      const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
      const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;
      const message = [
        shortMessage || "An error occurred.",
        "",
        ...args.metaMessages ? [...args.metaMessages, ""] : [],
        ...docsPath ? [`Docs: https://abitype.dev${docsPath}`] : [],
        ...details ? [`Details: ${details}`] : [],
        `Version: ${name}@${version}`
      ].join("\n");
      super(message);
      __publicField(this, "details");
      __publicField(this, "docsPath");
      __publicField(this, "metaMessages");
      __publicField(this, "shortMessage");
      __publicField(this, "name", "AbiTypeError");
      if (args.cause)
        this.cause = args.cause;
      this.details = details;
      this.docsPath = docsPath;
      this.metaMessages = args.metaMessages;
      this.shortMessage = shortMessage;
    }
  };
  var structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \{(?<properties>.*?)\}$/;
  function isStructSignature(signature) {
    return structSignatureRegex.test(signature);
  }
  function execStructSignature(signature) {
    return execTyped(
      structSignatureRegex,
      signature
    );
  }
  var modifiers = /* @__PURE__ */ new Set([
    "memory",
    "indexed",
    "storage",
    "calldata"
  ]);
  var functionModifiers = /* @__PURE__ */ new Set([
    "calldata",
    "memory",
    "storage"
  ]);

  // src/human-readable/runtime/cache.ts
  function getParameterCacheKey(param, type) {
    if (type)
      return `${type}:${param}`;
    return param;
  }
  var parameterCache = /* @__PURE__ */ new Map([
    // Unnamed
    ["address", { type: "address" }],
    ["bool", { type: "bool" }],
    ["bytes", { type: "bytes" }],
    ["bytes32", { type: "bytes32" }],
    ["int", { type: "int256" }],
    ["int256", { type: "int256" }],
    ["string", { type: "string" }],
    ["uint", { type: "uint256" }],
    ["uint8", { type: "uint8" }],
    ["uint16", { type: "uint16" }],
    ["uint24", { type: "uint24" }],
    ["uint32", { type: "uint32" }],
    ["uint64", { type: "uint64" }],
    ["uint96", { type: "uint96" }],
    ["uint112", { type: "uint112" }],
    ["uint160", { type: "uint160" }],
    ["uint192", { type: "uint192" }],
    ["uint256", { type: "uint256" }],
    // Named
    ["address owner", { type: "address", name: "owner" }],
    ["address to", { type: "address", name: "to" }],
    ["bool approved", { type: "bool", name: "approved" }],
    ["bytes _data", { type: "bytes", name: "_data" }],
    ["bytes data", { type: "bytes", name: "data" }],
    ["bytes signature", { type: "bytes", name: "signature" }],
    ["bytes32 hash", { type: "bytes32", name: "hash" }],
    ["bytes32 r", { type: "bytes32", name: "r" }],
    ["bytes32 root", { type: "bytes32", name: "root" }],
    ["bytes32 s", { type: "bytes32", name: "s" }],
    ["string name", { type: "string", name: "name" }],
    ["string symbol", { type: "string", name: "symbol" }],
    ["string tokenURI", { type: "string", name: "tokenURI" }],
    ["uint tokenId", { type: "uint256", name: "tokenId" }],
    ["uint8 v", { type: "uint8", name: "v" }],
    ["uint256 balance", { type: "uint256", name: "balance" }],
    ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
    ["uint256 value", { type: "uint256", name: "value" }],
    // Indexed
    [
      "event:address indexed from",
      { type: "address", name: "from", indexed: true }
    ],
    ["event:address indexed to", { type: "address", name: "to", indexed: true }],
    [
      "event:uint indexed tokenId",
      { type: "uint256", name: "tokenId", indexed: true }
    ],
    [
      "event:uint256 indexed tokenId",
      { type: "uint256", name: "tokenId", indexed: true }
    ]
  ]);
  var abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
  var abiParameterWithTupleRegex = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
  var dynamicIntegerRegex = /^u?int$/;
  function parseAbiParameter(param, options) {
    const parameterCacheKey = getParameterCacheKey(param, options?.type);
    if (parameterCache.has(parameterCacheKey))
      return parameterCache.get(parameterCacheKey);
    const isTuple = isTupleRegex.test(param);
    const match = execTyped(
      isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex,
      param
    );
    if (!match)
      throw new BaseError("Invalid ABI parameter.", {
        details: param
      });
    if (match.name && isSolidityKeyword(match.name))
      throw new BaseError("Invalid ABI parameter.", {
        details: param,
        metaMessages: [
          `"${match.name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
        ]
      });
    const name2 = match.name ? { name: match.name } : {};
    const indexed = match.modifier === "indexed" ? { indexed: true } : {};
    const structs = options?.structs ?? {};
    let type;
    let components = {};
    if (isTuple) {
      type = "tuple";
      const params = splitParameters(match.type);
      const components_ = [];
      const length = params.length;
      for (let i = 0; i < length; i++) {
        components_.push(parseAbiParameter(params[i], { structs }));
      }
      components = { components: components_ };
    } else if (match.type in structs) {
      type = "tuple";
      components = { components: structs[match.type] };
    } else if (dynamicIntegerRegex.test(match.type)) {
      type = `${match.type}256`;
    } else {
      type = match.type;
      if (!(options?.type === "struct") && !isSolidityType(type))
        throw new BaseError("Unknown type.", {
          metaMessages: [`Type "${type}" is not a valid ABI type.`]
        });
    }
    if (match.modifier) {
      if (!options?.modifiers?.has?.(match.modifier))
        throw new BaseError("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`
          ]
        });
      if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array))
        throw new BaseError("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`,
            `Data location can only be specified for array, struct, or mapping types, but "${match.modifier}" was given.`
          ]
        });
    }
    const abiParameter = {
      type: `${type}${match.array ?? ""}`,
      ...name2,
      ...indexed,
      ...components
    };
    parameterCache.set(parameterCacheKey, abiParameter);
    return abiParameter;
  }
  function splitParameters(params, result = [], current = "", depth = 0) {
    if (params === "") {
      if (current === "")
        return result;
      if (depth !== 0)
        throw new BaseError("Unbalanced parentheses.", {
          metaMessages: [
            `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
          ],
          details: `Depth "${depth}"`
        });
      return [...result, current.trim()];
    }
    const length = params.length;
    for (let i = 0; i < length; i++) {
      const char = params[i];
      const tail = params.slice(i + 1);
      switch (char) {
        case ",":
          return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);
        case "(":
          return splitParameters(tail, result, `${current}${char}`, depth + 1);
        case ")":
          return splitParameters(tail, result, `${current}${char}`, depth - 1);
        default:
          return splitParameters(tail, result, `${current}${char}`, depth);
      }
    }
    return [];
  }
  function isSolidityType(type) {
    return type === "address" || type === "bool" || type === "function" || type === "string" || bytesRegex.test(type) || integerRegex.test(type);
  }
  var protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
  function isSolidityKeyword(name2) {
    return name2 === "address" || name2 === "bool" || name2 === "function" || name2 === "string" || name2 === "tuple" || bytesRegex.test(name2) || integerRegex.test(name2) || protectedKeywordsRegex.test(name2);
  }
  function isValidDataLocation(type, isArray) {
    return isArray || type === "bytes" || type === "string" || type === "tuple";
  }

  // src/human-readable/runtime/structs.ts
  function parseStructs(signatures) {
    const shallowStructs = {};
    const signaturesLength = signatures.length;
    for (let i = 0; i < signaturesLength; i++) {
      const signature = signatures[i];
      if (!isStructSignature(signature))
        continue;
      const match = execStructSignature(signature);
      if (!match)
        throw new BaseError("Invalid struct signature.", {
          details: signature
        });
      const properties = match.properties.split(";");
      const components = [];
      const propertiesLength = properties.length;
      for (let k = 0; k < propertiesLength; k++) {
        const property = properties[k];
        const trimmed = property.trim();
        if (!trimmed)
          continue;
        const abiParameter = parseAbiParameter(trimmed, {
          type: "struct"
        });
        components.push(abiParameter);
      }
      if (!components.length)
        throw new BaseError("Invalid struct signature.", {
          details: signature,
          metaMessages: ["No properties exist."]
        });
      shallowStructs[match.name] = components;
    }
    const resolvedStructs = {};
    const entries = Object.entries(shallowStructs);
    const entriesLength = entries.length;
    for (let i = 0; i < entriesLength; i++) {
      const [name2, parameters] = entries[i];
      resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);
    }
    return resolvedStructs;
  }
  var typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?$/;
  function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
    const components = [];
    const length = abiParameters.length;
    for (let i = 0; i < length; i++) {
      const abiParameter = abiParameters[i];
      const isTuple = isTupleRegex.test(abiParameter.type);
      if (isTuple)
        components.push(abiParameter);
      else {
        const match = execTyped(
          typeWithoutTupleRegex,
          abiParameter.type
        );
        if (!match?.type)
          throw new BaseError("Invalid ABI parameter.", {
            details: JSON.stringify(abiParameter, null, 2),
            metaMessages: ["ABI parameter type is invalid."]
          });
        const { array, type } = match;
        if (type in structs) {
          if (ancestors.has(type))
            throw new BaseError("Circular reference detected.", {
              metaMessages: [`Struct "${type}" is a circular reference.`]
            });
          components.push({
            ...abiParameter,
            type: `tuple${array ?? ""}`,
            components: resolveStructs(
              structs[type] ?? [],
              structs,
              /* @__PURE__ */ new Set([...ancestors, type])
            )
          });
        } else {
          if (isSolidityType(type))
            components.push(abiParameter);
          else
            throw new BaseError("Unknown type.", {
              metaMessages: [
                `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
              ]
            });
        }
      }
    }
    return components;
  }

  // src/human-readable/parseAbiParameter.ts
  function parseAbiParameter2(param) {
    let abiParameter;
    if (typeof param === "string")
      abiParameter = parseAbiParameter(param, {
        modifiers
      });
    else {
      const structs = parseStructs(param);
      const length = param.length;
      for (let i = 0; i < length; i++) {
        const signature = param[i];
        if (isStructSignature(signature))
          continue;
        abiParameter = parseAbiParameter(signature, { modifiers, structs });
        break;
      }
    }
    if (!abiParameter)
      throw new BaseError("Failed to parse ABI parameter.", {
        details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,
        docsPath: "/api/human.html#parseabiparameter-1"
      });
    return abiParameter;
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const WORD_SIZE = 32;
  function alloc(size = 0) {
      var _a;
      if (((_a = globalThis.Buffer) === null || _a === void 0 ? void 0 : _a.alloc) !== undefined) {
          const buf = globalThis.Buffer.alloc(size);
          return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
      }
      return new Uint8Array(size);
  }
  function convertExternalAbiParameter(abiParam) {
      var _a, _b;
      return Object.assign(Object.assign({}, abiParam), { name: (_a = abiParam.name) !== null && _a !== void 0 ? _a : '', components: (_b = abiParam.components) === null || _b === void 0 ? void 0 : _b.map(c => convertExternalAbiParameter(c)) });
  }
  function isAbiParameter(param) {
      return (!isNullish(param) &&
          typeof param === 'object' &&
          !isNullish(param.type) &&
          typeof param.type === 'string');
  }
  function toAbiParams(abi) {
      return abi.map(input => {
          var _a;
          if (isAbiParameter(input)) {
              return input;
          }
          if (typeof input === 'string') {
              return convertExternalAbiParameter(parseAbiParameter2(input.replace(/tuple/, '')));
          }
          if (isSimplifiedStructFormat(input)) {
              const structName = Object.keys(input)[0];
              const structInfo = mapStructNameAndType(structName);
              structInfo.name = (_a = structInfo.name) !== null && _a !== void 0 ? _a : '';
              return Object.assign(Object.assign({}, structInfo), { components: mapStructToCoderFormat(input[structName]) });
          }
          throw new AbiError('Invalid abi');
      });
  }
  function extractArrayType(param) {
      const arrayParenthesisStart = param.type.lastIndexOf('[');
      const arrayParamType = param.type.substring(0, arrayParenthesisStart);
      const sizeString = param.type.substring(arrayParenthesisStart);
      let size = -1;
      if (sizeString !== '[]') {
          size = Number(sizeString.slice(1, -1));
          // eslint-disable-next-line no-restricted-globals
          if (isNaN(size)) {
              throw new AbiError('Invalid fixed array size', { size: sizeString });
          }
      }
      return {
          param: { type: arrayParamType, name: '', components: param.components },
          size,
      };
  }
  /**
   * Param is dynamic if it's dynamic base type or if some of his children (components, array items)
   * is of dynamic type
   * @param param
   */
  function isDynamic(param) {
      var _a, _b;
      if (param.type === 'string' || param.type === 'bytes' || param.type.endsWith('[]'))
          return true;
      if (param.type === 'tuple') {
          return (_b = (_a = param.components) === null || _a === void 0 ? void 0 : _a.some(isDynamic)) !== null && _b !== void 0 ? _b : false;
      }
      if (param.type.endsWith(']')) {
          return isDynamic(extractArrayType(param).param);
      }
      return false;
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const ADDRESS_BYTES_COUNT = 20;
  const ADDRESS_OFFSET = WORD_SIZE - ADDRESS_BYTES_COUNT;
  function encodeAddress(param, input) {
      if (typeof input !== 'string') {
          throw new AbiError('address type expects string as input type', {
              value: input,
              name: param.name,
              type: param.type,
          });
      }
      let address = input.toLowerCase();
      if (!address.startsWith('0x')) {
          address = `0x${address}`;
      }
      if (!isAddress$1(address)) {
          throw new AbiError('provided input is not valid address', {
              value: input,
              name: param.name,
              type: param.type,
          });
      }
      // for better performance, we could convert hex to destination bytes directly (encoded var)
      const addressBytes = hexToUint8Array$1(address);
      // expand address to WORD_SIZE
      const encoded = alloc(WORD_SIZE);
      encoded.set(addressBytes, ADDRESS_OFFSET);
      return {
          dynamic: false,
          encoded,
      };
  }
  function decodeAddress(_param, bytes) {
      const addressBytes = bytes.subarray(ADDRESS_OFFSET, WORD_SIZE);
      if (addressBytes.length !== ADDRESS_BYTES_COUNT) {
          throw new AbiError('Invalid decoding input, not enough bytes to decode address', { bytes });
      }
      const result = uint8ArrayToHexString$1(addressBytes);
      // should we check is decoded value is valid address?
      // if(!isAddress(result)) {
      //     throw new AbiError("encoded data is not valid address", {
      //         address: result,
      //     });
      // }
      return {
          result: toChecksumAddress(result),
          encoded: bytes.subarray(WORD_SIZE),
          consumed: WORD_SIZE,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /*
   * this variable contains the precalculated limits for all the numbers for uint and int types
   */
  const numberLimits = new Map();
  let base = BigInt(256); // 2 ^ 8 = 256
  for (let i = 8; i <= 256; i += 8) {
      numberLimits.set(`uint${i}`, {
          min: BigInt(0),
          max: base - BigInt(1),
      });
      numberLimits.set(`int${i}`, {
          min: -base / BigInt(2),
          max: base / BigInt(2) - BigInt(1),
      });
      base *= BigInt(256);
  }
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  numberLimits.set(`int`, numberLimits.get('int256'));
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  numberLimits.set(`uint`, numberLimits.get('uint256'));

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // eslint-disable-next-line no-bitwise
  const mask = BigInt(1) << BigInt(256);
  function bigIntToUint8Array(value, byteLength = WORD_SIZE) {
      let hexValue;
      if (value < 0) {
          hexValue = (mask + value).toString(16);
      }
      else {
          hexValue = value.toString(16);
      }
      hexValue = padLeft(hexValue, byteLength * 2);
      return hexToUint8Array$1(hexValue);
  }
  function uint8ArrayToBigInt(value, max) {
      const hexValue = uint8ArrayToHexString$1(value);
      const result = BigInt(hexValue);
      if (result <= max)
          return result;
      return result - mask;
  }
  function encodeNumber(param, input) {
      let value;
      try {
          value = toBigInt(input);
      }
      catch (e) {
          throw new AbiError('provided input is not number value', {
              type: param.type,
              value: input,
              name: param.name,
          });
      }
      const limit = numberLimits.get(param.type);
      if (!limit) {
          throw new AbiError('provided abi contains invalid number datatype', { type: param.type });
      }
      if (value < limit.min) {
          throw new AbiError('provided input is less then minimum for given type', {
              type: param.type,
              value: input,
              name: param.name,
              minimum: limit.min.toString(),
          });
      }
      if (value > limit.max) {
          throw new AbiError('provided input is greater then maximum for given type', {
              type: param.type,
              value: input,
              name: param.name,
              maximum: limit.max.toString(),
          });
      }
      return {
          dynamic: false,
          encoded: bigIntToUint8Array(value),
      };
  }
  function decodeNumber(param, bytes) {
      if (bytes.length < WORD_SIZE) {
          throw new AbiError('Not enough bytes left to decode', { param, bytesLeft: bytes.length });
      }
      const boolBytes = bytes.subarray(0, WORD_SIZE);
      const limit = numberLimits.get(param.type);
      if (!limit) {
          throw new AbiError('provided abi contains invalid number datatype', { type: param.type });
      }
      const numberResult = uint8ArrayToBigInt(boolBytes, limit.max);
      if (numberResult < limit.min) {
          throw new AbiError('decoded value is less then minimum for given type', {
              type: param.type,
              value: numberResult,
              name: param.name,
              minimum: limit.min.toString(),
          });
      }
      if (numberResult > limit.max) {
          throw new AbiError('decoded value is greater then maximum for given type', {
              type: param.type,
              value: numberResult,
              name: param.name,
              maximum: limit.max.toString(),
          });
      }
      return {
          result: numberResult,
          encoded: bytes.subarray(WORD_SIZE),
          consumed: WORD_SIZE,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function encodeBoolean(param, input) {
      let value;
      try {
          value = toBool(input);
      }
      catch (e) {
          if (e instanceof InvalidBooleanError) {
              throw new AbiError('provided input is not valid boolean value', {
                  type: param.type,
                  value: input,
                  name: param.name,
              });
          }
      }
      return encodeNumber({ type: 'uint8', name: '' }, Number(value));
  }
  function decodeBool(_param, bytes) {
      const numberResult = decodeNumber({ type: 'uint8', name: '' }, bytes);
      if (numberResult.result > 1 || numberResult.result < 0) {
          throw new AbiError('Invalid boolean value encoded', {
              boolBytes: bytes.subarray(0, WORD_SIZE),
              numberResult,
          });
      }
      return {
          result: numberResult.result === BigInt(1),
          encoded: numberResult.encoded,
          consumed: WORD_SIZE,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const MAX_STATIC_BYTES_COUNT = 32;
  function encodeBytes(param, input) {
      // hack for odd length hex strings
      if (typeof input === 'string' && input.length % 2 !== 0) {
          // eslint-disable-next-line no-param-reassign
          input += '0';
      }
      if (!isBytes$1(input)) {
          throw new AbiError('provided input is not valid bytes value', {
              type: param.type,
              value: input,
              name: param.name,
          });
      }
      const bytes = bytesToUint8Array(input);
      const [, size] = param.type.split('bytes');
      // fixed size
      if (size) {
          if (Number(size) > MAX_STATIC_BYTES_COUNT || Number(size) < 1) {
              throw new AbiError('invalid bytes type. Static byte type can have between 1 and 32 bytes', {
                  type: param.type,
              });
          }
          if (Number(size) < bytes.length) {
              throw new AbiError('provided input size is different than type size', {
                  type: param.type,
                  value: input,
                  name: param.name,
              });
          }
          const encoded = alloc(WORD_SIZE);
          encoded.set(bytes);
          return {
              dynamic: false,
              encoded,
          };
      }
      const partsLength = Math.ceil(bytes.length / WORD_SIZE);
      // one word for length of data + WORD for each part of actual data
      const encoded = alloc(WORD_SIZE + partsLength * WORD_SIZE);
      encoded.set(encodeNumber({ type: 'uint32', name: '' }, bytes.length).encoded);
      encoded.set(bytes, WORD_SIZE);
      return {
          dynamic: true,
          encoded,
      };
  }
  function decodeBytes(param, bytes) {
      const [, sizeString] = param.type.split('bytes');
      let size = Number(sizeString);
      let remainingBytes = bytes;
      let partsCount = 1;
      let consumed = 0;
      if (!size) {
          // dynamic bytes
          const result = decodeNumber({ type: 'uint32', name: '' }, remainingBytes);
          size = Number(result.result);
          consumed += result.consumed;
          remainingBytes = result.encoded;
          partsCount = Math.ceil(size / WORD_SIZE);
      }
      if (size > bytes.length) {
          throw new AbiError('there is not enough data to decode', {
              type: param.type,
              encoded: bytes,
              size,
          });
      }
      return {
          result: bytesToHex$1(remainingBytes.subarray(0, size)),
          encoded: remainingBytes.subarray(partsCount * WORD_SIZE),
          consumed: consumed + partsCount * WORD_SIZE,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function encodeString(_param, input) {
      if (typeof input !== 'string') {
          throw new AbiError('invalid input, should be string', { input });
      }
      const bytes = utf8ToBytes$1(input);
      return encodeBytes({ type: 'bytes', name: '' }, bytes);
  }
  function decodeString(_param, bytes) {
      const r = decodeBytes({ type: 'bytes'}, bytes);
      return {
          result: hexToUtf8(r.result),
          encoded: r.encoded,
          consumed: r.consumed,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function encodeDynamicParams(encodedParams) {
      let staticSize = 0;
      let dynamicSize = 0;
      const staticParams = [];
      const dynamicParams = [];
      // figure out static size
      for (const encodedParam of encodedParams) {
          if (encodedParam.dynamic) {
              staticSize += WORD_SIZE;
          }
          else {
              staticSize += encodedParam.encoded.length;
          }
      }
      for (const encodedParam of encodedParams) {
          if (encodedParam.dynamic) {
              staticParams.push(encodeNumber({ type: 'uint256', name: '' }, staticSize + dynamicSize));
              dynamicParams.push(encodedParam);
              dynamicSize += encodedParam.encoded.length;
          }
          else {
              staticParams.push(encodedParam);
          }
      }
      return uint8ArrayConcat(...staticParams.map(p => p.encoded), ...dynamicParams.map(p => p.encoded));
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function encodeArray(param, values) {
      if (!Array.isArray(values)) {
          throw new AbiError('Expected value to be array', { abi: param, values });
      }
      const { size, param: arrayItemParam } = extractArrayType(param);
      const encodedParams = values.map(v => encodeParamFromAbiParameter(arrayItemParam, v));
      const dynamic = size === -1;
      const dynamicItems = encodedParams.length > 0 && encodedParams[0].dynamic;
      if (!dynamic && values.length !== size) {
          throw new AbiError("Given arguments count doesn't match array length", {
              arrayLength: size,
              argumentsLength: values.length,
          });
      }
      if (dynamic || dynamicItems) {
          const encodingResult = encodeDynamicParams(encodedParams);
          if (dynamic) {
              const encodedLength = encodeNumber({ type: 'uint256', name: '' }, encodedParams.length).encoded;
              return {
                  dynamic: true,
                  encoded: encodedParams.length > 0
                      ? uint8ArrayConcat(encodedLength, encodingResult)
                      : encodedLength,
              };
          }
          return {
              dynamic: true,
              encoded: encodingResult,
          };
      }
      return {
          dynamic: false,
          encoded: uint8ArrayConcat(...encodedParams.map(p => p.encoded)),
      };
  }
  function decodeArray(param, bytes) {
      // eslint-disable-next-line prefer-const
      let { size, param: arrayItemParam } = extractArrayType(param);
      const dynamic = size === -1;
      let consumed = 0;
      const result = [];
      let remaining = bytes;
      // dynamic array, we need to decode length
      if (dynamic) {
          const lengthResult = decodeNumber({ type: 'uint32', name: '' }, bytes);
          size = Number(lengthResult.result);
          consumed = lengthResult.consumed;
          remaining = lengthResult.encoded;
      }
      const hasDynamicChild = isDynamic(arrayItemParam);
      if (hasDynamicChild) {
          // known length but dynamic child, each child is actually head element with encoded offset
          for (let i = 0; i < size; i += 1) {
              const offsetResult = decodeNumber({ type: 'uint32', name: '' }, remaining.subarray(i * WORD_SIZE));
              consumed += offsetResult.consumed;
              const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, remaining.subarray(Number(offsetResult.result)));
              consumed += decodedChildResult.consumed;
              result.push(decodedChildResult.result);
          }
          return {
              result,
              encoded: remaining.subarray(consumed),
              consumed,
          };
      }
      for (let i = 0; i < size; i += 1) {
          // decode static params
          const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, bytes.subarray(consumed));
          consumed += decodedChildResult.consumed;
          result.push(decodedChildResult.result);
      }
      return {
          result,
          encoded: bytes.subarray(consumed),
          consumed,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function encodeParamFromAbiParameter(param, value) {
      if (param.type === 'string') {
          return encodeString(param, value);
      }
      if (param.type === 'bool') {
          return encodeBoolean(param, value);
      }
      if (param.type === 'address') {
          return encodeAddress(param, value);
      }
      if (param.type === 'tuple') {
          return encodeTuple(param, value);
      }
      if (param.type.endsWith(']')) {
          return encodeArray(param, value);
      }
      if (param.type.startsWith('bytes')) {
          return encodeBytes(param, value);
      }
      if (param.type.startsWith('uint') || param.type.startsWith('int')) {
          return encodeNumber(param, value);
      }
      throw new AbiError('Unsupported', {
          param,
          value,
      });
  }
  function decodeParamFromAbiParameter(param, bytes) {
      if (param.type === 'string') {
          return decodeString(param, bytes);
      }
      if (param.type === 'bool') {
          return decodeBool(param, bytes);
      }
      if (param.type === 'address') {
          return decodeAddress(param, bytes);
      }
      if (param.type === 'tuple') {
          return decodeTuple(param, bytes);
      }
      if (param.type.endsWith(']')) {
          return decodeArray(param, bytes);
      }
      if (param.type.startsWith('bytes')) {
          return decodeBytes(param, bytes);
      }
      if (param.type.startsWith('uint') || param.type.startsWith('int')) {
          return decodeNumber(param, bytes);
      }
      throw new AbiError('Unsupported', {
          param,
          bytes,
      });
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function encodeTuple(param, input) {
      var _a, _b, _c;
      let dynamic = false;
      if (!Array.isArray(input) && typeof input !== 'object') {
          throw new AbiError('param must be either Array or Object', {
              param,
              input,
          });
      }
      const narrowedInput = input;
      const encoded = [];
      for (let i = 0; i < ((_b = (_a = param.components) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); i += 1) {
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          const paramComponent = param.components[i];
          let result;
          if (Array.isArray(narrowedInput)) {
              if (i >= narrowedInput.length) {
                  throw new AbiError('input param length missmatch', {
                      param,
                      input,
                  });
              }
              result = encodeParamFromAbiParameter(paramComponent, narrowedInput[i]);
          }
          else {
              const paramInput = narrowedInput[(_c = paramComponent.name) !== null && _c !== void 0 ? _c : ''];
              // eslint-disable-next-line no-null/no-null
              if (paramInput === undefined || paramInput === null) {
                  throw new AbiError('missing input defined in abi', {
                      param,
                      input,
                      paramName: paramComponent.name,
                  });
              }
              result = encodeParamFromAbiParameter(paramComponent, paramInput);
          }
          if (result.dynamic) {
              dynamic = true;
          }
          encoded.push(result);
      }
      if (dynamic) {
          return {
              dynamic: true,
              encoded: encodeDynamicParams(encoded),
          };
      }
      return {
          dynamic: false,
          encoded: uint8ArrayConcat(...encoded.map(e => e.encoded)),
      };
  }
  function decodeTuple(param, bytes) {
      const result = {
          __length__: 0,
      };
      // tracks how much static params consumed bytes
      let consumed = 0;
      if (!param.components) {
          return {
              result,
              encoded: bytes,
              consumed,
          };
      }
      // track how much dynamic params consumed bytes
      let dynamicConsumed = 0;
      for (const [index, childParam] of param.components.entries()) {
          let decodedResult;
          if (isDynamic(childParam)) {
              // if dynamic, we will have offset encoded
              const offsetResult = decodeNumber({ type: 'uint32', name: '' }, bytes.subarray(consumed));
              // offset counts from start of original byte sequence
              decodedResult = decodeParamFromAbiParameter(childParam, bytes.subarray(Number(offsetResult.result)));
              consumed += offsetResult.consumed;
              dynamicConsumed += decodedResult.consumed;
          }
          else {
              // static param, just decode
              decodedResult = decodeParamFromAbiParameter(childParam, bytes.subarray(consumed));
              consumed += decodedResult.consumed;
          }
          result.__length__ += 1;
          result[index] = decodedResult.result;
          if (childParam.name && childParam.name !== '') {
              result[childParam.name] = decodedResult.result;
          }
      }
      return {
          encoded: bytes.subarray(consumed + dynamicConsumed),
          result,
          consumed: consumed + dynamicConsumed,
      };
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  function decodeParameters$1(abis, bytes, _loose) {
      const abiParams = toAbiParams(abis);
      const bytesArray = hexToUint8Array$1(bytes);
      return decodeTuple({ components: abiParams }, bytesArray).result;
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @param params - The params to infer the ABI from
   * @returns The inferred ABI
   * @example
   * ```
   * inferParamsAbi([1, -1, 'hello', '0x1234', ])
   * ```
   * > [{ type: 'int256' }, { type: 'uint256' }, { type: 'string' }, { type: 'bytes' }]
   * ```
   */
  function inferParamsAbi(params) {
      const abi = [];
      params.forEach(param => {
          if (Array.isArray(param)) {
              const inferredParams = inferParamsAbi(param);
              abi.push({
                  type: 'tuple',
                  components: inferredParams,
                  name: '',
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
              });
          }
          else {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
              abi.push({ type: toHex(param, true) });
          }
      });
      return abi;
  }
  /**
   * Encodes a parameter based on its type to its ABI representation.
   * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.
   * @param params - The actual parameters to encode.
   * @returns - The ABI encoded parameters
   * @example
   * ```ts
   * const res = web3.eth.abi.encodeParameters(
   *    ["uint256", "string"],
   *    ["2345675643", "Hello!%"]
   *  );
   *
   *  console.log(res);
   *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000
   * ```
   */
  function encodeParameters(abi, params) {
      if ((abi === null || abi === void 0 ? void 0 : abi.length) !== params.length) {
          throw new AbiError('Invalid number of values received for given ABI', {
              expected: abi === null || abi === void 0 ? void 0 : abi.length,
              received: params.length,
          });
      }
      const abiParams = toAbiParams(abi);
      return uint8ArrayToHexString$1(encodeTuple({ type: 'tuple', name: '', components: abiParams }, params).encoded);
  }
  /**
   * Infer a smart contract method parameter type and then encode this parameter.
   * @param params - The parameters to encode.
   * @returns - The ABI encoded parameters
   *
   * @remarks
   * This method is useful when you don't know the type of the parameters you want to encode. It will infer the type of the parameters and then encode them.
   * However, it is not recommended to use this method when you know the type of the parameters you want to encode. In this case, use the {@link encodeParameters} method instead.
   * The type inference is not perfect and can lead to unexpected results. Especially when you want to encode an array, uint that is not uint256 or bytes....
   * @example
   * ```ts
   * const res = web3.eth.abi.encodeParameters(
   *    ["2345675643", "Hello!%"]
   *  );
   *
   *  console.log(res);
   *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000
   * ```
   */
  function inferTypesAndEncodeParameters(params) {
      try {
          const abiParams = inferParamsAbi(params);
          return uint8ArrayToHexString$1(encodeTuple({ type: 'tuple', name: '', components: abiParams }, params).encoded);
      }
      catch (e) {
          // throws If the inferred params type caused an error
          throw new AbiError('Could not infer types from given params', {
              params,
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   *
   *  @module ABI
   */
  /**
   * Encodes a parameter based on its type to its ABI representation.
   * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
   * @param param - The actual parameter to encode.
   * @returns -  The ABI encoded parameter
   * @example
   * ```ts
   *  const res = web3.eth.abi.encodeParameter("uint256", "2345675643");
   *  console.log(res);
   *  0x000000000000000000000000000000000000000000000000000000008bd02b7b
   *
   *  const res = web3.eth.abi.encodeParameter("uint", "2345675643");
   *
   *  console.log(res);
   *  >0x000000000000000000000000000000000000000000000000000000008bd02b7b
   *
   *    const res = web3.eth.abi.encodeParameter("bytes32", "0xdf3234");
   *
   *  console.log(res);
   *  >0xdf32340000000000000000000000000000000000000000000000000000000000
   *
   *   const res = web3.eth.abi.encodeParameter("bytes", "0xdf3234");
   *
   *  console.log(res);
   *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000
   *
   *   const res = web3.eth.abi.encodeParameter("bytes32[]", ["0xdf3234", "0xfdfd"]);
   *
   *  console.log(res);
   *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000
   *
   *  const res = web3.eth.abi.encodeParameter(
   *    {
   *      ParentStruct: {
   *        propertyOne: "uint256",
   *        propertyTwo: "uint256",
   *        childStruct: {
   *          propertyOne: "uint256",
   *          propertyTwo: "uint256",
   *        },
   *      },
   *    },
   *    {
   *      propertyOne: 42,
   *      propertyTwo: 56,
   *      childStruct: {
   *        propertyOne: 45,
   *        propertyTwo: 78,
   *      },
   *    }
   *  );
   *
   *  console.log(res);
   *  > 0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e
   * ```
   */
  const encodeParameter = (abi, param) => encodeParameters([abi], [param]);
  /**
   * Should be used to decode list of params
   */
  const decodeParametersWith = (abis, bytes, loose) => {
      try {
          if (abis.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {
              throw new AbiError("Returned values aren't valid, did it run Out of Gas? " +
                  'You might also see this error if you are not using the ' +
                  'correct ABI for the contract you are retrieving data from, ' +
                  'requesting data from a block number that does not exist, ' +
                  'or querying a node which is not fully synced.');
          }
          return decodeParameters$1(abis, `0x${bytes.replace(/0x/i, '')}`, loose);
      }
      catch (err) {
          throw new AbiError(`Parameter decoding error: ${err.message}`, {
              internalErr: err,
          });
      }
  };
  /**
   * Should be used to decode list of params
   */
  /**
   * Decodes ABI encoded parameters to its JavaScript types.
   * @param abi -  An array of {@link AbiInput}. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
   * @param bytes - The ABI byte code to decode
   * @returns - The result object containing the decoded parameters.
   * @example
   * ```ts
   * let res = web3.eth.abi.decodeParameters(
   *    ["string", "uint256"],
   *    "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
   *  );
   *  console.log(res);
   *  > { '0': 'Hello!%!', '1': 234n, __length__: 2 }
   *
   * let res = web3.eth.abi.decodeParameters(
   *    [
   *      {
   *        type: "string",
   *        name: "myString",
   *      },
   *      {
   *        type: "uint256",
   *        name: "myNumber",
   *      },
   *    ],
   *    "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
   *  );
   * console.log(res);
   *  > {
   *  '0': 'Hello!%!',
   *  '1': 234n,
   *  __length__: 2,
   *  myString: 'Hello!%!',
   *  myNumber: 234n
   * }
   *
   * const res = web3.eth.abi.decodeParameters(
   *    [
   *      "uint8[]",
   *      {
   *        ParentStruct: {
   *          propertyOne: "uint256",
   *          propertyTwo: "uint256",
   *          childStruct: {
   *            propertyOne: "uint256",
   *            propertyTwo: "uint256",
   *          },
   *        },
   *      },
   *    ],
   *    "0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000018"
   *  );
   *  console.log(res);
   *  >
   *  '0': [ 42n, 24n ],
   *  '1': {
   *    '0': 42n,
   *    '1': 56n,
   *    '2': {
   *      '0': 45n,
   *      '1': 78n,
   *      __length__: 2,
   *      propertyOne: 45n,
   *      propertyTwo: 78n
   *    },
   *    __length__: 3,
   *    propertyOne: 42n,
   *    propertyTwo: 56n,
   *    childStruct: {
   *      '0': 45n,
   *      '1': 78n,
   *      __length__: 2,
   *      propertyOne: 45n,
   *      propertyTwo: 78n
   *    }
   *  },
   *  __length__: 2,
   *  ParentStruct: {
   *    '0': 42n,
   *    '1': 56n,
   *    '2': {
   *      '0': 45n,
   *      '1': 78n,
   *      __length__: 2,
   *      propertyOne: 45n,
   *      propertyTwo: 78n
   *    },
   *    __length__: 3,
   *    propertyOne: 42n,
   *    propertyTwo: 56n,
   *    childStruct: {
   *      '0': 45n,
   *      '1': 78n,
   *      __length__: 2,
   *      propertyOne: 45n,
   *      propertyTwo: 78n
   *    }
   *  }
   *}
   * ```
   */
  const decodeParameters = (abi, bytes) => decodeParametersWith(abi, bytes, false);
  /**
   * Should be used to decode bytes to plain param
   */
  /**
   * Decodes an ABI encoded parameter to its JavaScript type.
   * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
   * @param bytes - The ABI byte code to decode
   * @returns - The decoded parameter
   * @example
   * ```ts
   *   const res = web3.eth.abi.decodeParameter(
   *    "uint256",
   *    "0x0000000000000000000000000000000000000000000000000000000000000010"
   *  );
   *  console.log(res);
   * > 16n
   *
   *  const res = web3.eth.abi.decodeParameter(
   *    "string",
   *    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
   *  );
   *
   *  console.log(res);
   *  > Hello!%!
   *
   *  const res = web3.eth.abi.decodeParameter(
   *    {
   *      ParentStruct: {
   *        propertyOne: "uint256",
   *        propertyTwo: "uint256",
   *        childStruct: {
   *          propertyOne: "uint256",
   *          propertyTwo: "uint256",
   *        },
   *      },
   *    },
   *    "0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e"
   *  );
   *
   *  console.log(res);
   *   {
   *  '0': 42n,
   *  '1': 56n,
   *  '2': {
   *    '0': 45n,
   *    '1': 78n,
   *    __length__: 2,
   *    propertyOne: 45n,
   *    propertyTwo: 78n
   *  },
   *  __length__: 3,
   *  propertyOne: 42n,
   *  propertyTwo: 56n,
   *  childStruct: {
   *    '0': 45n,
   *    '1': 78n,
   *    __length__: 2,
   *    propertyOne: 45n,
   *    propertyTwo: 78n
   *  }
   *}
   * ```
   */
  const decodeParameter = (abi, bytes) => decodeParameters([abi], bytes)['0'];

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   *
   *  @module ABI
   */
  /**
   * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
   * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json
   * @param functionName - The function name to encode or the `JSON interface` object of the function.
   * If the passed parameter is a string, it has to be in the form of `functionName(param1Type,param2Type,...)`. eg: myFunction(uint256,uint32[],bytes10,bytes)
   * @returns - The ABI signature of the function.
   * @example
   * ```ts
   * const signature = web3.eth.abi.encodeFunctionSignature({
   *   name: "myMethod",
   *   type: "function",
   *   inputs: [
   *     {
   *       type: "uint256",
   *       name: "myNumber",
   *     },
   *     {
   *       type: "string",
   *       name: "myString",
   *     },
   *   ],
   * });
   * console.log(signature);
   * > 0x24ee0097
   *
   * const signature = web3.eth.abi.encodeFunctionSignature('myMethod(uint256,string)')
   * console.log(signature);
   * > 0x24ee0097
   *
   * const signature = web3.eth.abi.encodeFunctionSignature('safeTransferFrom(address,address,uint256,bytes)');
   * console.log(signature);
   * > 0xb88d4fde
   * ```
   */
  const encodeFunctionSignature = (functionName) => {
      if (typeof functionName !== 'string' && !isAbiFunctionFragment(functionName)) {
          throw new AbiError('Invalid parameter value in encodeFunctionSignature');
      }
      let name;
      if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {
          name = jsonInterfaceMethodToString(functionName);
      }
      else {
          name = functionName;
      }
      return sha3Raw(name).slice(0, 10);
  };
  /**
   * Encodes a function call using its `JSON interface` object and given parameters.
   * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json
   * @param jsonInterface - The `JSON interface` object of the function.
   * @param params - The parameters to encode
   * @returns - The ABI encoded function call, which, means the function signature and the parameters passed.
   * @example
   * ```ts
   * const sig = web3.eth.abi.encodeFunctionCall(
   *   {
   *     name: "myMethod",
   *     type: "function",
   *     inputs: [
   *       {
   *         type: "uint256",
   *         name: "myNumber",
   *       },
   *       {
   *         type: "string",
   *         name: "myString",
   *       },
   *     ],
   *   },
   *   ["2345675643", "Hello!%"]
   * );
   * console.log(sig);
   * > 0x24ee0097000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000
   *
   *
   *
   * const sig = web3.eth.abi.encodeFunctionCall(
   *   {
   *     inputs: [
   *       {
   *         name: "account",
   *         type: "address",
   *       },
   *     ],
   *     name: "balanceOf",
   *     outputs: [
   *       {
   *         name: "",
   *         type: "uint256",
   *       },
   *     ],
   *     stateMutability: "view",
   *     type: "function",
   *   },
   *   ["0x1234567890123456789012345678901234567890"]
   * );
   *
   * console.log(sig);
   * > 0x70a082310000000000000000000000001234567890123456789012345678901234567890
   * ```
   */
  const encodeFunctionCall = (jsonInterface, params) => {
      var _a;
      if (!isAbiFunctionFragment(jsonInterface)) {
          throw new AbiError('Invalid parameter value in encodeFunctionCall');
      }
      return `${encodeFunctionSignature(jsonInterface)}${encodeParameters((_a = jsonInterface.inputs) !== null && _a !== void 0 ? _a : [], params !== null && params !== void 0 ? params : []).replace('0x', '')}`;
  };
  /**
   * Decodes a function call data using its `JSON interface` object.
   * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json
   * @param functionsAbi - The `JSON interface` object of the function.
   * @param data - The data to decode
   * @param methodSignatureProvided - (Optional) if `false` do not remove the first 4 bytes that would rather contain the function signature.
   * @returns - The data decoded according to the passed ABI.
   * @example
   * ```ts
   * const data =
   * 	'0xa413686200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000548656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010416e6f74686572204772656574696e6700000000000000000000000000000000';
   * const params = decodeFunctionCall(
   * 	{
   * 		inputs: [
   * 			{ internalType: 'string', name: '_greeting', type: 'string' },
   * 			{ internalType: 'string', name: '_second_greeting', type: 'string' },
   * 		],
   * 		name: 'setGreeting',
   * 		outputs: [
   * 			{ internalType: 'bool', name: '', type: 'bool' },
   * 			{ internalType: 'string', name: '', type: 'string' },
   * 		],
   * 		stateMutability: 'nonpayable',
   * 		type: 'function',
   * 	},
   * 	data,
   * );

   * console.log(params);
   * > {
   * > 	'0': 'Hello',
   * > 	'1': 'Another Greeting',
   * > 	__length__: 2,
   * > 	__method__: 'setGreeting(string,string)',
   * > 	_greeting: 'Hello',
   * > 	_second_greeting: 'Another Greeting',
   * > }
   * ```
   */
  const decodeFunctionCall = (functionsAbi, data, methodSignatureProvided = true) => {
      const value = methodSignatureProvided && data && data.length >= 10 && data.startsWith('0x')
          ? data.slice(10)
          : data;
      if (!functionsAbi.inputs) {
          throw new Web3ContractError('No inputs found in the ABI');
      }
      const result = decodeParameters([...functionsAbi.inputs], value);
      return Object.assign(Object.assign({}, result), { __method__: jsonInterfaceMethodToString(functionsAbi) });
  };
  /**
   * Decodes a function call data using its `JSON interface` object.
   * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json
   * @returns - The ABI encoded function call, which, means the function signature and the parameters passed.
   * @param functionsAbi - The `JSON interface` object of the function.
   * @param returnValues - The data (the function-returned-values) to decoded
   * @returns - The function-returned-values decoded according to the passed ABI. If there are multiple values, it returns them as an object as the example below. But if it is a single value, it returns it only for simplicity.
   * @example
   * ```ts
   * // decode a multi-value data of a method
   * const data =
   * 	'0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000';
   * const decodedResult = decodeFunctionReturn(
   * 	{
   * 		inputs: [
   * 			{ internalType: 'string', name: '_greeting', type: 'string' }
   * 		],
   * 		name: 'setGreeting',
   * 		outputs: [
   * 			{ internalType: 'string', name: '', type: 'string' },
   * 			{ internalType: 'bool', name: '', type: 'bool' },
   * 		],
   * 		stateMutability: 'nonpayable',
   * 		type: 'function',
   * 	},
   * 	data,
   * );

   * console.log(decodedResult);
   * > { '0': 'Hello', '1': true, __length__: 2 }
   *
   *
   * // decode a single-value data of a method
   * const data =
   * 	'0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000';
   * const decodedResult = decodeFunctionReturn(
   * 	{
   * 		inputs: [
   * 			{ internalType: 'string', name: '_greeting', type: 'string' }
   * 		],
   * 		name: 'setGreeting',
   * 		outputs: [{ internalType: 'string', name: '', type: 'string' }],
   * 		stateMutability: 'nonpayable',
   * 		type: 'function',
   * 	},
   * 	data,
   * );

   * console.log(decodedResult);
   * > 'Hello'
   * ```
   */
  const decodeFunctionReturn = (functionsAbi, returnValues) => {
      // If it is a constructor there is nothing to decode!
      if (functionsAbi.type === 'constructor') {
          return returnValues;
      }
      if (!returnValues) {
          // Using "null" value intentionally to match legacy behavior
          // eslint-disable-next-line no-null/no-null
          return null;
      }
      const value = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
      if (!functionsAbi.outputs) {
          // eslint-disable-next-line no-null/no-null
          return null;
      }
      const result = decodeParameters([...functionsAbi.outputs], value);
      if (result.__length__ === 1) {
          return result[0];
      }
      return result;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const STATIC_TYPES = ['bool', 'string', 'int', 'uint', 'address', 'fixed', 'ufixed'];
  const _decodeParameter = (inputType, clonedTopic) => inputType === 'string' ? clonedTopic : decodeParameter(inputType, clonedTopic);
  /**
   * Decodes ABI-encoded log data and indexed topic data.
   * @param inputs - A {@link AbiParameter} input array. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
   * @param data - The ABI byte code in the `data` field of a log.
   * @param topics - An array with the index parameter topics of the log, without the topic[0] if its a non-anonymous event, otherwise with topic[0]
   * @returns - The result object containing the decoded parameters.
   *
   * @example
   * ```ts
   * let res = web3.eth.abi.decodeLog(
   *    [
   *      {
   *        type: "string",
   *        name: "myString",
   *      },
   *      {
   *        type: "uint256",
   *        name: "myNumber",
   *        indexed: true,
   *      },
   *      {
   *        type: "uint8",
   *        name: "mySmallNumber",
   *        indexed: true,
   *      },
   *    ],
   *    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000",
   *    [
   *      "0x000000000000000000000000000000000000000000000000000000000000f310",
   *      "0x0000000000000000000000000000000000000000000000000000000000000010",
   *    ]
   *  );
   * > {
   *  '0': 'Hello%!',
   *  '1': 62224n,
   *  '2': 16n,
   *  __length__: 3,
   *  myString: 'Hello%!',
   *  myNumber: 62224n,
   *  mySmallNumber: 16n
   * }
   * ```
   */
  const decodeLog = (inputs, data, topics) => {
      const clonedTopics = Array.isArray(topics) ? topics : [topics];
      const indexedInputs = {};
      const nonIndexedInputs = {};
      for (const [i, input] of inputs.entries()) {
          if (input.indexed) {
              indexedInputs[i] = input;
          }
          else {
              nonIndexedInputs[i] = input;
          }
      }
      const decodedNonIndexedInputs = data
          ? decodeParametersWith(Object.values(nonIndexedInputs), data, true)
          : { __length__: 0 };
      // If topics are more than indexed inputs, that means first topic is the event signature
      const offset = clonedTopics.length - Object.keys(indexedInputs).length;
      const decodedIndexedInputs = Object.values(indexedInputs).map((input, index) => STATIC_TYPES.some(s => input.type.startsWith(s))
          ? _decodeParameter(input.type, clonedTopics[index + offset])
          : clonedTopics[index + offset]);
      const returnValues = { __length__: 0 };
      let indexedCounter = 0;
      let nonIndexedCounter = 0;
      for (const [i, res] of inputs.entries()) {
          returnValues[i] = res.type === 'string' ? '' : undefined;
          if (indexedInputs[i]) {
              returnValues[i] = decodedIndexedInputs[indexedCounter];
              indexedCounter += 1;
          }
          if (nonIndexedInputs[i]) {
              returnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];
              nonIndexedCounter += 1;
          }
          if (res.name) {
              returnValues[res.name] = returnValues[i];
          }
          returnValues.__length__ += 1;
      }
      return returnValues;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const decodeContractErrorData = (errorsAbi, error) => {
      if (error === null || error === void 0 ? void 0 : error.data) {
          let errorName;
          let errorSignature;
          let errorArgs;
          try {
              const errorSha = error.data.slice(0, 10);
              const errorAbi = errorsAbi.find(abi => encodeErrorSignature(abi).startsWith(errorSha));
              if (errorAbi === null || errorAbi === void 0 ? void 0 : errorAbi.inputs) {
                  errorName = errorAbi.name;
                  errorSignature = jsonInterfaceMethodToString(errorAbi);
                  // decode abi.inputs according to EIP-838
                  errorArgs = decodeParameters([...errorAbi.inputs], error.data.substring(10));
              }
              else if (error.data.startsWith('0x08c379a0')) {
                  // If ABI was not provided, check for the 2 famous errors: 'Error(string)' or 'Panic(uint256)'
                  errorName = 'Error';
                  errorSignature = 'Error(string)';
                  // decode abi.inputs according to EIP-838
                  errorArgs = decodeParameters([
                      {
                          name: 'message',
                          type: 'string',
                      },
                  ], error.data.substring(10));
              }
              else if (error.data.startsWith('0x4e487b71')) {
                  errorName = 'Panic';
                  errorSignature = 'Panic(uint256)';
                  // decode abi.inputs according to EIP-838
                  errorArgs = decodeParameters([
                      {
                          name: 'code',
                          type: 'uint256',
                      },
                  ], error.data.substring(10));
              }
              else {
                  console.error('No matching error abi found for error data', error.data);
              }
          }
          catch (err) {
              console.error(err);
          }
          if (errorName) {
              error.setDecodedProperties(errorName, errorSignature, errorArgs);
          }
      }
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const encodeEventABI = ({ address }, event, options) => {
      var _a, _b;
      const topics = options === null || options === void 0 ? void 0 : options.topics;
      const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};
      const opts = {};
      if (!isNullish(options === null || options === void 0 ? void 0 : options.fromBlock)) {
          opts.fromBlock = format(blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.fromBlock, {
              number: FMT_NUMBER.HEX,
              bytes: FMT_BYTES.HEX,
          });
      }
      if (!isNullish(options === null || options === void 0 ? void 0 : options.toBlock)) {
          opts.toBlock = format(blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.toBlock, {
              number: FMT_NUMBER.HEX,
              bytes: FMT_BYTES.HEX,
          });
      }
      if (topics && Array.isArray(topics)) {
          opts.topics = [...topics];
      }
      else {
          opts.topics = [];
          // add event signature
          if (event && !event.anonymous && ![ALL_EVENTS, 'allEvents'].includes(event.name)) {
              opts.topics.push((_b = event.signature) !== null && _b !== void 0 ? _b : encodeEventSignature(jsonInterfaceMethodToString(event)));
          }
          // add event topics (indexed arguments)
          if (![ALL_EVENTS, 'allEvents'].includes(event.name) && event.inputs) {
              for (const input of event.inputs) {
                  if (!input.indexed) {
                      continue;
                  }
                  const value = filter[input.name];
                  if (!value) {
                      // eslint-disable-next-line no-null/no-null
                      opts.topics.push(null);
                      continue;
                  }
                  // TODO: https://github.com/ethereum/web3.js/issues/344
                  // TODO: deal properly with components
                  if (Array.isArray(value)) {
                      opts.topics.push(value.map(v => encodeParameter(input.type, v)));
                  }
                  else if (input.type === 'string') {
                      opts.topics.push(keccak256Wrapper(value));
                  }
                  else {
                      opts.topics.push(encodeParameter(input.type, value));
                  }
              }
          }
      }
      if (!opts.topics.length)
          delete opts.topics;
      if (address) {
          opts.address = address.toLowerCase();
      }
      return opts;
  };
  const encodeMethodABI = (abi, args, deployData) => {
      const inputLength = Array.isArray(abi.inputs) ? abi.inputs.length : 0;
      if (abi.inputs && inputLength !== args.length) {
          throw new Web3ContractError(`The number of arguments is not matching the methods required number. You need to pass ${inputLength} arguments.`);
      }
      let params;
      if (abi.inputs) {
          params = encodeParameters(Array.isArray(abi.inputs) ? abi.inputs : [], args).replace('0x', '');
      }
      else {
          params = inferTypesAndEncodeParameters(args).replace('0x', '');
      }
      if (isAbiConstructorFragment(abi)) {
          if (!deployData)
              throw new Web3ContractError('The contract has no contract data option set. This is necessary to append the constructor parameters.');
          if (!deployData.startsWith('0x')) {
              return `0x${deployData}${params}`;
          }
          return `${deployData}${params}`;
      }
      return `${encodeFunctionSignature(abi)}${params}`;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * ContractLogsSubscription to be used to subscribe to events logs.
   *
   * Following events are supported and can be accessed with either {@link ContractLogsSubscription.once} or ${@link ContractLogsSubscription.on} methods.
   *
   * - **connected**: Emitted when the subscription is connected.
   * - **data**: Fires on each incoming event with the event object as argument.
   * - **changed**: Fires on each event which was removed from the blockchain. The event will have the additional property `removed: true`.
   * - **error**: Fires on each error.
   *
   * ```ts
   * const subscription = await myContract.events.MyEvent({
   *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23
   *   fromBlock: 0
   * });
   *
   * subscription.on("connected", function(subscriptionId){
   *   console.log(subscriptionId);
   * });
   *
   * subscription.on('data', function(event){
   *   console.log(event); // same results as the optional callback above
   * });
   *
   * subscription.on('changed', function(event){
   *   // remove event from local database
   * })
   *
   * subscription.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.
   *   ...
   * });
   *
   * // event output example
   * > {
   *   returnValues: {
   *       myIndexedParam: 20,
   *       myOtherIndexedParam: '0x123456789...',
   *       myNonIndexParam: 'My String'
   *   },
   *   raw: {
   *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
   *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
   *   },
   *   event: 'MyEvent',
   *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
   *   logIndex: 0,
   *   transactionIndex: 0,
   *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
   *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
   *   blockNumber: 1234,
   *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
   * }
   * ```
   */
  class ContractLogsSubscription extends Web3Subscription$1 {
      constructor(args, options) {
          super(args, options);
          this.address = args.address;
          this.topics = args.topics;
          this.abi = args.abi;
          this.jsonInterface = args.jsonInterface;
      }
      _buildSubscriptionParams() {
          return ['logs', { address: this.address, topics: this.topics }];
      }
      formatSubscriptionResult(data) {
          return decodeEventABI(this.abi, data, this.jsonInterface, super.returnFormat);
      }
  }

  /**
   * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/
   * This function takes in data, converts it to Uint8Array if not,
   * and adds a length for recursion.
   * @param input Will be converted to Uint8Array
   * @returns Uint8Array of encoded data
   **/
  Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill) => {
      var _a, _b;
      const tx = {};
      if (!isNullish(txParams.data) || dataInputFill === 'both') {
          tx.data = encodeMethodABI(abi, params, ((_a = txParams.data) !== null && _a !== void 0 ? _a : txParams.input));
      }
      if (!isNullish(txParams.input) || dataInputFill === 'both') {
          tx.input = encodeMethodABI(abi, params, ((_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data));
      }
      // if input and data is empty, use web3config default
      if (isNullish(tx.input) && isNullish(tx.data)) {
          tx[dataInputFill] = encodeMethodABI(abi, params);
      }
      return { data: tx.data, input: tx.input };
  };
  const getSendTxParams = ({ abi, params, options, contractOptions, }) => {
      var _a, _b, _c;
      const deploymentCall = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;
      if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {
          throw new Web3ContractError('Contract address not specified');
      }
      if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {
          throw new Web3ContractError('Contract "from" address not specified');
      }
      let txParams = mergeDeep({
          to: contractOptions.address,
          gas: contractOptions.gas,
          gasPrice: contractOptions.gasPrice,
          from: contractOptions.from,
          input: contractOptions.input,
          maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
          maxFeePerGas: contractOptions.maxFeePerGas,
          data: contractOptions.data,
      }, options);
      const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
      txParams = Object.assign(Object.assign({}, txParams), { data: dataInput.data, input: dataInput.input });
      return txParams;
  };
  const getEthTxCallParams = ({ abi, params, options, contractOptions, }) => {
      if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {
          throw new Web3ContractError('Contract address not specified');
      }
      let txParams = mergeDeep({
          to: contractOptions.address,
          gas: contractOptions.gas,
          gasPrice: contractOptions.gasPrice,
          from: contractOptions.from,
          input: contractOptions.input,
          maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
          maxFeePerGas: contractOptions.maxFeePerGas,
          data: contractOptions.data,
      }, options);
      const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
      txParams = Object.assign(Object.assign({}, txParams), { data: dataInput.data, input: dataInput.input });
      return txParams;
  };
  const getEstimateGasParams = ({ abi, params, options, contractOptions, }) => {
      let txParams = mergeDeep({
          to: contractOptions.address,
          gas: contractOptions.gas,
          gasPrice: contractOptions.gasPrice,
          from: contractOptions.from,
          input: contractOptions.input,
          data: contractOptions.data,
      }, options);
      const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
      txParams = Object.assign(Object.assign({}, txParams), { data: dataInput.data, input: dataInput.input });
      return txParams;
  };
  const isWeb3ContractContext = (options) => typeof options === 'object' &&
      !isNullish(options) &&
      Object.keys(options).length !== 0 &&
      !isContractInitOptions(options);
  const getCreateAccessListParams = ({ abi, params, options, contractOptions, }) => {
      if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {
          throw new Web3ContractError('Contract address not specified');
      }
      if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {
          throw new Web3ContractError('Contract "from" address not specified');
      }
      let txParams = mergeDeep({
          to: contractOptions.address,
          gas: contractOptions.gas,
          gasPrice: contractOptions.gasPrice,
          from: contractOptions.from,
          input: contractOptions.input,
          maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
          maxFeePerGas: contractOptions.maxFeePerGas,
          data: contractOptions.data,
      }, options);
      const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
      txParams = Object.assign(Object.assign({}, txParams), { data: dataInput.data, input: dataInput.input });
      return txParams;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$d = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /*
   * This class is only supposed to be used for the return of `new Contract(...).deploy(...)` method.
   */
  class DeployerMethodClass {
      _contractMethodDeploySend(tx) {
          // eslint-disable-next-line no-use-before-define
          const returnTxOptions = {
              transactionResolver: (receipt) => {
                  if (receipt.status === BigInt(0)) {
                      throw new Web3ContractError("code couldn't be stored", receipt);
                  }
                  const newContract = this.parent.clone();
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                  newContract.options.address = receipt.contractAddress;
                  return newContract;
              },
              contractAbi: this.parent.options.jsonInterface,
              // TODO Should make this configurable by the user
              checkRevertBeforeSending: false,
          };
          return isNullish$1(this.parent.getTransactionMiddleware())
              ? sendTransaction$1(this.parent, tx, this.parent.defaultReturnFormat, returnTxOptions) // not calling this with undefined Middleware because it will not break if Eth package is not updated
              : sendTransaction$1(this.parent, tx, this.parent.defaultReturnFormat, returnTxOptions, this.parent.getTransactionMiddleware());
      }
      constructor(
      // eslint-disable-next-line no-use-before-define
      parent, deployOptions) {
          this.parent = parent;
          this.deployOptions = deployOptions;
          const { args, abi, contractOptions, deployData } = this.calculateDeployParams();
          this.args = args;
          this.constructorAbi = abi;
          this.contractOptions = contractOptions;
          this.deployData = deployData;
      }
      send(options) {
          const modifiedOptions = Object.assign({}, options);
          const tx = this.populateTransaction(modifiedOptions);
          return this._contractMethodDeploySend(tx);
      }
      populateTransaction(txOptions) {
          var _a, _b;
          const modifiedContractOptions = Object.assign(Object.assign({}, this.contractOptions), { from: (_b = (_a = this.contractOptions.from) !== null && _a !== void 0 ? _a : this.parent.defaultAccount) !== null && _b !== void 0 ? _b : undefined });
          // args, abi, contractOptions, deployData
          const tx = getSendTxParams({
              abi: this.constructorAbi,
              params: this.args,
              options: Object.assign(Object.assign({}, txOptions), { dataInputFill: this.parent.contractDataInputFill }),
              contractOptions: modifiedContractOptions,
          });
          // @ts-expect-error remove unnecessary field
          if (tx.dataInputFill) {
              // @ts-expect-error remove unnecessary field
              delete tx.dataInputFill;
          }
          return tx;
      }
      calculateDeployParams() {
          var _a, _b, _c, _d, _e, _f;
          let abi = this.parent.options.jsonInterface.find(j => j.type === 'constructor');
          if (!abi) {
              abi = {
                  type: 'constructor',
                  stateMutability: '',
              };
          }
          const _input = format({ format: 'bytes' }, (_b = (_a = this.deployOptions) === null || _a === void 0 ? void 0 : _a.input) !== null && _b !== void 0 ? _b : this.parent.options.input, DEFAULT_RETURN_FORMAT);
          const _data = format({ format: 'bytes' }, (_d = (_c = this.deployOptions) === null || _c === void 0 ? void 0 : _c.data) !== null && _d !== void 0 ? _d : this.parent.options.data, DEFAULT_RETURN_FORMAT);
          if ((!_input || _input.trim() === '0x') && (!_data || _data.trim() === '0x')) {
              throw new Web3ContractError('contract creation without any data provided.');
          }
          const args = (_f = (_e = this.deployOptions) === null || _e === void 0 ? void 0 : _e.arguments) !== null && _f !== void 0 ? _f : [];
          const contractOptions = Object.assign(Object.assign({}, this.parent.options), { input: _input, data: _data });
          const deployData = _input !== null && _input !== void 0 ? _input : _data;
          return { args, abi, contractOptions, deployData };
      }
      estimateGas(options_1) {
          return __awaiter$d(this, arguments, void 0, function* (options, returnFormat = this.parent.defaultReturnFormat) {
              const modifiedOptions = Object.assign({}, options);
              return this.parent.contractMethodEstimateGas({
                  abi: this.constructorAbi,
                  params: this.args,
                  returnFormat,
                  options: modifiedOptions,
                  contractOptions: this.contractOptions,
              });
          });
      }
      encodeABI() {
          return encodeMethodABI(this.constructorAbi, this.args, format({ format: 'bytes' }, this.deployData, this.parent.defaultReturnFormat));
      }
      decodeData(data) {
          return Object.assign(Object.assign({}, decodeFunctionCall(this.constructorAbi, data.replace(this.deployData, ''), false)), { __method__: this.constructorAbi.type });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$c = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * Similar to `Web3SubscriptionManager` but has a reference to the Contract that uses
   */
  class ContractSubscriptionManager extends Web3SubscriptionManager$1 {
      /**
       *
       * @param - Web3SubscriptionManager
       * @param - parentContract
       *
       * @example
       * ```ts
       * const requestManager = new Web3RequestManager("ws://localhost:8545");
       * const contract = new Contract(...)
       * const subscriptionManager = new Web3SubscriptionManager(requestManager, {}, contract);
       * ```
       */
      constructor(self, parentContract) {
          super(self.requestManager, self.registeredSubscriptions);
          this.parentContract = parentContract;
      }
      /**
       * Will create a new subscription
       *
       * @param name - The subscription you want to subscribe to
       * @param args - Optional additional parameters, depending on the subscription type
       * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       *
       * Will subscribe to a specific topic (note: name)
       * @returns The subscription object
       */
      subscribe(name_1, args_1) {
          const _super = Object.create(null, {
              subscribe: { get: () => super.subscribe }
          });
          return __awaiter$c(this, arguments, void 0, function* (name, args, returnFormat = DEFAULT_RETURN_FORMAT) {
              return _super.subscribe.call(this, name, args !== null && args !== void 0 ? args : this.parentContract.options, returnFormat);
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$b = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const contractSubscriptions = {
      logs: ContractLogsSubscription,
      newHeads: NewHeadsSubscription,
      newBlockHeaders: NewHeadsSubscription,
  };
  /**
   * The `web3.eth.Contract` makes it easy to interact with smart contracts on the ethereum blockchain.
   * For using contract package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that contracts features can be used as mentioned in following snippet.
   * ```ts
   *
   * import { Web3 } from 'web3';
   *
   * const web3 = new Web3('https://127.0.0.1:4545');
   * const abi = [...] as const; // your contract ABI
   *
   * let contract = new web3.eth.Contract(abi,'0xdAC17F958D2ee523a2206206994597C13D831ec7');
   * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();
   * ```
   * For using individual package install `web3-eth-contract` and `web3-core` packages using: `npm i web3-eth-contract web3-core` or `yarn add web3-eth-contract web3-core`. This is more efficient approach for building lightweight applications.
   * ```ts
   *
   * import { Web3Context } from 'web3-core';
   * import { Contract } from 'web3-eth-contract';
   *
   * const abi = [...] as const; // your contract ABI
   *
   * let contract = new web3.eth.Contract(
   * 	abi,
   * 	'0xdAC17F958D2ee523a2206206994597C13D831ec7'
   * 	 new Web3Context('http://127.0.0.1:8545'));
   *
   * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();
   * ```
   * ## Generated Methods
   * Following methods are generated by web3.js contract object for each of contract functions by using its ABI.
   *
   * ### send
   * This is used to send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.
   *
   * #### Parameters
   * options?: PayableTxOptions | NonPayableTxOptions
   *
   * #### Returns
   * [Web3PromiEvent](/api/web3/namespace/core#Web3PromiEvent) : Web3 Promi Event
   *
   * ```ts
   * // using the promise
   * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})
   * 	.then(function(receipt){
   * 		// other parts of code to use receipt
   * 	});
   *
   *
   * // using the event emitter
   * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})
   * 	.on('transactionHash', function(hash){
   * 		// ...
   * 	})
   * 	.on('confirmation', function(confirmationNumber, receipt){
   * 		// ...
   * 	})
   * 	.on('receipt', function(receipt){
   * 		// ...
   * 	})
   * 	.on('error', function(error, receipt) {
   * 		// ...
   * 	});
   *
   * ```
   *
   * ### call
   * This will execute smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.
   *
   * #### Parameters
   * options?: PayableCallOptions | NonPayableCallOptions,
   * block?: BlockNumberOrTag,
   *
   * #### Returns
   * Promise : having results of call
   *
   * ```ts
   *
   * let myContract = new web3.eth.Contract(abi, address);
   *
   * myContract.methods.myFunction().call()
   * .then(console.log);
   *
   * ```
   * ### estimateGas
   * Returns the amount of gas consumed by executing the method in EVM without creating a new transaction on the blockchain. The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be different when sending the transaction later, as the state of the smart contract can be different at that time.
   *
   * #### Parameters
   * options?: PayableCallOptions,
   * returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,
   *
   * #### Returns
   * Promise: The gas amount estimated.
   *
   * ```ts
   * const estimatedGas = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)
   *     .estimateGas();
   *
   * ```
   *
   * ### encodeABI
   * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format. This can be used to send a transaction, call a method, or pass it into another smart contract’s method as arguments. Set the data field on web3.eth.sendTransaction options as the encodeABI() result and it is the same as calling the contract method with contract.myMethod.send().
   *
   * Some use cases for encodeABI() include: preparing a smart contract transaction for a multisignature wallet, working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.
   *
   * #### Parameters
   * None
   *
   * #### Returns
   * String: The encoded ABI.
   *
   * ```ts
   * const encodedABI = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)
   *     .encodeABI();
   *
   * ```
   *

   * ### decodeMethodData
   * Decodes the given ABI-encoded data, revealing both the method name and the parameters used in the smart contract call.
   * This function reverses the encoding process happens at the method `encodeABI`.
   * It's particularly useful for debugging and understanding the interactions with and between smart contracts.
   *
   * #### Parameters
   *
   * - `data` **HexString**: The string of ABI-encoded data that needs to be decoded. This should include the method signature and the encoded parameters.
   *
   * #### Returns
   *
   * - **Object**: This object combines both the decoded parameters and the method name in a readable format. Specifically, the returned object contains:
   *   - `__method__` **String**: The name of the contract method, reconstructed from the ABI.
   *   - `__length__` **Number**: The number of parameters decoded.
   *   - Additional properties representing each parameter by name, as well as their position and values.
   *
   * #### Example
   *
   * Given an ABI-encoded string from a transaction, you can decode this data to identify the method called and the parameters passed.
   * Here's a simplified example:
   *
   *
   * ```typescript
   * const GreeterAbi = [
   * 	{
   * 		inputs: [
   * 			{
   * 				internalType: 'string',
   * 				name: '_greeting',
   * 				type: 'string',
   * 			},
   * 		],
   * 		name: 'setGreeting',
   * 		outputs: [],
   * 		type: 'function',
   * 	},
   * ];
   * const contract = new Contract(GreeterAbi); // Initialize with your contract's ABI
   *
   * // The ABI-encoded data string for "setGreeting('Hello World')"
   * const encodedData =
   * 	'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000';
   *
   * try {
   * 	const decoded = contract.decodeMethodData(encodedData);
   * 	console.log(decoded.__method__); // Outputs: "setGreeting(string)"
   * 	console.log(decoded); // Outputs the detailed parameter data
   * 	// This tells that the method called was `setGreeting` with a single string parameter "Hello World":
   * 	// {
   * 	//   __method__: 'setGreeting(string)',
   * 	//   __length__: 1,
   * 	//   '0': 'Hello World',
   * 	//   _greeting: 'Hello World'
   * 	// }
   * } catch (error) {
   * 	console.error(error);
   * }
   * ```
   *

   * ### createAccessList
   * This will create an access list a method execution will access when executed in the EVM.
   * Note: You must specify a from address and gas if it’s not specified in options when instantiating parent contract object.
   *
   * #### Parameters
   * options?: PayableCallOptions | NonPayableCallOptions,
   * block?: BlockNumberOrTag,
   *
   * #### Returns
   * Promise: The generated access list for transaction.
   *
   * ```ts
   * const accessList = await contract.methods.approve('0xbEe634C21c16F05B03B704BaE071536121e6cFeA', 300)
   *     .createAccessList({
   *         from: "0x9992695e1053bb737d3cfae4743dcfc4b94f203d"
   *    });
   * ```
   *
   */
  class Contract extends Web3Context$1 {
      get subscriptionManager() {
          return this._subscriptionManager;
      }
      constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {
          var _a, _b, _c;
          // eslint-disable-next-line no-nested-ternary
          const options = isContractInitOptions(addressOrOptionsOrContext)
              ? addressOrOptionsOrContext
              : isContractInitOptions(optionsOrContextOrReturnFormat)
                  ? optionsOrContextOrReturnFormat
                  : undefined;
          let contractContext;
          if (isWeb3ContractContext(addressOrOptionsOrContext)) {
              contractContext = addressOrOptionsOrContext;
          }
          else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {
              contractContext = optionsOrContextOrReturnFormat;
          }
          else {
              contractContext = contextOrReturnFormat;
          }
          let provider;
          if (typeof addressOrOptionsOrContext === 'object' &&
              'provider' in addressOrOptionsOrContext) {
              provider = addressOrOptionsOrContext.provider;
          }
          else if (typeof optionsOrContextOrReturnFormat === 'object' &&
              'provider' in optionsOrContextOrReturnFormat) {
              provider = optionsOrContextOrReturnFormat.provider;
          }
          else if (typeof contextOrReturnFormat === 'object' &&
              'provider' in contextOrReturnFormat) {
              provider = contextOrReturnFormat.provider;
          }
          else {
              provider = Contract.givenProvider;
          }
          super(Object.assign(Object.assign({}, contractContext), { provider, registeredSubscriptions: contractSubscriptions }));
          /**
           * Set to true if you want contracts' defaults to sync with global defaults.
           */
          this.syncWithContext = false;
          this._functions = {};
          this._subscriptionManager = new ContractSubscriptionManager(super.subscriptionManager, this);
          // Init protected properties
          if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.wallet) {
              this._wallet = contractContext.wallet;
          }
          if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.accountProvider) {
              this._accountProvider = contractContext.accountProvider;
          }
          if (!isNullish$1(options) &&
              !isNullish$1(options.data) &&
              !isNullish$1(options.input) &&
              this.config.contractDataInputFill !== 'both')
              throw new ContractTransactionDataAndInputError({
                  data: options.data,
                  input: options.input,
              });
          this._overloadedMethodAbis = new Map();
          // eslint-disable-next-line no-nested-ternary
          const returnDataFormat = isDataFormat(contextOrReturnFormat)
              ? contextOrReturnFormat
              : isDataFormat(optionsOrContextOrReturnFormat)
                  ? optionsOrContextOrReturnFormat
                  : returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat;
          const address = typeof addressOrOptionsOrContext === 'string' ? addressOrOptionsOrContext : undefined;
          this.config.contractDataInputFill =
              (_a = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a !== void 0 ? _a : this.config.contractDataInputFill;
          this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);
          if (this.defaultReturnFormat !== returnDataFormat) {
              this.defaultReturnFormat = returnDataFormat;
          }
          if (!isNullish$1(address)) {
              this._parseAndSetAddress(address, returnDataFormat);
          }
          this.options = {
              address,
              jsonInterface: this._jsonInterface,
              gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,
              gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,
              from: options === null || options === void 0 ? void 0 : options.from,
              input: options === null || options === void 0 ? void 0 : options.input,
              data: options === null || options === void 0 ? void 0 : options.data,
          };
          this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;
          if (contractContext instanceof Web3Context$1) {
              this.subscribeToContextEvents(contractContext);
          }
          Object.defineProperty(this.options, 'address', {
              set: (value) => this._parseAndSetAddress(value, returnDataFormat),
              get: () => this._address,
          });
          Object.defineProperty(this.options, 'jsonInterface', {
              set: (value) => this._parseAndSetJsonInterface(value, returnDataFormat),
              get: () => this._jsonInterface,
          });
          if (contractContext instanceof Web3Context$1) {
              contractContext.on(Web3ConfigEvent$1.CONFIG_CHANGE, event => {
                  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                  this.setConfig({ [event.name]: event.newValue });
              });
          }
      }
      setTransactionMiddleware(transactionMiddleware) {
          this.transactionMiddleware = transactionMiddleware;
      }
      getTransactionMiddleware() {
          return this.transactionMiddleware;
      }
      /**
       * Subscribe to an event.
       *
       * ```ts
       * await myContract.events.MyEvent([options])
       * ```
       *
       * There is a special event `allEvents` that can be used to subscribe all events.
       *
       * ```ts
       * await myContract.events.allEvents([options])
       * ```
       *
       * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object
       */
      get events() {
          return this._events;
      }
      /**
       * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.
       *
       * The methods of this smart contract are available through:
       *
       * The name: `myContract.methods.myMethod(123)`
       * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`
       * The signature `myContract.methods['0x58cf5f10'](123)`
       *
       * This allows calling functions with same name but different parameters from the JavaScript contract object.
       *
       * \> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.
       *
       * ```ts
       * // calling a method
       * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
       *
       * // or sending and using a promise
       * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
       *
       * // or sending and using the events
       * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
       * sendObject.on('transactionHash', function(hash){
       *   ...
       * });
       * sendObject.on('receipt', function(receipt){
       *   ...
       * });
       * sendObject.on('confirmation', function(confirmationNumber, receipt){
       *   ...
       * });
       * sendObject.on('error', function(error, receipt) {
       *   ...
       * });
       * ```
       *
       * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.
       */
      get methods() {
          return this._methods;
      }
      /**
       * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.
       *
       * @returns - The new contract instance.
       *
       * ```ts
       * const contract1 = new web3.eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});
       *
       * const contract2 = contract1.clone();
       * contract2.options.address = '0xdAC17F958D2ee523a2206206994597C13D831ec7';
       *
       * (contract1.options.address !== contract2.options.address);
       * > true
       * ```
       */
      clone() {
          let newContract;
          if (this.options.address) {
              newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], this.options.address, {
                  gas: this.options.gas,
                  gasPrice: this.options.gasPrice,
                  from: this.options.from,
                  input: this.options.input,
                  data: this.options.data,
                  provider: this.currentProvider,
                  syncWithContext: this.syncWithContext,
                  dataInputFill: this.config.contractDataInputFill,
              }, this.getContextObject());
          }
          else {
              newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], {
                  gas: this.options.gas,
                  gasPrice: this.options.gasPrice,
                  from: this.options.from,
                  input: this.options.input,
                  data: this.options.data,
                  provider: this.currentProvider,
                  syncWithContext: this.syncWithContext,
                  dataInputFill: this.config.contractDataInputFill,
              }, this.getContextObject());
          }
          if (this.context)
              newContract.subscribeToContextEvents(this.context);
          return newContract;
      }
      /**
       * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.
       *
       * ```ts
       * myContract.deploy({
       *   input: '0x12345...', // data keyword can be used, too.
       *   arguments: [123, 'My String']
       * })
       * .send({
       *   from: '0x1234567890123456789012345678901234567891',
       *   gas: 1500000,
       *   gasPrice: '30000000000000'
       * }, function(error, transactionHash){ ... })
       * .on('error', function(error){ ... })
       * .on('transactionHash', function(transactionHash){ ... })
       * .on('receipt', function(receipt){
       *  console.log(receipt.contractAddress) // contains the new contract address
       * })
       * .on('confirmation', function(confirmationNumber, receipt){ ... })
       * .then(function(newContractInstance){
       *   console.log(newContractInstance.options.address) // instance with the new contract address
       * });
       *
       *
       * // When the data is already set as an option to the contract itself
       * myContract.options.data = '0x12345...';
       *
       * myContract.deploy({
       *   arguments: [123, 'My String']
       * })
       * .send({
       *   from: '0x1234567890123456789012345678901234567891',
       *   gas: 1500000,
       *   gasPrice: '30000000000000'
       * })
       * .then(function(newContractInstance){
       *   console.log(newContractInstance.options.address) // instance with the new contract address
       * });
       *
       *
       * // Simply encoding
       * myContract.deploy({
       *   input: '0x12345...',
       *   arguments: [123, 'My String']
       * })
       * .encodeABI();
       * > '0x12345...0000012345678765432'
       *
       *
       * // decoding
       * myContract.deploy({
       *   input: '0x12345...',
       *   // arguments: [123, 'My Greeting'] if you just need to decode the data, you can skip the arguments
       * })
       * .decodeData('0x12345...0000012345678765432');
       * > {
       *      __method__: 'constructor',
       *      __length__: 2,
       *      '0': '123',
       *      _id: '123',
       *      '1': 'My Greeting',
       *      _greeting: 'My Greeting',
       *   }
       *
       *
       * // Gas estimation
       * myContract.deploy({
       *   input: '0x12345...',
       *   arguments: [123, 'My String']
       * })
       * .estimateGas(function(err, gas){
       *   console.log(gas);
       * });
       * ```
       *
       * @returns - The transaction object
       */
      deploy(deployOptions) {
          return new DeployerMethodClass(this, deployOptions);
      }
      getPastEvents(param1, param2, param3) {
          return __awaiter$b(this, void 0, void 0, function* () {
              var _a;
              const eventName = typeof param1 === 'string' ? param1 : ALL_EVENTS;
              const options = 
              // eslint-disable-next-line no-nested-ternary
              typeof param1 !== 'string' && !isDataFormat(param1)
                  ? param1
                  : !isDataFormat(param2)
                      ? param2
                      : {};
              // eslint-disable-next-line no-nested-ternary
              const returnFormat = isDataFormat(param1)
                  ? param1
                  : isDataFormat(param2)
                      ? param2
                      : param3 !== null && param3 !== void 0 ? param3 : this.defaultReturnFormat;
              const abi = eventName === 'allEvents' || eventName === ALL_EVENTS
                  ? ALL_EVENTS_ABI
                  : this._jsonInterface.find(j => 'name' in j && j.name === eventName);
              if (!abi) {
                  throw new Web3ContractError(`Event ${String(eventName)} not found.`);
              }
              const { fromBlock, toBlock, topics, address } = encodeEventABI(this.options, abi, options !== null && options !== void 0 ? options : {});
              const logs = yield getLogs(this, { fromBlock, toBlock, topics, address }, returnFormat);
              const decodedLogs = logs
                  ? logs.map(log => typeof log === 'string'
                      ? log
                      : decodeEventABI(abi, log, this._jsonInterface, returnFormat))
                  : [];
              const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};
              const filterKeys = Object.keys(filter);
              if (filterKeys.length > 0) {
                  return decodedLogs.filter(log => {
                      if (typeof log === 'string')
                          return true;
                      return filterKeys.every((key) => {
                          var _a;
                          if (Array.isArray(filter[key])) {
                              return filter[key].some((v) => String(log.returnValues[key]).toUpperCase() ===
                                  String(v).toUpperCase());
                          }
                          const inputAbi = (_a = abi.inputs) === null || _a === void 0 ? void 0 : _a.filter(input => input.name === key)[0];
                          if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === 'string') {
                              const hashedIndexedString = keccak256Wrapper(filter[key]);
                              if (hashedIndexedString === String(log.returnValues[key]))
                                  return true;
                          }
                          return (String(log.returnValues[key]).toUpperCase() ===
                              String(filter[key]).toUpperCase());
                      });
                  });
              }
              return decodedLogs;
          });
      }
      _parseAndSetAddress(value, returnFormat = this.defaultReturnFormat) {
          this._address = value
              ? toChecksumAddress(format({ format: 'address' }, value, returnFormat))
              : value;
      }
      decodeMethodData(data) {
          const methodSignature = data.slice(0, 10);
          const functionsAbis = this._jsonInterface.filter(j => j.type !== 'error');
          const abi = functionsAbis.find(a => methodSignature === encodeFunctionSignature(jsonInterfaceMethodToString(a)));
          if (!abi) {
              throw new Web3ContractError(`The ABI for the provided method signature ${methodSignature} was not found.`);
          }
          return decodeFunctionCall(abi, data);
      }
      _parseAndSetJsonInterface(abis, returnFormat = this.defaultReturnFormat) {
          var _a, _b;
          this._functions = {};
          this._methods = {};
          this._events = {};
          let result = [];
          const functionsAbi = abis.filter(abi => abi.type !== 'error');
          const errorsAbi = abis.filter(abi => isAbiErrorFragment(abi));
          for (const a of functionsAbi) {
              const abi = Object.assign(Object.assign({}, a), { signature: '' });
              if (isAbiFunctionFragment(abi)) {
                  const methodName = jsonInterfaceMethodToString(abi);
                  const methodSignature = encodeFunctionSignature(methodName);
                  abi.methodNameWithInputs = methodName;
                  abi.signature = methodSignature;
                  // make constant and payable backwards compatible
                  abi.constant =
                      abi.stateMutability === 'view' ||
                          abi.stateMutability === 'pure' ||
                          abi.constant;
                  abi.payable = abi.stateMutability === 'payable' || abi.payable;
                  this._overloadedMethodAbis.set(abi.name, [
                      ...((_a = this._overloadedMethodAbis.get(abi.name)) !== null && _a !== void 0 ? _a : []),
                      abi,
                  ]);
                  const abiFragment = (_b = this._overloadedMethodAbis.get(abi.name)) !== null && _b !== void 0 ? _b : [];
                  const contractMethod = this._createContractMethod(abiFragment, errorsAbi);
                  const exactContractMethod = this._createContractMethod(abiFragment, errorsAbi, true);
                  this._functions[methodName] = {
                      signature: methodSignature,
                      method: exactContractMethod,
                  };
                  // We don't know a particular type of the Abi method so can't type check
                  this._methods[abi.name] =
                      contractMethod;
                  // We don't know a particular type of the Abi method so can't type check
                  this._methods[methodName] =
                      exactContractMethod;
                  // We don't know a particular type of the Abi method so can't type check
                  this._methods[methodSignature] =
                      exactContractMethod;
              }
              else if (isAbiEventFragment(abi)) {
                  const eventName = jsonInterfaceMethodToString(abi);
                  const eventSignature = encodeEventSignature(eventName);
                  const event = this._createContractEvent(abi, returnFormat);
                  abi.signature = eventSignature;
                  if (!(eventName in this._events) || abi.name === 'bound') {
                      // It's a private type and we don't want to expose it and no need to check
                      this._events[eventName] = event;
                  }
                  // It's a private type and we don't want to expose it and no need to check
                  this._events[abi.name] = event;
                  // It's a private type and we don't want to expose it and no need to check
                  this._events[eventSignature] = event;
              }
              result = [...result, abi];
          }
          this._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);
          this._jsonInterface = [...result];
          this._errorsInterface = errorsAbi;
      }
      // eslint-disable-next-line class-methods-use-this
      _getAbiParams(abi, params) {
          var _a;
          try {
              return transformJsonDataToAbiFormat((_a = abi.inputs) !== null && _a !== void 0 ? _a : [], params);
          }
          catch (error) {
              throw new Web3ContractError(`Invalid parameters for method ${abi.name}: ${error.message}`);
          }
      }
      _createContractMethod(abiArr, errorsAbis, exact = false) {
          const abi = abiArr[abiArr.length - 1];
          return (...params) => {
              var _a, _b, _c;
              let abiParams;
              const abis = (_b = (exact
                  ? (_a = this._overloadedMethodAbis
                      .get(abi.name)) === null || _a === void 0 ? void 0 : _a.filter(_abi => _abi.signature === abi.signature)
                  : this._overloadedMethodAbis.get(abi.name))) !== null && _b !== void 0 ? _b : [];
              let methodAbi = abis[0];
              const internalErrorsAbis = errorsAbis;
              const arrayOfAbis = abis.filter(_abi => { var _a; return ((_a = _abi.inputs) !== null && _a !== void 0 ? _a : []).length === params.length; });
              if (abis.length === 1 || arrayOfAbis.length === 0) {
                  abiParams = this._getAbiParams(methodAbi, params);
                  validator.validate((_c = abi.inputs) !== null && _c !== void 0 ? _c : [], abiParams);
              }
              else {
                  const errors = [];
                  // all the methods that have is valid for the given inputs
                  const applicableMethodAbi = [];
                  for (const _abi of arrayOfAbis) {
                      try {
                          abiParams = this._getAbiParams(_abi, params);
                          validator.validate(_abi.inputs, abiParams);
                          applicableMethodAbi.push(_abi);
                      }
                      catch (e) {
                          errors.push(e);
                      }
                  }
                  if (applicableMethodAbi.length === 1) {
                      [methodAbi] = applicableMethodAbi; // take the first item that is the only item in the array
                  }
                  else if (applicableMethodAbi.length > 1) {
                      [methodAbi] = applicableMethodAbi; // take the first item in the array
                      console.warn(`Multiple methods found that is compatible with the given inputs.\n\tFound ${applicableMethodAbi.length} compatible methods: ${JSON.stringify(applicableMethodAbi.map(m => `${m.methodNameWithInputs} (signature: ${m.signature})`))} \n\tThe first one will be used: ${methodAbi.methodNameWithInputs}`);
                      // TODO: 5.x Should throw a new error with the list of methods found.
                      // Related issue: https://github.com/web3/web3.js/issues/6923
                      // This is in order to provide an error message when there is more than one method found that fits the inputs.
                      // To do that, replace the pervious line of code with something like the following line:
                      // throw new Web3ValidatorError({ message: 'Multiple methods found',  ... list of applicable methods }));
                  }
                  if (errors.length === arrayOfAbis.length) {
                      throw new Web3ValidatorError(errors);
                  }
              }
              const methods = {
                  arguments: abiParams,
                  call: (options, block) => __awaiter$b(this, void 0, void 0, function* () {
                      return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);
                  }),
                  send: (options) => this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),
                  populateTransaction: (options, contractOptions) => {
                      var _a, _b;
                      let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;
                      modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), { input: undefined, from: (_b = (_a = modifiedContractOptions === null || modifiedContractOptions === void 0 ? void 0 : modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined });
                      const tx = getSendTxParams({
                          abi,
                          params,
                          options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
                          contractOptions: modifiedContractOptions,
                      });
                      // @ts-expect-error remove unnecessary field
                      if (tx.dataInputFill) {
                          // @ts-expect-error remove unnecessary field
                          delete tx.dataInputFill;
                      }
                      return tx;
                  },
                  estimateGas: (options_1, ...args_1) => __awaiter$b(this, [options_1, ...args_1], void 0, function* (options, returnFormat = this
                      .defaultReturnFormat) {
                      return this.contractMethodEstimateGas({
                          abi: methodAbi,
                          params: abiParams,
                          returnFormat,
                          options,
                      });
                  }),
                  encodeABI: () => encodeMethodABI(methodAbi, abiParams),
                  decodeData: (data) => decodeFunctionCall(methodAbi, data),
                  createAccessList: (options, block) => __awaiter$b(this, void 0, void 0, function* () {
                      return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);
                  }),
              };
              if (methodAbi.stateMutability === 'payable') {
                  return methods;
              }
              return methods;
          };
      }
      _contractMethodCall(abi, params, errorsAbi, options, block) {
          return __awaiter$b(this, void 0, void 0, function* () {
              var _a;
              const tx = getEthTxCallParams({
                  abi,
                  params,
                  options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
                  contractOptions: Object.assign(Object.assign({}, this.options), { from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount }),
              });
              try {
                  const result = yield call(this, tx, block, this.defaultReturnFormat);
                  return decodeFunctionReturn(abi, result);
              }
              catch (error) {
                  if (error instanceof ContractExecutionError) {
                      // this will parse the error data by trying to decode the ABI error inputs according to EIP-838
                      decodeContractErrorData(errorsAbi, error.cause);
                  }
                  throw error;
              }
          });
      }
      _contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {
          return __awaiter$b(this, void 0, void 0, function* () {
              var _a;
              const tx = getCreateAccessListParams({
                  abi,
                  params,
                  options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
                  contractOptions: Object.assign(Object.assign({}, this.options), { from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount }),
              });
              try {
                  return createAccessList(this, tx, block, this.defaultReturnFormat);
              }
              catch (error) {
                  if (error instanceof ContractExecutionError) {
                      // this will parse the error data by trying to decode the ABI error inputs according to EIP-838
                      decodeContractErrorData(errorsAbi, error.cause);
                  }
                  throw error;
              }
          });
      }
      _contractMethodSend(abi, params, errorsAbi, options, contractOptions) {
          var _a, _b;
          let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;
          modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), { input: undefined, from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined });
          const tx = getSendTxParams({
              abi,
              params,
              options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
              contractOptions: modifiedContractOptions,
          });
          const transactionToSend = isNullish$1(this.transactionMiddleware)
              ? sendTransaction$1(this, tx, this.defaultReturnFormat, {
                  // TODO Should make this configurable by the user
                  checkRevertBeforeSending: false,
                  contractAbi: this._jsonInterface, // explicitly not passing middleware so if some one is using old eth package it will not break
              })
              : sendTransaction$1(this, tx, this.defaultReturnFormat, {
                  // TODO Should make this configurable by the user
                  checkRevertBeforeSending: false,
                  contractAbi: this._jsonInterface,
              }, this.transactionMiddleware);
          // eslint-disable-next-line no-void
          void transactionToSend.on('error', (error) => {
              if (error instanceof ContractExecutionError) {
                  // this will parse the error data by trying to decode the ABI error inputs according to EIP-838
                  decodeContractErrorData(errorsAbi, error.cause);
              }
          });
          return transactionToSend;
      }
      contractMethodEstimateGas(_a) {
          return __awaiter$b(this, arguments, void 0, function* ({ abi, params, returnFormat, options, contractOptions, }) {
              const tx = getEstimateGasParams({
                  abi,
                  params,
                  options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
                  contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options,
              });
              return estimateGas(this, tx, BlockTags.LATEST, returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat);
          });
      }
      // eslint-disable-next-line class-methods-use-this
      _createContractEvent(abi, returnFormat = this.defaultReturnFormat) {
          return (...params) => {
              var _a;
              const { topics, fromBlock } = encodeEventABI(this.options, abi, params[0]);
              const sub = new ContractLogsSubscription({
                  address: this.options.address,
                  topics,
                  abi,
                  jsonInterface: this._jsonInterface,
              }, {
                  subscriptionManager: this.subscriptionManager,
                  returnFormat,
              });
              if (!isNullish$1(fromBlock)) {
                  // emit past events when fromBlock is defined
                  this.getPastEvents(abi.name, { fromBlock, topics }, returnFormat)
                      .then(logs => {
                      if (logs) {
                          logs.forEach(log => sub.emit('data', log));
                      }
                  })
                      .catch((error) => {
                      sub.emit('error', new SubscriptionError('Failed to get past events.', error));
                  });
              }
              (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.addSubscription(sub).catch((error) => {
                  sub.emit('error', new SubscriptionError('Failed to subscribe.', error));
              });
              return sub;
          };
      }
      subscribeToContextEvents(context) {
          // eslint-disable-next-line @typescript-eslint/no-this-alias
          const contractThis = this;
          this.context = context;
          if (contractThis.syncWithContext) {
              context.on(Web3ConfigEvent$1.CONFIG_CHANGE, event => {
                  contractThis.setConfig({ [event.name]: event.newValue });
              });
          }
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  //
  /**
   * An object holding the interface Ids of the ENS resolver contracts. Please see [how to write a resolver](https://docs.ens.domains/contract-developer-guide/writing-a-resolver).
   */
  const interfaceIds = {
      addr: '0x3b3b57de',
      name: '0x691f3431',
      abi: '0x2203ab56',
      pubkey: '0xc8690233',
      text: '0x59d1d43c',
      contenthash: '0xbc1c58d1',
  };
  /**
   * An object holding the functions that are supported by the ENS resolver contracts/interfaces.
   */
  const methodsInInterface = {
      setAddr: 'addr',
      addr: 'addr',
      pubkey: 'pubkey',
      contenthash: 'contenthash',
      text: 'text',
      name: 'name',
  };
  /**
   * An object holding the addressed of the ENS registries on the different networks (mainnet, goerli).
   */
  const registryAddresses = {
      main: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
      goerli: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
  };
  const networkIds = {
      '0x1': 'main',
      '0x5': 'goerli',
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$a = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function getId(web3Context, returnFormat) {
      return __awaiter$a(this, void 0, void 0, function* () {
          const response = yield getId$2(web3Context.requestManager);
          return format({ format: 'uint' }, response, returnFormat);
      });
  }
  function getPeerCount(web3Context, returnFormat) {
      return __awaiter$a(this, void 0, void 0, function* () {
          const response = yield getPeerCount$1(web3Context.requestManager);
          // Data returned is number in hex format
          return format({ format: 'uint' }, response, returnFormat);
      });
  }
  const isListening = (web3Context) => __awaiter$a(void 0, void 0, void 0, function* () { return isListening$1(web3Context.requestManager); });

  var __awaiter$9 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * Net class allows you to interact with an Ethereum node’s network properties.
   * For using Net package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that Net features can be used.
   * ```ts
   *
   * import { Web3 } from 'web3';
   * const web3 = new Web3('https://mainnet.infura.io/v3/<YOURPROJID>');
   *
   * console.log(await web3.eth.net.getId());
   *
   * ```
   * For using individual package install `web3-net` packages using: `npm i web3-net` or `yarn add web3-net`.
   *
   * ```ts
   * import {Net} from 'web3-net';
   *
   *  const net = new Net('https://mainnet.infura.io/v3/<YOURPROJID>');
   *  console.log(await net.getId());
   * ```
   */
  class Net extends Web3Context$1 {
      /**
       * Gets the current network ID
       *
       * @param returnFormat - Return format
       * @returns A Promise of the network ID.
       * @example
       * ```ts
       * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
       * await net.getId();
       * > 1
       * ```
       */
      getId(returnFormat = this.defaultReturnFormat) {
          return __awaiter$9(this, void 0, void 0, function* () {
              return getId(this, returnFormat);
          });
      }
      /**
       * Get the number of peers connected to.
       *
       * @param returnFormat - Return format
       * @returns A promise of the number of the peers connected to.
       * @example
       * ```ts
       * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
       * await net.getPeerCount();
       * > 0
       * ```
       */
      getPeerCount(returnFormat = this.defaultReturnFormat) {
          return __awaiter$9(this, void 0, void 0, function* () {
              return getPeerCount(this, returnFormat);
          });
      }
      /**
       * Check if the node is listening for peers
       *
       * @returns A promise of a boolean if the node is listening to peers
       * @example
       * ```ts
       * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
       * await net.isListening();
       * > true
       * ```
       */
      isListening() {
          return __awaiter$9(this, void 0, void 0, function* () {
              return isListening(this);
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // https://github.com/ensdomains/ens-contracts/blob/master/contracts/registry/ENSRegistry.sol
  const ENSRegistryAbi = [
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'label',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'address',
                  name: 'owner',
                  type: 'address',
              },
          ],
          name: 'NewOwner',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'address',
                  name: 'resolver',
                  type: 'address',
              },
          ],
          name: 'NewResolver',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'address',
                  name: 'owner',
                  type: 'address',
              },
          ],
          name: 'Transfer',
          type: 'event',
      },
      {
          inputs: [
              {
                  internalType: 'address',
                  name: 'owner',
                  type: 'address',
              },
              {
                  internalType: 'address',
                  name: 'operator',
                  type: 'address',
              },
          ],
          name: 'isApprovedForAll',
          outputs: [
              {
                  internalType: 'bool',
                  name: '',
                  type: 'bool',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'owner',
          outputs: [
              {
                  internalType: 'address',
                  name: '',
                  type: 'address',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'recordExists',
          outputs: [
              {
                  internalType: 'bool',
                  name: '',
                  type: 'bool',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'resolver',
          outputs: [
              {
                  internalType: 'address',
                  name: '',
                  type: 'address',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'ttl',
          outputs: [
              {
                  internalType: 'uint64',
                  name: '',
                  type: 'uint64',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
  ];

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // https://github.com/ensdomains/ens-contracts/blob/master/contracts/resolvers/PublicResolver.sol
  const PublicResolverAbi = [
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'address',
                  name: 'a',
                  type: 'address',
              },
          ],
          name: 'AddrChanged',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'uint256',
                  name: 'coinType',
                  type: 'uint256',
              },
              {
                  indexed: false,
                  internalType: 'bytes',
                  name: 'newAddress',
                  type: 'bytes',
              },
          ],
          name: 'AddressChanged',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'address',
                  name: 'owner',
                  type: 'address',
              },
              {
                  indexed: true,
                  internalType: 'address',
                  name: 'operator',
                  type: 'address',
              },
              {
                  indexed: false,
                  internalType: 'bool',
                  name: 'approved',
                  type: 'bool',
              },
          ],
          name: 'ApprovalForAll',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'bytes',
                  name: 'hash',
                  type: 'bytes',
              },
          ],
          name: 'ContenthashChanged',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'bytes',
                  name: 'name',
                  type: 'bytes',
              },
              {
                  indexed: false,
                  internalType: 'uint16',
                  name: 'resource',
                  type: 'uint16',
              },
              {
                  indexed: false,
                  internalType: 'bytes',
                  name: 'record',
                  type: 'bytes',
              },
          ],
          name: 'DNSRecordChanged',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'bytes',
                  name: 'name',
                  type: 'bytes',
              },
              {
                  indexed: false,
                  internalType: 'uint16',
                  name: 'resource',
                  type: 'uint16',
              },
          ],
          name: 'DNSRecordDeleted',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'DNSZoneCleared',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'bytes',
                  name: 'lastzonehash',
                  type: 'bytes',
              },
              {
                  indexed: false,
                  internalType: 'bytes',
                  name: 'zonehash',
                  type: 'bytes',
              },
          ],
          name: 'DNSZonehashChanged',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: true,
                  internalType: 'bytes4',
                  name: 'interfaceID',
                  type: 'bytes4',
              },
              {
                  indexed: false,
                  internalType: 'address',
                  name: 'implementer',
                  type: 'address',
              },
          ],
          name: 'InterfaceChanged',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'string',
                  name: 'name',
                  type: 'string',
              },
          ],
          name: 'NameChanged',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'bytes32',
                  name: 'x',
                  type: 'bytes32',
              },
              {
                  indexed: false,
                  internalType: 'bytes32',
                  name: 'y',
                  type: 'bytes32',
              },
          ],
          name: 'PubkeyChanged',
          type: 'event',
      },
      {
          anonymous: false,
          inputs: [
              {
                  indexed: true,
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  indexed: true,
                  internalType: 'string',
                  name: 'indexedKey',
                  type: 'string',
              },
              {
                  indexed: false,
                  internalType: 'string',
                  name: 'key',
                  type: 'string',
              },
          ],
          name: 'TextChanged',
          type: 'event',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  internalType: 'uint256',
                  name: 'contentTypes',
                  type: 'uint256',
              },
          ],
          name: 'ABI',
          outputs: [
              {
                  internalType: 'uint256',
                  name: '',
                  type: 'uint256',
              },
              {
                  internalType: 'bytes',
                  name: '',
                  type: 'bytes',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'addr',
          outputs: [
              {
                  internalType: 'address payable',
                  name: '',
                  type: 'address',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  internalType: 'uint256',
                  name: 'coinType',
                  type: 'uint256',
              },
          ],
          name: 'addr',
          outputs: [
              {
                  internalType: 'bytes',
                  name: '',
                  type: 'bytes',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'contenthash',
          outputs: [
              {
                  internalType: 'bytes',
                  name: '',
                  type: 'bytes',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  internalType: 'bytes32',
                  name: 'name',
                  type: 'bytes32',
              },
              {
                  internalType: 'uint16',
                  name: 'resource',
                  type: 'uint16',
              },
          ],
          name: 'dnsRecord',
          outputs: [
              {
                  internalType: 'bytes',
                  name: '',
                  type: 'bytes',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  internalType: 'bytes32',
                  name: 'name',
                  type: 'bytes32',
              },
          ],
          name: 'hasDNSRecords',
          outputs: [
              {
                  internalType: 'bool',
                  name: '',
                  type: 'bool',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  internalType: 'bytes4',
                  name: 'interfaceID',
                  type: 'bytes4',
              },
          ],
          name: 'interfaceImplementer',
          outputs: [
              {
                  internalType: 'address',
                  name: '',
                  type: 'address',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'address',
                  name: 'account',
                  type: 'address',
              },
              {
                  internalType: 'address',
                  name: 'operator',
                  type: 'address',
              },
          ],
          name: 'isApprovedForAll',
          outputs: [
              {
                  internalType: 'bool',
                  name: '',
                  type: 'bool',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'name',
          outputs: [
              {
                  internalType: 'string',
                  name: '',
                  type: 'string',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'pubkey',
          outputs: [
              {
                  internalType: 'bytes32',
                  name: 'x',
                  type: 'bytes32',
              },
              {
                  internalType: 'bytes32',
                  name: 'y',
                  type: 'bytes32',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes4',
                  name: 'interfaceID',
                  type: 'bytes4',
              },
          ],
          name: 'supportsInterface',
          outputs: [
              {
                  internalType: 'bool',
                  name: '',
                  type: 'bool',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  internalType: 'string',
                  name: 'key',
                  type: 'string',
              },
          ],
          name: 'text',
          outputs: [
              {
                  internalType: 'string',
                  name: '',
                  type: 'string',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
          ],
          name: 'zonehash',
          outputs: [
              {
                  internalType: 'bytes',
                  name: '',
                  type: 'bytes',
              },
          ],
          stateMutability: 'view',
          type: 'function',
      },
      {
          inputs: [
              {
                  internalType: 'bytes32',
                  name: 'node',
                  type: 'bytes32',
              },
              {
                  internalType: 'address',
                  name: 'a',
                  type: 'address',
              },
          ],
          name: 'setAddr',
          outputs: [],
          stateMutability: 'nonpayable',
          type: 'function',
      },
  ];

  // created 2023-09-25T01:01:55.148Z
  // compressed base64-encoded blob for include-ens data
  // source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js
  // see: https://github.com/adraffy/ens-normalize.js#security
  // SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32
  var COMPRESSED$1 = '';
  const FENCED = new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]);
  const NSM_MAX = 4;

  function decode_arithmetic(bytes) {
  	let pos = 0;
  	function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }
  	
  	// decode the frequency table
  	let symbol_count = u16();
  	let total = 1;
  	let acc = [0, 1]; // first symbol has frequency 1
  	for (let i = 1; i < symbol_count; i++) {
  		acc.push(total += u16());
  	}

  	// skip the sized-payload that the last 3 symbols index into
  	let skip = u16();
  	let pos_payload = pos;
  	pos += skip;

  	let read_width = 0;
  	let read_buffer = 0; 
  	function read_bit() {
  		if (read_width == 0) {
  			// this will read beyond end of buffer
  			// but (undefined|0) => zero pad
  			read_buffer = (read_buffer << 8) | bytes[pos++];
  			read_width = 8;
  		}
  		return (read_buffer >> --read_width) & 1;
  	}

  	const N = 31;
  	const FULL = 2**N;
  	const HALF = FULL >>> 1;
  	const QRTR = HALF >> 1;
  	const MASK = FULL - 1;

  	// fill register
  	let register = 0;
  	for (let i = 0; i < N; i++) register = (register << 1) | read_bit();

  	let symbols = [];
  	let low = 0;
  	let range = FULL; // treat like a float
  	while (true) {
  		let value = Math.floor((((register - low + 1) * total) - 1) / range);
  		let start = 0;
  		let end = symbol_count;
  		while (end - start > 1) { // binary search
  			let mid = (start + end) >>> 1;
  			if (value < acc[mid]) {
  				end = mid;
  			} else {
  				start = mid;
  			}
  		}
  		if (start == 0) break; // first symbol is end mark
  		symbols.push(start);
  		let a = low + Math.floor(range * acc[start]   / total);
  		let b = low + Math.floor(range * acc[start+1] / total) - 1;
  		while (((a ^ b) & HALF) == 0) {
  			register = (register << 1) & MASK | read_bit();
  			a = (a << 1) & MASK;
  			b = (b << 1) & MASK | 1;
  		}
  		while (a & ~b & QRTR) {
  			register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();
  			a = (a << 1) ^ HALF;
  			b = ((b ^ HALF) << 1) | HALF | 1;
  		}
  		low = a;
  		range = 1 + b - a;
  	}
  	let offset = symbol_count - 4;
  	return symbols.map(x => { // index into payload
  		switch (x - offset) {
  			case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);
  			case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);
  			case 1: return offset + bytes[pos_payload++];
  			default: return x - 1;
  		}
  	});
  }	

  // returns an iterator which returns the next symbol
  function read_payload(v) {
  	let pos = 0;
  	return () => v[pos++];
  }
  function read_compressed_payload(s) {
  	return read_payload(decode_arithmetic(unsafe_atob(s)));
  }

  // unsafe in the sense:
  // expected well-formed Base64 w/o padding 
  // 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4
  function unsafe_atob(s) {
  	let lookup = [];
  	[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
  	let n = s.length;
  	let ret = new Uint8Array((6 * n) >> 3);
  	for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
  		carry = (carry << 6) | lookup[s.charCodeAt(i)];
  		width += 6;
  		if (width >= 8) {
  			ret[pos++] = (carry >> (width -= 8));
  		}
  	}
  	return ret;
  }

  // eg. [0,1,2,3...] => [0,-1,1,-2,...]
  function signed(i) { 
  	return (i & 1) ? (~i >> 1) : (i >> 1);
  }

  function read_deltas(n, next) {
  	let v = Array(n);
  	for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());
  	return v;
  }

  // [123][5] => [0 3] [1 1] [0 0]
  function read_sorted(next, prev = 0) {
  	let ret = [];
  	while (true) {
  		let x = next();
  		let n = next();
  		if (!n) break;
  		prev += x;
  		for (let i = 0; i < n; i++) {
  			ret.push(prev + i);
  		}
  		prev += n + 1;
  	}
  	return ret;
  }

  function read_sorted_arrays(next) {
  	return read_array_while(() => { 
  		let v = read_sorted(next);
  		if (v.length) return v;
  	});
  }

  // returns map of x => ys
  function read_mapped(next) {
  	let ret = [];
  	while (true) {
  		let w = next();
  		if (w == 0) break;
  		ret.push(read_linear_table(w, next));
  	}
  	while (true) {
  		let w = next() - 1;
  		if (w < 0) break;
  		ret.push(read_replacement_table(w, next));
  	}
  	return ret.flat();
  }

  // read until next is falsy
  // return array of read values
  function read_array_while(next) {
  	let v = [];
  	while (true) {
  		let x = next(v.length);
  		if (!x) break;
  		v.push(x);
  	}
  	return v;
  }

  // read w columns of length n
  // return as n rows of length w
  function read_transposed(n, w, next) {
  	let m = Array(n).fill().map(() => []);
  	for (let i = 0; i < w; i++) {
  		read_deltas(n, next).forEach((x, j) => m[j].push(x));
  	}
  	return m;
  }
   
  // returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]
  // where dx/dy = steps, n = run size, w = length of y
  function read_linear_table(w, next) {
  	let dx = 1 + next();
  	let dy = next();
  	let vN = read_array_while(next);
  	let m = read_transposed(vN.length, 1+w, next);
  	return m.flatMap((v, i) => {
  		let [x, ...ys] = v;
  		return Array(vN[i]).fill().map((_, j) => {
  			let j_dy = j * dy;
  			return [x + j * dx, ys.map(y => y + j_dy)];
  		});
  	});
  }

  // return [[x, ys...], ...]
  // where w = length of y
  function read_replacement_table(w, next) { 
  	let n = 1 + next();
  	let m = read_transposed(n, 1+w, next);
  	return m.map(v => [v[0], v.slice(1)]);
  }


  function read_trie(next) {
  	let ret = [];
  	let sorted = read_sorted(next); 
  	expand(decode([]), []);
  	return ret; // not sorted
  	function decode(Q) { // characters that lead into this node
  		let S = next(); // state: valid, save, check
  		let B = read_array_while(() => { // buckets leading to new nodes
  			let cps = read_sorted(next).map(i => sorted[i]);
  			if (cps.length) return decode(cps);
  		});
  		return {S, B, Q};
  	}
  	function expand({S, B}, cps, saved) {
  		if (S & 4 && saved === cps[cps.length-1]) return;
  		if (S & 2) saved = cps[cps.length-1];
  		if (S & 1) ret.push(cps); 
  		for (let br of B) {
  			for (let cp of br.Q) {
  				expand(br, [...cps, cp], saved);
  			}
  		}
  	}
  }

  function hex_cp(cp) {
  	return cp.toString(16).toUpperCase().padStart(2, '0');
  }

  function quote_cp(cp) {
  	return `{${hex_cp(cp)}}`; // raffy convention: like "\u{X}" w/o the "\u"
  }

  /*
  export function explode_cp(s) {
  	return [...s].map(c => c.codePointAt(0));
  }
  */
  function explode_cp(s) { // this is about 2x faster
  	let cps = [];
  	for (let pos = 0, len = s.length; pos < len; ) {
  		let cp = s.codePointAt(pos);
  		pos += cp < 0x10000 ? 1 : 2;
  		cps.push(cp);
  	}
  	return cps;
  }

  function str_from_cps(cps) {
  	const chunk = 4096;
  	let len = cps.length;
  	if (len < chunk) return String.fromCodePoint(...cps);
  	let buf = [];
  	for (let i = 0; i < len; ) {
  		buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
  	}
  	return buf.join('');
  }

  function compare_arrays(a, b) {
  	let n = a.length;
  	let c = n - b.length;
  	for (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];
  	return c;
  }

  // created 2023-09-25T01:01:55.148Z
  // compressed base64-encoded blob for include-nf data
  // source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js
  // see: https://github.com/adraffy/ens-normalize.js#security
  // SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e
  var COMPRESSED = 'AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g';

  // https://unicode.org/reports/tr15/
  // for reference implementation
  // see: /derive/nf.js


  // algorithmic hangul
  // https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)
  const S0 = 0xAC00;
  const L0 = 0x1100;
  const V0 = 0x1161;
  const T0 = 0x11A7;
  const L_COUNT = 19;
  const V_COUNT = 21;
  const T_COUNT = 28;
  const N_COUNT = V_COUNT * T_COUNT;
  const S_COUNT = L_COUNT * N_COUNT;
  const S1 = S0 + S_COUNT;
  const L1 = L0 + L_COUNT;
  const V1 = V0 + V_COUNT;
  const T1 = T0 + T_COUNT;

  function unpack_cc(packed) {
  	return (packed >> 24) & 0xFF;
  }
  function unpack_cp(packed) {
  	return packed & 0xFFFFFF;
  }

  let SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;

  function init$1() {
  	//console.time('nf');
  	let r = read_compressed_payload(COMPRESSED);
  	SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted
  	EXCLUSIONS = new Set(read_sorted(r));
  	DECOMP = new Map();
  	RECOMP = new Map();
  	for (let [cp, cps] of read_mapped(r)) {
  		if (!EXCLUSIONS.has(cp) && cps.length == 2) {
  			let [a, b] = cps;
  			let bucket = RECOMP.get(a);
  			if (!bucket) {
  				bucket = new Map();
  				RECOMP.set(a, bucket);
  			}
  			bucket.set(b, cp);
  		}
  		DECOMP.set(cp, cps.reverse()); // stored reversed
  	}
  	//console.timeEnd('nf');
  	// 20230905: 11ms
  }

  function is_hangul(cp) {
  	return cp >= S0 && cp < S1;
  }

  function compose_pair(a, b) {
  	if (a >= L0 && a < L1 && b >= V0 && b < V1) {
  		return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
  	} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {
  		return a + (b - T0);
  	} else {
  		let recomp = RECOMP.get(a);
  		if (recomp) {
  			recomp = recomp.get(b);
  			if (recomp) {
  				return recomp;
  			}
  		}
  		return -1;
  	}
  }

  function decomposed(cps) {
  	if (!SHIFTED_RANK) init$1();
  	let ret = [];
  	let buf = [];
  	let check_order = false;
  	function add(cp) {
  		let cc = SHIFTED_RANK.get(cp);
  		if (cc) {
  			check_order = true;
  			cp |= cc;
  		}
  		ret.push(cp);
  	}
  	for (let cp of cps) {
  		while (true) {
  			if (cp < 0x80) {
  				ret.push(cp);
  			} else if (is_hangul(cp)) {
  				let s_index = cp - S0;
  				let l_index = s_index / N_COUNT | 0;
  				let v_index = (s_index % N_COUNT) / T_COUNT | 0;
  				let t_index = s_index % T_COUNT;
  				add(L0 + l_index);
  				add(V0 + v_index);
  				if (t_index > 0) add(T0 + t_index);
  			} else {
  				let mapped = DECOMP.get(cp);
  				if (mapped) {
  					buf.push(...mapped);
  				} else {
  					add(cp);
  				}
  			}
  			if (!buf.length) break;
  			cp = buf.pop();
  		}
  	}
  	if (check_order && ret.length > 1) {
  		let prev_cc = unpack_cc(ret[0]);
  		for (let i = 1; i < ret.length; i++) {
  			let cc = unpack_cc(ret[i]);
  			if (cc == 0 || prev_cc <= cc) {
  				prev_cc = cc;
  				continue;
  			}
  			let j = i-1;
  			while (true) {
  				let tmp = ret[j+1];
  				ret[j+1] = ret[j];
  				ret[j] = tmp;
  				if (!j) break;
  				prev_cc = unpack_cc(ret[--j]);
  				if (prev_cc <= cc) break;
  			}
  			prev_cc = unpack_cc(ret[i]);
  		}
  	}
  	return ret;
  }

  function composed_from_decomposed(v) {
  	let ret = [];
  	let stack = [];
  	let prev_cp = -1;
  	let prev_cc = 0;
  	for (let packed of v) {
  		let cc = unpack_cc(packed);
  		let cp = unpack_cp(packed);
  		if (prev_cp == -1) {
  			if (cc == 0) {
  				prev_cp = cp;
  			} else {
  				ret.push(cp);
  			}
  		} else if (prev_cc > 0 && prev_cc >= cc) {
  			if (cc == 0) {
  				ret.push(prev_cp, ...stack);
  				stack.length = 0;
  				prev_cp = cp;
  			} else {
  				stack.push(cp);
  			}
  			prev_cc = cc;
  		} else {
  			let composed = compose_pair(prev_cp, cp);
  			if (composed >= 0) {
  				prev_cp = composed;
  			} else if (prev_cc == 0 && cc == 0) {
  				ret.push(prev_cp);
  				prev_cp = cp;
  			} else {
  				stack.push(cp);
  				prev_cc = cc;
  			}
  		}
  	}
  	if (prev_cp >= 0) {
  		ret.push(prev_cp, ...stack);	
  	}
  	return ret;
  }

  // note: cps can be iterable
  function nfd(cps) {
  	return decomposed(cps).map(unpack_cp);
  }
  function nfc(cps) {
  	return composed_from_decomposed(decomposed(cps));
  }

  const HYPHEN = 0x2D;
  const STOP_CH = '.';
  const FE0F = 0xFE0F;
  const UNIQUE_PH = 1;

  // 20230913: replace [...v] with Array_from(v) to avoid large spreads
  const Array_from = x => Array.from(x); // Array.from.bind(Array);

  function group_has_cp(g, cp) {
  	// 20230913: keep primary and secondary distinct instead of creating valid union
  	return g.P.has(cp) || g.Q.has(cp);
  }

  class Emoji extends Array {
  	get is_emoji() { return true; } // free tagging system
  }

  let MAPPED, IGNORED, CM, NSM, ESCAPE, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;

  function init() {
  	if (MAPPED) return;
  	
  	let r = read_compressed_payload(COMPRESSED$1);
  	const read_sorted_array = () => read_sorted(r);
  	const read_sorted_set = () => new Set(read_sorted_array());
  	const set_add_many = (set, v) => v.forEach(x => set.add(x));

  	MAPPED = new Map(read_mapped(r)); 
  	IGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints

  	/*
  	// direct include from payload is smaller than the decompression code
  	const FENCED = new Map(read_array_while(() => {
  		let cp = r();
  		if (cp) return [cp, read_str(r())];
  	}));
  	*/
  	// 20230217: we still need all CM for proper error formatting
  	// but norm only needs NSM subset that are potentially-valid
  	CM = read_sorted_array();
  	NSM = new Set(read_sorted_array().map(i => CM[i]));
  	CM = new Set(CM);
  	
  	ESCAPE = read_sorted_set(); // characters that should not be printed
  	read_sorted_set(); // only needed to illustrate ens_tokenize() transformations

  	let chunks = read_sorted_arrays(r);
  	let unrestricted = r();
  	//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));
  	const read_chunked = () => {
  		// 20230921: build set in parts, 2x faster
  		let set = new Set();
  		read_sorted_array().forEach(i => set_add_many(set, chunks[i]));
  		set_add_many(set, read_sorted_array());
  		return set; 
  	};
  	GROUPS = read_array_while(i => {
  		// minifier property mangling seems unsafe
  		// so these are manually renamed to single chars
  		let N = read_array_while(r).map(x => x+0x60);
  		if (N.length) {
  			let R = i >= unrestricted; // unrestricted then restricted
  			N[0] -= 32; // capitalize
  			N = str_from_cps(N);
  			if (R) N=`Restricted[${N}]`;
  			let P = read_chunked(); // primary
  			let Q = read_chunked(); // secondary
  			let M = !r(); // not-whitelisted, check for NSM
  			// *** this code currently isn't needed ***
  			/*
  			let V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid
  			let M = r()-1; // number of combining mark
  			if (M < 0) { // whitelisted
  				M = new Map(read_array_while(() => {
  					let i = r();
  					if (i) return [V[i-1], read_array_while(() => {
  						let v = read_array_while(r);
  						if (v.length) return v.map(x => x-1);
  					})];
  				}));
  			}*/
  			return {N, P, Q, M, R};
  		}
  	});

  	// decode compressed wholes
  	WHOLE_VALID = read_sorted_set();
  	WHOLE_MAP = new Map();
  	let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted
  	wholes.forEach((cp, i) => {
  		let d = r(); 
  		let w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};
  		w.V.push(cp); // add to member set
  		if (!WHOLE_VALID.has(cp)) {
  			WHOLE_MAP.set(cp, w);  // register with whole map
  		}
  	});

  	// compute confusable-extent complements
  	// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set
  	for (let {V, M} of new Set(WHOLE_MAP.values())) {
  		// connect all groups that have each whole character
  		let recs = [];
  		for (let cp of V) {
  			let gs = GROUPS.filter(g => group_has_cp(g, cp));
  			let rec = recs.find(({G}) => gs.some(g => G.has(g)));
  			if (!rec) {
  				rec = {G: new Set(), V: []};
  				recs.push(rec);
  			}
  			rec.V.push(cp);
  			set_add_many(rec.G, gs);
  		}
  		// per character cache groups which are not a member of the extent
  		let union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole
  		for (let {G, V} of recs) {
  			let complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent
  			for (let cp of V) {
  				M.set(cp, complement); // this is the same reference
  			}
  		}
  	}

  	// compute valid set
  	// 20230924: VALID was union but can be re-used
  	VALID = new Set(); // exists in 1+ groups
  	let multi = new Set(); // exists in 2+ groups
  	const add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
  	for (let g of GROUPS) {
  		for (let cp of g.P) add_to_union(cp);
  		for (let cp of g.Q) add_to_union(cp);
  	}
  	// dual purpose WHOLE_MAP: return placeholder if unique non-confusable
  	for (let cp of VALID) {
  		if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
  			WHOLE_MAP.set(cp, UNIQUE_PH);
  		}
  	}
  	// add all decomposed parts
  	// see derive: "Valid is Closed (via Brute-force)"
  	set_add_many(VALID, nfd(VALID));
  	
  	// decode emoji
  	// 20230719: emoji are now fully-expanded to avoid quirk logic 
  	EMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);
  	EMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)
  	for (let cps of EMOJI_LIST) {
  		// 20230719: change to *slightly* stricter algorithm which disallows 
  		// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)
  		// example: beautified [A B] (eg. flag emoji) 
  		//  before: allow: [A FE0F B], error: [A FE0F FE0F B] 
  		//   after: error: both
  		// note: this code now matches ENSNormalize.{cs,java} logic
  		let prev = [EMOJI_ROOT];
  		for (let cp of cps) {
  			let next = prev.map(node => {
  				let child = node.get(cp);
  				if (!child) {
  					// should this be object? 
  					// (most have 1-2 items, few have many)
  					// 20230719: no, v8 default map is 4?
  					child = new Map();
  					node.set(cp, child);
  				}
  				return child;
  			});
  			if (cp === FE0F) {
  				prev.push(...next); // less than 20 elements
  			} else {
  				prev = next;
  			}
  		}
  		for (let x of prev) {
  			x.V = cps;
  		}
  	}
  }

  // if escaped: {HEX}
  //       else: "x" {HEX}
  function quoted_cp(cp) {
  	return (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
  }

  // 20230211: some messages can be mixed-directional and result in spillover
  // use 200E after a quoted string to force the remainder of a string from 
  // acquring the direction of the quote
  // https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions
  function bidi_qq(s) {
  	return `"${s}"\u200E`; // strong LTR
  }

  function check_label_extension(cps) {
  	if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
  		throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`); // this can only be ascii so cant be bidi
  	}
  }
  function check_leading_underscore(cps) {
  	const UNDERSCORE = 0x5F;
  	for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
  		if (cps[--i] !== UNDERSCORE) {
  			throw new Error('underscore allowed only at start');
  		}
  	}
  }
  // check that a fenced cp is not leading, trailing, or touching another fenced cp
  function check_fenced(cps) {
  	let cp = cps[0];
  	let prev = FENCED.get(cp);
  	if (prev) throw error_placement(`leading ${prev}`);
  	let n = cps.length;
  	let last = -1; // prevents trailing from throwing
  	for (let i = 1; i < n; i++) {
  		cp = cps[i];
  		let match = FENCED.get(cp);
  		if (match) {
  			// since cps[0] isn't fenced, cps[1] cannot throw
  			if (last == i) throw error_placement(`${prev} + ${match}`);
  			last = i + 1;
  			prev = match;
  		}
  	}
  	if (last == n) throw error_placement(`trailing ${prev}`);
  }

  // create a safe to print string 
  // invisibles are escaped
  // leading cm uses placeholder
  // if cps exceed max, middle truncate with ellipsis
  // quoter(cp) => string, eg. 3000 => "{3000}"
  // note: in html, you'd call this function then replace [<>&] with entities
  function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
  	//if (Number.isInteger(cps)) cps = [cps];
  	//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);
  	let buf = [];
  	if (is_combining_mark(cps[0])) buf.push('◌');
  	if (cps.length > max) {
  		max >>= 1;
  		cps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];
  	}
  	let prev = 0;
  	let n = cps.length;
  	for (let i = 0; i < n; i++) {
  		let cp = cps[i];
  		if (should_escape(cp)) {
  			buf.push(str_from_cps(cps.slice(prev, i)));
  			buf.push(quoter(cp));
  			prev = i + 1;
  		}
  	}
  	buf.push(str_from_cps(cps.slice(prev, n)));
  	return buf.join('');
  }

  // note: set(s) cannot be exposed because they can be modified
  // note: Object.freeze() doesn't work
  function is_combining_mark(cp) {
  	init();
  	return CM.has(cp);
  }
  function should_escape(cp) {
  	init();
  	return ESCAPE.has(cp);
  }

  function ens_normalize(name) {
  	return flatten(split(name, nfc, filter_fe0f));
  }

  function split(name, nf, ef) {
  	if (!name) return []; // 20230719: empty name allowance
  	init();
  	let offset = 0;
  	// https://unicode.org/reports/tr46/#Validity_Criteria
  	// 4.) "The label must not contain a U+002E ( . ) FULL STOP."
  	return name.split(STOP_CH).map(label => {
  		let input = explode_cp(label);
  		let info = {
  			input,
  			offset, // codepoint, not substring!
  		};
  		offset += input.length + 1; // + stop
  		try {
  			// 1.) "The label must be in Unicode Normalization Form NFC"
  			let tokens = info.tokens = tokens_from_str(input, nf, ef);
  			let token_count = tokens.length;
  			let type;
  			if (!token_count) { // the label was effectively empty (could of had ignored characters)
  				//norm = [];
  				//type = 'None'; // use this instead of next match, "ASCII"
  				// 20230120: change to strict
  				// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59
  				throw new Error(`empty label`);
  			} 
  			let norm = info.output = tokens.flat();
  			check_leading_underscore(norm);
  			let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);
  			if (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii
  				// 20230123: matches matches WHATWG, see note 3.3
  				check_label_extension(norm); // only needed for ascii
  				// cant have fenced
  				// cant have cm
  				// cant have wholes
  				// see derive: "Fastpath ASCII"
  				type = 'ASCII';
  			} else {
  				let chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together
  				if (!chars.length) { // theres no text, just emoji
  					type = 'Emoji';
  				} else {
  					// 5.) "The label must not begin with a combining mark, that is: General_Category=Mark."
  					if (CM.has(norm[0])) throw error_placement('leading combining mark');
  					for (let i = 1; i < token_count; i++) { // we've already checked the first token
  						let cps = tokens[i];
  						if (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...
  							// bidi_qq() not needed since emoji is LTR and cps is a CM
  							throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}"`); 
  						}
  					}
  					check_fenced(norm);
  					let unique = Array_from(new Set(chars));
  					let [g] = determine_group(unique); // take the first match
  					// see derive: "Matching Groups have Same CM Style"
  					// alternative: could form a hybrid type: Latin/Japanese/...	
  					check_group(g, chars); // need text in order
  					check_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)
  					type = g.N;
  					// 20230121: consider exposing restricted flag
  					// it's simpler to just check for 'Restricted'
  					// or even better: type.endsWith(']')
  					//if (g.R) info.restricted = true;
  				}
  			}
  			info.type = type;
  		} catch (err) {
  			info.error = err; // use full error object
  		}
  		return info;
  	});
  }

  function check_whole(group, unique) {
  	let maker;
  	let shared = [];
  	for (let cp of unique) {
  		let whole = WHOLE_MAP.get(cp);
  		if (whole === UNIQUE_PH) return; // unique, non-confusable
  		if (whole) {
  			let set = whole.M.get(cp); // groups which have a character that look-like this character
  			maker = maker ? maker.filter(g => set.has(g)) : Array_from(set);
  			if (!maker.length) return; // confusable intersection is empty
  		} else {
  			shared.push(cp); 
  		}
  	}
  	if (maker) {
  		// we have 1+ confusable
  		// check if any of the remaining groups
  		// contain the shared characters too
  		for (let g of maker) {
  			if (shared.every(cp => group_has_cp(g, cp))) {
  				throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
  			}
  		}
  	}
  }

  // assumption: unique.size > 0
  // returns list of matching groups
  function determine_group(unique) {
  	let groups = GROUPS;
  	for (let cp of unique) {
  		// note: we need to dodge CM that are whitelisted
  		// but that code isn't currently necessary
  		let gs = groups.filter(g => group_has_cp(g, cp));
  		if (!gs.length) {
  			if (!GROUPS.some(g => group_has_cp(g, cp))) { 
  				// the character was composed of valid parts
  				// but it's NFC form is invalid
  				// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}
  				// note: this doesn't have to be a composition
  				// 20230720: change to full check
  				throw error_disallowed(cp); // this should be rare
  			} else {
  				// there is no group that contains all these characters
  				// throw using the highest priority group that matched
  				// https://www.unicode.org/reports/tr39/#mixed_script_confusables
  				throw error_group_member(groups[0], cp);
  			}
  		}
  		groups = gs;
  		if (gs.length == 1) break; // there is only one group left
  	}
  	// there are at least 1 group(s) with all of these characters
  	return groups;
  }

  // throw on first error
  function flatten(split) {
  	return split.map(({input, error, output}) => {
  		if (error) {
  			// don't print label again if just a single label
  			let msg = error.message;
  			// bidi_qq() only necessary if msg is digits
  			throw new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); 
  		}
  		return str_from_cps(output);
  	}).join(STOP_CH);
  }

  function error_disallowed(cp) {
  	// TODO: add cp to error?
  	return new Error(`disallowed character: ${quoted_cp(cp)}`); 
  }
  function error_group_member(g, cp) {
  	let quoted = quoted_cp(cp);
  	let gg = GROUPS.find(g => g.P.has(cp)); // only check primary
  	if (gg) {
  		quoted = `${gg.N} ${quoted}`;
  	}
  	return new Error(`illegal mixture: ${g.N} + ${quoted}`);
  }
  function error_placement(where) {
  	return new Error(`illegal placement: ${where}`);
  }

  // assumption: cps.length > 0
  // assumption: cps[0] isn't a CM
  // assumption: the previous character isn't an emoji
  function check_group(g, cps) {
  	for (let cp of cps) {
  		if (!group_has_cp(g, cp)) {
  			// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. "e{300}{300}"
  			// at the moment, it's unnecessary to introduce an extra error type
  			// until there exists a whitelisted multi-character
  			//   eg. if (M < 0 && is_combining_mark(cp)) { ... }
  			// there are 3 cases:
  			//   1. illegal cm for wrong group => mixture error
  			//   2. illegal cm for same group => cm error
  			//       requires set of whitelist cm per group: 
  			//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))
  			//   3. wrong group => mixture error
  			throw error_group_member(g, cp);
  		}
  	}
  	//if (M >= 0) { // we have a known fixed cm count
  	if (g.M) { // we need to check for NSM
  		let decomposed = nfd(cps);
  		for (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption
  			// 20230210: bugfix: using cps instead of decomposed h/t Carbon225
  			/*
  			if (CM.has(decomposed[i])) {
  				let j = i + 1;
  				while (j < e && CM.has(decomposed[j])) j++;
  				if (j - i > M) {
  					throw new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);
  				}
  				i = j;
  			}
  			*/
  			// 20230217: switch to NSM counting
  			// https://www.unicode.org/reports/tr39/#Optional_Detection
  			if (NSM.has(decomposed[i])) {
  				let j = i + 1;
  				for (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {
  					// a. Forbid sequences of the same nonspacing mark.
  					for (let k = i; k < j; k++) { // O(n^2) but n < 100
  						if (decomposed[k] == cp) {
  							throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
  						}
  					}
  				}
  				// parse to end so we have full nsm count
  				// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).
  				if (j - i > NSM_MAX) {
  					// note: this slice starts with a base char or spacing-mark cm
  					throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);
  				}
  				i = j;
  			}
  		}
  	}
  	// *** this code currently isn't needed ***
  	/*
  	let cm_whitelist = M instanceof Map;
  	for (let i = 0, e = cps.length; i < e; ) {
  		let cp = cps[i++];
  		let seqs = cm_whitelist && M.get(cp);
  		if (seqs) { 
  			// list of codepoints that can follow
  			// if this exists, this will always be 1+
  			let j = i;
  			while (j < e && CM.has(cps[j])) j++;
  			let cms = cps.slice(i, j);
  			let match = seqs.find(seq => !compare_arrays(seq, cms));
  			if (!match) throw new Error(`disallowed combining mark sequence: "${safe_str_from_cps([cp, ...cms])}"`);
  			i = j;
  		} else if (!V.has(cp)) {
  			// https://www.unicode.org/reports/tr39/#mixed_script_confusables
  			let quoted = quoted_cp(cp);
  			for (let cp of cps) {
  				let u = UNIQUE.get(cp);
  				if (u && u !== g) {
  					// if both scripts are restricted this error is confusing
  					// because we don't differentiate RestrictedA from RestrictedB 
  					if (!u.R) quoted = `${quoted} is ${u.N}`;
  					break;
  				}
  			}
  			throw new Error(`disallowed ${g.N} character: ${quoted}`);
  			//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);
  			//throw new Error(`${g.N} does not allow: ${quoted}`);
  		}
  	}
  	if (!cm_whitelist) {
  		let decomposed = nfd(cps);
  		for (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading
  			if (CM.has(decomposed[i])) {
  				let j = i + 1;
  				while (j < e && CM.has(decomposed[j])) j++;
  				if (j - i > M) {
  					throw new Error(`too many combining marks: "${str_from_cps(decomposed.slice(i-1, j))}" (${j-i}/${M})`);
  				}
  				i = j;
  			}
  		}
  	}
  	*/
  }

  // given a list of codepoints
  // returns a list of lists, where emoji are a fully-qualified (as Array subclass)
  // eg. explode_cp("abc💩d") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]
  // 20230818: rename for 'process' name collision h/t Javarome
  // https://github.com/adraffy/ens-normalize.js/issues/23
  function tokens_from_str(input, nf, ef) {
  	let ret = [];
  	let chars = [];
  	input = input.slice().reverse(); // flip so we can pop
  	while (input.length) {
  		let emoji = consume_emoji_reversed(input);
  		if (emoji) {
  			if (chars.length) {
  				ret.push(nf(chars));
  				chars = [];
  			}
  			ret.push(ef(emoji));
  		} else {
  			let cp = input.pop();
  			if (VALID.has(cp)) {
  				chars.push(cp);
  			} else {
  				let cps = MAPPED.get(cp);
  				if (cps) {
  					chars.push(...cps); // less than 10 elements
  				} else if (!IGNORED.has(cp)) {
  					// 20230912: unicode 15.1 changed the order of processing such that
  					// disallowed parts are only rejected after NFC
  					// https://unicode.org/reports/tr46/#Validity_Criteria
  					// this doesn't impact normalization as of today
  					// technically, this error can be removed as the group logic will apply similar logic
  					// however the error type might be less clear
  					throw error_disallowed(cp);
  				}
  			}
  		}
  	}
  	if (chars.length) {
  		ret.push(nf(chars));
  	}
  	return ret;
  }

  function filter_fe0f(cps) {
  	return cps.filter(cp => cp != FE0F);
  }

  // given array of codepoints
  // returns the longest valid emoji sequence (or undefined if no match)
  // *MUTATES* the supplied array
  // disallows interleaved ignored characters
  // fills (optional) eaten array with matched codepoints
  function consume_emoji_reversed(cps, eaten) {
  	let node = EMOJI_ROOT;
  	let emoji;
  	let pos = cps.length;
  	while (pos) {
  		node = node.get(cps[--pos]);
  		if (!node) break;
  		let {V} = node;
  		if (V) { // this is a valid emoji (so far)
  			emoji = V;
  			cps.length = pos; // truncate
  		}
  	}
  	return emoji;
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const normalize = (name) => ens_normalize(name);
  const namehash = (inputName) => {
      // Reject empty names:
      let node = '';
      for (let i = 0; i < 32; i += 1) {
          node += '00';
      }
      if (inputName) {
          const name = normalize(inputName);
          const labels = name.split('.');
          for (let i = labels.length - 1; i >= 0; i -= 1) {
              const labelSha = sha3Raw(labels[i]).slice(2);
              node = sha3Raw(`0x${node}${labelSha}`).slice(2);
          }
      }
      return `0x${node}`;
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$8 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  class Registry {
      constructor(context, customRegistryAddress) {
          this.contract = new Contract(ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : registryAddresses.main, context);
          this.context = context;
      }
      getOwner(name) {
          return __awaiter$8(this, void 0, void 0, function* () {
              try {
                  const result = this.contract.methods.owner(namehash(name)).call();
                  return result;
              }
              catch (error) {
                  throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented
              }
          });
      }
      getTTL(name) {
          return __awaiter$8(this, void 0, void 0, function* () {
              try {
                  return this.contract.methods.ttl(namehash(name)).call();
              }
              catch (error) {
                  throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented
              }
          });
      }
      recordExists(name) {
          return __awaiter$8(this, void 0, void 0, function* () {
              try {
                  const promise = this.contract.methods.recordExists(namehash(name)).call();
                  return promise;
              }
              catch (error) {
                  throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented
              }
          });
      }
      getResolver(name) {
          return __awaiter$8(this, void 0, void 0, function* () {
              try {
                  return this.contract.methods
                      .resolver(namehash(name))
                      .call()
                      .then(address => {
                      // address type is unknown, not sure why
                      if (typeof address === 'string') {
                          const contract = new Contract(PublicResolverAbi, address, this.context);
                          // TODO: set contract provider needs to be added when ens current provider
                          return contract;
                      }
                      throw new Error();
                  });
              }
              catch (error) {
                  throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented
              }
          });
      }
      get events() {
          return this.contract.events;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$7 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  //  Default public resolver
  //  https://github.com/ensdomains/resolvers/blob/master/contracts/PublicResolver.sol
  class Resolver {
      constructor(registry) {
          this.registry = registry;
      }
      getResolverContractAdapter(ENSName) {
          return __awaiter$7(this, void 0, void 0, function* () {
              //  TODO : (Future 4.1.0 TDB) cache resolver contract if frequently queried same ENS name, refresh cache based on TTL and usage, also limit cache size, optional cache with a flag
              return this.registry.getResolver(ENSName);
          });
      }
      //  https://eips.ethereum.org/EIPS/eip-165
      // eslint-disable-next-line class-methods-use-this
      checkInterfaceSupport(resolverContract, methodName) {
          var _a, _b;
          return __awaiter$7(this, void 0, void 0, function* () {
              if (isNullish(interfaceIds[methodName]))
                  throw new ResolverMethodMissingError((_a = resolverContract.options.address) !== null && _a !== void 0 ? _a : '', methodName);
              const supported = yield resolverContract.methods
                  .supportsInterface(interfaceIds[methodName])
                  .call();
              if (!supported)
                  throw new ResolverMethodMissingError((_b = resolverContract.options.address) !== null && _b !== void 0 ? _b : '', methodName);
          });
      }
      supportsInterface(ENSName, interfaceId) {
          var _a;
          return __awaiter$7(this, void 0, void 0, function* () {
              const resolverContract = yield this.getResolverContractAdapter(ENSName);
              let interfaceIdParam = interfaceId;
              if (!isHexStrict$1(interfaceIdParam)) {
                  interfaceIdParam = (_a = sha3(interfaceId)) !== null && _a !== void 0 ? _a : '';
                  if (interfaceId === '')
                      throw new Error('Invalid interface Id');
                  interfaceIdParam = interfaceIdParam.slice(0, 10);
              }
              return resolverContract.methods.supportsInterface(interfaceIdParam).call();
          });
      }
      // eslint-disable-next-line @typescript-eslint/no-inferrable-types
      getAddress(ENSName, coinType = 60) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const resolverContract = yield this.getResolverContractAdapter(ENSName);
              yield this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);
              return resolverContract.methods.addr(namehash(ENSName), coinType).call();
          });
      }
      getPubkey(ENSName) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const resolverContract = yield this.getResolverContractAdapter(ENSName);
              yield this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);
              return resolverContract.methods.pubkey(namehash(ENSName)).call();
          });
      }
      getContenthash(ENSName) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const resolverContract = yield this.getResolverContractAdapter(ENSName);
              yield this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);
              return resolverContract.methods.contenthash(namehash(ENSName)).call();
          });
      }
      setAddress(ENSName, address, txConfig) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const resolverContract = yield this.getResolverContractAdapter(ENSName);
              yield this.checkInterfaceSupport(resolverContract, methodsInInterface.setAddr);
              return resolverContract.methods
                  .setAddr(namehash(ENSName), address)
                  .send(txConfig);
          });
      }
      getText(ENSName, key) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const resolverContract = yield this.getResolverContractAdapter(ENSName);
              yield this.checkInterfaceSupport(resolverContract, methodsInInterface.text);
              return resolverContract.methods
                  .text(namehash(ENSName), key).call();
          });
      }
      getName(address, checkInterfaceSupport = true) {
          return __awaiter$7(this, void 0, void 0, function* () {
              const reverseName = `${address.toLowerCase().substring(2)}.addr.reverse`;
              const resolverContract = yield this.getResolverContractAdapter(reverseName);
              if (checkInterfaceSupport)
                  yield this.checkInterfaceSupport(resolverContract, methodsInInterface.name);
              return resolverContract.methods
                  .name(namehash(reverseName)).call();
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$6 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * This class is designed to interact with the ENS system on the Ethereum blockchain.
   * For using ENS package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that ENS features can be used as mentioned in following snippet.
   * ```ts
   *
   * import { Web3 } from 'web3';
   *
   * const web3 = new Web3('https://127.0.0.1:4545');
   *
   * console.log(await web3.eth.ens.getAddress('ethereum.eth'))
   * ```
   * For using individual package install `web3-eth-ens` packages using: `npm i web3-eth-ens` or `yarn add web3-eth-ens`. This is more efficient approach for building lightweight applications.
   *
   * ```ts
   *import { ENS } from 'web3-eth-ens';
   *
   * const ens = new ENS(undefined,'https://127.0.0.1:4545');
   *
   * console.log(await ens.getAddress('vitalik.eth'));
   * ```
   */
  class ENS extends Web3Context$1 {
      /**
       * Use to create an instance of ENS
       * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)
       * @param provider - (Optional) The provider to use for the ENS instance
       * @example
       * ```ts
       * const ens = new ENS(
       * 	"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
       * 	"http://localhost:8545"
       * );
       *
       * console.log( ens.defaultChain);
       * > mainnet
       * ```
       */
      constructor(registryAddr, provider) {
          super(provider !== null && provider !== void 0 ? provider : '');
          this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : registryAddresses.main; // will default to main registry address
          this._registry = new Registry(this.getContextObject(), registryAddr);
          this._resolver = new Resolver(this._registry);
      }
      /**
       * Returns the Resolver by the given address
       * @param name - The name of the ENS domain
       * @returns - An contract instance of the resolver
       *
       * @example
       * ```ts
       * const resolver = await ens.getResolver('resolver');
       *
       * console.log(resolver.options.address);
       * > '0x1234567890123456789012345678901234567890'
       * ```
       */
      getResolver(name) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._registry.getResolver(name);
          });
      }
      /**
       * Returns true if the record exists
       * @param name - The ENS name
       * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.
       * @example
       * ```ts
       * const exists = await web3.eth.ens.recordExists('ethereum.eth');
       * ```
       */
      recordExists(name) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._registry.recordExists(name);
          });
      }
      /**
       * Returns the caching TTL (time-to-live) of an ENS name.
       * @param name - The ENS name
       * @returns - Returns the caching TTL (time-to-live) of a name.
       * @example
       * ```ts
       * const owner = await web3.eth.ens.getTTL('ethereum.eth');
       * ```
       */
      getTTL(name) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._registry.getTTL(name);
          });
      }
      /**
       * Returns the owner by the given name and current configured or detected Registry
       * @param name - The ENS name
       * @returns - Returns the address of the owner of the name.
       * @example
       * ```ts
       * const owner = await web3.eth.ens.getOwner('ethereum.eth');
       * ```
       */
      getOwner(name) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._registry.getOwner(name);
          });
      }
      /**
       * Resolves an ENS name to an Ethereum address.
       * @param ENSName - The ENS name to resolve
       * @param coinType - (Optional) The coin type, defaults to 60 (ETH)
       * @returns - The Ethereum address of the given name
       * ```ts
       * const address = await web3.eth.ens.getAddress('ethereum.eth');
       * console.log(address);
       * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'
       * ```
       */
      getAddress(ENSName, coinType = 60) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._resolver.getAddress(ENSName, coinType);
          });
      }
      /**
       * ERC-634 - Returns the text content stored in the resolver for the specified key.
       * @param ENSName - The ENS name to resolve
       * @param key - The key to resolve https://github.com/ethereum/ercs/blob/master/ERCS/erc-634.md#global-keys
       * @returns - The value content stored in the resolver for the specified key
       */
      getText(ENSNameOrAddr, key) {
          return __awaiter$6(this, void 0, void 0, function* () {
              if (isAddress$1(ENSNameOrAddr))
                  return this._resolver.getText(yield (this._resolver.getName(ENSNameOrAddr, false)), key);
              return this._resolver.getText(ENSNameOrAddr, key);
          });
      }
      /**
       * Resolves the name of an ENS node.
       * @param ENSName - The node to resolve
       * @returns - The name
       */
      getName(ENSName, checkInterfaceSupport = true) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._resolver.getName(ENSName, checkInterfaceSupport);
          });
      }
      /**
       * Returns the X and Y coordinates of the curve point for the public key.
       * @param ENSName - The ENS name
       * @returns - The X and Y coordinates of the curve point for the public key
       * @example
       * ```ts
       * const key = await web3.eth.ens.getPubkey('ethereum.eth');
       * console.log(key);
       * > {
       * "0": "0x0000000000000000000000000000000000000000000000000000000000000000",
       * "1": "0x0000000000000000000000000000000000000000000000000000000000000000",
       * "x": "0x0000000000000000000000000000000000000000000000000000000000000000",
       * "y": "0x0000000000000000000000000000000000000000000000000000000000000000"
       * }
       * ```
       */
      getPubkey(ENSName) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._resolver.getPubkey(ENSName);
          });
      }
      /**
       * Returns the content hash object associated with an ENS node.
       * @param ENSName - The ENS name
       * @returns - The content hash object associated with an ENS node
       * @example
       * ```ts
       * const hash = await web3.eth.ens.getContenthash('ethereum.eth');
       * console.log(hash);
       * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'
       * ```
       */
      getContenthash(ENSName) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._resolver.getContenthash(ENSName);
          });
      }
      /**
       * Checks if the current used network is synced and looks for ENS support there.
       * Throws an error if not.
       * @returns - The address of the ENS registry if the network has been detected successfully
       * @example
       * ```ts
       * console.log(await web3.eth.ens.checkNetwork());
       * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'
       * ```
       */
      checkNetwork() {
          return __awaiter$6(this, void 0, void 0, function* () {
              const now = Date.now() / 1000;
              if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {
                  const syncInfo = yield isSyncing(this);
                  if (!(typeof syncInfo === 'boolean' && !syncInfo)) {
                      throw new ENSNetworkNotSyncedError();
                  }
                  this._lastSyncCheck = now;
              }
              if (this._detectedAddress) {
                  return this._detectedAddress;
              }
              const networkType = yield getId(this, Object.assign(Object.assign({}, this.defaultReturnFormat), { number: FMT_NUMBER.HEX })); // get the network from provider
              const addr = registryAddresses[networkIds[networkType]];
              if (typeof addr === 'undefined') {
                  throw new ENSUnsupportedNetworkError(networkType);
              }
              this._detectedAddress = addr;
              return this._detectedAddress;
          });
      }
      /**
       * Returns true if the related Resolver does support the given signature or interfaceId.
       * @param ENSName - The ENS name
       * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation
       * @returns - `true` if the related Resolver does support the given signature or interfaceId.
       * @example
       * ```ts
       * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');
       * console.log(supports);
       * > true
       * ```
       */
      supportsInterface(ENSName, interfaceId) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._resolver.supportsInterface(ENSName, interfaceId);
          });
      }
      /**
       * @returns - Returns all events that can be emitted by the ENS registry.
       */
      get events() {
          return this._registry.events;
      }
      /**
       * Sets the address of an ENS name in his resolver.
       * @param name - The ENS name
       * @param address - The address to set
       * @param txConfig - (Optional) The transaction config
       * @returns - The transaction receipt
       * ```ts
       * const receipt = await ens.setAddress('web3js.eth','0xe2597eb05cf9a87eb1309e86750c903ec38e527e');
       *```
       */
      setAddress(name, address, txConfig) {
          return __awaiter$6(this, void 0, void 0, function* () {
              return this._resolver.setAddress(name, address, txConfig);
          });
      }
  }

  var __awaiter$5 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const getAccounts = (requestManager) => __awaiter$5(void 0, void 0, void 0, function* () {
      const result = yield getAccounts$1(requestManager);
      return result.map(toChecksumAddress);
  });
  const newAccount = (requestManager, password) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(['string'], [password]);
      const result = yield newAccount$1(requestManager, password);
      return toChecksumAddress(result);
  });
  const unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(['address', 'string', 'uint'], [address, password, unlockDuration]);
      return unlockAccount$1(requestManager, address, password, unlockDuration);
  });
  const lockAccount = (requestManager, address) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(['address'], [address]);
      return lockAccount$1(requestManager, address);
  });
  const importRawKey = (requestManager, keyData, passphrase) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(['string', 'string'], [keyData, passphrase]);
      return importRawKey$1(requestManager, keyData, passphrase);
  });
  const sendTransaction = (requestManager, tx, passphrase, config) => __awaiter$5(void 0, void 0, void 0, function* () {
      const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT, {
          transactionSchema: config === null || config === void 0 ? void 0 : config.customTransactionSchema,
      });
      return sendTransaction$2(requestManager, formattedTx, passphrase);
  });
  const signTransaction = (requestManager, tx, passphrase, config) => __awaiter$5(void 0, void 0, void 0, function* () {
      const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT, {
          transactionSchema: config === null || config === void 0 ? void 0 : config.customTransactionSchema,
      });
      return signTransaction$2(requestManager, formattedTx, passphrase);
  });
  const sign = (requestManager, data, address, passphrase) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(['string', 'address', 'string'], [data, address, passphrase]);
      const dataToSign = isHexStrict$1(data) ? data : utf8ToHex(data);
      return sign$2(requestManager, dataToSign, address, passphrase);
  });
  const ecRecover = (requestManager, signedData, signature) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(['string', 'string'], [signedData, signature]);
      const signedDataString = isHexStrict$1(signedData) ? signedData : utf8ToHex(signedData);
      return ecRecover$1(requestManager, signedDataString, signature);
  });

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$4 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * Eth Personal allows you to interact with the Ethereum node’s accounts.
   * For using Eth Personal package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager.
   * ```ts
   *
   *import { Web3 } from 'web3';
   *  const web3 = new Web3('http://127.0.0.1:7545');
   *
   *  console.log(await web3.eth.personal.getAccounts());
   *
   * ```
   * For using individual package install `web3-eth-personal` packages using: `npm i web3-eth-personal` or `yarn add web3-eth-personal`.
   *
   * ```ts
   * import {Personal} from 'web3-eth-personal';
   *
   * const personal = new Personal('http://127.0.0.1:7545');
   * console.log(await personal.getAccounts());
   * ```
   */
  class Personal extends Web3Context$1 {
      /**
       *Returns a list of accounts the node controls by using the provider and calling the RPC method personal_listAccounts. Using `web3.eth.accounts.create()` will not add accounts into this list. For that use `web3.eth.personal.newAccount()`.
       * @returns - An array of addresses controlled by the node.
       * @example
       * ```ts
       *  const accounts = await personal.getAccounts();
       * console.log(accounts);
       * >
       * [
       * 	'0x79D7BbaC53C9aF700d0B250e9AE789E503Fcd6AE',
       * 	'0xe2597eB05CF9a87eB1309e86750C903EC38E527e',
       * 	'0x7eD0e85B8E1E925600B4373e6d108F34AB38a401',
       * 	'0xE4bEEf667408b99053dC147Ed19592aDa0d77F59',
       * 	'0x7AB80aeB6bb488B7f6c41c58e83Ef248eB39c882',
       * 	'0x12B1D9d74d73b1C3A245B19C1C5501c653aF1af9',
       * 	'0x1a6075A263Ee140e00Dbf8E374Fc5A443d097894',
       * 	'0x4FEC0A51024B13030D26E70904B066C6d41157A5',
       * 	'0x03095dc4857BB26f3a4550c5651Df8b7f6b6B1Ef',
       * 	'0xac0B9b6e8A17991cb172B2ABAF45Fb5eb769E540'
       * ]
       * ```
       */
      getAccounts() {
          return __awaiter$4(this, void 0, void 0, function* () {
              return getAccounts(this.requestManager);
          });
      }
      /**
       * Creates a new account and returns its address.
       * **_NOTE:_**  This function sends a sensitive information like password. Never call this function over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!
       * @param password - The password to encrypt the account with.
       * @returns - The address of the new account.
       * @example
       * ```ts
       * const addr = await web3.eth.personal.newAccount('password');
       * console.log(addr);
       * > '0x1234567891011121314151617181920212223456'
       * ```
       */
      newAccount(password) {
          return __awaiter$4(this, void 0, void 0, function* () {
              return newAccount(this.requestManager, password);
          });
      }
      /**
       * Unlocks an account for a given duration.
       * @param address - The address of the account to unlock.
       * @param password - The password of the account to unlock.
       * @param unlockDuration - The duration in seconds to unlock the account for.
       * @example
       * ```ts
       * await personal.unlockAccount(
       * 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
       * 	"123456",
       * 	600
       * );
       * ```
       */
      unlockAccount(address, password, unlockDuration) {
          return __awaiter$4(this, void 0, void 0, function* () {
              return unlockAccount(this.requestManager, address, password, unlockDuration);
          });
      }
      /**
       * Locks the given account
       * @param address - The address of the account to lock.
       * @returns - `true` if the account was locked, otherwise `false`.
       * @example
       * ```ts
       * await personal.lockAccount(
       * 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e"
       * );
       * ```
       */
      lockAccount(address) {
          return __awaiter$4(this, void 0, void 0, function* () {
              return lockAccount(this.requestManager, address);
          });
      }
      /**
       * Imports the given private key into the key store, encrypting it with the passphrase.
       * @param keyData - An unencrypted private key (hex string).
       * @param passphrase  - The password of the account
       * @returns - The address of the new account.
       * @example
       * ```ts
       * const accountAddress = await personal.importRawKey(
       * 	"abe40cb08850da918ee951b237fa87946499b2d8643e4aa12b0610b050c731f6",
       * 	"123456"
       * );
       *
       * console.log(unlockTx);
       * > 0x8727a8b34ec833154b72b62cac05d69f86eb6556
       * ```
       */
      importRawKey(keyData, passphrase) {
          return __awaiter$4(this, void 0, void 0, function* () {
              return importRawKey(this.requestManager, keyData, passphrase);
          });
      }
      /**
       * This method sends a transaction over the management API.
       * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
       * @param tx - The transaction options
       * @param passphrase - The passphrase of the current account
       * @returns - The transaction hash
       * @example
       * ```ts
       * const txHash = personal
       * .sendTransaction({
       *  	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
       * 	gasPrice: "20000000000",
       * 	gas: "21000",
       * 	to: "0x3535353535353535353535353535353535353535",
       * 	value: "1000000",
       * 	data: "",
       * 	nonce: 0,
       * },
       * "123456");
       *
       * console.log(txHash);
       * > 0x9445325c3c5638c9fe425b003b8c32f03e9f99d409555a650a6838ba712bb51b
       * ```
       */
      sendTransaction(tx, passphrase) {
          return __awaiter$4(this, void 0, void 0, function* () {
              return sendTransaction(this.requestManager, tx, passphrase, this.config);
          });
      }
      /**
       * Signs a transaction. This account needs to be unlocked.
       * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
       * @param tx - The transaction data to sign. See sendTransaction  for more information.
       * @param passphrase - The password of the `from` account, to sign the transaction with.
       * @returns - The RLP encoded transaction. The `raw` property can be used to send the transaction using  sendSignedTransaction.
       * @example
       * ```ts
       * const tx = personal
       * .signTransaction({
       * 	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
       * 	gasPrice: "20000000000",
       * 	gas: "21000",
       * 	to: "0x3535353535353535353535353535353535353535",
       * 	value: "1000000000000000000",
       * 	data: "",
       * 	nonce: 0,
       * },
       * "123456");
       *
       * console.log(tx);
       *
       * > {
       * 	raw: '0xf86e808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080820a95a0c951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526a038b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
       * 	tx: {
       * 	type: '0x0',
       * 	nonce: '0x0',
       * 	gasPrice: '0x4a817c800',
       * 	maxPriorityFeePerGas: null,
       * 	maxFeePerGas: null,
       * 	gas: '0x5208',
       * 	value: '0xde0b6b3a7640000',
       * 	input: '0x',
       * 	v: '0xa95',
       * 	r: '0xc951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526',
       * 	s: '0x38b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
       * 	to: '0x3535353535353535353535353535353535353535',
       * 	hash: '0x65e3df790ab2a32068b13cff970b26445b8995229ae4abbed61bd996f09fce69'
       * 	}
       * }
       * ```
       */
      signTransaction(tx, passphrase) {
          return __awaiter$4(this, void 0, void 0, function* () {
              return signTransaction(this.requestManager, tx, passphrase, this.config);
          });
      }
      /**
       * Calculates an Ethereum specific signature with:
       * sign(keccak256("\x19Ethereum Signed Message:\n" + dataToSign.length + dataToSign)))
       * Adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.
       *
       * If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover
       * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
       * @param data - The data to sign.
       * @param address - The address to sign with.
       * @param passphrase - The passphrase to decrypt the account with.
       * @returns - The signature.
       * @example
       * ```ts
       * const sig = await personal.sign("Hello world", "0x0D4Aa485ECbC499c70860fEb7e5AaeAf5fd8172E", "123456")
       * console.log(sig)
       * > 0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b
       * ```
       */
      sign(data, address, passphrase) {
          return __awaiter$4(this, void 0, void 0, function* () {
              return sign(this.requestManager, data, address, passphrase);
          });
      }
      /**
       * Recovers the account that signed the data.
       * @param signedData - Data that was signed. If String it will be converted using {@link utf8ToHex}
       * @param signature - The signature
       * @returns - The address of the account that signed the data.
       * @example
       * ```ts
       *  const address = await personal.ecRecover(
       * 	"Hello world",
       * 	"0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b"
       * );
       * console.log(address);
       * > 0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e
       * ```
       */
      ecRecover(signedData, signature) {
          return __awaiter$4(this, void 0, void 0, function* () {
              return ecRecover(this.requestManager, signedData, signature);
          });
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var Transport;
  (function (Transport) {
      Transport["HTTPS"] = "https";
      Transport["WebSocket"] = "wss";
  })(Transport || (Transport = {}));
  var Network;
  (function (Network) {
      Network["ETH_MAINNET"] = "eth_mainnet";
      Network["ETH_SEPOLIA"] = "eth_sepolia";
      Network["ETH_HOLESKY"] = "eth_holesky";
      Network["POLYGON_MAINNET"] = "polygon_mainnet";
      Network["POLYGON_AMOY"] = "polygon_amoy";
      Network["AVALANCHE_C_MAINNET"] = "avalanche_c_mainnet";
      Network["AVALANCHE_P_MAINNET"] = "avalanche_p_mainnet";
      Network["AVALANCHE_X_MAINNET"] = "avalanche_x_mainnet";
      Network["ARBITRUM_MAINNET"] = "arbitrum_mainnet";
      Network["ARBITRUM_SEPOLIA"] = "arbitrum_sepolia";
      Network["BASE_MAINNET"] = "base_mainnet";
      Network["BASE_SEPOLIA"] = "base_sepolia";
      Network["OPTIMISM_MAINNET"] = "optimism_mainnet";
      Network["OPTIMISM_SEPOLIA"] = "optimism_sepolia";
      Network["FANTOM_MAINNET"] = "fantom_mainnet";
      Network["FANTOM_TESTNET"] = "fantom_testnet";
      Network["DYMENSION_MAINNET"] = "dymension_mainnet";
      Network["DYMENSION_TESTNET"] = "dymension_testnet";
      Network["BNB_MAINNET"] = "bnb_mainnet";
      Network["BNB_TESTNET"] = "bnb_testnet";
      Network["BSC_MAINNET"] = "bsc_mainnet";
      Network["BSC_TESTNET"] = "bsc_testnet";
      Network["ARBITRUM_ONE"] = "arbitrum_one";
      Network["ARBITRUM_NOVA"] = "arbitrum_nova";
      Network["AVALANCHE_FUJI_C"] = "avalanche_fuji_c";
      Network["AVALANCHE_FUJI_P"] = "avalanche_fuji_p";
      Network["AVALANCHE_FUJI_X"] = "avalanche_fuji_x";
      Network["BLAST_MAINNET"] = "blast_mainnet";
      Network["OPBNB_MAINNET"] = "opbnb_mainnet";
      Network["OPBNB_TESTNET"] = "opbnb_testnet";
      Network["GNOSIS_MAINNET"] = "gnosis_mainnet";
      Network["GNOSIS_CHIADO"] = "gnosis_chiado";
      Network["PULSECHAIN_MAINNET"] = "pulsechain_mainnet";
      Network["PULSECHAIN_TESTNET"] = "pulsechain_testnet";
      Network["KAVA_MAINNET"] = "kava_mainnet";
      Network["CRONOS_MAINNET"] = "cronos_mainnet";
      Network["MANTLE_MAINNET"] = "mantle_mainnet";
      Network["CHILIZ_MAINNET"] = "chiliz_mainnet";
      Network["CHILIZ_SPICY"] = "chiliz_spicy";
      Network["MOONBEAM_MAINNET"] = "moonbeam_mainnet";
      Network["TAIKO_MAINNET"] = "taiko_mainnet";
      Network["TAIKO_HEKLA"] = "taiko_hekla";
      Network["LINEA_MAINNET"] = "linea_mainnet";
      Network["LINEA_SEPOLIA"] = "linea_sepolia";
      Network["BAHAMUT_MAINNET"] = "bahamut_mainnet";
      Network["SCROLL_MAINNET"] = "scroll_mainnet";
      Network["SCROLL_SEPOLIA"] = "scroll_sepolia";
      Network["TRON_MAINNET"] = "tron_mainnet";
      Network["SYSCOIN_MAINNET"] = "syscoin_mainnet";
      Network["SYSCOIN_TANENBAUM"] = "syscoin_tanenbaum";
      Network["MOONRIVER_MAINNET"] = "moonriver_mainnet";
      Network["HAQQ_MAINNET"] = "haqq_mainnet";
      Network["EVMOS_MAINNET"] = "evmos_mainnet";
      Network["EVMOS_TESTNET"] = "evmos_testnet";
      Network["BERACHAIN_TESTNET"] = "berachain_testnet";
  })(Network || (Network = {}));

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /* eslint-disable max-classes-per-file */
  const ERR_QUICK_NODE_RATE_LIMIT = 1300;
  class QuickNodeRateLimitError extends BaseWeb3Error {
      constructor(error) {
          super(`You've reach the rate limit of free RPC calls from our Partner Quick Nodes. There are two options you can either create a paid Quick Nodes account and get 20% off for 2 months using WEB3JS referral code, or use Free public RPC endpoint.`, error);
          this.code = ERR_QUICK_NODE_RATE_LIMIT;
      }
  }
  const ERR_PROVIDER_CONFIG_OPTIONS = 1301;
  class ProviderConfigOptionsError extends BaseWeb3Error {
      constructor(msg) {
          super(`Invalid provider config options given for ${msg}`);
          this.code = ERR_PROVIDER_CONFIG_OPTIONS;
      }
  }
  /* eslint-enable max-classes-per-file */

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$3 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /*
  This class can be used to create new providers only when there is custom logic required in each Request method like
  checking specific HTTP status codes and performing any action, throwing new error types or setting additional HTTP headers in requests, or even modifying requests.

  Another simpler approach can be a function simply returning URL strings instead of using the following class in case if
  no additional logic implementation is required in the provider.
  */
  class Web3ExternalProvider extends Eip1193Provider {
      constructor(network, transport, token, host, providerConfigOptions) {
          super();
          if (providerConfigOptions !== undefined &&
              transport === Transport.HTTPS &&
              !('providerOptions' in providerConfigOptions)) {
              throw new ProviderConfigOptionsError('HTTP Provider');
          }
          else if (providerConfigOptions !== undefined &&
              transport === Transport.WebSocket &&
              !('socketOptions' in providerConfigOptions ||
                  'reconnectOptions' in providerConfigOptions)) {
              throw new ProviderConfigOptionsError('Websocket Provider');
          }
          this.transport = transport;
          if (transport === Transport.HTTPS) {
              this.provider = new HttpProvider(this.getRPCURL(network, transport, token, host), providerConfigOptions);
          }
          else if (transport === Transport.WebSocket) {
              this.provider = new WebSocketProvider(this.getRPCURL(network, transport, token, host), providerConfigOptions === null || providerConfigOptions === void 0 ? void 0 : providerConfigOptions.socketOptions, providerConfigOptions === null || providerConfigOptions === void 0 ? void 0 : providerConfigOptions.reconnectOptions);
          }
      }
      request(payload, requestOptions) {
          return __awaiter$3(this, void 0, void 0, function* () {
              if (this.transport === Transport.HTTPS) {
                  return (yield this.provider.request(payload, requestOptions));
              }
              return this.provider.request(payload);
          });
      }
      getStatus() {
          return this.provider.getStatus();
      }
      supportsSubscriptions() {
          return this.provider.supportsSubscriptions();
      }
      once(_type, _listener) {
          var _a;
          if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.once) {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
              this.provider.once(_type, _listener);
          }
      }
      removeAllListeners(_type) {
          var _a;
          if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.removeAllListeners)
              this.provider.removeAllListeners(_type);
      }
      connect() {
          var _a;
          if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.connect)
              this.provider.connect();
      }
      disconnect(_code, _data) {
          var _a;
          if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.disconnect)
              this.provider.disconnect(_code, _data);
      }
      reset() {
          var _a;
          if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.reset)
              this.provider.reset();
      }
      on(_type, _listener) {
          if (this.provider)
              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
              this.provider.on(_type, _listener);
      }
      removeListener(_type, _listener) {
          if (this.provider)
              this.provider.removeListener(_type, _listener);
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const isValid$1 = (str) => str !== undefined && str.trim().length > 0;
  class QuickNodeProvider extends Web3ExternalProvider {
      // eslint-disable-next-line default-param-last
      constructor(network = Network.ETH_MAINNET, transport = Transport.HTTPS, token = '', host = '', providerConfigOptions) {
          super(network, transport, token, host, providerConfigOptions);
      }
      request(payload, requestOptions) {
          const _super = Object.create(null, {
              request: { get: () => super.request }
          });
          return __awaiter$2(this, void 0, void 0, function* () {
              try {
                  return yield _super.request.call(this, payload, requestOptions);
              }
              catch (error) {
                  if (error instanceof ResponseError && error.statusCode === 429) {
                      throw new QuickNodeRateLimitError(error);
                  }
                  throw error;
              }
          });
      }
      // eslint-disable-next-line class-methods-use-this
      getRPCURL(network, transport, _token, _host) {
          let host = '';
          let token = '';
          switch (network) {
              case Network.ETH_MAINNET:
                  host = isValid$1(_host) ? _host : 'powerful-holy-bush.quiknode.pro';
                  token = isValid$1(_token) ? _token : '3240624a343867035925ff7561eb60dfdba2a668';
                  break;
              case Network.ETH_SEPOLIA:
                  host = isValid$1(_host)
                      ? _host
                      : 'dimensional-fabled-glitter.ethereum-sepolia.quiknode.pro';
                  token = isValid$1(_token) ? _token : '382a3b5a4b938f2d6e8686c19af4b22921fde2cd';
                  break;
              case Network.ETH_HOLESKY:
                  host = isValid$1(_host) ? _host : 'yolo-morning-card.ethereum-holesky.quiknode.pro';
                  token = isValid$1(_token) ? _token : '481ebe70638c4dcf176af617a16d02ab866b9af9';
                  break;
              case Network.ARBITRUM_MAINNET:
                  host = isValid$1(_host)
                      ? _host
                      : 'autumn-divine-dinghy.arbitrum-mainnet.quiknode.pro';
                  token = isValid$1(_token) ? _token : 'a5d7bfbf60b5ae9ce3628e53d69ef50d529e9a8c';
                  break;
              case Network.ARBITRUM_SEPOLIA:
                  host = isValid$1(_host) ? _host : 'few-patient-pond.arbitrum-sepolia.quiknode.pro';
                  token = isValid$1(_token) ? _token : '3be985450970628c860b959c65cd2642dcafe53c';
                  break;
              case Network.BNB_MAINNET:
                  host = isValid$1(_host) ? _host : 'purple-empty-reel.bsc.quiknode.pro';
                  token = isValid$1(_token) ? _token : 'ebf6c532961e21f092ff2facce1ec4c89c540158';
                  break;
              case Network.BNB_TESTNET:
                  host = isValid$1(_host) ? _host : 'floral-rough-scion.bsc-testnet.quiknode.pro';
                  token = isValid$1(_token) ? _token : '5b297e5acff5f81f4c37ebf6f235f7299b6f9d28';
                  break;
              case Network.POLYGON_MAINNET:
                  host = isValid$1(_host) ? _host : 'small-chaotic-moon.matic.quiknode.pro';
                  token = isValid$1(_token) ? _token : '847569f8a017e84d985e10d0f44365d965a951f1';
                  break;
              case Network.POLYGON_AMOY:
                  host = isValid$1(_host) ? _host : 'prettiest-side-shape.matic-amoy.quiknode.pro';
                  token = isValid$1(_token) ? _token : '79a9476eea661d4f82de614db1d8a895b14b881c';
                  break;
              default:
                  throw new Error('Network info not avalible.');
          }
          return `${transport}://${host}/${token}`;
      }
  }

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  const isValid = (str) => str !== undefined && str.trim().length > 0;
  const websocketExclusions = [
      Network.DYMENSION_MAINNET,
      Network.DYMENSION_TESTNET,
      Network.KAVA_MAINNET,
      Network.CRONOS_MAINNET,
      // deprecated
      Network.POLYGON_MAINNET,
  ];
  class PublicNodeProvider extends Web3ExternalProvider {
      // eslint-disable-next-line default-param-last
      constructor(network = Network.ETH_MAINNET, transport = Transport.HTTPS, host = '', providerConfigOptions) {
          super(network, transport, '', host, providerConfigOptions);
      }
      // eslint-disable-next-line class-methods-use-this
      getRPCURL(network, transport, _, _host) {
          if (!PublicNodeProvider.networkHostMap[network]) {
              throw new Error('Network info not avalible.');
          }
          const defaultHost = `${PublicNodeProvider.networkHostMap[network]}.publicnode.com`;
          const host = isValid(_host) ? _host : defaultHost;
          if (websocketExclusions.includes(network) && transport === Transport.WebSocket) {
              return `${transport}://${host}/websocket`;
          }
          return `${transport}://${host}`;
      }
  }
  PublicNodeProvider.networkHostMap = {
      [Network.POLYGON_AMOY]: 'polygon-amoy-bor-rpc',
      [Network.DYMENSION_MAINNET]: 'dymension-evm-rpc',
      [Network.DYMENSION_TESTNET]: 'dymension-testnet-evm-rpc',
      [Network.BLAST_MAINNET]: 'blast-rpc',
      [Network.GNOSIS_MAINNET]: 'gnosis-rpc',
      [Network.PULSECHAIN_MAINNET]: 'pulsechain-rpc',
      [Network.PULSECHAIN_TESTNET]: 'pulsechain-testnet-rpc',
      [Network.KAVA_MAINNET]: 'kava-evm-rpc',
      [Network.CRONOS_MAINNET]: 'cronos-evm-rpc',
      [Network.MANTLE_MAINNET]: 'mantle-rpc',
      [Network.TAIKO_MAINNET]: 'taiko-rpc',
      [Network.TAIKO_HEKLA]: 'taiko-hekla-rpc',
      [Network.LINEA_MAINNET]: 'linea-rpc',
      [Network.LINEA_SEPOLIA]: 'linea-sepolia-rpc',
      [Network.SCROLL_MAINNET]: 'scroll-rpc',
      [Network.SCROLL_SEPOLIA]: 'scroll-sepolia-rpc',
      [Network.SYSCOIN_MAINNET]: 'syscoin-evm-rpc',
      [Network.SYSCOIN_TANENBAUM]: 'syscoin-tanenbaum-evm-rpc',
      [Network.HAQQ_MAINNET]: 'haqq-evm-rpc',
      [Network.EVMOS_MAINNET]: 'evmos-evm-rpc',
      [Network.EVMOS_TESTNET]: 'evmos-testnet-evm-rpc',
      [Network.BERACHAIN_TESTNET]: 'berachain-testnet-evm-rpc',
      [Network.ETH_MAINNET]: 'ethereum-rpc',
      [Network.ETH_SEPOLIA]: 'ethereum-sepolia-rpc',
      [Network.ETH_HOLESKY]: 'ethereum-holesky-rpc',
      [Network.BSC_MAINNET]: 'bsc-rpc',
      [Network.BSC_TESTNET]: 'bsc-testnet-rpc',
      [Network.POLYGON_MAINNET]: 'polygon-bor-rpc',
      [Network.BASE_MAINNET]: 'base-rpc',
      [Network.BASE_SEPOLIA]: 'base-sepolia-rpc',
      [Network.ARBITRUM_ONE]: 'arbitrum-one-rpc',
      [Network.ARBITRUM_NOVA]: 'arbitrum-nova-rpc',
      [Network.ARBITRUM_SEPOLIA]: 'arbitrum-sepolia-rpc',
      [Network.AVALANCHE_C_MAINNET]: 'avalanche-c-chain-rpc',
      [Network.AVALANCHE_P_MAINNET]: 'avalanche-p-chain-rpc',
      [Network.AVALANCHE_X_MAINNET]: 'avalanche-x-chain-rpc',
      [Network.AVALANCHE_FUJI_C]: 'avalanche-fuji-c-chain-rpc',
      [Network.AVALANCHE_FUJI_P]: 'avalanche-fuji-p-chain-rpc',
      [Network.AVALANCHE_FUJI_X]: 'avalanche-fuji-x-chain-rpc',
      [Network.OPTIMISM_MAINNET]: 'optimism-rpc',
      [Network.OPTIMISM_SEPOLIA]: 'optimism-sepolia-rpc',
      [Network.FANTOM_MAINNET]: 'fantom-rpc',
      [Network.FANTOM_TESTNET]: 'fantom-testnet-rpc',
      [Network.OPBNB_MAINNET]: 'opbnb-rpc',
      [Network.OPBNB_TESTNET]: 'opbnb-testnet-rpc',
      [Network.GNOSIS_CHIADO]: 'gnosis-chiado-rpc',
      [Network.CHILIZ_MAINNET]: 'chiliz-rpc',
      [Network.CHILIZ_SPICY]: 'chiliz-spicy-rpc',
      [Network.MOONBEAM_MAINNET]: 'moonbeam-rpc',
      [Network.BAHAMUT_MAINNET]: 'bahamut-rpc',
      [Network.TRON_MAINNET]: 'tron-evm-rpc',
      [Network.MOONRIVER_MAINNET]: 'moonriver-rpc',
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // default providers
  const mainnet = new QuickNodeProvider();

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * The object for `web3.abi`
   */
  var abi = {
      encodeEventSignature,
      encodeFunctionCall,
      encodeFunctionSignature,
      encodeParameter,
      encodeParameters,
      decodeParameter,
      decodeParameters,
      decodeLog,
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  /**
   * Initialize the accounts module for the given context.
   *
   * To avoid multiple package dependencies for `web3-eth-accounts` we are creating
   * this function in `web3` package. In future the actual `web3-eth-accounts` package
   * should be converted to context aware.
   */
  const initAccountsForContext = (context) => {
      const signTransactionWithContext = (transaction, privateKey) => __awaiter$1(void 0, void 0, void 0, function* () {
          const tx = yield prepareTransactionForSigning(transaction, context);
          const privateKeyBytes = format({ format: 'bytes' }, privateKey, ETH_DATA_FORMAT);
          return signTransaction$4(tx, privateKeyBytes);
      });
      const privateKeyToAccountWithContext = (privateKey) => {
          const account = privateKeyToAccount(privateKey);
          return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () { return signTransactionWithContext(transaction, account.privateKey); }) });
      };
      const decryptWithContext = (keystore, password, options) => __awaiter$1(void 0, void 0, void 0, function* () {
          var _a;
          const account = yield decrypt(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);
          return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () { return signTransactionWithContext(transaction, account.privateKey); }) });
      });
      const createWithContext = () => {
          const account = create();
          return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () { return signTransactionWithContext(transaction, account.privateKey); }) });
      };
      const wallet = new Wallet({
          create: createWithContext,
          privateKeyToAccount: privateKeyToAccountWithContext,
          decrypt: decryptWithContext,
      });
      return {
          signTransaction: signTransactionWithContext,
          create: createWithContext,
          privateKeyToAccount: privateKeyToAccountWithContext,
          decrypt: decryptWithContext,
          recoverTransaction,
          hashMessage,
          sign: sign$4,
          recover,
          encrypt,
          wallet,
          privateKeyToAddress,
          parseAndValidatePrivateKey,
          privateKeyToPublicKey,
      };
  };

  /* eslint-disable header/header */ const Web3PkgInfo = { version: '4.16.0' };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var Eip6963EventName;
  (function (Eip6963EventName) {
      Eip6963EventName["eip6963announceProvider"] = "eip6963:announceProvider";
      Eip6963EventName["eip6963requestProvider"] = "eip6963:requestProvider";
  })(Eip6963EventName || (Eip6963EventName = {}));
  const eip6963ProvidersMap = new Map();
  const web3ProvidersMapUpdated = 'web3:providersMapUpdated';
  const requestEIP6963Providers = () => __awaiter(void 0, void 0, void 0, function* () {
      return new Promise((resolve, reject) => {
          if (typeof window === 'undefined') {
              reject(new Error('window object not available, EIP-6963 is intended to be used within a browser'));
          }
          window.addEventListener(Eip6963EventName.eip6963announceProvider, ((event) => {
              eip6963ProvidersMap.set(event.detail.info.uuid, event.detail);
              const newEvent = new CustomEvent(web3ProvidersMapUpdated, { detail: eip6963ProvidersMap });
              window.dispatchEvent(newEvent);
              resolve(eip6963ProvidersMap);
          }));
          window.dispatchEvent(new Event(Eip6963EventName.eip6963requestProvider));
      });
  });
  const onNewProviderDiscovered = (callback) => {
      if (typeof window === 'undefined') {
          throw new Error('window object not available, EIP-6963 is intended to be used within a browser');
      }
      window.addEventListener(web3ProvidersMapUpdated, callback);
  };

  /*
  This file is part of web3.js.

  web3.js is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3.js is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  // eslint-disable-next-line max-classes-per-file
  class Web3 extends Web3Context$1 {
      constructor(providerOrContext = mainnet) {
          var _a;
          if (isNullish(providerOrContext) ||
              (typeof providerOrContext === 'string' && providerOrContext.trim() === '') ||
              (typeof providerOrContext !== 'string' &&
                  !isSupportedProvider$1(providerOrContext) &&
                  !providerOrContext.provider)) {
              console.warn('NOTE: web3.js is running without provider. You need to pass a provider in order to interact with the network!');
          }
          let contextInitOptions = {};
          if (typeof providerOrContext === 'string' ||
              isSupportedProvider$1(providerOrContext)) {
              contextInitOptions.provider = providerOrContext;
          }
          else if (providerOrContext) {
              contextInitOptions = providerOrContext;
          }
          else {
              contextInitOptions = {};
          }
          contextInitOptions.registeredSubscriptions = Object.assign(Object.assign({}, registeredSubscriptions), ((_a = contextInitOptions.registeredSubscriptions) !== null && _a !== void 0 ? _a : {}));
          super(contextInitOptions);
          const accounts = initAccountsForContext(this);
          // Init protected properties
          this._wallet = accounts.wallet;
          this._accountProvider = accounts;
          this.utils = utils;
          // Have to use local alias to initiate contract context
          // eslint-disable-next-line @typescript-eslint/no-this-alias
          const self = this;
          class ContractBuilder extends Contract {
              constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {
                  if (isContractInitOptions(addressOrOptionsOrContext) &&
                      isContractInitOptions(optionsOrContextOrReturnFormat)) {
                      throw new InvalidMethodParamsError('Should not provide options at both 2nd and 3rd parameters');
                  }
                  let address;
                  let options = {};
                  let context;
                  let dataFormat;
                  // add validation so its not a breaking change
                  if (!isNullish(addressOrOptionsOrContext) &&
                      typeof addressOrOptionsOrContext !== 'object' &&
                      typeof addressOrOptionsOrContext !== 'string') {
                      throw new InvalidMethodParamsError();
                  }
                  if (typeof addressOrOptionsOrContext === 'string') {
                      address = addressOrOptionsOrContext;
                  }
                  if (isContractInitOptions(addressOrOptionsOrContext)) {
                      options = addressOrOptionsOrContext;
                  }
                  else if (isContractInitOptions(optionsOrContextOrReturnFormat)) {
                      options = optionsOrContextOrReturnFormat;
                  }
                  else {
                      options = {};
                  }
                  if (addressOrOptionsOrContext instanceof Web3Context$1) {
                      context = addressOrOptionsOrContext;
                  }
                  else if (optionsOrContextOrReturnFormat instanceof Web3Context$1) {
                      context = optionsOrContextOrReturnFormat;
                  }
                  else if (contextOrReturnFormat instanceof Web3Context$1) {
                      context = contextOrReturnFormat;
                  }
                  else {
                      context = self.getContextObject();
                  }
                  if (returnFormat) {
                      dataFormat = returnFormat;
                  }
                  else if (isDataFormat(optionsOrContextOrReturnFormat)) {
                      dataFormat = optionsOrContextOrReturnFormat;
                  }
                  else if (isDataFormat(contextOrReturnFormat)) {
                      dataFormat = contextOrReturnFormat;
                  }
                  super(jsonInterface, address, options, context, dataFormat);
                  super.subscribeToContextEvents(self);
                  // eslint-disable-next-line no-use-before-define
                  if (!isNullish(eth)) {
                      // eslint-disable-next-line no-use-before-define
                      const TxMiddleware = eth.getTransactionMiddleware();
                      if (!isNullish(TxMiddleware)) {
                          super.setTransactionMiddleware(TxMiddleware);
                      }
                  }
              }
          }
          const eth = self.use(Web3Eth);
          // Eth Module
          this.eth = Object.assign(eth, {
              // ENS module
              ens: self.use(ENS, registryAddresses.main), // registry address defaults to main network
              // Iban helpers
              Iban,
              net: self.use(Net),
              personal: self.use(Personal),
              // Contract helper and module
              Contract: ContractBuilder,
              // ABI Helpers
              abi,
              // Accounts helper
              accounts,
          });
      }
  }
  Web3.version = Web3PkgInfo.version;
  Web3.utils = utils;
  Web3.requestEIP6963Providers = requestEIP6963Providers;
  Web3.onNewProviderDiscovered = onNewProviderDiscovered;
  Web3.modules = {
      Web3Eth,
      Iban,
      Net,
      ENS,
      Personal,
  };

  const generalPoolsField = `id
            address
            poolType
            isPaused
            swapFee
            tokensList
            totalLiquidity
            totalSwapVolume
            totalSwapFee
            totalShares
            security
            securityType
            currency
            collateral
            cficode
            margin
            securityOffered
            balancerManager
            minOrderSize
            owner
            factory
            cutoffTime
            offeringDocs
            amp
            createTime
            minimumOrderSize
            minimumPrice
            swapEnabled
            orderBook
            secondaryTrades{
                amount
                price
                executionDate
                orderType
                orderReference
                counterparty {
                    id
                }
                party {
                    id
                }
            }
            secondaryPreTrades {
                id
                pool {
                    id
                }
                party {
                    id
                }
                counterparty {
                    id
                }
                executionDate
            }
            tokens {
                assetManager
                symbol
                name
                decimals
                index
                address
                oldPriceRate
                priceRate
                balance
                paidProtocolFees
                cashBalance
                managedBalance
            }
            orders {
                id
                pool {
                  id
                  address
                  security
                  currency
                  tokens {
                    symbol
                    name
                    decimals
                    index
                    address
                  }
                  tokensList
                }
                tokenIn {
                    address
                }
                tokenOut {
                    address
                }
                amountOffered
                priceOffered
                orderReference
                creator
                timestamp
            } 
            primarySubscriptions{
                subscription
                price
                executionDate
                assetIn{
                  address
                }
                assetOut{
                  address
                }
                investor{
                id
                }
              executionDate
            }
            marginOrders {
                id
                pool {
                  id
                  address
                  security
                  currency
                  margin
                  tokensList
                  tokens {
                    symbol
                    name
                    decimals
                    index
                    address
                  }
                }
                creator
                tokenIn {
                    id
                    symbol
                    name
                    decimals
                    address
                }
                tokenOut {
                    id
                    symbol
                    name
                    decimals
                    address
                }
                amountOffered
                priceOffered
                stoplossPrice
                timestamp
                orderReference
}`;

  const generalSecurityField = `security
  isin
  id
  issuer {
    id
    name
  }
  currency
  country
  restricted
  restrictions
  issueManager
  productCategory
  liquidityOffered {
    offered
    offeredBy {
      id
    }
    tomatch {
      id
    }
    isin
    amount
    desired
    minimum
    orderSize
    offeringDocs
  }
  liquidityProviders {
    owner {
      id
    }
    tokenOffered
    security {
      id
    }
    currency
    underwritten
    earned
  }
  primarySubscribers {
    id
    pool
    currency
    security {
      id
    }
    cashSwapped
    investor {
      id
    }
    securitySwapped
    timestamp
    bought
  }
  secondaryInvestors {
    id
    currency
    security {
      id
    }
    amount
    investor {
      id
    }
    issuer {
      id
    }
    price
    timestamp
    tradeRef
    DPID
  }
  trades {
    poolid
    transferor {
      id
    }
    transferee {
      id
    }
    timestamp
    unitsToTransfer
    amountPaid
    price
    settlementStatus
    tradingCommission
    tradeRef
  }
  subscriptionsClosed {
    timestamp
  }
  primarySettlements {
    liquidityProvider {
      id
    }
    underwritingFee
    issuer {
      id
    }
    subscription
    currency
  }
  marginTraders{
    id
    security {
      id
      security
    }
    securityTraded
    currency
    cashTraded
    orderRef
    timestamp
  }
  primaryAllotments{
    investor {
      id
    }
    currency
    security {
      id
    }
    allotedAmount
    securitySubscribed
    timestamp
  }
  subscriptionsClosed {
    timestamp
  }
  primaryRefunds {
    investor {
      id
    }
    securitySubscribed
    refundAmount
    currency
    timestamp
  }
  resolutions{
    security{
      id
    }
    recordDate
    resolution
    voting
  }
  snapshots{
    security {
      id
    }
    oldTime
    newTime
}
`;

  const chainDetails = {
    //0 is the default chain when users are not connected to fetch and display data
    0: {
      chainId: 8453,
      name: "Base Mainnet",
      vaultSubgraphUrl: `https://gateway.thegraph.com/api/b8a85dbf6f1f1111a5d83b479ee31262/subgraphs/id/HESgHTG2RE8F74MymKrdXKJw2u4s8YBJgbCjHuzhpXeC`,
      walletSubgraphUrl: `https://gateway.thegraph.com/api/b8a85dbf6f1f1111a5d83b479ee31262/subgraphs/id/2aGD2WDR6ncrTvGU4wEaME2Ywke1ookuNucMNJmcnrz5`,
      rpcUrl: `https://base-mainnet.public.blastapi.io`,
    },

    1: {
      chainId: 1,
      name: "Ethereum",
      vaultSubgraphUrl:
        "https://api.studio.thegraph.com/query/77016/vault-mainnet/version/latest",
      walletSubgraphUrl: `https://api.studio.thegraph.com/query/77016/wallet-mainnet/version/latest`,
    },
    100: {
      chainId: 100,
      name: "Gnosis",
      vaultSubgraphUrl:
        "https://api.studio.thegraph.com/query/77016/vault-gnosis/version/latest",
      walletSubgraphUrl:
        "https://api.studio.thegraph.com/query/77016/wallet-gnosis/version/latest",
    },
    8453: {
      chainId: 8453,
      name: "Base Mainnet",
      vaultSubgraphUrl: `https://gateway.thegraph.com/api/b8a85dbf6f1f1111a5d83b479ee31262/subgraphs/id/HESgHTG2RE8F74MymKrdXKJw2u4s8YBJgbCjHuzhpXeC`,
      walletSubgraphUrl: `https://gateway.thegraph.com/api/b8a85dbf6f1f1111a5d83b479ee31262/subgraphs/id/2aGD2WDR6ncrTvGU4wEaME2Ywke1ookuNucMNJmcnrz5`,
    },
    11155111: {
      chainId: 11155111,
      name: "Sepolia Test Network",
      vaultSubgraphUrl: `https://gateway.thegraph.com/api/b8a85dbf6f1f1111a5d83b479ee31262/subgraphs/id/BZYwDU6CtLq1GBwCaGUZBU4KcQk9CAtPDkEY4LAKfoJN`,
      walletSubgraphUrl: `https://gateway.thegraph.com/api/b8a85dbf6f1f1111a5d83b479ee31262/subgraphs/id/6Qxzqb6J12vxKqgaGmCopuQH6bzGhAzYz45bRzPs2EiG`,
    },
  };

  const PoolType = {
    primaryPool: "PrimaryIssue",
    secondaryPool: "SecondaryIssue",
    marginPool: "MarginIssue",
  };

  const securityCategoriesAlias = {
    stock: "Fixed Income Products",
    bond: "Fixed Income Products",
    funds: "Fixed Income Products",
    cfd: "Derivatives",
    amc: "Active Managed Certificates",
  };

  const currenciesToFiat = {
    USDC: "USD",
    USDT: "USD",
    DAI: "USD",
    ETH: "ETH",
  };

  const tokenGcexAlias = {
    SHIB: "SHB",
    SAND: "SND",
    GLMR: "GLM",
    COMP: "CMP",
    LINK: "LNK",
  };

  const convertFromBlockTimestamp = (blockTimestamp) => {
    const unixTime = new Date(Number(blockTimestamp) * 1000);
    return unixTime.toLocaleDateString("default");
  };

  const formatNumberWithUnits = (numberToFormat, decimals) => {
    const units = ["", "K", "M", "B", "T", "P"];
    let unitIdx = 0;

    for (
      numberToFormat;
      Number(numberToFormat) >= 1000 && unitIdx < units.length - 1;
      unitIdx++
    ) {
      numberToFormat = Number(numberToFormat) / 1000;
    }

    {
      return Number(numberToFormat).toFixed(2) + units[unitIdx];
    }
  };

  const getIpfsUrlFromHashPinata = (ipfsHash) => {
    return `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;
  };

  const getIpfsUrlFromHash = (ipfsHash) => {
    return `https://ipfs.io/ipfs/${ipfsHash}`;
  };

  const readIpfsDocumentFromHash = async (ipfsHash) => {
    try {
      return await axios({
        method: "GET",
        url: getIpfsUrlFromHash(ipfsHash),
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      }).then((res) => {
        return res.data;
      });
    } catch (err) {
      console.error("Error while reading ipfs file: ", err?.message);
      try {
        return await axios({
          method: "GET",
          url: getIpfsUrlFromHashPinata(ipfsHash),
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
        }).then((res) => {
          return res.data;
        });
      } catch (err) {
        console.error("Error while reading ipfs file: ", err?.message);
        return {};
      }
    }
  };

  const hexToUint8Array = (hex) => {
    if (hex.startsWith("0x")) hex = hex.slice(2);
    const bytes = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i += 2) {
      bytes[i / 2] = parseInt(hex.substring(i, i + 2), 16);
    }
    return bytes;
  };

  const convertBytes32ToIpfsHash = (bytes32) => {
    const digestBytes = hexToUint8Array(bytes32);
    const multihash = create$1(0x12, digestBytes);
    const cid = CID.createV0(multihash);
    return cid.toString(base58btc);
  };

  const fetchTokenPriceFromVerified = async (
    cfiCode,
    securitySymbol,
    currencyFiatSymbol,
    priceType
  ) => {
    const url = `https://gateway.verified.network/api/${cfiCode.toLowerCase()}?security=${securitySymbol?.toUpperCase()}&cash=${currencyFiatSymbol?.toUpperCase()}&type=${
    priceType?.toUpperCase() || "BUY"
  }`;
    return await axios({
      method: "GET",
      url: url,
    })
      .then((res) => {
        if (res?.data?.body?.price) {
          return res?.data?.body?.price;
        } else {
          return "0";
        }
      })
      .catch(() => {
        return "0";
      });
  };

  /**
   *
   * @param {string} subgraphUrl
   * @param {string} query
   * @param {string} queryEntity
   * @param {any} defaultReturn
   * @returns {Promise<any>}
   */

  const sendSubgraphQuery = async (
    subgraphUrl,
    query,
    queryEntity,
    defaultReturn
  ) => {
    if (!subgraphUrl || !query || !queryEntity || !defaultReturn) {
      console.error(
        "Invalid subgraph query parameters, check subgraphUrl, query, queryEntity and defaultReturn"
      );
      return defaultReturn;
    }

    try {
      const res = await axios.post(subgraphUrl, { query });

      if (res?.data?.data && res.data.data[queryEntity]) {
        return res.data.data[queryEntity];
      }

      return defaultReturn;
    } catch (err) {
      if (err.response?.status === 429) {
        console.warn(
          `sendSubgraphQuery for entity: "${queryEntity}" on subgraph url: ${subgraphUrl} hit rate limit`
        );
      } else {
        console.error(
          `sendSubgraphQuery for entity: "${queryEntity}" on subgraph url: ${subgraphUrl} failed with error: ${
          err?.response?.data || err?.message || err
        }`
        );
      }
      return defaultReturn;
    }
  };

  /**
   *
   * @param {number} chainId
   * @returns {string} latest wallet subgraph url
   */
  const getWalletSubgraphUrl = (chainId) => {
    return chainDetails[chainId].walletSubgraphUrl;
  };

  /**
   *
   * @param {number} chainId
   * @returns {string} latest vault subgraph url
   */
  const getVaultSubgraphUrl = (chainId) => {
    return chainDetails[chainId]?.vaultSubgraphUrl;
  };

  /**
   *
   * @param {number} chainId
   * @param {string} securityAddress
   * @returns {promise<any[]>} fetch security by address
   */
  const fetchSecurityByAddress = async (chainId, securityAddress) => {
    const query = `query{
    securities: securities(
        where: {
        security: "${securityAddress.toLowerCase()}"
        }
    ) {
        ${generalSecurityField}
    }
}`;
    return await sendSubgraphQuery(
      getWalletSubgraphUrl(chainId),
      query,
      "securities",
      []
    );
  };

  /**
   *
   * @param {number} chainId
   * @returns {promise<any[]>} margin pools
   */
  const fetchMarginPools = async (chainId) => {
    const query = `query {
            pools: pools( 
              orderBy: createTime
              orderDirection: desc
              where: {
                poolType: "MarginIssue"
              }
            ) {
               ${generalPoolsField} 
            }
          }`;
    return await sendSubgraphQuery(
      getVaultSubgraphUrl(chainId),
      query,
      "pools",
      []
    );
  };

  /**
   *
   * @param {number} chainId
   * @param {string[]} acceptedPoolTypesArray string formatted array of poolType e.g ["PrimaryIssue", "SecondaryIssue"]
   * @returns {promise<any[]>} all pools
   */
  const fetchCustomPools = async (chainId, acceptedPoolTypesArray) => {
    const query = `query {
    pools: pools( 
      orderBy: createTime
      orderDirection: desc
      where: {
        poolType_in: ${acceptedPoolTypesArray}
      }
    ) {
       ${generalPoolsField} 
    }
  }`;
    return await sendSubgraphQuery(
      getVaultSubgraphUrl(chainId),
      query,
      "pools",
      []
    );
  };

  const reduceOrdersUnified = (orders, key = "creator") =>
    orders.reduce(
      (acc, curr) => {
        const id = curr[key]?.toLowerCase?.();
        if (id && !acc.investors.has(id)) acc.investors.add(id);
        acc.totalAmount += Number(curr.amountOffered ?? curr.subscription ?? 0);
        acc.latestDate = Math.max(
          acc.latestDate,
          Number(curr.executionDate || 0)
        );
        acc.latestPrice = Number(curr.price ?? 0);
        return acc;
      },
      { totalAmount: 0, investors: new Set(), latestDate: 0, latestPrice: 0 }
    );

  const getPriceFromTraders = (traders, currencyDecimals, securityDecimals) =>
    traders
      .sort((a, b) => Number(b.timestamp) - Number(a.timestamp))
      .map((t) => {
        const [month, day, year] = convertFromBlockTimestamp(t.timestamp)
          .split("/")
          .map(Number);
        const price =
          Number(formatUnits(t.cashTraded, currencyDecimals)) /
          Number(formatUnits(t.securityTraded, securityDecimals));
        return [Date.UTC(year, month - 1, day), Number(price.toFixed(6))];
      });

  const getOfferingDocData = async (ipfsHash) => {
    const validHash = ipfsHash?.find(
      (rest) =>
        !rest.endsWith("0000") && convertBytes32ToIpfsHash(rest)?.length > 0
    );
    const convertedHash = validHash ? convertBytes32ToIpfsHash(validHash) : null;
    return convertedHash ? await readIpfsDocumentFromHash(convertedHash) : null;
  };

  const maybeDelay = async (shouldDelay, delayTime) => {
    if (shouldDelay)
      await new Promise((res) => setTimeout(res, Number(delayTime)));
  };

  async function* getAMCAndFixedIncomeProducts(
    chainId,
    shouldDelay = false,
    delayTime = 1000
  ) {
    try {
      const allPoolsRaw = await fetchCustomPools(
        chainId,
        JSON.stringify([PoolType.primaryPool, PoolType.secondaryPool])
      );

      const securityDetailMap = new Map();

      for (const pool of allPoolsRaw) {
        try {
          let fetchedSecurityDetails = securityDetailMap.get(pool.security);

          if (!fetchedSecurityDetails) {
            const details = await fetchSecurityByAddress(chainId, pool.security);
            if (!details?.length || details[0].subscriptionsClosed?.length > 0) {
              // Skip if no details or subscriptions are closed
              continue;
            }
            securityDetailMap.set(pool.security, details);
            fetchedSecurityDetails = details;
          }

          const securityCategory = parseBytes32String(
            fetchedSecurityDetails[0].productCategory
          );
          if (!securityCategory) continue;

          const securityDetails = pool.tokens.find(
            (t) => t.address === pool.security
          );
          const currencyDetails = pool.tokens.find(
            (t) => t.address === pool.currency
          );

          if (!securityDetails || !currencyDetails) continue;

          let totalBought = 0;
          let totalSold = 0;
          let prices = [];
          let priceChartData = [];
          let currentPrice = "0.00";
          let offeringDocData = null;

          if (pool.poolType === PoolType.primaryPool) {
            const buyOrders = pool.primarySubscriptions.filter(
              (ord) => ord.assetIn.address === pool.currency
            );
            const sellOrders = pool.primarySubscriptions.filter(
              (ord) => ord.assetIn.address === pool.security
            );

            const buyStats = reduceOrdersUnified(buyOrders, "investor.id");
            const sellStats = reduceOrdersUnified(sellOrders, "investor.id");

            totalBought = buyStats.totalAmount;
            totalSold = sellStats.totalAmount;

            prices = (fetchedSecurityDetails[0]?.primarySubscribers || [])
              .sort((a, b) => Number(b.timestamp) - Number(a.timestamp))
              .map((sub) => {
                const [mm, dd, yyyy] = convertFromBlockTimestamp(sub.timestamp)
                  .split("/")
                  .map(Number);
                const cash = Number(
                  formatUnits(
                    sub.cashSwapped,
                    currencyDetails.decimals
                  )
                );
                const security = Number(
                  formatUnits(
                    sub.securitySwapped,
                    securityDetails.decimals
                  )
                );
                const price = cash / security;

                if (securityCategory.toLowerCase() === "amc") {
                  priceChartData.push({
                    time: sub.timestamp,
                    value: Number(price.toFixed(6)),
                  });
                }

                return [Date.UTC(yyyy, mm - 1, dd), Number(price.toFixed(6))];
              });

            currentPrice = prices.length ? prices[0][1] : "0.00";
            offeringDocData = await readIpfsDocumentFromHash(pool.offeringDocs);
          } else if (pool.poolType === PoolType.secondaryPool) {
            const buyOrders = pool.orders.filter(
              (ord) => ord.tokenIn.address === pool.currency
            );
            const sellOrders = pool.orders.filter(
              (ord) => ord.tokenIn.address === pool.security
            );

            const buyStats = reduceOrdersUnified(buyOrders, "creator");
            const sellStats = reduceOrdersUnified(sellOrders, "creator");

            totalBought = buyStats.totalAmount;
            totalSold = sellStats.totalAmount;

            prices = (fetchedSecurityDetails[0]?.secondaryInvestors || [])
              .sort((a, b) => Number(b.timestamp) - Number(a.timestamp))
              .map((inv) => {
                const [mm, dd, yyyy] = convertFromBlockTimestamp(inv.timestamp)
                  .split("/")
                  .map(Number);
                return [
                  Date.UTC(yyyy, mm - 1, dd),
                  Number(formatEther(inv.price)).toFixed(6),
                ];
              });

            currentPrice = prices.length ? prices[0][1] : "0.00";

            offeringDocData = await getOfferingDocData(
              fetchedSecurityDetails[0]?.restrictions
            );
          }

          const chartData =
            priceChartData.length > 0
              ? Array.from(
                  new Map(priceChartData.map((p) => [p.time, p])).values()
                ).reverse()
              : null;

          const formattedPool = {
            id: pool.id,
            type: pool.poolType,
            priceChartData: chartData,
            name: securityDetails.name,
            symbol: securityDetails.symbol,
            logo:
              offeringDocData?.Business?.Logo ||
              offeringDocData?.Business?.Icon ||
              "",
            apy: offeringDocData?.Business?.Apy
              ? `${offeringDocData.Business.Apy}%`
              : "0%",
            securityCategory,
            category: securityCategoriesAlias[securityCategory.toLowerCase()],
            pairName: currencyDetails.name,
            pairSymbol: currencyDetails.symbol,
            price: currentPrice,
            prices,
            tvl:
              totalBought + totalSold > 0
                ? formatNumberWithUnits(totalBought + totalSold)
                : "0",
          };

          yield formattedPool;
          await maybeDelay(shouldDelay, delayTime);
        } catch (poolError) {
          console.warn(
            `Failed to process pool ${pool.id}: ${poolError?.message}`
          );
        }
      }
    } catch (err) {
      console.error("getAMCAndFixedIncomeProducts failed:", err?.message);
    }
  }

  async function* getDerivatives(chainId, shouldDelay = false, delayTime = 1000) {
    try {
      const allPoolsRaw = await fetchMarginPools(chainId);
      const securityDetailMap = new Map();

      for (const pool of allPoolsRaw) {
        if (pool.poolType !== PoolType.marginPool) continue;

        try {
          let fetchedSecurityDetails = securityDetailMap.get(pool.security);
          if (!fetchedSecurityDetails) {
            const details = await fetchSecurityByAddress(chainId, pool.security);
            if (!details?.length || details[0].subscriptionsClosed?.length > 0)
              continue;
            securityDetailMap.set(pool.security, details);
            fetchedSecurityDetails = details;
          }

          const securityCategory = parseBytes32String(
            fetchedSecurityDetails[0].productCategory
          );
          if (!securityCategory) continue;

          const securityDetails = pool.tokens.find(
            (t) => t.address === pool.security
          );
          const currencyDetails = pool.tokens.find(
            (t) => t.address === pool.currency
          );
          if (!securityDetails || !currencyDetails) continue;

          const buyOrders = pool.marginOrders.filter(
            (ord) => ord.tokenIn.address === pool.currency
          );
          const sellOrders = pool.marginOrders.filter(
            (ord) => ord.tokenIn.address === pool.security
          );

          const buyStats = reduceOrdersUnified(buyOrders);
          const sellStats = reduceOrdersUnified(sellOrders);

          const prices = getPriceFromTraders(
            fetchedSecurityDetails[0]?.marginTraders || [],
            currencyDetails.decimals,
            securityDetails.decimals
          );

          const currencyFiat = currencyDetails?.symbol
            ?.toLowerCase()
            ?.startsWith("vc")
            ? currenciesToFiat[
                currencyDetails?.symbol
                  ?.toLowerCase()
                  .replace("vc", "")
                  .toUpperCase()
              ]
            : currenciesToFiat[
                currencyDetails?.symbol?.toLowerCase()?.toUpperCase()
              ];

          const web3 = new Web3(chainDetails[0]?.rpcUrl);

          const cficodeDecoded = parseBytes32String(
            pool.cficode || ""
          );
          const cficodeSymbol = cficodeDecoded.toLowerCase().startsWith("0x")
            ? web3.utils.toAscii(cficodeDecoded)
            : cficodeDecoded;

          const currentPrice = pool.cficode
            ? await fetchTokenPriceFromVerified(
                cficodeSymbol,
                tokenGcexAlias[securityDetails?.symbol?.toUpperCase()] ||
                  securityDetails?.symbol,
                currencyFiat,
                "BUY"
              )
            : prices.length
            ? prices[0][1]
            : "0.00";

          const offeringDocData = await getOfferingDocData(
            fetchedSecurityDetails[0]?.restrictions
          );

          const priceChartData = Array.from(
            new Map(
              prices.map(([time, value]) => [time, { time, value }])
            ).values()
          ).reverse();

          const formattedPool = {
            id: pool.id,
            type: pool.poolType,
            priceChartData: priceChartData.length ? priceChartData : null,
            name: securityDetails.name,
            symbol: securityDetails.symbol,
            logo:
              offeringDocData?.Business?.Logo ||
              offeringDocData?.Business?.Icon ||
              "",
            apy: offeringDocData?.Business?.Apy
              ? `${offeringDocData.Business.Apy}%`
              : "0%",
            securityCategory,
            category: securityCategoriesAlias[securityCategory.toLowerCase()],
            pairName: currencyDetails.name,
            pairSymbol: currencyDetails.symbol,
            price: currentPrice,
            prices,
            tvl:
              buyStats.totalAmount + sellStats.totalAmount > 0
                ? formatNumberWithUnits(
                    buyStats.totalAmount + sellStats.totalAmount
                  )
                : "0",
          };

          yield formattedPool;
          await maybeDelay(shouldDelay, delayTime);
        } catch (err) {
          console.warn(`Error processing pool ${pool.id}:`, err?.message);
        }
      }
    } catch (err) {
      console.error("getDerivatives failed:", err?.message);
    }
  }

  if (typeof window !== "undefined") {
    window.getAMCAndFixedIncomeProducts = getAMCAndFixedIncomeProducts;

    window.getDerivatives = getDerivatives;
  }

  exports.getAMCAndFixedIncomeProducts = getAMCAndFixedIncomeProducts;
  exports.getDerivatives = getDerivatives;

}));
